{
  "version": 3,
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/desktop/cloud/folder-tabs.tsx"],"sourcesContent":["'use client';\nimport { useState, useEffect, useRef, use, Suspense, ReactElement } from 'react';\nimport { SetStateAction, Dispatch, JSXElementConstructor } from 'react';\nimport Tabs from '@mui/material/Tabs';\nimport Tab from '@mui/material/Tab';\nimport Box from '@mui/material/Box';\nimport FileCard from './file-card';\nimport Typography from '@mui/material/Typography';\nimport { getFiles, getFileParentIDs, getThumbLink, imageSize } from './cloud-actions';\nimport FileView from './file-view';\nimport { ThemeContext } from '@emotion/react';\nimport { DataObjectSharp } from '@mui/icons-material';\nimport { NextRequest } from 'next/server';\nimport { metadata } from '@/app/layout';\n\ninterface Size {\n  width: number | undefined,\n  height: number | undefined\n}\n\ninterface FileMeta {\n  name: string,\n  id: string,\n  mimeType: string,\n  parents: string[],\n  hasThumbnail: boolean,\n  thumbnailLink: string\n}\n\nconst FolderTabs = ({folderNames, folderFileMap}) => {\n  const [tabIndex, setTabIndex] = useState(0);\n  // const [folderFileMap, setFolderFileMap] = useState(null)\n  // folderFileMap = JSON.parse(folderFileMap);\n\n  const [tabs, setTabs]:[ReactElement[] | null, unknown] = useState(null);\n  const [fileCards, setFileCards]:[ReactElement[] | null, unknown] = useState(null);\n\n  // console.log(`folderFileMap:`, folderFileMap);\n  folderFileMap.then(map => console.log(`folderFileMap:`, map));\n\n\n  useEffect(() => {\n\n    folderNames.then(names => {\n      console.log(`folderNames (length: ${Object.keys(names).length}):`, names)\n      const tbs:ReactElement[] = [];\n      for (const id in names) {\n        tbs.push(\n          <Tab key={id} value={tbs.length} label={names[id]} />\n        )\n      }\n  \n      setTabs(tbs);\n    \n    });\n\n    folderFileMap.then(map => {\n      const fileGroups:ReactElement[] = [];\n      for (const folderId in folderFileMap) {\n        const fileCards: ReactElement[] = [];\n        for(const meta of map[folderId].files) {\n          fileCards.push(\n            <FileCard key={meta.id} fileId={meta.id} file={meta} fileName={meta.name} thumbLink={meta.thumbnailLink}  />\n          )\n        }\n        fileGroups.push(\n          <Box key={folderId} index={fileGroups.length} hidden={fileGroups.length !== tabIndex} >\n            {fileCards}\n          </Box>\n        )\n      }\n      setFileCards(fileGroups);\n    })\n  },[]);\n  \n  // folderFileMap.then(map => console.log(`folderFileMap:`, map));\n\n  const tabChanged = (e, v) => {\n    console.log(`new tab index: ${v}`);\n    setTabIndex(v);\n  }\n  // const tabs: ReactElement[] = [];\n  // if (!!folderFileMap) {\n  //   console.log(`folderFileMap:`, folderFileMap);\n  //   const mapKeys = Object.keys(folderFileMap);\n  //   for (let i = 0; i < mapKeys.length; i++) {\n  //     tabs.push(\n  //       // <Suspense key={mapKeys[i]} >\n  //       <>\n  //         {folderFileMap && <Tab key={mapKeys[i]} value={i} label={<h1>{folderFileMap[i].folderName}</h1>} sx={{ marginInline: 'auto' }} />}\n  //       {/* </Suspense> */}\n  //       </>\n  //     )\n  //   }\n  // }\n  // const fileCards = \n\n  return (\n    <Box component='main' sx={{ display: 'flex', width: '100vw', height: '100vh' }} >\n      <Box component='section' sx={{ width: '10%', bgcolor: 'background.paper', margin: 0, position: 'fixed', top: '65px', left: '5%', height: '100vh' }} >\n        <Tabs orientation='vertical' value={tabIndex} variant='scrollable' onChange={tabChanged} sx={{ marginInline: 'auto' }} >\n          {tabs}\n        </Tabs>\n      </Box>\n      <Box component='section' sx={{ width: '70vw', height: '100%', position: 'absolute', top: 0, left: '25%', overflow: 'scroll' }}>\n        {/* {fileCards} */}\n      </Box>\n    </Box>\n\n  )\n}\n\nexport default FolderTabs;"],"names":[],"mappings":";;;;;;;;;;;;AAAA;;;;;;AA6BA,MAAM,aAAa,CAAC,EAAC,WAAW,EAAE,aAAa,EAAC;;IAC9C,MAAM,CAAC,UAAU,YAAY,GAAG,0KAAS;IACzC,2DAA2D;IAC3D,6CAA6C;IAE7C,MAAM,CAAC,MAAM,QAAQ,GAAoC,0KAAS;IAClE,MAAM,CAAC,WAAW,aAAa,GAAoC,0KAAS;IAE5E,gDAAgD;IAChD,cAAc,IAAI,CAAC,CAAA,MAAO,QAAQ,GAAG,CAAC,CAAC,cAAc,CAAC,EAAE;IAGxD,2KAAU;QAER,YAAY,IAAI,CAAC,CAAA;YACf,QAAQ,GAAG,CAAC,CAAC,qBAAqB,EAAE,OAAO,IAAI,CAAC,OAAO,MAAM,CAAC,EAAE,CAAC,EAAE;YACnE,MAAM,MAAqB,EAAE;YAC7B,IAAK,MAAM,MAAM,MAAO;gBACtB,IAAI,IAAI,eACN;oBAAc,OAAO,IAAI,MAAM;oBAAE,OAAO,KAAK,CAAC,GAAG;mBAAvC;;;;;YAEd;YAEA,QAAQ;QAEV;QAEA,cAAc,IAAI,CAAC,CAAA;YACjB,MAAM,aAA4B,EAAE;YACpC,IAAK,MAAM,YAAY,cAAe;gBACpC,MAAM,YAA4B,EAAE;gBACpC,KAAI,MAAM,QAAQ,GAAG,CAAC,SAAS,CAAC,KAAK,CAAE;oBACrC,UAAU,IAAI,eACZ;wBAAwB,QAAQ,KAAK,EAAE;wBAAE,MAAM;wBAAM,UAAU,KAAK,IAAI;wBAAE,WAAW,KAAK,aAAa;uBAAxF,KAAK,EAAE;;;;;gBAE1B;gBACA,WAAW,IAAI,eACb;oBAAoB,OAAO,WAAW,MAAM;oBAAE,QAAQ,WAAW,MAAM,KAAK;8BACzE;mBADO;;;;;YAId;YACA,aAAa;QACf;IACF,GAAE,EAAE;IAEJ,iEAAiE;IAEjE,MAAM,aAAa,CAAC,GAAG;QACrB,QAAQ,GAAG,CAAC,CAAC,eAAe,EAAE,EAAE,CAAC;QACjC,YAAY;IACd;IACA,mCAAmC;IACnC,yBAAyB;IACzB,kDAAkD;IAClD,gDAAgD;IAChD,+CAA+C;IAC/C,iBAAiB;IACjB,wCAAwC;IACxC,WAAW;IACX,6IAA6I;IAC7I,4BAA4B;IAC5B,YAAY;IACZ,QAAQ;IACR,MAAM;IACN,IAAI;IACJ,qBAAqB;IAErB,qBACE;QAAK,WAAU;QAAO,IAAI;YAAE,SAAS;YAAQ,OAAO;YAAS,QAAQ;QAAQ;;0BAC3E;gBAAK,WAAU;gBAAU,IAAI;oBAAE,OAAO;oBAAO,SAAS;oBAAoB,QAAQ;oBAAG,UAAU;oBAAS,KAAK;oBAAQ,MAAM;oBAAM,QAAQ;gBAAQ;0BAC/I,cAAA;oBAAM,aAAY;oBAAW,OAAO;oBAAU,SAAQ;oBAAa,UAAU;oBAAY,IAAI;wBAAE,cAAc;oBAAO;8BACjH;;;;;;;;;;;0BAGL;gBAAK,WAAU;gBAAU,IAAI;oBAAE,OAAO;oBAAQ,QAAQ;oBAAQ,UAAU;oBAAY,KAAK;oBAAG,MAAM;oBAAO,UAAU;gBAAS;;;;;;;;;;;;AAMlI;GAjFM;KAAA;uCAmFS"}},
    {"offset": {"line": 162, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}