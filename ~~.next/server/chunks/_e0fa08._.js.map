{
  "version": 3,
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/.next-internal/server/app/page/actions.js"],"sourcesContent":["__turbopack_export_value__({\n});"],"names":[],"mappings":"AAAA,2BAA2B,CAC3B"}},
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 10, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/themes.tsx/proxy.ts"],"sourcesContent":["import { createProxy } from 'next/dist/build/webpack/loaders/next-flight-loader/module-proxy'\n\nconst proxy = createProxy(\"[project]/app/themes.tsx\")\n\n// Accessing the __esModule property and exporting $$typeof are required here.\n// The __esModule getter forces the proxy target to create the default export\n// and the $$typeof value is for rendering logic to determine if the module\n// is a client boundary.\nconst { __esModule, $$typeof } = proxy;\n\nexport { __esModule, $$typeof };\nexport default proxy;\n"],"names":[],"mappings":";;;;;;;;AAEA,MAAM,QAAQ,0NAAY;AAE1B,8EAA8E;AAC9E,6EAA6E;AAC7E,2EAA2E;AAC3E,wBAAwB;AACxB,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,GAAG;;uCAGlB"}},
    {"offset": {"line": 26, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 31, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 36, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 41, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/layout.tsx"],"sourcesContent":["import type { Metadata } from 'next'\nimport './globals.css'\nimport '@fontsource/roboto/300.css';\nimport '@fontsource/roboto/400.css';\nimport '@fontsource/roboto/500.css';\nimport '@fontsource/roboto/700.css';\nimport { SessionProvider } from 'next-auth/react';\nimport ThemeProvider from './themes';\n\n\nexport default function LayoutRoot({ children }) {\n  return (\n    <ThemeProvider >\n      <html>\n        <body>\n          <SessionProvider>\n            {children}\n          </SessionProvider>\n        </body>\n      </html>\n     </ThemeProvider>\n  )\n}\n\nexport const metadata: Metadata = {\n  title: 'OfficeMate',\n  description: 'Generated by create next app',\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAUe,SAAS,WAAW,EAAE,QAAQ,EAAE;IAC7C,qBACE;kBACE,cAAA,mPAAC;sBACC,cAAA,mPAAC;0BACC,cAAA;8BACG;;;;;;;;;;;;;;;;;;;;;AAMb;AAEO,MAAM,WAAqB;IAChC,OAAO;IACP,aAAa;AACf"}},
    {"offset": {"line": 88, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 100, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/auth.ts"],"sourcesContent":["import NextAuth from \"next-auth\";\nimport Google from \"next-auth/providers/google\"\nimport { cookies } from \"next/headers\";\n\nexport const {\n  handlers,\n  auth,\n  signIn,\n  signOut\n} = NextAuth({\n  debug: true,\n  callbacks: {\n    async jwt({ token, user, account, profile, session }) {\n      // const userToken = await SignToken(user?.email as string);\n      // const secret = jose.base64url.decode(process.env.NEXTAUTH_SECRET as string);\n      // const userToken = await new EncryptJWT(user?.email).setProtectedHeader({alg:'dir', enc:'A128CBC-HS256', typ:'at+JWT'}).encrypt(secret);\n      //   token.userToken = userToken;\n      return token;\n    },\n    async signIn({ account, user }) {\n\n      cookies().set('id_token', account?.id_token as string);\n      cookies().set('access_token', account?.access_token as string);\n      cookies().set('refresh_token', account?.access_token as string);\n\n    // console.log(`signIn account:`, account);\n    // access_token = account?.access_token as String;\n    // console.log(`signIn user:`, user)\n\n\n    return true // Do different verification for other providers that don't have `email_verified`\n    },\n    async session({ session, user, token }) {\n      // console.log(`session session:`, session);\n      // console.log(`token:`, token);\n      // console.log(`session user:`, user);\n      // session.loggedUser = token.userToken;\n      return session;\n    },\n    // async signIn({ user, account, profile, email, credentials }) {\n    //   console.log(`signIn user:`, user);\n    //   console.log(`signIn account:`, account);\n    //   console.log(`signIn profile:`, profile);\n    //   console.log(`signIn credentials:`, credentials);\n\n    //   return '/';\n    // },\n  },\n  // secret: process.env.NEXTAUTH_SECRET as string,\n  session: {\n    strategy: 'jwt'\n  },\n  providers: [\n    Google({\n      clientId: process.env.GOOGLE_CLIENT_ID,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n      authorization: {\n        idToken: true,\n        params: {\n          type: 'oauth',\n          scope: \"openid profile email https://www.googleapis.com/auth/drive\",\n          access_type: \"offline\",\n          prompt: \"select_account\",\n          response_type: \"code\",\n          redirect_uri: 'http://localhost:3000/api/auth/callback/google'\n        }\n      },\n    })\n  ]\n});\n"],"names":[],"mappings":";;;;;;;;;;;;;;;AAIO,MAAM,EACX,QAAQ,EACR,IAAI,EACJ,MAAM,EACN,OAAO,EACR,GAAG,wLAAS;IACX,OAAO;IACP,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE;YAClD,4DAA4D;YAC5D,+EAA+E;YAC/E,0IAA0I;YAC1I,iCAAiC;YACjC,OAAO;QACT;QACA,MAAM,QAAO,EAAE,OAAO,EAAE,IAAI,EAAE;YAE5B,6IAAU,GAAG,CAAC,YAAY,SAAS;YACnC,6IAAU,GAAG,CAAC,gBAAgB,SAAS;YACvC,6IAAU,GAAG,CAAC,iBAAiB,SAAS;YAE1C,2CAA2C;YAC3C,kDAAkD;YAClD,oCAAoC;YAGpC,OAAO,KAAK,iFAAiF;;QAC7F;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE;YACpC,4CAA4C;YAC5C,gCAAgC;YAChC,sCAAsC;YACtC,wCAAwC;YACxC,OAAO;QACT;IASF;IACA,iDAAiD;IACjD,SAAS;QACP,UAAU;IACZ;IACA,WAAW;QACT,iMAAO;YACL,UAAU,QAAQ,GAAG,CAAC,gBAAgB;YACtC,cAAc,QAAQ,GAAG,CAAC,oBAAoB;YAC9C,eAAe;gBACb,SAAS;gBACT,QAAQ;oBACN,MAAM;oBACN,OAAO;oBACP,aAAa;oBACb,QAAQ;oBACR,eAAe;oBACf,cAAc;gBAChB;YACF;QACF;KACD;AACH"}},
    {"offset": {"line": 165, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 170, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/page.tsx"],"sourcesContent":["import Image from 'next/image';\nimport { auth, signIn, signOut } from '@/auth';\nimport { redirect } from 'next/navigation';\nimport Button from '@mui/material/Button'\n\nexport default async function Page() {\n\n  const session = await auth();\n  console.log(`session:`, session);\n\n  if(!!session) { redirect('/desktop'); }\n  else { redirect('/api/auth/signin/google')}\n\n}\n"],"names":[],"mappings":";;;;;;;;AAKe,eAAe;IAE5B,MAAM,UAAU,MAAM;IACtB,QAAQ,GAAG,CAAC,CAAC,QAAQ,CAAC,EAAE;IAExB,IAAG,CAAC,CAAC,SAAS;QAAE,+IAAS;IAAa,OACjC;QAAE,+IAAS;IAA0B;AAE5C"}},
    {"offset": {"line": 187, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}