{
  "version": 3,
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/.next-internal/server/app/api/auth/[...nextauth]/route/actions.js"],"sourcesContent":["__turbopack_export_value__({\n});"],"names":[],"mappings":"AAAA,2BAA2B,CAC3B"}},
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 10, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/auth.ts"],"sourcesContent":["import NextAuth from \"next-auth\";\nimport Google from \"next-auth/providers/google\"\nimport { cookies } from \"next/headers\";\n\nexport const {\n  handlers,\n  auth,\n  signIn,\n  signOut\n} = NextAuth({\n  debug: true,\n  callbacks: {\n    async jwt({ token, user, account, profile, session }) {\n      // const userToken = await SignToken(user?.email as string);\n      // const secret = jose.base64url.decode(process.env.NEXTAUTH_SECRET as string);\n      // const userToken = await new EncryptJWT(user?.email).setProtectedHeader({alg:'dir', enc:'A128CBC-HS256', typ:'at+JWT'}).encrypt(secret);\n      //   token.userToken = userToken;\n      return token;\n    },\n    async signIn({ account, user }) {\n\n      cookies().set('id_token', account?.id_token as string);\n      cookies().set('access_token', account?.access_token as string);\n      cookies().set('refresh_token', account?.access_token as string);\n\n    // console.log(`signIn account:`, account);\n    // access_token = account?.access_token as String;\n    // console.log(`signIn user:`, user)\n\n\n    return true // Do different verification for other providers that don't have `email_verified`\n    },\n    async session({ session, user, token }) {\n      // console.log(`session session:`, session);\n      // console.log(`token:`, token);\n      // console.log(`session user:`, user);\n      // session.loggedUser = token.userToken;\n      return session;\n    },\n    // async signIn({ user, account, profile, email, credentials }) {\n    //   console.log(`signIn user:`, user);\n    //   console.log(`signIn account:`, account);\n    //   console.log(`signIn profile:`, profile);\n    //   console.log(`signIn credentials:`, credentials);\n\n    //   return '/';\n    // },\n  },\n  // secret: process.env.NEXTAUTH_SECRET as string,\n  session: {\n    strategy: 'jwt'\n  },\n  providers: [\n    Google({\n      clientId: process.env.GOOGLE_CLIENT_ID,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n      authorization: {\n        idToken: true,\n        params: {\n          type: 'oauth',\n          scope: \"openid profile email https://www.googleapis.com/auth/drive\",\n          access_type: \"offline\",\n          prompt: \"select_account\",\n          response_type: \"code\",\n          redirect_uri: 'http://localhost:3000/api/auth/callback/google'\n        }\n      },\n    })\n  ]\n});\n"],"names":[],"mappings":";;;;;;;;;;;;;;;AAIO,MAAM,EACX,QAAQ,EACR,IAAI,EACJ,MAAM,EACN,OAAO,EACR,GAAG,wLAAS;IACX,OAAO;IACP,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE;YAClD,4DAA4D;YAC5D,+EAA+E;YAC/E,0IAA0I;YAC1I,iCAAiC;YACjC,OAAO;QACT;QACA,MAAM,QAAO,EAAE,OAAO,EAAE,IAAI,EAAE;YAE5B,6IAAU,GAAG,CAAC,YAAY,SAAS;YACnC,6IAAU,GAAG,CAAC,gBAAgB,SAAS;YACvC,6IAAU,GAAG,CAAC,iBAAiB,SAAS;YAE1C,2CAA2C;YAC3C,kDAAkD;YAClD,oCAAoC;YAGpC,OAAO,KAAK,iFAAiF;;QAC7F;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE;YACpC,4CAA4C;YAC5C,gCAAgC;YAChC,sCAAsC;YACtC,wCAAwC;YACxC,OAAO;QACT;IASF;IACA,iDAAiD;IACjD,SAAS;QACP,UAAU;IACZ;IACA,WAAW;QACT,iMAAO;YACL,UAAU,QAAQ,GAAG,CAAC,gBAAgB;YACtC,cAAc,QAAQ,GAAG,CAAC,oBAAoB;YAC9C,eAAe;gBACb,SAAS;gBACT,QAAQ;oBACN,MAAM;oBACN,OAAO;oBACP,aAAa;oBACb,QAAQ;oBACR,eAAe;oBACf,cAAc;gBAChB;YACF;QACF;KACD;AACH"}},
    {"offset": {"line": 75, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 80, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/api/auth/[...nextauth]/route.ts"],"sourcesContent":["import { handlers, auth } from \"@/auth\";\nimport { NextRequest } from \"next/server\";\nimport { getToken } from \"@auth/core/jwt\";\n\n\nconst { GET: AuthGET, POST: AuthPOST } = handlers;\n\nexport async function POST(request: NextRequest) {\n\n  // console.log(`POST request:`, request);\n  const res = await AuthPOST(request);\n\n  return res;\n}\n\nexport async function GET(request: NextRequest) {\n\n  let response = await AuthGET(request);\n\n  // console.log(`route response:`, response);\n\n  return response;\n}\n"],"names":[],"mappings":";;;;;;;AAKA,MAAM,EAAE,KAAK,OAAO,EAAE,MAAM,QAAQ,EAAE;AAE/B,eAAe,KAAK,OAAoB;IAE7C,yCAAyC;IACzC,MAAM,MAAM,MAAM,SAAS;IAE3B,OAAO;AACT;AAEO,eAAe,IAAI,OAAoB;IAE5C,IAAI,WAAW,MAAM,QAAQ;IAE7B,4CAA4C;IAE5C,OAAO;AACT"}},
    {"offset": {"line": 98, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}