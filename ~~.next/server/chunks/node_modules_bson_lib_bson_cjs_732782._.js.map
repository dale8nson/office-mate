{
  "version": 3,
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/bson/lib/bson.cjs"],"sourcesContent":["'use strict';\n\nfunction isAnyArrayBuffer(value) {\n    return ['[object ArrayBuffer]', '[object SharedArrayBuffer]'].includes(Object.prototype.toString.call(value));\n}\nfunction isUint8Array(value) {\n    return Object.prototype.toString.call(value) === '[object Uint8Array]';\n}\nfunction isRegExp(d) {\n    return Object.prototype.toString.call(d) === '[object RegExp]';\n}\nfunction isMap(d) {\n    return Object.prototype.toString.call(d) === '[object Map]';\n}\nfunction isDate(d) {\n    return Object.prototype.toString.call(d) === '[object Date]';\n}\nfunction defaultInspect(x, _options) {\n    return JSON.stringify(x, (k, v) => {\n        if (typeof v === 'bigint') {\n            return { $numberLong: `${v}` };\n        }\n        else if (isMap(v)) {\n            return Object.fromEntries(v);\n        }\n        return v;\n    });\n}\nfunction getStylizeFunction(options) {\n    const stylizeExists = options != null &&\n        typeof options === 'object' &&\n        'stylize' in options &&\n        typeof options.stylize === 'function';\n    if (stylizeExists) {\n        return options.stylize;\n    }\n}\n\nconst BSON_MAJOR_VERSION = 6;\nconst BSON_INT32_MAX = 0x7fffffff;\nconst BSON_INT32_MIN = -0x80000000;\nconst BSON_INT64_MAX = Math.pow(2, 63) - 1;\nconst BSON_INT64_MIN = -Math.pow(2, 63);\nconst JS_INT_MAX = Math.pow(2, 53);\nconst JS_INT_MIN = -Math.pow(2, 53);\nconst BSON_DATA_NUMBER = 1;\nconst BSON_DATA_STRING = 2;\nconst BSON_DATA_OBJECT = 3;\nconst BSON_DATA_ARRAY = 4;\nconst BSON_DATA_BINARY = 5;\nconst BSON_DATA_UNDEFINED = 6;\nconst BSON_DATA_OID = 7;\nconst BSON_DATA_BOOLEAN = 8;\nconst BSON_DATA_DATE = 9;\nconst BSON_DATA_NULL = 10;\nconst BSON_DATA_REGEXP = 11;\nconst BSON_DATA_DBPOINTER = 12;\nconst BSON_DATA_CODE = 13;\nconst BSON_DATA_SYMBOL = 14;\nconst BSON_DATA_CODE_W_SCOPE = 15;\nconst BSON_DATA_INT = 16;\nconst BSON_DATA_TIMESTAMP = 17;\nconst BSON_DATA_LONG = 18;\nconst BSON_DATA_DECIMAL128 = 19;\nconst BSON_DATA_MIN_KEY = 0xff;\nconst BSON_DATA_MAX_KEY = 0x7f;\nconst BSON_BINARY_SUBTYPE_DEFAULT = 0;\nconst BSON_BINARY_SUBTYPE_UUID_NEW = 4;\nconst BSONType = Object.freeze({\n    double: 1,\n    string: 2,\n    object: 3,\n    array: 4,\n    binData: 5,\n    undefined: 6,\n    objectId: 7,\n    bool: 8,\n    date: 9,\n    null: 10,\n    regex: 11,\n    dbPointer: 12,\n    javascript: 13,\n    symbol: 14,\n    javascriptWithScope: 15,\n    int: 16,\n    timestamp: 17,\n    long: 18,\n    decimal: 19,\n    minKey: -1,\n    maxKey: 127\n});\n\nclass BSONError extends Error {\n    get bsonError() {\n        return true;\n    }\n    get name() {\n        return 'BSONError';\n    }\n    constructor(message) {\n        super(message);\n    }\n    static isBSONError(value) {\n        return (value != null &&\n            typeof value === 'object' &&\n            'bsonError' in value &&\n            value.bsonError === true &&\n            'name' in value &&\n            'message' in value &&\n            'stack' in value);\n    }\n}\nclass BSONVersionError extends BSONError {\n    get name() {\n        return 'BSONVersionError';\n    }\n    constructor() {\n        super(`Unsupported BSON version, bson types must be from bson ${BSON_MAJOR_VERSION}.x.x`);\n    }\n}\nclass BSONRuntimeError extends BSONError {\n    get name() {\n        return 'BSONRuntimeError';\n    }\n    constructor(message) {\n        super(message);\n    }\n}\n\nfunction nodejsMathRandomBytes(byteLength) {\n    return nodeJsByteUtils.fromNumberArray(Array.from({ length: byteLength }, () => Math.floor(Math.random() * 256)));\n}\nconst nodejsRandomBytes = (() => {\n    try {\n        return require('crypto').randomBytes;\n    }\n    catch {\n        return nodejsMathRandomBytes;\n    }\n})();\nconst nodeJsByteUtils = {\n    toLocalBufferType(potentialBuffer) {\n        if (Buffer.isBuffer(potentialBuffer)) {\n            return potentialBuffer;\n        }\n        if (ArrayBuffer.isView(potentialBuffer)) {\n            return Buffer.from(potentialBuffer.buffer, potentialBuffer.byteOffset, potentialBuffer.byteLength);\n        }\n        const stringTag = potentialBuffer?.[Symbol.toStringTag] ?? Object.prototype.toString.call(potentialBuffer);\n        if (stringTag === 'ArrayBuffer' ||\n            stringTag === 'SharedArrayBuffer' ||\n            stringTag === '[object ArrayBuffer]' ||\n            stringTag === '[object SharedArrayBuffer]') {\n            return Buffer.from(potentialBuffer);\n        }\n        throw new BSONError(`Cannot create Buffer from ${String(potentialBuffer)}`);\n    },\n    allocate(size) {\n        return Buffer.alloc(size);\n    },\n    equals(a, b) {\n        return nodeJsByteUtils.toLocalBufferType(a).equals(b);\n    },\n    fromNumberArray(array) {\n        return Buffer.from(array);\n    },\n    fromBase64(base64) {\n        return Buffer.from(base64, 'base64');\n    },\n    toBase64(buffer) {\n        return nodeJsByteUtils.toLocalBufferType(buffer).toString('base64');\n    },\n    fromISO88591(codePoints) {\n        return Buffer.from(codePoints, 'binary');\n    },\n    toISO88591(buffer) {\n        return nodeJsByteUtils.toLocalBufferType(buffer).toString('binary');\n    },\n    fromHex(hex) {\n        return Buffer.from(hex, 'hex');\n    },\n    toHex(buffer) {\n        return nodeJsByteUtils.toLocalBufferType(buffer).toString('hex');\n    },\n    fromUTF8(text) {\n        return Buffer.from(text, 'utf8');\n    },\n    toUTF8(buffer, start, end) {\n        return nodeJsByteUtils.toLocalBufferType(buffer).toString('utf8', start, end);\n    },\n    utf8ByteLength(input) {\n        return Buffer.byteLength(input, 'utf8');\n    },\n    encodeUTF8Into(buffer, source, byteOffset) {\n        return nodeJsByteUtils.toLocalBufferType(buffer).write(source, byteOffset, undefined, 'utf8');\n    },\n    randomBytes: nodejsRandomBytes\n};\n\nfunction isReactNative() {\n    const { navigator } = globalThis;\n    return typeof navigator === 'object' && navigator.product === 'ReactNative';\n}\nfunction webMathRandomBytes(byteLength) {\n    if (byteLength < 0) {\n        throw new RangeError(`The argument 'byteLength' is invalid. Received ${byteLength}`);\n    }\n    return webByteUtils.fromNumberArray(Array.from({ length: byteLength }, () => Math.floor(Math.random() * 256)));\n}\nconst webRandomBytes = (() => {\n    const { crypto } = globalThis;\n    if (crypto != null && typeof crypto.getRandomValues === 'function') {\n        return (byteLength) => {\n            return crypto.getRandomValues(webByteUtils.allocate(byteLength));\n        };\n    }\n    else {\n        if (isReactNative()) {\n            const { console } = globalThis;\n            console?.warn?.('BSON: For React Native please polyfill crypto.getRandomValues, e.g. using: https://www.npmjs.com/package/react-native-get-random-values.');\n        }\n        return webMathRandomBytes;\n    }\n})();\nconst HEX_DIGIT = /(\\d|[a-f])/i;\nconst webByteUtils = {\n    toLocalBufferType(potentialUint8array) {\n        const stringTag = potentialUint8array?.[Symbol.toStringTag] ??\n            Object.prototype.toString.call(potentialUint8array);\n        if (stringTag === 'Uint8Array') {\n            return potentialUint8array;\n        }\n        if (ArrayBuffer.isView(potentialUint8array)) {\n            return new Uint8Array(potentialUint8array.buffer.slice(potentialUint8array.byteOffset, potentialUint8array.byteOffset + potentialUint8array.byteLength));\n        }\n        if (stringTag === 'ArrayBuffer' ||\n            stringTag === 'SharedArrayBuffer' ||\n            stringTag === '[object ArrayBuffer]' ||\n            stringTag === '[object SharedArrayBuffer]') {\n            return new Uint8Array(potentialUint8array);\n        }\n        throw new BSONError(`Cannot make a Uint8Array from ${String(potentialUint8array)}`);\n    },\n    allocate(size) {\n        if (typeof size !== 'number') {\n            throw new TypeError(`The \"size\" argument must be of type number. Received ${String(size)}`);\n        }\n        return new Uint8Array(size);\n    },\n    equals(a, b) {\n        if (a.byteLength !== b.byteLength) {\n            return false;\n        }\n        for (let i = 0; i < a.byteLength; i++) {\n            if (a[i] !== b[i]) {\n                return false;\n            }\n        }\n        return true;\n    },\n    fromNumberArray(array) {\n        return Uint8Array.from(array);\n    },\n    fromBase64(base64) {\n        return Uint8Array.from(atob(base64), c => c.charCodeAt(0));\n    },\n    toBase64(uint8array) {\n        return btoa(webByteUtils.toISO88591(uint8array));\n    },\n    fromISO88591(codePoints) {\n        return Uint8Array.from(codePoints, c => c.charCodeAt(0) & 0xff);\n    },\n    toISO88591(uint8array) {\n        return Array.from(Uint16Array.from(uint8array), b => String.fromCharCode(b)).join('');\n    },\n    fromHex(hex) {\n        const evenLengthHex = hex.length % 2 === 0 ? hex : hex.slice(0, hex.length - 1);\n        const buffer = [];\n        for (let i = 0; i < evenLengthHex.length; i += 2) {\n            const firstDigit = evenLengthHex[i];\n            const secondDigit = evenLengthHex[i + 1];\n            if (!HEX_DIGIT.test(firstDigit)) {\n                break;\n            }\n            if (!HEX_DIGIT.test(secondDigit)) {\n                break;\n            }\n            const hexDigit = Number.parseInt(`${firstDigit}${secondDigit}`, 16);\n            buffer.push(hexDigit);\n        }\n        return Uint8Array.from(buffer);\n    },\n    toHex(uint8array) {\n        return Array.from(uint8array, byte => byte.toString(16).padStart(2, '0')).join('');\n    },\n    fromUTF8(text) {\n        return new TextEncoder().encode(text);\n    },\n    toUTF8(uint8array, start, end) {\n        return new TextDecoder('utf8', { fatal: false }).decode(uint8array.slice(start, end));\n    },\n    utf8ByteLength(input) {\n        return webByteUtils.fromUTF8(input).byteLength;\n    },\n    encodeUTF8Into(buffer, source, byteOffset) {\n        const bytes = webByteUtils.fromUTF8(source);\n        buffer.set(bytes, byteOffset);\n        return bytes.byteLength;\n    },\n    randomBytes: webRandomBytes\n};\n\nconst hasGlobalBuffer = typeof Buffer === 'function' && Buffer.prototype?._isBuffer !== true;\nconst ByteUtils = hasGlobalBuffer ? nodeJsByteUtils : webByteUtils;\nclass BSONDataView extends DataView {\n    static fromUint8Array(input) {\n        return new DataView(input.buffer, input.byteOffset, input.byteLength);\n    }\n}\n\nclass BSONValue {\n    get [Symbol.for('@@mdb.bson.version')]() {\n        return BSON_MAJOR_VERSION;\n    }\n    [Symbol.for('nodejs.util.inspect.custom')](depth, options, inspect) {\n        return this.inspect(depth, options, inspect);\n    }\n}\n\nclass Binary extends BSONValue {\n    get _bsontype() {\n        return 'Binary';\n    }\n    constructor(buffer, subType) {\n        super();\n        if (!(buffer == null) &&\n            typeof buffer === 'string' &&\n            !ArrayBuffer.isView(buffer) &&\n            !isAnyArrayBuffer(buffer) &&\n            !Array.isArray(buffer)) {\n            throw new BSONError('Binary can only be constructed from Uint8Array or number[]');\n        }\n        this.sub_type = subType ?? Binary.BSON_BINARY_SUBTYPE_DEFAULT;\n        if (buffer == null) {\n            this.buffer = ByteUtils.allocate(Binary.BUFFER_SIZE);\n            this.position = 0;\n        }\n        else {\n            this.buffer = Array.isArray(buffer)\n                ? ByteUtils.fromNumberArray(buffer)\n                : ByteUtils.toLocalBufferType(buffer);\n            this.position = this.buffer.byteLength;\n        }\n    }\n    put(byteValue) {\n        if (typeof byteValue === 'string' && byteValue.length !== 1) {\n            throw new BSONError('only accepts single character String');\n        }\n        else if (typeof byteValue !== 'number' && byteValue.length !== 1)\n            throw new BSONError('only accepts single character Uint8Array or Array');\n        let decodedByte;\n        if (typeof byteValue === 'string') {\n            decodedByte = byteValue.charCodeAt(0);\n        }\n        else if (typeof byteValue === 'number') {\n            decodedByte = byteValue;\n        }\n        else {\n            decodedByte = byteValue[0];\n        }\n        if (decodedByte < 0 || decodedByte > 255) {\n            throw new BSONError('only accepts number in a valid unsigned byte range 0-255');\n        }\n        if (this.buffer.byteLength > this.position) {\n            this.buffer[this.position++] = decodedByte;\n        }\n        else {\n            const newSpace = ByteUtils.allocate(Binary.BUFFER_SIZE + this.buffer.length);\n            newSpace.set(this.buffer, 0);\n            this.buffer = newSpace;\n            this.buffer[this.position++] = decodedByte;\n        }\n    }\n    write(sequence, offset) {\n        offset = typeof offset === 'number' ? offset : this.position;\n        if (this.buffer.byteLength < offset + sequence.length) {\n            const newSpace = ByteUtils.allocate(this.buffer.byteLength + sequence.length);\n            newSpace.set(this.buffer, 0);\n            this.buffer = newSpace;\n        }\n        if (ArrayBuffer.isView(sequence)) {\n            this.buffer.set(ByteUtils.toLocalBufferType(sequence), offset);\n            this.position =\n                offset + sequence.byteLength > this.position ? offset + sequence.length : this.position;\n        }\n        else if (typeof sequence === 'string') {\n            throw new BSONError('input cannot be string');\n        }\n    }\n    read(position, length) {\n        length = length && length > 0 ? length : this.position;\n        return this.buffer.slice(position, position + length);\n    }\n    value() {\n        return this.buffer.length === this.position\n            ? this.buffer\n            : this.buffer.subarray(0, this.position);\n    }\n    length() {\n        return this.position;\n    }\n    toJSON() {\n        return ByteUtils.toBase64(this.buffer);\n    }\n    toString(encoding) {\n        if (encoding === 'hex')\n            return ByteUtils.toHex(this.buffer);\n        if (encoding === 'base64')\n            return ByteUtils.toBase64(this.buffer);\n        if (encoding === 'utf8' || encoding === 'utf-8')\n            return ByteUtils.toUTF8(this.buffer, 0, this.buffer.byteLength);\n        return ByteUtils.toUTF8(this.buffer, 0, this.buffer.byteLength);\n    }\n    toExtendedJSON(options) {\n        options = options || {};\n        const base64String = ByteUtils.toBase64(this.buffer);\n        const subType = Number(this.sub_type).toString(16);\n        if (options.legacy) {\n            return {\n                $binary: base64String,\n                $type: subType.length === 1 ? '0' + subType : subType\n            };\n        }\n        return {\n            $binary: {\n                base64: base64String,\n                subType: subType.length === 1 ? '0' + subType : subType\n            }\n        };\n    }\n    toUUID() {\n        if (this.sub_type === Binary.SUBTYPE_UUID) {\n            return new UUID(this.buffer.slice(0, this.position));\n        }\n        throw new BSONError(`Binary sub_type \"${this.sub_type}\" is not supported for converting to UUID. Only \"${Binary.SUBTYPE_UUID}\" is currently supported.`);\n    }\n    static createFromHexString(hex, subType) {\n        return new Binary(ByteUtils.fromHex(hex), subType);\n    }\n    static createFromBase64(base64, subType) {\n        return new Binary(ByteUtils.fromBase64(base64), subType);\n    }\n    static fromExtendedJSON(doc, options) {\n        options = options || {};\n        let data;\n        let type;\n        if ('$binary' in doc) {\n            if (options.legacy && typeof doc.$binary === 'string' && '$type' in doc) {\n                type = doc.$type ? parseInt(doc.$type, 16) : 0;\n                data = ByteUtils.fromBase64(doc.$binary);\n            }\n            else {\n                if (typeof doc.$binary !== 'string') {\n                    type = doc.$binary.subType ? parseInt(doc.$binary.subType, 16) : 0;\n                    data = ByteUtils.fromBase64(doc.$binary.base64);\n                }\n            }\n        }\n        else if ('$uuid' in doc) {\n            type = 4;\n            data = UUID.bytesFromString(doc.$uuid);\n        }\n        if (!data) {\n            throw new BSONError(`Unexpected Binary Extended JSON format ${JSON.stringify(doc)}`);\n        }\n        return type === BSON_BINARY_SUBTYPE_UUID_NEW ? new UUID(data) : new Binary(data, type);\n    }\n    inspect(depth, options, inspect) {\n        inspect ??= defaultInspect;\n        const base64 = ByteUtils.toBase64(this.buffer.subarray(0, this.position));\n        const base64Arg = inspect(base64, options);\n        const subTypeArg = inspect(this.sub_type, options);\n        return `Binary.createFromBase64(${base64Arg}, ${subTypeArg})`;\n    }\n}\nBinary.BSON_BINARY_SUBTYPE_DEFAULT = 0;\nBinary.BUFFER_SIZE = 256;\nBinary.SUBTYPE_DEFAULT = 0;\nBinary.SUBTYPE_FUNCTION = 1;\nBinary.SUBTYPE_BYTE_ARRAY = 2;\nBinary.SUBTYPE_UUID_OLD = 3;\nBinary.SUBTYPE_UUID = 4;\nBinary.SUBTYPE_MD5 = 5;\nBinary.SUBTYPE_ENCRYPTED = 6;\nBinary.SUBTYPE_COLUMN = 7;\nBinary.SUBTYPE_USER_DEFINED = 128;\nconst UUID_BYTE_LENGTH = 16;\nconst UUID_WITHOUT_DASHES = /^[0-9A-F]{32}$/i;\nconst UUID_WITH_DASHES = /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i;\nclass UUID extends Binary {\n    constructor(input) {\n        let bytes;\n        if (input == null) {\n            bytes = UUID.generate();\n        }\n        else if (input instanceof UUID) {\n            bytes = ByteUtils.toLocalBufferType(new Uint8Array(input.buffer));\n        }\n        else if (ArrayBuffer.isView(input) && input.byteLength === UUID_BYTE_LENGTH) {\n            bytes = ByteUtils.toLocalBufferType(input);\n        }\n        else if (typeof input === 'string') {\n            bytes = UUID.bytesFromString(input);\n        }\n        else {\n            throw new BSONError('Argument passed in UUID constructor must be a UUID, a 16 byte Buffer or a 32/36 character hex string (dashes excluded/included, format: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).');\n        }\n        super(bytes, BSON_BINARY_SUBTYPE_UUID_NEW);\n    }\n    get id() {\n        return this.buffer;\n    }\n    set id(value) {\n        this.buffer = value;\n    }\n    toHexString(includeDashes = true) {\n        if (includeDashes) {\n            return [\n                ByteUtils.toHex(this.buffer.subarray(0, 4)),\n                ByteUtils.toHex(this.buffer.subarray(4, 6)),\n                ByteUtils.toHex(this.buffer.subarray(6, 8)),\n                ByteUtils.toHex(this.buffer.subarray(8, 10)),\n                ByteUtils.toHex(this.buffer.subarray(10, 16))\n            ].join('-');\n        }\n        return ByteUtils.toHex(this.buffer);\n    }\n    toString(encoding) {\n        if (encoding === 'hex')\n            return ByteUtils.toHex(this.id);\n        if (encoding === 'base64')\n            return ByteUtils.toBase64(this.id);\n        return this.toHexString();\n    }\n    toJSON() {\n        return this.toHexString();\n    }\n    equals(otherId) {\n        if (!otherId) {\n            return false;\n        }\n        if (otherId instanceof UUID) {\n            return ByteUtils.equals(otherId.id, this.id);\n        }\n        try {\n            return ByteUtils.equals(new UUID(otherId).id, this.id);\n        }\n        catch {\n            return false;\n        }\n    }\n    toBinary() {\n        return new Binary(this.id, Binary.SUBTYPE_UUID);\n    }\n    static generate() {\n        const bytes = ByteUtils.randomBytes(UUID_BYTE_LENGTH);\n        bytes[6] = (bytes[6] & 0x0f) | 0x40;\n        bytes[8] = (bytes[8] & 0x3f) | 0x80;\n        return bytes;\n    }\n    static isValid(input) {\n        if (!input) {\n            return false;\n        }\n        if (typeof input === 'string') {\n            return UUID.isValidUUIDString(input);\n        }\n        if (isUint8Array(input)) {\n            return input.byteLength === UUID_BYTE_LENGTH;\n        }\n        return (input._bsontype === 'Binary' &&\n            input.sub_type === this.SUBTYPE_UUID &&\n            input.buffer.byteLength === 16);\n    }\n    static createFromHexString(hexString) {\n        const buffer = UUID.bytesFromString(hexString);\n        return new UUID(buffer);\n    }\n    static createFromBase64(base64) {\n        return new UUID(ByteUtils.fromBase64(base64));\n    }\n    static bytesFromString(representation) {\n        if (!UUID.isValidUUIDString(representation)) {\n            throw new BSONError('UUID string representation must be 32 hex digits or canonical hyphenated representation');\n        }\n        return ByteUtils.fromHex(representation.replace(/-/g, ''));\n    }\n    static isValidUUIDString(representation) {\n        return UUID_WITHOUT_DASHES.test(representation) || UUID_WITH_DASHES.test(representation);\n    }\n    inspect(depth, options, inspect) {\n        inspect ??= defaultInspect;\n        return `new UUID(${inspect(this.toHexString(), options)})`;\n    }\n}\n\nclass Code extends BSONValue {\n    get _bsontype() {\n        return 'Code';\n    }\n    constructor(code, scope) {\n        super();\n        this.code = code.toString();\n        this.scope = scope ?? null;\n    }\n    toJSON() {\n        if (this.scope != null) {\n            return { code: this.code, scope: this.scope };\n        }\n        return { code: this.code };\n    }\n    toExtendedJSON() {\n        if (this.scope) {\n            return { $code: this.code, $scope: this.scope };\n        }\n        return { $code: this.code };\n    }\n    static fromExtendedJSON(doc) {\n        return new Code(doc.$code, doc.$scope);\n    }\n    inspect(depth, options, inspect) {\n        inspect ??= defaultInspect;\n        let parametersString = inspect(this.code, options);\n        const multiLineFn = parametersString.includes('\\n');\n        if (this.scope != null) {\n            parametersString += `,${multiLineFn ? '\\n' : ' '}${inspect(this.scope, options)}`;\n        }\n        const endingNewline = multiLineFn && this.scope === null;\n        return `new Code(${multiLineFn ? '\\n' : ''}${parametersString}${endingNewline ? '\\n' : ''})`;\n    }\n}\n\nfunction isDBRefLike(value) {\n    return (value != null &&\n        typeof value === 'object' &&\n        '$id' in value &&\n        value.$id != null &&\n        '$ref' in value &&\n        typeof value.$ref === 'string' &&\n        (!('$db' in value) || ('$db' in value && typeof value.$db === 'string')));\n}\nclass DBRef extends BSONValue {\n    get _bsontype() {\n        return 'DBRef';\n    }\n    constructor(collection, oid, db, fields) {\n        super();\n        const parts = collection.split('.');\n        if (parts.length === 2) {\n            db = parts.shift();\n            collection = parts.shift();\n        }\n        this.collection = collection;\n        this.oid = oid;\n        this.db = db;\n        this.fields = fields || {};\n    }\n    get namespace() {\n        return this.collection;\n    }\n    set namespace(value) {\n        this.collection = value;\n    }\n    toJSON() {\n        const o = Object.assign({\n            $ref: this.collection,\n            $id: this.oid\n        }, this.fields);\n        if (this.db != null)\n            o.$db = this.db;\n        return o;\n    }\n    toExtendedJSON(options) {\n        options = options || {};\n        let o = {\n            $ref: this.collection,\n            $id: this.oid\n        };\n        if (options.legacy) {\n            return o;\n        }\n        if (this.db)\n            o.$db = this.db;\n        o = Object.assign(o, this.fields);\n        return o;\n    }\n    static fromExtendedJSON(doc) {\n        const copy = Object.assign({}, doc);\n        delete copy.$ref;\n        delete copy.$id;\n        delete copy.$db;\n        return new DBRef(doc.$ref, doc.$id, doc.$db, copy);\n    }\n    inspect(depth, options, inspect) {\n        inspect ??= defaultInspect;\n        const args = [\n            inspect(this.namespace, options),\n            inspect(this.oid, options),\n            ...(this.db ? [inspect(this.db, options)] : []),\n            ...(Object.keys(this.fields).length > 0 ? [inspect(this.fields, options)] : [])\n        ];\n        args[1] = inspect === defaultInspect ? `new ObjectId(${args[1]})` : args[1];\n        return `new DBRef(${args.join(', ')})`;\n    }\n}\n\nlet wasm = undefined;\ntry {\n    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;\n}\ncatch {\n}\nconst TWO_PWR_16_DBL = 1 << 16;\nconst TWO_PWR_24_DBL = 1 << 24;\nconst TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\nconst TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\nconst TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\nconst INT_CACHE = {};\nconst UINT_CACHE = {};\nconst MAX_INT64_STRING_LENGTH = 20;\nconst DECIMAL_REG_EX = /^(\\+?0|(\\+|-)?[1-9][0-9]*)$/;\nclass Long extends BSONValue {\n    get _bsontype() {\n        return 'Long';\n    }\n    get __isLong__() {\n        return true;\n    }\n    constructor(low = 0, high, unsigned) {\n        super();\n        if (typeof low === 'bigint') {\n            Object.assign(this, Long.fromBigInt(low, !!high));\n        }\n        else if (typeof low === 'string') {\n            Object.assign(this, Long.fromString(low, !!high));\n        }\n        else {\n            this.low = low | 0;\n            this.high = high | 0;\n            this.unsigned = !!unsigned;\n        }\n    }\n    static fromBits(lowBits, highBits, unsigned) {\n        return new Long(lowBits, highBits, unsigned);\n    }\n    static fromInt(value, unsigned) {\n        let obj, cachedObj, cache;\n        if (unsigned) {\n            value >>>= 0;\n            if ((cache = 0 <= value && value < 256)) {\n                cachedObj = UINT_CACHE[value];\n                if (cachedObj)\n                    return cachedObj;\n            }\n            obj = Long.fromBits(value, (value | 0) < 0 ? -1 : 0, true);\n            if (cache)\n                UINT_CACHE[value] = obj;\n            return obj;\n        }\n        else {\n            value |= 0;\n            if ((cache = -128 <= value && value < 128)) {\n                cachedObj = INT_CACHE[value];\n                if (cachedObj)\n                    return cachedObj;\n            }\n            obj = Long.fromBits(value, value < 0 ? -1 : 0, false);\n            if (cache)\n                INT_CACHE[value] = obj;\n            return obj;\n        }\n    }\n    static fromNumber(value, unsigned) {\n        if (isNaN(value))\n            return unsigned ? Long.UZERO : Long.ZERO;\n        if (unsigned) {\n            if (value < 0)\n                return Long.UZERO;\n            if (value >= TWO_PWR_64_DBL)\n                return Long.MAX_UNSIGNED_VALUE;\n        }\n        else {\n            if (value <= -TWO_PWR_63_DBL)\n                return Long.MIN_VALUE;\n            if (value + 1 >= TWO_PWR_63_DBL)\n                return Long.MAX_VALUE;\n        }\n        if (value < 0)\n            return Long.fromNumber(-value, unsigned).neg();\n        return Long.fromBits(value % TWO_PWR_32_DBL | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\n    }\n    static fromBigInt(value, unsigned) {\n        return Long.fromString(value.toString(), unsigned);\n    }\n    static fromString(str, unsigned, radix) {\n        if (str.length === 0)\n            throw new BSONError('empty string');\n        if (str === 'NaN' || str === 'Infinity' || str === '+Infinity' || str === '-Infinity')\n            return Long.ZERO;\n        if (typeof unsigned === 'number') {\n            (radix = unsigned), (unsigned = false);\n        }\n        else {\n            unsigned = !!unsigned;\n        }\n        radix = radix || 10;\n        if (radix < 2 || 36 < radix)\n            throw new BSONError('radix');\n        let p;\n        if ((p = str.indexOf('-')) > 0)\n            throw new BSONError('interior hyphen');\n        else if (p === 0) {\n            return Long.fromString(str.substring(1), unsigned, radix).neg();\n        }\n        const radixToPower = Long.fromNumber(Math.pow(radix, 8));\n        let result = Long.ZERO;\n        for (let i = 0; i < str.length; i += 8) {\n            const size = Math.min(8, str.length - i), value = parseInt(str.substring(i, i + size), radix);\n            if (size < 8) {\n                const power = Long.fromNumber(Math.pow(radix, size));\n                result = result.mul(power).add(Long.fromNumber(value));\n            }\n            else {\n                result = result.mul(radixToPower);\n                result = result.add(Long.fromNumber(value));\n            }\n        }\n        result.unsigned = unsigned;\n        return result;\n    }\n    static fromBytes(bytes, unsigned, le) {\n        return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\n    }\n    static fromBytesLE(bytes, unsigned) {\n        return new Long(bytes[0] | (bytes[1] << 8) | (bytes[2] << 16) | (bytes[3] << 24), bytes[4] | (bytes[5] << 8) | (bytes[6] << 16) | (bytes[7] << 24), unsigned);\n    }\n    static fromBytesBE(bytes, unsigned) {\n        return new Long((bytes[4] << 24) | (bytes[5] << 16) | (bytes[6] << 8) | bytes[7], (bytes[0] << 24) | (bytes[1] << 16) | (bytes[2] << 8) | bytes[3], unsigned);\n    }\n    static isLong(value) {\n        return (value != null &&\n            typeof value === 'object' &&\n            '__isLong__' in value &&\n            value.__isLong__ === true);\n    }\n    static fromValue(val, unsigned) {\n        if (typeof val === 'number')\n            return Long.fromNumber(val, unsigned);\n        if (typeof val === 'string')\n            return Long.fromString(val, unsigned);\n        return Long.fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n    }\n    add(addend) {\n        if (!Long.isLong(addend))\n            addend = Long.fromValue(addend);\n        const a48 = this.high >>> 16;\n        const a32 = this.high & 0xffff;\n        const a16 = this.low >>> 16;\n        const a00 = this.low & 0xffff;\n        const b48 = addend.high >>> 16;\n        const b32 = addend.high & 0xffff;\n        const b16 = addend.low >>> 16;\n        const b00 = addend.low & 0xffff;\n        let c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n        c00 += a00 + b00;\n        c16 += c00 >>> 16;\n        c00 &= 0xffff;\n        c16 += a16 + b16;\n        c32 += c16 >>> 16;\n        c16 &= 0xffff;\n        c32 += a32 + b32;\n        c48 += c32 >>> 16;\n        c32 &= 0xffff;\n        c48 += a48 + b48;\n        c48 &= 0xffff;\n        return Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\n    }\n    and(other) {\n        if (!Long.isLong(other))\n            other = Long.fromValue(other);\n        return Long.fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n    }\n    compare(other) {\n        if (!Long.isLong(other))\n            other = Long.fromValue(other);\n        if (this.eq(other))\n            return 0;\n        const thisNeg = this.isNegative(), otherNeg = other.isNegative();\n        if (thisNeg && !otherNeg)\n            return -1;\n        if (!thisNeg && otherNeg)\n            return 1;\n        if (!this.unsigned)\n            return this.sub(other).isNegative() ? -1 : 1;\n        return other.high >>> 0 > this.high >>> 0 ||\n            (other.high === this.high && other.low >>> 0 > this.low >>> 0)\n            ? -1\n            : 1;\n    }\n    comp(other) {\n        return this.compare(other);\n    }\n    divide(divisor) {\n        if (!Long.isLong(divisor))\n            divisor = Long.fromValue(divisor);\n        if (divisor.isZero())\n            throw new BSONError('division by zero');\n        if (wasm) {\n            if (!this.unsigned &&\n                this.high === -0x80000000 &&\n                divisor.low === -1 &&\n                divisor.high === -1) {\n                return this;\n            }\n            const low = (this.unsigned ? wasm.div_u : wasm.div_s)(this.low, this.high, divisor.low, divisor.high);\n            return Long.fromBits(low, wasm.get_high(), this.unsigned);\n        }\n        if (this.isZero())\n            return this.unsigned ? Long.UZERO : Long.ZERO;\n        let approx, rem, res;\n        if (!this.unsigned) {\n            if (this.eq(Long.MIN_VALUE)) {\n                if (divisor.eq(Long.ONE) || divisor.eq(Long.NEG_ONE))\n                    return Long.MIN_VALUE;\n                else if (divisor.eq(Long.MIN_VALUE))\n                    return Long.ONE;\n                else {\n                    const halfThis = this.shr(1);\n                    approx = halfThis.div(divisor).shl(1);\n                    if (approx.eq(Long.ZERO)) {\n                        return divisor.isNegative() ? Long.ONE : Long.NEG_ONE;\n                    }\n                    else {\n                        rem = this.sub(divisor.mul(approx));\n                        res = approx.add(rem.div(divisor));\n                        return res;\n                    }\n                }\n            }\n            else if (divisor.eq(Long.MIN_VALUE))\n                return this.unsigned ? Long.UZERO : Long.ZERO;\n            if (this.isNegative()) {\n                if (divisor.isNegative())\n                    return this.neg().div(divisor.neg());\n                return this.neg().div(divisor).neg();\n            }\n            else if (divisor.isNegative())\n                return this.div(divisor.neg()).neg();\n            res = Long.ZERO;\n        }\n        else {\n            if (!divisor.unsigned)\n                divisor = divisor.toUnsigned();\n            if (divisor.gt(this))\n                return Long.UZERO;\n            if (divisor.gt(this.shru(1)))\n                return Long.UONE;\n            res = Long.UZERO;\n        }\n        rem = this;\n        while (rem.gte(divisor)) {\n            approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\n            const log2 = Math.ceil(Math.log(approx) / Math.LN2);\n            const delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);\n            let approxRes = Long.fromNumber(approx);\n            let approxRem = approxRes.mul(divisor);\n            while (approxRem.isNegative() || approxRem.gt(rem)) {\n                approx -= delta;\n                approxRes = Long.fromNumber(approx, this.unsigned);\n                approxRem = approxRes.mul(divisor);\n            }\n            if (approxRes.isZero())\n                approxRes = Long.ONE;\n            res = res.add(approxRes);\n            rem = rem.sub(approxRem);\n        }\n        return res;\n    }\n    div(divisor) {\n        return this.divide(divisor);\n    }\n    equals(other) {\n        if (!Long.isLong(other))\n            other = Long.fromValue(other);\n        if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1)\n            return false;\n        return this.high === other.high && this.low === other.low;\n    }\n    eq(other) {\n        return this.equals(other);\n    }\n    getHighBits() {\n        return this.high;\n    }\n    getHighBitsUnsigned() {\n        return this.high >>> 0;\n    }\n    getLowBits() {\n        return this.low;\n    }\n    getLowBitsUnsigned() {\n        return this.low >>> 0;\n    }\n    getNumBitsAbs() {\n        if (this.isNegative()) {\n            return this.eq(Long.MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n        }\n        const val = this.high !== 0 ? this.high : this.low;\n        let bit;\n        for (bit = 31; bit > 0; bit--)\n            if ((val & (1 << bit)) !== 0)\n                break;\n        return this.high !== 0 ? bit + 33 : bit + 1;\n    }\n    greaterThan(other) {\n        return this.comp(other) > 0;\n    }\n    gt(other) {\n        return this.greaterThan(other);\n    }\n    greaterThanOrEqual(other) {\n        return this.comp(other) >= 0;\n    }\n    gte(other) {\n        return this.greaterThanOrEqual(other);\n    }\n    ge(other) {\n        return this.greaterThanOrEqual(other);\n    }\n    isEven() {\n        return (this.low & 1) === 0;\n    }\n    isNegative() {\n        return !this.unsigned && this.high < 0;\n    }\n    isOdd() {\n        return (this.low & 1) === 1;\n    }\n    isPositive() {\n        return this.unsigned || this.high >= 0;\n    }\n    isZero() {\n        return this.high === 0 && this.low === 0;\n    }\n    lessThan(other) {\n        return this.comp(other) < 0;\n    }\n    lt(other) {\n        return this.lessThan(other);\n    }\n    lessThanOrEqual(other) {\n        return this.comp(other) <= 0;\n    }\n    lte(other) {\n        return this.lessThanOrEqual(other);\n    }\n    modulo(divisor) {\n        if (!Long.isLong(divisor))\n            divisor = Long.fromValue(divisor);\n        if (wasm) {\n            const low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(this.low, this.high, divisor.low, divisor.high);\n            return Long.fromBits(low, wasm.get_high(), this.unsigned);\n        }\n        return this.sub(this.div(divisor).mul(divisor));\n    }\n    mod(divisor) {\n        return this.modulo(divisor);\n    }\n    rem(divisor) {\n        return this.modulo(divisor);\n    }\n    multiply(multiplier) {\n        if (this.isZero())\n            return Long.ZERO;\n        if (!Long.isLong(multiplier))\n            multiplier = Long.fromValue(multiplier);\n        if (wasm) {\n            const low = wasm.mul(this.low, this.high, multiplier.low, multiplier.high);\n            return Long.fromBits(low, wasm.get_high(), this.unsigned);\n        }\n        if (multiplier.isZero())\n            return Long.ZERO;\n        if (this.eq(Long.MIN_VALUE))\n            return multiplier.isOdd() ? Long.MIN_VALUE : Long.ZERO;\n        if (multiplier.eq(Long.MIN_VALUE))\n            return this.isOdd() ? Long.MIN_VALUE : Long.ZERO;\n        if (this.isNegative()) {\n            if (multiplier.isNegative())\n                return this.neg().mul(multiplier.neg());\n            else\n                return this.neg().mul(multiplier).neg();\n        }\n        else if (multiplier.isNegative())\n            return this.mul(multiplier.neg()).neg();\n        if (this.lt(Long.TWO_PWR_24) && multiplier.lt(Long.TWO_PWR_24))\n            return Long.fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\n        const a48 = this.high >>> 16;\n        const a32 = this.high & 0xffff;\n        const a16 = this.low >>> 16;\n        const a00 = this.low & 0xffff;\n        const b48 = multiplier.high >>> 16;\n        const b32 = multiplier.high & 0xffff;\n        const b16 = multiplier.low >>> 16;\n        const b00 = multiplier.low & 0xffff;\n        let c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n        c00 += a00 * b00;\n        c16 += c00 >>> 16;\n        c00 &= 0xffff;\n        c16 += a16 * b00;\n        c32 += c16 >>> 16;\n        c16 &= 0xffff;\n        c16 += a00 * b16;\n        c32 += c16 >>> 16;\n        c16 &= 0xffff;\n        c32 += a32 * b00;\n        c48 += c32 >>> 16;\n        c32 &= 0xffff;\n        c32 += a16 * b16;\n        c48 += c32 >>> 16;\n        c32 &= 0xffff;\n        c32 += a00 * b32;\n        c48 += c32 >>> 16;\n        c32 &= 0xffff;\n        c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n        c48 &= 0xffff;\n        return Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\n    }\n    mul(multiplier) {\n        return this.multiply(multiplier);\n    }\n    negate() {\n        if (!this.unsigned && this.eq(Long.MIN_VALUE))\n            return Long.MIN_VALUE;\n        return this.not().add(Long.ONE);\n    }\n    neg() {\n        return this.negate();\n    }\n    not() {\n        return Long.fromBits(~this.low, ~this.high, this.unsigned);\n    }\n    notEquals(other) {\n        return !this.equals(other);\n    }\n    neq(other) {\n        return this.notEquals(other);\n    }\n    ne(other) {\n        return this.notEquals(other);\n    }\n    or(other) {\n        if (!Long.isLong(other))\n            other = Long.fromValue(other);\n        return Long.fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n    }\n    shiftLeft(numBits) {\n        if (Long.isLong(numBits))\n            numBits = numBits.toInt();\n        if ((numBits &= 63) === 0)\n            return this;\n        else if (numBits < 32)\n            return Long.fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\n        else\n            return Long.fromBits(0, this.low << (numBits - 32), this.unsigned);\n    }\n    shl(numBits) {\n        return this.shiftLeft(numBits);\n    }\n    shiftRight(numBits) {\n        if (Long.isLong(numBits))\n            numBits = numBits.toInt();\n        if ((numBits &= 63) === 0)\n            return this;\n        else if (numBits < 32)\n            return Long.fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\n        else\n            return Long.fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\n    }\n    shr(numBits) {\n        return this.shiftRight(numBits);\n    }\n    shiftRightUnsigned(numBits) {\n        if (Long.isLong(numBits))\n            numBits = numBits.toInt();\n        numBits &= 63;\n        if (numBits === 0)\n            return this;\n        else {\n            const high = this.high;\n            if (numBits < 32) {\n                const low = this.low;\n                return Long.fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\n            }\n            else if (numBits === 32)\n                return Long.fromBits(high, 0, this.unsigned);\n            else\n                return Long.fromBits(high >>> (numBits - 32), 0, this.unsigned);\n        }\n    }\n    shr_u(numBits) {\n        return this.shiftRightUnsigned(numBits);\n    }\n    shru(numBits) {\n        return this.shiftRightUnsigned(numBits);\n    }\n    subtract(subtrahend) {\n        if (!Long.isLong(subtrahend))\n            subtrahend = Long.fromValue(subtrahend);\n        return this.add(subtrahend.neg());\n    }\n    sub(subtrahend) {\n        return this.subtract(subtrahend);\n    }\n    toInt() {\n        return this.unsigned ? this.low >>> 0 : this.low;\n    }\n    toNumber() {\n        if (this.unsigned)\n            return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n        return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n    }\n    toBigInt() {\n        return BigInt(this.toString());\n    }\n    toBytes(le) {\n        return le ? this.toBytesLE() : this.toBytesBE();\n    }\n    toBytesLE() {\n        const hi = this.high, lo = this.low;\n        return [\n            lo & 0xff,\n            (lo >>> 8) & 0xff,\n            (lo >>> 16) & 0xff,\n            lo >>> 24,\n            hi & 0xff,\n            (hi >>> 8) & 0xff,\n            (hi >>> 16) & 0xff,\n            hi >>> 24\n        ];\n    }\n    toBytesBE() {\n        const hi = this.high, lo = this.low;\n        return [\n            hi >>> 24,\n            (hi >>> 16) & 0xff,\n            (hi >>> 8) & 0xff,\n            hi & 0xff,\n            lo >>> 24,\n            (lo >>> 16) & 0xff,\n            (lo >>> 8) & 0xff,\n            lo & 0xff\n        ];\n    }\n    toSigned() {\n        if (!this.unsigned)\n            return this;\n        return Long.fromBits(this.low, this.high, false);\n    }\n    toString(radix) {\n        radix = radix || 10;\n        if (radix < 2 || 36 < radix)\n            throw new BSONError('radix');\n        if (this.isZero())\n            return '0';\n        if (this.isNegative()) {\n            if (this.eq(Long.MIN_VALUE)) {\n                const radixLong = Long.fromNumber(radix), div = this.div(radixLong), rem1 = div.mul(radixLong).sub(this);\n                return div.toString(radix) + rem1.toInt().toString(radix);\n            }\n            else\n                return '-' + this.neg().toString(radix);\n        }\n        const radixToPower = Long.fromNumber(Math.pow(radix, 6), this.unsigned);\n        let rem = this;\n        let result = '';\n        while (true) {\n            const remDiv = rem.div(radixToPower);\n            const intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0;\n            let digits = intval.toString(radix);\n            rem = remDiv;\n            if (rem.isZero()) {\n                return digits + result;\n            }\n            else {\n                while (digits.length < 6)\n                    digits = '0' + digits;\n                result = '' + digits + result;\n            }\n        }\n    }\n    toUnsigned() {\n        if (this.unsigned)\n            return this;\n        return Long.fromBits(this.low, this.high, true);\n    }\n    xor(other) {\n        if (!Long.isLong(other))\n            other = Long.fromValue(other);\n        return Long.fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n    }\n    eqz() {\n        return this.isZero();\n    }\n    le(other) {\n        return this.lessThanOrEqual(other);\n    }\n    toExtendedJSON(options) {\n        if (options && options.relaxed)\n            return this.toNumber();\n        return { $numberLong: this.toString() };\n    }\n    static fromExtendedJSON(doc, options) {\n        const { useBigInt64 = false, relaxed = true } = { ...options };\n        if (doc.$numberLong.length > MAX_INT64_STRING_LENGTH) {\n            throw new BSONError('$numberLong string is too long');\n        }\n        if (!DECIMAL_REG_EX.test(doc.$numberLong)) {\n            throw new BSONError(`$numberLong string \"${doc.$numberLong}\" is in an invalid format`);\n        }\n        if (useBigInt64) {\n            const bigIntResult = BigInt(doc.$numberLong);\n            return BigInt.asIntN(64, bigIntResult);\n        }\n        const longResult = Long.fromString(doc.$numberLong);\n        if (relaxed) {\n            return longResult.toNumber();\n        }\n        return longResult;\n    }\n    inspect(depth, options, inspect) {\n        inspect ??= defaultInspect;\n        const longVal = inspect(this.toString(), options);\n        const unsignedVal = this.unsigned ? `, ${inspect(this.unsigned, options)}` : '';\n        return `new Long(${longVal}${unsignedVal})`;\n    }\n}\nLong.TWO_PWR_24 = Long.fromInt(TWO_PWR_24_DBL);\nLong.MAX_UNSIGNED_VALUE = Long.fromBits(0xffffffff | 0, 0xffffffff | 0, true);\nLong.ZERO = Long.fromInt(0);\nLong.UZERO = Long.fromInt(0, true);\nLong.ONE = Long.fromInt(1);\nLong.UONE = Long.fromInt(1, true);\nLong.NEG_ONE = Long.fromInt(-1);\nLong.MAX_VALUE = Long.fromBits(0xffffffff | 0, 0x7fffffff | 0, false);\nLong.MIN_VALUE = Long.fromBits(0, 0x80000000 | 0, false);\n\nconst PARSE_STRING_REGEXP = /^(\\+|-)?(\\d+|(\\d*\\.\\d*))?(E|e)?([-+])?(\\d+)?$/;\nconst PARSE_INF_REGEXP = /^(\\+|-)?(Infinity|inf)$/i;\nconst PARSE_NAN_REGEXP = /^(\\+|-)?NaN$/i;\nconst EXPONENT_MAX = 6111;\nconst EXPONENT_MIN = -6176;\nconst EXPONENT_BIAS = 6176;\nconst MAX_DIGITS = 34;\nconst NAN_BUFFER = ByteUtils.fromNumberArray([\n    0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\n].reverse());\nconst INF_NEGATIVE_BUFFER = ByteUtils.fromNumberArray([\n    0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\n].reverse());\nconst INF_POSITIVE_BUFFER = ByteUtils.fromNumberArray([\n    0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\n].reverse());\nconst EXPONENT_REGEX = /^([-+])?(\\d+)?$/;\nconst COMBINATION_MASK = 0x1f;\nconst EXPONENT_MASK = 0x3fff;\nconst COMBINATION_INFINITY = 30;\nconst COMBINATION_NAN = 31;\nfunction isDigit(value) {\n    return !isNaN(parseInt(value, 10));\n}\nfunction divideu128(value) {\n    const DIVISOR = Long.fromNumber(1000 * 1000 * 1000);\n    let _rem = Long.fromNumber(0);\n    if (!value.parts[0] && !value.parts[1] && !value.parts[2] && !value.parts[3]) {\n        return { quotient: value, rem: _rem };\n    }\n    for (let i = 0; i <= 3; i++) {\n        _rem = _rem.shiftLeft(32);\n        _rem = _rem.add(new Long(value.parts[i], 0));\n        value.parts[i] = _rem.div(DIVISOR).low;\n        _rem = _rem.modulo(DIVISOR);\n    }\n    return { quotient: value, rem: _rem };\n}\nfunction multiply64x2(left, right) {\n    if (!left && !right) {\n        return { high: Long.fromNumber(0), low: Long.fromNumber(0) };\n    }\n    const leftHigh = left.shiftRightUnsigned(32);\n    const leftLow = new Long(left.getLowBits(), 0);\n    const rightHigh = right.shiftRightUnsigned(32);\n    const rightLow = new Long(right.getLowBits(), 0);\n    let productHigh = leftHigh.multiply(rightHigh);\n    let productMid = leftHigh.multiply(rightLow);\n    const productMid2 = leftLow.multiply(rightHigh);\n    let productLow = leftLow.multiply(rightLow);\n    productHigh = productHigh.add(productMid.shiftRightUnsigned(32));\n    productMid = new Long(productMid.getLowBits(), 0)\n        .add(productMid2)\n        .add(productLow.shiftRightUnsigned(32));\n    productHigh = productHigh.add(productMid.shiftRightUnsigned(32));\n    productLow = productMid.shiftLeft(32).add(new Long(productLow.getLowBits(), 0));\n    return { high: productHigh, low: productLow };\n}\nfunction lessThan(left, right) {\n    const uhleft = left.high >>> 0;\n    const uhright = right.high >>> 0;\n    if (uhleft < uhright) {\n        return true;\n    }\n    else if (uhleft === uhright) {\n        const ulleft = left.low >>> 0;\n        const ulright = right.low >>> 0;\n        if (ulleft < ulright)\n            return true;\n    }\n    return false;\n}\nfunction invalidErr(string, message) {\n    throw new BSONError(`\"${string}\" is not a valid Decimal128 string - ${message}`);\n}\nclass Decimal128 extends BSONValue {\n    get _bsontype() {\n        return 'Decimal128';\n    }\n    constructor(bytes) {\n        super();\n        if (typeof bytes === 'string') {\n            this.bytes = Decimal128.fromString(bytes).bytes;\n        }\n        else if (isUint8Array(bytes)) {\n            if (bytes.byteLength !== 16) {\n                throw new BSONError('Decimal128 must take a Buffer of 16 bytes');\n            }\n            this.bytes = bytes;\n        }\n        else {\n            throw new BSONError('Decimal128 must take a Buffer or string');\n        }\n    }\n    static fromString(representation) {\n        return Decimal128._fromString(representation, { allowRounding: false });\n    }\n    static fromStringWithRounding(representation) {\n        return Decimal128._fromString(representation, { allowRounding: true });\n    }\n    static _fromString(representation, options) {\n        let isNegative = false;\n        let sawSign = false;\n        let sawRadix = false;\n        let foundNonZero = false;\n        let significantDigits = 0;\n        let nDigitsRead = 0;\n        let nDigits = 0;\n        let radixPosition = 0;\n        let firstNonZero = 0;\n        const digits = [0];\n        let nDigitsStored = 0;\n        let digitsInsert = 0;\n        let lastDigit = 0;\n        let exponent = 0;\n        let significandHigh = new Long(0, 0);\n        let significandLow = new Long(0, 0);\n        let biasedExponent = 0;\n        let index = 0;\n        if (representation.length >= 7000) {\n            throw new BSONError('' + representation + ' not a valid Decimal128 string');\n        }\n        const stringMatch = representation.match(PARSE_STRING_REGEXP);\n        const infMatch = representation.match(PARSE_INF_REGEXP);\n        const nanMatch = representation.match(PARSE_NAN_REGEXP);\n        if ((!stringMatch && !infMatch && !nanMatch) || representation.length === 0) {\n            throw new BSONError('' + representation + ' not a valid Decimal128 string');\n        }\n        if (stringMatch) {\n            const unsignedNumber = stringMatch[2];\n            const e = stringMatch[4];\n            const expSign = stringMatch[5];\n            const expNumber = stringMatch[6];\n            if (e && expNumber === undefined)\n                invalidErr(representation, 'missing exponent power');\n            if (e && unsignedNumber === undefined)\n                invalidErr(representation, 'missing exponent base');\n            if (e === undefined && (expSign || expNumber)) {\n                invalidErr(representation, 'missing e before exponent');\n            }\n        }\n        if (representation[index] === '+' || representation[index] === '-') {\n            sawSign = true;\n            isNegative = representation[index++] === '-';\n        }\n        if (!isDigit(representation[index]) && representation[index] !== '.') {\n            if (representation[index] === 'i' || representation[index] === 'I') {\n                return new Decimal128(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER);\n            }\n            else if (representation[index] === 'N') {\n                return new Decimal128(NAN_BUFFER);\n            }\n        }\n        while (isDigit(representation[index]) || representation[index] === '.') {\n            if (representation[index] === '.') {\n                if (sawRadix)\n                    invalidErr(representation, 'contains multiple periods');\n                sawRadix = true;\n                index = index + 1;\n                continue;\n            }\n            if (nDigitsStored < MAX_DIGITS) {\n                if (representation[index] !== '0' || foundNonZero) {\n                    if (!foundNonZero) {\n                        firstNonZero = nDigitsRead;\n                    }\n                    foundNonZero = true;\n                    digits[digitsInsert++] = parseInt(representation[index], 10);\n                    nDigitsStored = nDigitsStored + 1;\n                }\n            }\n            if (foundNonZero)\n                nDigits = nDigits + 1;\n            if (sawRadix)\n                radixPosition = radixPosition + 1;\n            nDigitsRead = nDigitsRead + 1;\n            index = index + 1;\n        }\n        if (sawRadix && !nDigitsRead)\n            throw new BSONError('' + representation + ' not a valid Decimal128 string');\n        if (representation[index] === 'e' || representation[index] === 'E') {\n            const match = representation.substr(++index).match(EXPONENT_REGEX);\n            if (!match || !match[2])\n                return new Decimal128(NAN_BUFFER);\n            exponent = parseInt(match[0], 10);\n            index = index + match[0].length;\n        }\n        if (representation[index])\n            return new Decimal128(NAN_BUFFER);\n        if (!nDigitsStored) {\n            digits[0] = 0;\n            nDigits = 1;\n            nDigitsStored = 1;\n            significantDigits = 0;\n        }\n        else {\n            lastDigit = nDigitsStored - 1;\n            significantDigits = nDigits;\n            if (significantDigits !== 1) {\n                while (representation[firstNonZero + significantDigits - 1 + Number(sawSign) + Number(sawRadix)] === '0') {\n                    significantDigits = significantDigits - 1;\n                }\n            }\n        }\n        if (exponent <= radixPosition && radixPosition > exponent + (1 << 14)) {\n            exponent = EXPONENT_MIN;\n        }\n        else {\n            exponent = exponent - radixPosition;\n        }\n        while (exponent > EXPONENT_MAX) {\n            lastDigit = lastDigit + 1;\n            if (lastDigit >= MAX_DIGITS) {\n                if (significantDigits === 0) {\n                    exponent = EXPONENT_MAX;\n                    break;\n                }\n                invalidErr(representation, 'overflow');\n            }\n            exponent = exponent - 1;\n        }\n        if (options.allowRounding) {\n            while (exponent < EXPONENT_MIN || nDigitsStored < nDigits) {\n                if (lastDigit === 0 && significantDigits < nDigitsStored) {\n                    exponent = EXPONENT_MIN;\n                    significantDigits = 0;\n                    break;\n                }\n                if (nDigitsStored < nDigits) {\n                    nDigits = nDigits - 1;\n                }\n                else {\n                    lastDigit = lastDigit - 1;\n                }\n                if (exponent < EXPONENT_MAX) {\n                    exponent = exponent + 1;\n                }\n                else {\n                    const digitsString = digits.join('');\n                    if (digitsString.match(/^0+$/)) {\n                        exponent = EXPONENT_MAX;\n                        break;\n                    }\n                    invalidErr(representation, 'overflow');\n                }\n            }\n            if (lastDigit + 1 < significantDigits) {\n                let endOfString = nDigitsRead;\n                if (sawRadix) {\n                    firstNonZero = firstNonZero + 1;\n                    endOfString = endOfString + 1;\n                }\n                if (sawSign) {\n                    firstNonZero = firstNonZero + 1;\n                    endOfString = endOfString + 1;\n                }\n                const roundDigit = parseInt(representation[firstNonZero + lastDigit + 1], 10);\n                let roundBit = 0;\n                if (roundDigit >= 5) {\n                    roundBit = 1;\n                    if (roundDigit === 5) {\n                        roundBit = digits[lastDigit] % 2 === 1 ? 1 : 0;\n                        for (let i = firstNonZero + lastDigit + 2; i < endOfString; i++) {\n                            if (parseInt(representation[i], 10)) {\n                                roundBit = 1;\n                                break;\n                            }\n                        }\n                    }\n                }\n                if (roundBit) {\n                    let dIdx = lastDigit;\n                    for (; dIdx >= 0; dIdx--) {\n                        if (++digits[dIdx] > 9) {\n                            digits[dIdx] = 0;\n                            if (dIdx === 0) {\n                                if (exponent < EXPONENT_MAX) {\n                                    exponent = exponent + 1;\n                                    digits[dIdx] = 1;\n                                }\n                                else {\n                                    return new Decimal128(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER);\n                                }\n                            }\n                        }\n                        else {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            while (exponent < EXPONENT_MIN || nDigitsStored < nDigits) {\n                if (lastDigit === 0) {\n                    if (significantDigits === 0) {\n                        exponent = EXPONENT_MIN;\n                        break;\n                    }\n                    invalidErr(representation, 'exponent underflow');\n                }\n                if (nDigitsStored < nDigits) {\n                    if (representation[nDigits - 1 + Number(sawSign) + Number(sawRadix)] !== '0' &&\n                        significantDigits !== 0) {\n                        invalidErr(representation, 'inexact rounding');\n                    }\n                    nDigits = nDigits - 1;\n                }\n                else {\n                    if (digits[lastDigit] !== 0) {\n                        invalidErr(representation, 'inexact rounding');\n                    }\n                    lastDigit = lastDigit - 1;\n                }\n                if (exponent < EXPONENT_MAX) {\n                    exponent = exponent + 1;\n                }\n                else {\n                    invalidErr(representation, 'overflow');\n                }\n            }\n            if (lastDigit + 1 < significantDigits) {\n                if (sawRadix) {\n                    firstNonZero = firstNonZero + 1;\n                }\n                if (sawSign) {\n                    firstNonZero = firstNonZero + 1;\n                }\n                const roundDigit = parseInt(representation[firstNonZero + lastDigit + 1], 10);\n                if (roundDigit !== 0) {\n                    invalidErr(representation, 'inexact rounding');\n                }\n            }\n        }\n        significandHigh = Long.fromNumber(0);\n        significandLow = Long.fromNumber(0);\n        if (significantDigits === 0) {\n            significandHigh = Long.fromNumber(0);\n            significandLow = Long.fromNumber(0);\n        }\n        else if (lastDigit < 17) {\n            let dIdx = 0;\n            significandLow = Long.fromNumber(digits[dIdx++]);\n            significandHigh = new Long(0, 0);\n            for (; dIdx <= lastDigit; dIdx++) {\n                significandLow = significandLow.multiply(Long.fromNumber(10));\n                significandLow = significandLow.add(Long.fromNumber(digits[dIdx]));\n            }\n        }\n        else {\n            let dIdx = 0;\n            significandHigh = Long.fromNumber(digits[dIdx++]);\n            for (; dIdx <= lastDigit - 17; dIdx++) {\n                significandHigh = significandHigh.multiply(Long.fromNumber(10));\n                significandHigh = significandHigh.add(Long.fromNumber(digits[dIdx]));\n            }\n            significandLow = Long.fromNumber(digits[dIdx++]);\n            for (; dIdx <= lastDigit; dIdx++) {\n                significandLow = significandLow.multiply(Long.fromNumber(10));\n                significandLow = significandLow.add(Long.fromNumber(digits[dIdx]));\n            }\n        }\n        const significand = multiply64x2(significandHigh, Long.fromString('100000000000000000'));\n        significand.low = significand.low.add(significandLow);\n        if (lessThan(significand.low, significandLow)) {\n            significand.high = significand.high.add(Long.fromNumber(1));\n        }\n        biasedExponent = exponent + EXPONENT_BIAS;\n        const dec = { low: Long.fromNumber(0), high: Long.fromNumber(0) };\n        if (significand.high.shiftRightUnsigned(49).and(Long.fromNumber(1)).equals(Long.fromNumber(1))) {\n            dec.high = dec.high.or(Long.fromNumber(0x3).shiftLeft(61));\n            dec.high = dec.high.or(Long.fromNumber(biasedExponent).and(Long.fromNumber(0x3fff).shiftLeft(47)));\n            dec.high = dec.high.or(significand.high.and(Long.fromNumber(0x7fffffffffff)));\n        }\n        else {\n            dec.high = dec.high.or(Long.fromNumber(biasedExponent & 0x3fff).shiftLeft(49));\n            dec.high = dec.high.or(significand.high.and(Long.fromNumber(0x1ffffffffffff)));\n        }\n        dec.low = significand.low;\n        if (isNegative) {\n            dec.high = dec.high.or(Long.fromString('9223372036854775808'));\n        }\n        const buffer = ByteUtils.allocate(16);\n        index = 0;\n        buffer[index++] = dec.low.low & 0xff;\n        buffer[index++] = (dec.low.low >> 8) & 0xff;\n        buffer[index++] = (dec.low.low >> 16) & 0xff;\n        buffer[index++] = (dec.low.low >> 24) & 0xff;\n        buffer[index++] = dec.low.high & 0xff;\n        buffer[index++] = (dec.low.high >> 8) & 0xff;\n        buffer[index++] = (dec.low.high >> 16) & 0xff;\n        buffer[index++] = (dec.low.high >> 24) & 0xff;\n        buffer[index++] = dec.high.low & 0xff;\n        buffer[index++] = (dec.high.low >> 8) & 0xff;\n        buffer[index++] = (dec.high.low >> 16) & 0xff;\n        buffer[index++] = (dec.high.low >> 24) & 0xff;\n        buffer[index++] = dec.high.high & 0xff;\n        buffer[index++] = (dec.high.high >> 8) & 0xff;\n        buffer[index++] = (dec.high.high >> 16) & 0xff;\n        buffer[index++] = (dec.high.high >> 24) & 0xff;\n        return new Decimal128(buffer);\n    }\n    toString() {\n        let biased_exponent;\n        let significand_digits = 0;\n        const significand = new Array(36);\n        for (let i = 0; i < significand.length; i++)\n            significand[i] = 0;\n        let index = 0;\n        let is_zero = false;\n        let significand_msb;\n        let significand128 = { parts: [0, 0, 0, 0] };\n        let j, k;\n        const string = [];\n        index = 0;\n        const buffer = this.bytes;\n        const low = buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24);\n        const midl = buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24);\n        const midh = buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24);\n        const high = buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24);\n        index = 0;\n        const dec = {\n            low: new Long(low, midl),\n            high: new Long(midh, high)\n        };\n        if (dec.high.lessThan(Long.ZERO)) {\n            string.push('-');\n        }\n        const combination = (high >> 26) & COMBINATION_MASK;\n        if (combination >> 3 === 3) {\n            if (combination === COMBINATION_INFINITY) {\n                return string.join('') + 'Infinity';\n            }\n            else if (combination === COMBINATION_NAN) {\n                return 'NaN';\n            }\n            else {\n                biased_exponent = (high >> 15) & EXPONENT_MASK;\n                significand_msb = 0x08 + ((high >> 14) & 0x01);\n            }\n        }\n        else {\n            significand_msb = (high >> 14) & 0x07;\n            biased_exponent = (high >> 17) & EXPONENT_MASK;\n        }\n        const exponent = biased_exponent - EXPONENT_BIAS;\n        significand128.parts[0] = (high & 0x3fff) + ((significand_msb & 0xf) << 14);\n        significand128.parts[1] = midh;\n        significand128.parts[2] = midl;\n        significand128.parts[3] = low;\n        if (significand128.parts[0] === 0 &&\n            significand128.parts[1] === 0 &&\n            significand128.parts[2] === 0 &&\n            significand128.parts[3] === 0) {\n            is_zero = true;\n        }\n        else {\n            for (k = 3; k >= 0; k--) {\n                let least_digits = 0;\n                const result = divideu128(significand128);\n                significand128 = result.quotient;\n                least_digits = result.rem.low;\n                if (!least_digits)\n                    continue;\n                for (j = 8; j >= 0; j--) {\n                    significand[k * 9 + j] = least_digits % 10;\n                    least_digits = Math.floor(least_digits / 10);\n                }\n            }\n        }\n        if (is_zero) {\n            significand_digits = 1;\n            significand[index] = 0;\n        }\n        else {\n            significand_digits = 36;\n            while (!significand[index]) {\n                significand_digits = significand_digits - 1;\n                index = index + 1;\n            }\n        }\n        const scientific_exponent = significand_digits - 1 + exponent;\n        if (scientific_exponent >= 34 || scientific_exponent <= -7 || exponent > 0) {\n            if (significand_digits > 34) {\n                string.push(`${0}`);\n                if (exponent > 0)\n                    string.push(`E+${exponent}`);\n                else if (exponent < 0)\n                    string.push(`E${exponent}`);\n                return string.join('');\n            }\n            string.push(`${significand[index++]}`);\n            significand_digits = significand_digits - 1;\n            if (significand_digits) {\n                string.push('.');\n            }\n            for (let i = 0; i < significand_digits; i++) {\n                string.push(`${significand[index++]}`);\n            }\n            string.push('E');\n            if (scientific_exponent > 0) {\n                string.push(`+${scientific_exponent}`);\n            }\n            else {\n                string.push(`${scientific_exponent}`);\n            }\n        }\n        else {\n            if (exponent >= 0) {\n                for (let i = 0; i < significand_digits; i++) {\n                    string.push(`${significand[index++]}`);\n                }\n            }\n            else {\n                let radix_position = significand_digits + exponent;\n                if (radix_position > 0) {\n                    for (let i = 0; i < radix_position; i++) {\n                        string.push(`${significand[index++]}`);\n                    }\n                }\n                else {\n                    string.push('0');\n                }\n                string.push('.');\n                while (radix_position++ < 0) {\n                    string.push('0');\n                }\n                for (let i = 0; i < significand_digits - Math.max(radix_position - 1, 0); i++) {\n                    string.push(`${significand[index++]}`);\n                }\n            }\n        }\n        return string.join('');\n    }\n    toJSON() {\n        return { $numberDecimal: this.toString() };\n    }\n    toExtendedJSON() {\n        return { $numberDecimal: this.toString() };\n    }\n    static fromExtendedJSON(doc) {\n        return Decimal128.fromString(doc.$numberDecimal);\n    }\n    inspect(depth, options, inspect) {\n        inspect ??= defaultInspect;\n        const d128string = inspect(this.toString(), options);\n        return `new Decimal128(${d128string})`;\n    }\n}\n\nclass Double extends BSONValue {\n    get _bsontype() {\n        return 'Double';\n    }\n    constructor(value) {\n        super();\n        if (value instanceof Number) {\n            value = value.valueOf();\n        }\n        this.value = +value;\n    }\n    valueOf() {\n        return this.value;\n    }\n    toJSON() {\n        return this.value;\n    }\n    toString(radix) {\n        return this.value.toString(radix);\n    }\n    toExtendedJSON(options) {\n        if (options && (options.legacy || (options.relaxed && isFinite(this.value)))) {\n            return this.value;\n        }\n        if (Object.is(Math.sign(this.value), -0)) {\n            return { $numberDouble: '-0.0' };\n        }\n        return {\n            $numberDouble: Number.isInteger(this.value) ? this.value.toFixed(1) : this.value.toString()\n        };\n    }\n    static fromExtendedJSON(doc, options) {\n        const doubleValue = parseFloat(doc.$numberDouble);\n        return options && options.relaxed ? doubleValue : new Double(doubleValue);\n    }\n    inspect(depth, options, inspect) {\n        inspect ??= defaultInspect;\n        return `new Double(${inspect(this.value, options)})`;\n    }\n}\n\nclass Int32 extends BSONValue {\n    get _bsontype() {\n        return 'Int32';\n    }\n    constructor(value) {\n        super();\n        if (value instanceof Number) {\n            value = value.valueOf();\n        }\n        this.value = +value | 0;\n    }\n    valueOf() {\n        return this.value;\n    }\n    toString(radix) {\n        return this.value.toString(radix);\n    }\n    toJSON() {\n        return this.value;\n    }\n    toExtendedJSON(options) {\n        if (options && (options.relaxed || options.legacy))\n            return this.value;\n        return { $numberInt: this.value.toString() };\n    }\n    static fromExtendedJSON(doc, options) {\n        return options && options.relaxed ? parseInt(doc.$numberInt, 10) : new Int32(doc.$numberInt);\n    }\n    inspect(depth, options, inspect) {\n        inspect ??= defaultInspect;\n        return `new Int32(${inspect(this.value, options)})`;\n    }\n}\n\nclass MaxKey extends BSONValue {\n    get _bsontype() {\n        return 'MaxKey';\n    }\n    toExtendedJSON() {\n        return { $maxKey: 1 };\n    }\n    static fromExtendedJSON() {\n        return new MaxKey();\n    }\n    inspect() {\n        return 'new MaxKey()';\n    }\n}\n\nclass MinKey extends BSONValue {\n    get _bsontype() {\n        return 'MinKey';\n    }\n    toExtendedJSON() {\n        return { $minKey: 1 };\n    }\n    static fromExtendedJSON() {\n        return new MinKey();\n    }\n    inspect() {\n        return 'new MinKey()';\n    }\n}\n\nconst checkForHexRegExp = new RegExp('^[0-9a-fA-F]{24}$');\nlet PROCESS_UNIQUE = null;\nconst kId = Symbol('id');\nclass ObjectId extends BSONValue {\n    get _bsontype() {\n        return 'ObjectId';\n    }\n    constructor(inputId) {\n        super();\n        let workingId;\n        if (typeof inputId === 'object' && inputId && 'id' in inputId) {\n            if (typeof inputId.id !== 'string' && !ArrayBuffer.isView(inputId.id)) {\n                throw new BSONError('Argument passed in must have an id that is of type string or Buffer');\n            }\n            if ('toHexString' in inputId && typeof inputId.toHexString === 'function') {\n                workingId = ByteUtils.fromHex(inputId.toHexString());\n            }\n            else {\n                workingId = inputId.id;\n            }\n        }\n        else {\n            workingId = inputId;\n        }\n        if (workingId == null || typeof workingId === 'number') {\n            this[kId] = ObjectId.generate(typeof workingId === 'number' ? workingId : undefined);\n        }\n        else if (ArrayBuffer.isView(workingId) && workingId.byteLength === 12) {\n            this[kId] = ByteUtils.toLocalBufferType(workingId);\n        }\n        else if (typeof workingId === 'string') {\n            if (workingId.length === 24 && checkForHexRegExp.test(workingId)) {\n                this[kId] = ByteUtils.fromHex(workingId);\n            }\n            else {\n                throw new BSONError('input must be a 24 character hex string, 12 byte Uint8Array, or an integer');\n            }\n        }\n        else {\n            throw new BSONError('Argument passed in does not match the accepted types');\n        }\n        if (ObjectId.cacheHexString) {\n            this.__id = ByteUtils.toHex(this.id);\n        }\n    }\n    get id() {\n        return this[kId];\n    }\n    set id(value) {\n        this[kId] = value;\n        if (ObjectId.cacheHexString) {\n            this.__id = ByteUtils.toHex(value);\n        }\n    }\n    toHexString() {\n        if (ObjectId.cacheHexString && this.__id) {\n            return this.__id;\n        }\n        const hexString = ByteUtils.toHex(this.id);\n        if (ObjectId.cacheHexString && !this.__id) {\n            this.__id = hexString;\n        }\n        return hexString;\n    }\n    static getInc() {\n        return (ObjectId.index = (ObjectId.index + 1) % 0xffffff);\n    }\n    static generate(time) {\n        if ('number' !== typeof time) {\n            time = Math.floor(Date.now() / 1000);\n        }\n        const inc = ObjectId.getInc();\n        const buffer = ByteUtils.allocate(12);\n        BSONDataView.fromUint8Array(buffer).setUint32(0, time, false);\n        if (PROCESS_UNIQUE === null) {\n            PROCESS_UNIQUE = ByteUtils.randomBytes(5);\n        }\n        buffer[4] = PROCESS_UNIQUE[0];\n        buffer[5] = PROCESS_UNIQUE[1];\n        buffer[6] = PROCESS_UNIQUE[2];\n        buffer[7] = PROCESS_UNIQUE[3];\n        buffer[8] = PROCESS_UNIQUE[4];\n        buffer[11] = inc & 0xff;\n        buffer[10] = (inc >> 8) & 0xff;\n        buffer[9] = (inc >> 16) & 0xff;\n        return buffer;\n    }\n    toString(encoding) {\n        if (encoding === 'base64')\n            return ByteUtils.toBase64(this.id);\n        if (encoding === 'hex')\n            return this.toHexString();\n        return this.toHexString();\n    }\n    toJSON() {\n        return this.toHexString();\n    }\n    static is(variable) {\n        return (variable != null &&\n            typeof variable === 'object' &&\n            '_bsontype' in variable &&\n            variable._bsontype === 'ObjectId');\n    }\n    equals(otherId) {\n        if (otherId === undefined || otherId === null) {\n            return false;\n        }\n        if (ObjectId.is(otherId)) {\n            return this[kId][11] === otherId[kId][11] && ByteUtils.equals(this[kId], otherId[kId]);\n        }\n        if (typeof otherId === 'string') {\n            return otherId.toLowerCase() === this.toHexString();\n        }\n        if (typeof otherId === 'object' && typeof otherId.toHexString === 'function') {\n            const otherIdString = otherId.toHexString();\n            const thisIdString = this.toHexString();\n            return typeof otherIdString === 'string' && otherIdString.toLowerCase() === thisIdString;\n        }\n        return false;\n    }\n    getTimestamp() {\n        const timestamp = new Date();\n        const time = BSONDataView.fromUint8Array(this.id).getUint32(0, false);\n        timestamp.setTime(Math.floor(time) * 1000);\n        return timestamp;\n    }\n    static createPk() {\n        return new ObjectId();\n    }\n    static createFromTime(time) {\n        const buffer = ByteUtils.fromNumberArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\n        BSONDataView.fromUint8Array(buffer).setUint32(0, time, false);\n        return new ObjectId(buffer);\n    }\n    static createFromHexString(hexString) {\n        if (hexString?.length !== 24) {\n            throw new BSONError('hex string must be 24 characters');\n        }\n        return new ObjectId(ByteUtils.fromHex(hexString));\n    }\n    static createFromBase64(base64) {\n        if (base64?.length !== 16) {\n            throw new BSONError('base64 string must be 16 characters');\n        }\n        return new ObjectId(ByteUtils.fromBase64(base64));\n    }\n    static isValid(id) {\n        if (id == null)\n            return false;\n        try {\n            new ObjectId(id);\n            return true;\n        }\n        catch {\n            return false;\n        }\n    }\n    toExtendedJSON() {\n        if (this.toHexString)\n            return { $oid: this.toHexString() };\n        return { $oid: this.toString('hex') };\n    }\n    static fromExtendedJSON(doc) {\n        return new ObjectId(doc.$oid);\n    }\n    inspect(depth, options, inspect) {\n        inspect ??= defaultInspect;\n        return `new ObjectId(${inspect(this.toHexString(), options)})`;\n    }\n}\nObjectId.index = Math.floor(Math.random() * 0xffffff);\n\nfunction internalCalculateObjectSize(object, serializeFunctions, ignoreUndefined) {\n    let totalLength = 4 + 1;\n    if (Array.isArray(object)) {\n        for (let i = 0; i < object.length; i++) {\n            totalLength += calculateElement(i.toString(), object[i], serializeFunctions, true, ignoreUndefined);\n        }\n    }\n    else {\n        if (typeof object?.toBSON === 'function') {\n            object = object.toBSON();\n        }\n        for (const key of Object.keys(object)) {\n            totalLength += calculateElement(key, object[key], serializeFunctions, false, ignoreUndefined);\n        }\n    }\n    return totalLength;\n}\nfunction calculateElement(name, value, serializeFunctions = false, isArray = false, ignoreUndefined = false) {\n    if (typeof value?.toBSON === 'function') {\n        value = value.toBSON();\n    }\n    switch (typeof value) {\n        case 'string':\n            return 1 + ByteUtils.utf8ByteLength(name) + 1 + 4 + ByteUtils.utf8ByteLength(value) + 1;\n        case 'number':\n            if (Math.floor(value) === value &&\n                value >= JS_INT_MIN &&\n                value <= JS_INT_MAX) {\n                if (value >= BSON_INT32_MIN && value <= BSON_INT32_MAX) {\n                    return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (4 + 1);\n                }\n                else {\n                    return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (8 + 1);\n                }\n            }\n            else {\n                return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (8 + 1);\n            }\n        case 'undefined':\n            if (isArray || !ignoreUndefined)\n                return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + 1;\n            return 0;\n        case 'boolean':\n            return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (1 + 1);\n        case 'object':\n            if (value != null &&\n                typeof value._bsontype === 'string' &&\n                value[Symbol.for('@@mdb.bson.version')] !== BSON_MAJOR_VERSION) {\n                throw new BSONVersionError();\n            }\n            else if (value == null || value._bsontype === 'MinKey' || value._bsontype === 'MaxKey') {\n                return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + 1;\n            }\n            else if (value._bsontype === 'ObjectId') {\n                return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (12 + 1);\n            }\n            else if (value instanceof Date || isDate(value)) {\n                return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (8 + 1);\n            }\n            else if (ArrayBuffer.isView(value) ||\n                value instanceof ArrayBuffer ||\n                isAnyArrayBuffer(value)) {\n                return ((name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (1 + 4 + 1) + value.byteLength);\n            }\n            else if (value._bsontype === 'Long' ||\n                value._bsontype === 'Double' ||\n                value._bsontype === 'Timestamp') {\n                return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (8 + 1);\n            }\n            else if (value._bsontype === 'Decimal128') {\n                return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (16 + 1);\n            }\n            else if (value._bsontype === 'Code') {\n                if (value.scope != null && Object.keys(value.scope).length > 0) {\n                    return ((name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) +\n                        1 +\n                        4 +\n                        4 +\n                        ByteUtils.utf8ByteLength(value.code.toString()) +\n                        1 +\n                        internalCalculateObjectSize(value.scope, serializeFunctions, ignoreUndefined));\n                }\n                else {\n                    return ((name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) +\n                        1 +\n                        4 +\n                        ByteUtils.utf8ByteLength(value.code.toString()) +\n                        1);\n                }\n            }\n            else if (value._bsontype === 'Binary') {\n                const binary = value;\n                if (binary.sub_type === Binary.SUBTYPE_BYTE_ARRAY) {\n                    return ((name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) +\n                        (binary.position + 1 + 4 + 1 + 4));\n                }\n                else {\n                    return ((name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (binary.position + 1 + 4 + 1));\n                }\n            }\n            else if (value._bsontype === 'Symbol') {\n                return ((name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) +\n                    ByteUtils.utf8ByteLength(value.value) +\n                    4 +\n                    1 +\n                    1);\n            }\n            else if (value._bsontype === 'DBRef') {\n                const ordered_values = Object.assign({\n                    $ref: value.collection,\n                    $id: value.oid\n                }, value.fields);\n                if (value.db != null) {\n                    ordered_values['$db'] = value.db;\n                }\n                return ((name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) +\n                    1 +\n                    internalCalculateObjectSize(ordered_values, serializeFunctions, ignoreUndefined));\n            }\n            else if (value instanceof RegExp || isRegExp(value)) {\n                return ((name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) +\n                    1 +\n                    ByteUtils.utf8ByteLength(value.source) +\n                    1 +\n                    (value.global ? 1 : 0) +\n                    (value.ignoreCase ? 1 : 0) +\n                    (value.multiline ? 1 : 0) +\n                    1);\n            }\n            else if (value._bsontype === 'BSONRegExp') {\n                return ((name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) +\n                    1 +\n                    ByteUtils.utf8ByteLength(value.pattern) +\n                    1 +\n                    ByteUtils.utf8ByteLength(value.options) +\n                    1);\n            }\n            else {\n                return ((name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) +\n                    internalCalculateObjectSize(value, serializeFunctions, ignoreUndefined) +\n                    1);\n            }\n        case 'function':\n            if (serializeFunctions) {\n                return ((name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) +\n                    1 +\n                    4 +\n                    ByteUtils.utf8ByteLength(value.toString()) +\n                    1);\n            }\n    }\n    return 0;\n}\n\nfunction alphabetize(str) {\n    return str.split('').sort().join('');\n}\nclass BSONRegExp extends BSONValue {\n    get _bsontype() {\n        return 'BSONRegExp';\n    }\n    constructor(pattern, options) {\n        super();\n        this.pattern = pattern;\n        this.options = alphabetize(options ?? '');\n        if (this.pattern.indexOf('\\x00') !== -1) {\n            throw new BSONError(`BSON Regex patterns cannot contain null bytes, found: ${JSON.stringify(this.pattern)}`);\n        }\n        if (this.options.indexOf('\\x00') !== -1) {\n            throw new BSONError(`BSON Regex options cannot contain null bytes, found: ${JSON.stringify(this.options)}`);\n        }\n        for (let i = 0; i < this.options.length; i++) {\n            if (!(this.options[i] === 'i' ||\n                this.options[i] === 'm' ||\n                this.options[i] === 'x' ||\n                this.options[i] === 'l' ||\n                this.options[i] === 's' ||\n                this.options[i] === 'u')) {\n                throw new BSONError(`The regular expression option [${this.options[i]}] is not supported`);\n            }\n        }\n    }\n    static parseOptions(options) {\n        return options ? options.split('').sort().join('') : '';\n    }\n    toExtendedJSON(options) {\n        options = options || {};\n        if (options.legacy) {\n            return { $regex: this.pattern, $options: this.options };\n        }\n        return { $regularExpression: { pattern: this.pattern, options: this.options } };\n    }\n    static fromExtendedJSON(doc) {\n        if ('$regex' in doc) {\n            if (typeof doc.$regex !== 'string') {\n                if (doc.$regex._bsontype === 'BSONRegExp') {\n                    return doc;\n                }\n            }\n            else {\n                return new BSONRegExp(doc.$regex, BSONRegExp.parseOptions(doc.$options));\n            }\n        }\n        if ('$regularExpression' in doc) {\n            return new BSONRegExp(doc.$regularExpression.pattern, BSONRegExp.parseOptions(doc.$regularExpression.options));\n        }\n        throw new BSONError(`Unexpected BSONRegExp EJSON object form: ${JSON.stringify(doc)}`);\n    }\n    inspect(depth, options, inspect) {\n        const stylize = getStylizeFunction(options) ?? (v => v);\n        inspect ??= defaultInspect;\n        const pattern = stylize(inspect(this.pattern), 'regexp');\n        const flags = stylize(inspect(this.options), 'regexp');\n        return `new BSONRegExp(${pattern}, ${flags})`;\n    }\n}\n\nclass BSONSymbol extends BSONValue {\n    get _bsontype() {\n        return 'BSONSymbol';\n    }\n    constructor(value) {\n        super();\n        this.value = value;\n    }\n    valueOf() {\n        return this.value;\n    }\n    toString() {\n        return this.value;\n    }\n    toJSON() {\n        return this.value;\n    }\n    toExtendedJSON() {\n        return { $symbol: this.value };\n    }\n    static fromExtendedJSON(doc) {\n        return new BSONSymbol(doc.$symbol);\n    }\n    inspect(depth, options, inspect) {\n        inspect ??= defaultInspect;\n        return `new BSONSymbol(${inspect(this.value, options)})`;\n    }\n}\n\nconst LongWithoutOverridesClass = Long;\nclass Timestamp extends LongWithoutOverridesClass {\n    get _bsontype() {\n        return 'Timestamp';\n    }\n    constructor(low) {\n        if (low == null) {\n            super(0, 0, true);\n        }\n        else if (typeof low === 'bigint') {\n            super(low, true);\n        }\n        else if (Long.isLong(low)) {\n            super(low.low, low.high, true);\n        }\n        else if (typeof low === 'object' && 't' in low && 'i' in low) {\n            if (typeof low.t !== 'number' && (typeof low.t !== 'object' || low.t._bsontype !== 'Int32')) {\n                throw new BSONError('Timestamp constructed from { t, i } must provide t as a number');\n            }\n            if (typeof low.i !== 'number' && (typeof low.i !== 'object' || low.i._bsontype !== 'Int32')) {\n                throw new BSONError('Timestamp constructed from { t, i } must provide i as a number');\n            }\n            const t = Number(low.t);\n            const i = Number(low.i);\n            if (t < 0 || Number.isNaN(t)) {\n                throw new BSONError('Timestamp constructed from { t, i } must provide a positive t');\n            }\n            if (i < 0 || Number.isNaN(i)) {\n                throw new BSONError('Timestamp constructed from { t, i } must provide a positive i');\n            }\n            if (t > 4294967295) {\n                throw new BSONError('Timestamp constructed from { t, i } must provide t equal or less than uint32 max');\n            }\n            if (i > 4294967295) {\n                throw new BSONError('Timestamp constructed from { t, i } must provide i equal or less than uint32 max');\n            }\n            super(i, t, true);\n        }\n        else {\n            throw new BSONError('A Timestamp can only be constructed with: bigint, Long, or { t: number; i: number }');\n        }\n    }\n    toJSON() {\n        return {\n            $timestamp: this.toString()\n        };\n    }\n    static fromInt(value) {\n        return new Timestamp(Long.fromInt(value, true));\n    }\n    static fromNumber(value) {\n        return new Timestamp(Long.fromNumber(value, true));\n    }\n    static fromBits(lowBits, highBits) {\n        return new Timestamp({ i: lowBits, t: highBits });\n    }\n    static fromString(str, optRadix) {\n        return new Timestamp(Long.fromString(str, true, optRadix));\n    }\n    toExtendedJSON() {\n        return { $timestamp: { t: this.high >>> 0, i: this.low >>> 0 } };\n    }\n    static fromExtendedJSON(doc) {\n        const i = Long.isLong(doc.$timestamp.i)\n            ? doc.$timestamp.i.getLowBitsUnsigned()\n            : doc.$timestamp.i;\n        const t = Long.isLong(doc.$timestamp.t)\n            ? doc.$timestamp.t.getLowBitsUnsigned()\n            : doc.$timestamp.t;\n        return new Timestamp({ t, i });\n    }\n    inspect(depth, options, inspect) {\n        inspect ??= defaultInspect;\n        const t = inspect(this.high >>> 0, options);\n        const i = inspect(this.low >>> 0, options);\n        return `new Timestamp({ t: ${t}, i: ${i} })`;\n    }\n}\nTimestamp.MAX_VALUE = Long.MAX_UNSIGNED_VALUE;\n\nconst FIRST_BIT = 0x80;\nconst FIRST_TWO_BITS = 0xc0;\nconst FIRST_THREE_BITS = 0xe0;\nconst FIRST_FOUR_BITS = 0xf0;\nconst FIRST_FIVE_BITS = 0xf8;\nconst TWO_BIT_CHAR = 0xc0;\nconst THREE_BIT_CHAR = 0xe0;\nconst FOUR_BIT_CHAR = 0xf0;\nconst CONTINUING_CHAR = 0x80;\nfunction validateUtf8(bytes, start, end) {\n    let continuation = 0;\n    for (let i = start; i < end; i += 1) {\n        const byte = bytes[i];\n        if (continuation) {\n            if ((byte & FIRST_TWO_BITS) !== CONTINUING_CHAR) {\n                return false;\n            }\n            continuation -= 1;\n        }\n        else if (byte & FIRST_BIT) {\n            if ((byte & FIRST_THREE_BITS) === TWO_BIT_CHAR) {\n                continuation = 1;\n            }\n            else if ((byte & FIRST_FOUR_BITS) === THREE_BIT_CHAR) {\n                continuation = 2;\n            }\n            else if ((byte & FIRST_FIVE_BITS) === FOUR_BIT_CHAR) {\n                continuation = 3;\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    return !continuation;\n}\n\nconst JS_INT_MAX_LONG = Long.fromNumber(JS_INT_MAX);\nconst JS_INT_MIN_LONG = Long.fromNumber(JS_INT_MIN);\nfunction internalDeserialize(buffer, options, isArray) {\n    options = options == null ? {} : options;\n    const index = options && options.index ? options.index : 0;\n    const size = buffer[index] |\n        (buffer[index + 1] << 8) |\n        (buffer[index + 2] << 16) |\n        (buffer[index + 3] << 24);\n    if (size < 5) {\n        throw new BSONError(`bson size must be >= 5, is ${size}`);\n    }\n    if (options.allowObjectSmallerThanBufferSize && buffer.length < size) {\n        throw new BSONError(`buffer length ${buffer.length} must be >= bson size ${size}`);\n    }\n    if (!options.allowObjectSmallerThanBufferSize && buffer.length !== size) {\n        throw new BSONError(`buffer length ${buffer.length} must === bson size ${size}`);\n    }\n    if (size + index > buffer.byteLength) {\n        throw new BSONError(`(bson size ${size} + options.index ${index} must be <= buffer length ${buffer.byteLength})`);\n    }\n    if (buffer[index + size - 1] !== 0) {\n        throw new BSONError(\"One object, sized correctly, with a spot for an EOO, but the EOO isn't 0x00\");\n    }\n    return deserializeObject(buffer, index, options, isArray);\n}\nconst allowedDBRefKeys = /^\\$ref$|^\\$id$|^\\$db$/;\nfunction deserializeObject(buffer, index, options, isArray = false) {\n    const fieldsAsRaw = options['fieldsAsRaw'] == null ? null : options['fieldsAsRaw'];\n    const raw = options['raw'] == null ? false : options['raw'];\n    const bsonRegExp = typeof options['bsonRegExp'] === 'boolean' ? options['bsonRegExp'] : false;\n    const promoteBuffers = options.promoteBuffers ?? false;\n    const promoteLongs = options.promoteLongs ?? true;\n    const promoteValues = options.promoteValues ?? true;\n    const useBigInt64 = options.useBigInt64 ?? false;\n    if (useBigInt64 && !promoteValues) {\n        throw new BSONError('Must either request bigint or Long for int64 deserialization');\n    }\n    if (useBigInt64 && !promoteLongs) {\n        throw new BSONError('Must either request bigint or Long for int64 deserialization');\n    }\n    const validation = options.validation == null ? { utf8: true } : options.validation;\n    let globalUTFValidation = true;\n    let validationSetting;\n    const utf8KeysSet = new Set();\n    const utf8ValidatedKeys = validation.utf8;\n    if (typeof utf8ValidatedKeys === 'boolean') {\n        validationSetting = utf8ValidatedKeys;\n    }\n    else {\n        globalUTFValidation = false;\n        const utf8ValidationValues = Object.keys(utf8ValidatedKeys).map(function (key) {\n            return utf8ValidatedKeys[key];\n        });\n        if (utf8ValidationValues.length === 0) {\n            throw new BSONError('UTF-8 validation setting cannot be empty');\n        }\n        if (typeof utf8ValidationValues[0] !== 'boolean') {\n            throw new BSONError('Invalid UTF-8 validation option, must specify boolean values');\n        }\n        validationSetting = utf8ValidationValues[0];\n        if (!utf8ValidationValues.every(item => item === validationSetting)) {\n            throw new BSONError('Invalid UTF-8 validation option - keys must be all true or all false');\n        }\n    }\n    if (!globalUTFValidation) {\n        for (const key of Object.keys(utf8ValidatedKeys)) {\n            utf8KeysSet.add(key);\n        }\n    }\n    const startIndex = index;\n    if (buffer.length < 5)\n        throw new BSONError('corrupt bson message < 5 bytes long');\n    const size = buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24);\n    if (size < 5 || size > buffer.length)\n        throw new BSONError('corrupt bson message');\n    const object = isArray ? [] : {};\n    let arrayIndex = 0;\n    const done = false;\n    let isPossibleDBRef = isArray ? false : null;\n    const dataview = new DataView(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n    while (!done) {\n        const elementType = buffer[index++];\n        if (elementType === 0)\n            break;\n        let i = index;\n        while (buffer[i] !== 0x00 && i < buffer.length) {\n            i++;\n        }\n        if (i >= buffer.byteLength)\n            throw new BSONError('Bad BSON Document: illegal CString');\n        const name = isArray ? arrayIndex++ : ByteUtils.toUTF8(buffer, index, i);\n        let shouldValidateKey = true;\n        if (globalUTFValidation || utf8KeysSet.has(name)) {\n            shouldValidateKey = validationSetting;\n        }\n        else {\n            shouldValidateKey = !validationSetting;\n        }\n        if (isPossibleDBRef !== false && name[0] === '$') {\n            isPossibleDBRef = allowedDBRefKeys.test(name);\n        }\n        let value;\n        index = i + 1;\n        if (elementType === BSON_DATA_STRING) {\n            const stringSize = buffer[index++] |\n                (buffer[index++] << 8) |\n                (buffer[index++] << 16) |\n                (buffer[index++] << 24);\n            if (stringSize <= 0 ||\n                stringSize > buffer.length - index ||\n                buffer[index + stringSize - 1] !== 0) {\n                throw new BSONError('bad string length in bson');\n            }\n            value = getValidatedString(buffer, index, index + stringSize - 1, shouldValidateKey);\n            index = index + stringSize;\n        }\n        else if (elementType === BSON_DATA_OID) {\n            const oid = ByteUtils.allocate(12);\n            oid.set(buffer.subarray(index, index + 12));\n            value = new ObjectId(oid);\n            index = index + 12;\n        }\n        else if (elementType === BSON_DATA_INT && promoteValues === false) {\n            value = new Int32(buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24));\n        }\n        else if (elementType === BSON_DATA_INT) {\n            value =\n                buffer[index++] |\n                    (buffer[index++] << 8) |\n                    (buffer[index++] << 16) |\n                    (buffer[index++] << 24);\n        }\n        else if (elementType === BSON_DATA_NUMBER && promoteValues === false) {\n            value = new Double(dataview.getFloat64(index, true));\n            index = index + 8;\n        }\n        else if (elementType === BSON_DATA_NUMBER) {\n            value = dataview.getFloat64(index, true);\n            index = index + 8;\n        }\n        else if (elementType === BSON_DATA_DATE) {\n            const lowBits = buffer[index++] |\n                (buffer[index++] << 8) |\n                (buffer[index++] << 16) |\n                (buffer[index++] << 24);\n            const highBits = buffer[index++] |\n                (buffer[index++] << 8) |\n                (buffer[index++] << 16) |\n                (buffer[index++] << 24);\n            value = new Date(new Long(lowBits, highBits).toNumber());\n        }\n        else if (elementType === BSON_DATA_BOOLEAN) {\n            if (buffer[index] !== 0 && buffer[index] !== 1)\n                throw new BSONError('illegal boolean type value');\n            value = buffer[index++] === 1;\n        }\n        else if (elementType === BSON_DATA_OBJECT) {\n            const _index = index;\n            const objectSize = buffer[index] |\n                (buffer[index + 1] << 8) |\n                (buffer[index + 2] << 16) |\n                (buffer[index + 3] << 24);\n            if (objectSize <= 0 || objectSize > buffer.length - index)\n                throw new BSONError('bad embedded document length in bson');\n            if (raw) {\n                value = buffer.slice(index, index + objectSize);\n            }\n            else {\n                let objectOptions = options;\n                if (!globalUTFValidation) {\n                    objectOptions = { ...options, validation: { utf8: shouldValidateKey } };\n                }\n                value = deserializeObject(buffer, _index, objectOptions, false);\n            }\n            index = index + objectSize;\n        }\n        else if (elementType === BSON_DATA_ARRAY) {\n            const _index = index;\n            const objectSize = buffer[index] |\n                (buffer[index + 1] << 8) |\n                (buffer[index + 2] << 16) |\n                (buffer[index + 3] << 24);\n            let arrayOptions = options;\n            const stopIndex = index + objectSize;\n            if (fieldsAsRaw && fieldsAsRaw[name]) {\n                arrayOptions = { ...options, raw: true };\n            }\n            if (!globalUTFValidation) {\n                arrayOptions = { ...arrayOptions, validation: { utf8: shouldValidateKey } };\n            }\n            value = deserializeObject(buffer, _index, arrayOptions, true);\n            index = index + objectSize;\n            if (buffer[index - 1] !== 0)\n                throw new BSONError('invalid array terminator byte');\n            if (index !== stopIndex)\n                throw new BSONError('corrupted array bson');\n        }\n        else if (elementType === BSON_DATA_UNDEFINED) {\n            value = undefined;\n        }\n        else if (elementType === BSON_DATA_NULL) {\n            value = null;\n        }\n        else if (elementType === BSON_DATA_LONG) {\n            const dataview = BSONDataView.fromUint8Array(buffer.subarray(index, index + 8));\n            const lowBits = buffer[index++] |\n                (buffer[index++] << 8) |\n                (buffer[index++] << 16) |\n                (buffer[index++] << 24);\n            const highBits = buffer[index++] |\n                (buffer[index++] << 8) |\n                (buffer[index++] << 16) |\n                (buffer[index++] << 24);\n            const long = new Long(lowBits, highBits);\n            if (useBigInt64) {\n                value = dataview.getBigInt64(0, true);\n            }\n            else if (promoteLongs && promoteValues === true) {\n                value =\n                    long.lessThanOrEqual(JS_INT_MAX_LONG) && long.greaterThanOrEqual(JS_INT_MIN_LONG)\n                        ? long.toNumber()\n                        : long;\n            }\n            else {\n                value = long;\n            }\n        }\n        else if (elementType === BSON_DATA_DECIMAL128) {\n            const bytes = ByteUtils.allocate(16);\n            bytes.set(buffer.subarray(index, index + 16), 0);\n            index = index + 16;\n            value = new Decimal128(bytes);\n        }\n        else if (elementType === BSON_DATA_BINARY) {\n            let binarySize = buffer[index++] |\n                (buffer[index++] << 8) |\n                (buffer[index++] << 16) |\n                (buffer[index++] << 24);\n            const totalBinarySize = binarySize;\n            const subType = buffer[index++];\n            if (binarySize < 0)\n                throw new BSONError('Negative binary type element size found');\n            if (binarySize > buffer.byteLength)\n                throw new BSONError('Binary type size larger than document size');\n            if (buffer['slice'] != null) {\n                if (subType === Binary.SUBTYPE_BYTE_ARRAY) {\n                    binarySize =\n                        buffer[index++] |\n                            (buffer[index++] << 8) |\n                            (buffer[index++] << 16) |\n                            (buffer[index++] << 24);\n                    if (binarySize < 0)\n                        throw new BSONError('Negative binary type element size found for subtype 0x02');\n                    if (binarySize > totalBinarySize - 4)\n                        throw new BSONError('Binary type with subtype 0x02 contains too long binary size');\n                    if (binarySize < totalBinarySize - 4)\n                        throw new BSONError('Binary type with subtype 0x02 contains too short binary size');\n                }\n                if (promoteBuffers && promoteValues) {\n                    value = ByteUtils.toLocalBufferType(buffer.slice(index, index + binarySize));\n                }\n                else {\n                    value = new Binary(buffer.slice(index, index + binarySize), subType);\n                    if (subType === BSON_BINARY_SUBTYPE_UUID_NEW && UUID.isValid(value)) {\n                        value = value.toUUID();\n                    }\n                }\n            }\n            else {\n                const _buffer = ByteUtils.allocate(binarySize);\n                if (subType === Binary.SUBTYPE_BYTE_ARRAY) {\n                    binarySize =\n                        buffer[index++] |\n                            (buffer[index++] << 8) |\n                            (buffer[index++] << 16) |\n                            (buffer[index++] << 24);\n                    if (binarySize < 0)\n                        throw new BSONError('Negative binary type element size found for subtype 0x02');\n                    if (binarySize > totalBinarySize - 4)\n                        throw new BSONError('Binary type with subtype 0x02 contains too long binary size');\n                    if (binarySize < totalBinarySize - 4)\n                        throw new BSONError('Binary type with subtype 0x02 contains too short binary size');\n                }\n                for (i = 0; i < binarySize; i++) {\n                    _buffer[i] = buffer[index + i];\n                }\n                if (promoteBuffers && promoteValues) {\n                    value = _buffer;\n                }\n                else {\n                    value = new Binary(buffer.slice(index, index + binarySize), subType);\n                    if (subType === BSON_BINARY_SUBTYPE_UUID_NEW && UUID.isValid(value)) {\n                        value = value.toUUID();\n                    }\n                }\n            }\n            index = index + binarySize;\n        }\n        else if (elementType === BSON_DATA_REGEXP && bsonRegExp === false) {\n            i = index;\n            while (buffer[i] !== 0x00 && i < buffer.length) {\n                i++;\n            }\n            if (i >= buffer.length)\n                throw new BSONError('Bad BSON Document: illegal CString');\n            const source = ByteUtils.toUTF8(buffer, index, i);\n            index = i + 1;\n            i = index;\n            while (buffer[i] !== 0x00 && i < buffer.length) {\n                i++;\n            }\n            if (i >= buffer.length)\n                throw new BSONError('Bad BSON Document: illegal CString');\n            const regExpOptions = ByteUtils.toUTF8(buffer, index, i);\n            index = i + 1;\n            const optionsArray = new Array(regExpOptions.length);\n            for (i = 0; i < regExpOptions.length; i++) {\n                switch (regExpOptions[i]) {\n                    case 'm':\n                        optionsArray[i] = 'm';\n                        break;\n                    case 's':\n                        optionsArray[i] = 'g';\n                        break;\n                    case 'i':\n                        optionsArray[i] = 'i';\n                        break;\n                }\n            }\n            value = new RegExp(source, optionsArray.join(''));\n        }\n        else if (elementType === BSON_DATA_REGEXP && bsonRegExp === true) {\n            i = index;\n            while (buffer[i] !== 0x00 && i < buffer.length) {\n                i++;\n            }\n            if (i >= buffer.length)\n                throw new BSONError('Bad BSON Document: illegal CString');\n            const source = ByteUtils.toUTF8(buffer, index, i);\n            index = i + 1;\n            i = index;\n            while (buffer[i] !== 0x00 && i < buffer.length) {\n                i++;\n            }\n            if (i >= buffer.length)\n                throw new BSONError('Bad BSON Document: illegal CString');\n            const regExpOptions = ByteUtils.toUTF8(buffer, index, i);\n            index = i + 1;\n            value = new BSONRegExp(source, regExpOptions);\n        }\n        else if (elementType === BSON_DATA_SYMBOL) {\n            const stringSize = buffer[index++] |\n                (buffer[index++] << 8) |\n                (buffer[index++] << 16) |\n                (buffer[index++] << 24);\n            if (stringSize <= 0 ||\n                stringSize > buffer.length - index ||\n                buffer[index + stringSize - 1] !== 0) {\n                throw new BSONError('bad string length in bson');\n            }\n            const symbol = getValidatedString(buffer, index, index + stringSize - 1, shouldValidateKey);\n            value = promoteValues ? symbol : new BSONSymbol(symbol);\n            index = index + stringSize;\n        }\n        else if (elementType === BSON_DATA_TIMESTAMP) {\n            const i = buffer[index++] +\n                buffer[index++] * (1 << 8) +\n                buffer[index++] * (1 << 16) +\n                buffer[index++] * (1 << 24);\n            const t = buffer[index++] +\n                buffer[index++] * (1 << 8) +\n                buffer[index++] * (1 << 16) +\n                buffer[index++] * (1 << 24);\n            value = new Timestamp({ i, t });\n        }\n        else if (elementType === BSON_DATA_MIN_KEY) {\n            value = new MinKey();\n        }\n        else if (elementType === BSON_DATA_MAX_KEY) {\n            value = new MaxKey();\n        }\n        else if (elementType === BSON_DATA_CODE) {\n            const stringSize = buffer[index++] |\n                (buffer[index++] << 8) |\n                (buffer[index++] << 16) |\n                (buffer[index++] << 24);\n            if (stringSize <= 0 ||\n                stringSize > buffer.length - index ||\n                buffer[index + stringSize - 1] !== 0) {\n                throw new BSONError('bad string length in bson');\n            }\n            const functionString = getValidatedString(buffer, index, index + stringSize - 1, shouldValidateKey);\n            value = new Code(functionString);\n            index = index + stringSize;\n        }\n        else if (elementType === BSON_DATA_CODE_W_SCOPE) {\n            const totalSize = buffer[index++] |\n                (buffer[index++] << 8) |\n                (buffer[index++] << 16) |\n                (buffer[index++] << 24);\n            if (totalSize < 4 + 4 + 4 + 1) {\n                throw new BSONError('code_w_scope total size shorter minimum expected length');\n            }\n            const stringSize = buffer[index++] |\n                (buffer[index++] << 8) |\n                (buffer[index++] << 16) |\n                (buffer[index++] << 24);\n            if (stringSize <= 0 ||\n                stringSize > buffer.length - index ||\n                buffer[index + stringSize - 1] !== 0) {\n                throw new BSONError('bad string length in bson');\n            }\n            const functionString = getValidatedString(buffer, index, index + stringSize - 1, shouldValidateKey);\n            index = index + stringSize;\n            const _index = index;\n            const objectSize = buffer[index] |\n                (buffer[index + 1] << 8) |\n                (buffer[index + 2] << 16) |\n                (buffer[index + 3] << 24);\n            const scopeObject = deserializeObject(buffer, _index, options, false);\n            index = index + objectSize;\n            if (totalSize < 4 + 4 + objectSize + stringSize) {\n                throw new BSONError('code_w_scope total size is too short, truncating scope');\n            }\n            if (totalSize > 4 + 4 + objectSize + stringSize) {\n                throw new BSONError('code_w_scope total size is too long, clips outer document');\n            }\n            value = new Code(functionString, scopeObject);\n        }\n        else if (elementType === BSON_DATA_DBPOINTER) {\n            const stringSize = buffer[index++] |\n                (buffer[index++] << 8) |\n                (buffer[index++] << 16) |\n                (buffer[index++] << 24);\n            if (stringSize <= 0 ||\n                stringSize > buffer.length - index ||\n                buffer[index + stringSize - 1] !== 0)\n                throw new BSONError('bad string length in bson');\n            if (validation != null && validation.utf8) {\n                if (!validateUtf8(buffer, index, index + stringSize - 1)) {\n                    throw new BSONError('Invalid UTF-8 string in BSON document');\n                }\n            }\n            const namespace = ByteUtils.toUTF8(buffer, index, index + stringSize - 1);\n            index = index + stringSize;\n            const oidBuffer = ByteUtils.allocate(12);\n            oidBuffer.set(buffer.subarray(index, index + 12), 0);\n            const oid = new ObjectId(oidBuffer);\n            index = index + 12;\n            value = new DBRef(namespace, oid);\n        }\n        else {\n            throw new BSONError(`Detected unknown BSON type ${elementType.toString(16)} for fieldname \"${name}\"`);\n        }\n        if (name === '__proto__') {\n            Object.defineProperty(object, name, {\n                value,\n                writable: true,\n                enumerable: true,\n                configurable: true\n            });\n        }\n        else {\n            object[name] = value;\n        }\n    }\n    if (size !== index - startIndex) {\n        if (isArray)\n            throw new BSONError('corrupt array bson');\n        throw new BSONError('corrupt object bson');\n    }\n    if (!isPossibleDBRef)\n        return object;\n    if (isDBRefLike(object)) {\n        const copy = Object.assign({}, object);\n        delete copy.$ref;\n        delete copy.$id;\n        delete copy.$db;\n        return new DBRef(object.$ref, object.$id, object.$db, copy);\n    }\n    return object;\n}\nfunction getValidatedString(buffer, start, end, shouldValidateUtf8) {\n    const value = ByteUtils.toUTF8(buffer, start, end);\n    if (shouldValidateUtf8) {\n        for (let i = 0; i < value.length; i++) {\n            if (value.charCodeAt(i) === 0xfffd) {\n                if (!validateUtf8(buffer, start, end)) {\n                    throw new BSONError('Invalid UTF-8 string in BSON document');\n                }\n                break;\n            }\n        }\n    }\n    return value;\n}\n\nconst regexp = /\\x00/;\nconst ignoreKeys = new Set(['$db', '$ref', '$id', '$clusterTime']);\nfunction serializeString(buffer, key, value, index) {\n    buffer[index++] = BSON_DATA_STRING;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes + 1;\n    buffer[index - 1] = 0;\n    const size = ByteUtils.encodeUTF8Into(buffer, value, index + 4);\n    buffer[index + 3] = ((size + 1) >> 24) & 0xff;\n    buffer[index + 2] = ((size + 1) >> 16) & 0xff;\n    buffer[index + 1] = ((size + 1) >> 8) & 0xff;\n    buffer[index] = (size + 1) & 0xff;\n    index = index + 4 + size;\n    buffer[index++] = 0;\n    return index;\n}\nconst NUMBER_SPACE = new DataView(new ArrayBuffer(8), 0, 8);\nconst FOUR_BYTE_VIEW_ON_NUMBER = new Uint8Array(NUMBER_SPACE.buffer, 0, 4);\nconst EIGHT_BYTE_VIEW_ON_NUMBER = new Uint8Array(NUMBER_SPACE.buffer, 0, 8);\nfunction serializeNumber(buffer, key, value, index) {\n    const isNegativeZero = Object.is(value, -0);\n    const type = !isNegativeZero &&\n        Number.isSafeInteger(value) &&\n        value <= BSON_INT32_MAX &&\n        value >= BSON_INT32_MIN\n        ? BSON_DATA_INT\n        : BSON_DATA_NUMBER;\n    if (type === BSON_DATA_INT) {\n        NUMBER_SPACE.setInt32(0, value, true);\n    }\n    else {\n        NUMBER_SPACE.setFloat64(0, value, true);\n    }\n    const bytes = type === BSON_DATA_INT ? FOUR_BYTE_VIEW_ON_NUMBER : EIGHT_BYTE_VIEW_ON_NUMBER;\n    buffer[index++] = type;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0x00;\n    buffer.set(bytes, index);\n    index += bytes.byteLength;\n    return index;\n}\nfunction serializeBigInt(buffer, key, value, index) {\n    buffer[index++] = BSON_DATA_LONG;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index += numberOfWrittenBytes;\n    buffer[index++] = 0;\n    NUMBER_SPACE.setBigInt64(0, value, true);\n    buffer.set(EIGHT_BYTE_VIEW_ON_NUMBER, index);\n    index += EIGHT_BYTE_VIEW_ON_NUMBER.byteLength;\n    return index;\n}\nfunction serializeNull(buffer, key, _, index) {\n    buffer[index++] = BSON_DATA_NULL;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    return index;\n}\nfunction serializeBoolean(buffer, key, value, index) {\n    buffer[index++] = BSON_DATA_BOOLEAN;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    buffer[index++] = value ? 1 : 0;\n    return index;\n}\nfunction serializeDate(buffer, key, value, index) {\n    buffer[index++] = BSON_DATA_DATE;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    const dateInMilis = Long.fromNumber(value.getTime());\n    const lowBits = dateInMilis.getLowBits();\n    const highBits = dateInMilis.getHighBits();\n    buffer[index++] = lowBits & 0xff;\n    buffer[index++] = (lowBits >> 8) & 0xff;\n    buffer[index++] = (lowBits >> 16) & 0xff;\n    buffer[index++] = (lowBits >> 24) & 0xff;\n    buffer[index++] = highBits & 0xff;\n    buffer[index++] = (highBits >> 8) & 0xff;\n    buffer[index++] = (highBits >> 16) & 0xff;\n    buffer[index++] = (highBits >> 24) & 0xff;\n    return index;\n}\nfunction serializeRegExp(buffer, key, value, index) {\n    buffer[index++] = BSON_DATA_REGEXP;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    if (value.source && value.source.match(regexp) != null) {\n        throw new BSONError('value ' + value.source + ' must not contain null bytes');\n    }\n    index = index + ByteUtils.encodeUTF8Into(buffer, value.source, index);\n    buffer[index++] = 0x00;\n    if (value.ignoreCase)\n        buffer[index++] = 0x69;\n    if (value.global)\n        buffer[index++] = 0x73;\n    if (value.multiline)\n        buffer[index++] = 0x6d;\n    buffer[index++] = 0x00;\n    return index;\n}\nfunction serializeBSONRegExp(buffer, key, value, index) {\n    buffer[index++] = BSON_DATA_REGEXP;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    if (value.pattern.match(regexp) != null) {\n        throw new BSONError('pattern ' + value.pattern + ' must not contain null bytes');\n    }\n    index = index + ByteUtils.encodeUTF8Into(buffer, value.pattern, index);\n    buffer[index++] = 0x00;\n    const sortedOptions = value.options.split('').sort().join('');\n    index = index + ByteUtils.encodeUTF8Into(buffer, sortedOptions, index);\n    buffer[index++] = 0x00;\n    return index;\n}\nfunction serializeMinMax(buffer, key, value, index) {\n    if (value === null) {\n        buffer[index++] = BSON_DATA_NULL;\n    }\n    else if (value._bsontype === 'MinKey') {\n        buffer[index++] = BSON_DATA_MIN_KEY;\n    }\n    else {\n        buffer[index++] = BSON_DATA_MAX_KEY;\n    }\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    return index;\n}\nfunction serializeObjectId(buffer, key, value, index) {\n    buffer[index++] = BSON_DATA_OID;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    const idValue = value.id;\n    if (isUint8Array(idValue)) {\n        for (let i = 0; i < 12; i++) {\n            buffer[index++] = idValue[i];\n        }\n    }\n    else {\n        throw new BSONError('object [' + JSON.stringify(value) + '] is not a valid ObjectId');\n    }\n    return index;\n}\nfunction serializeBuffer(buffer, key, value, index) {\n    buffer[index++] = BSON_DATA_BINARY;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    const size = value.length;\n    buffer[index++] = size & 0xff;\n    buffer[index++] = (size >> 8) & 0xff;\n    buffer[index++] = (size >> 16) & 0xff;\n    buffer[index++] = (size >> 24) & 0xff;\n    buffer[index++] = BSON_BINARY_SUBTYPE_DEFAULT;\n    buffer.set(value, index);\n    index = index + size;\n    return index;\n}\nfunction serializeObject(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, path) {\n    if (path.has(value)) {\n        throw new BSONError('Cannot convert circular structure to BSON');\n    }\n    path.add(value);\n    buffer[index++] = Array.isArray(value) ? BSON_DATA_ARRAY : BSON_DATA_OBJECT;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    const endIndex = serializeInto(buffer, value, checkKeys, index, depth + 1, serializeFunctions, ignoreUndefined, path);\n    path.delete(value);\n    return endIndex;\n}\nfunction serializeDecimal128(buffer, key, value, index) {\n    buffer[index++] = BSON_DATA_DECIMAL128;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    buffer.set(value.bytes.subarray(0, 16), index);\n    return index + 16;\n}\nfunction serializeLong(buffer, key, value, index) {\n    buffer[index++] =\n        value._bsontype === 'Long' ? BSON_DATA_LONG : BSON_DATA_TIMESTAMP;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    const lowBits = value.getLowBits();\n    const highBits = value.getHighBits();\n    buffer[index++] = lowBits & 0xff;\n    buffer[index++] = (lowBits >> 8) & 0xff;\n    buffer[index++] = (lowBits >> 16) & 0xff;\n    buffer[index++] = (lowBits >> 24) & 0xff;\n    buffer[index++] = highBits & 0xff;\n    buffer[index++] = (highBits >> 8) & 0xff;\n    buffer[index++] = (highBits >> 16) & 0xff;\n    buffer[index++] = (highBits >> 24) & 0xff;\n    return index;\n}\nfunction serializeInt32(buffer, key, value, index) {\n    value = value.valueOf();\n    buffer[index++] = BSON_DATA_INT;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    buffer[index++] = value & 0xff;\n    buffer[index++] = (value >> 8) & 0xff;\n    buffer[index++] = (value >> 16) & 0xff;\n    buffer[index++] = (value >> 24) & 0xff;\n    return index;\n}\nfunction serializeDouble(buffer, key, value, index) {\n    buffer[index++] = BSON_DATA_NUMBER;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    NUMBER_SPACE.setFloat64(0, value.value, true);\n    buffer.set(EIGHT_BYTE_VIEW_ON_NUMBER, index);\n    index = index + 8;\n    return index;\n}\nfunction serializeFunction(buffer, key, value, index) {\n    buffer[index++] = BSON_DATA_CODE;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    const functionString = value.toString();\n    const size = ByteUtils.encodeUTF8Into(buffer, functionString, index + 4) + 1;\n    buffer[index] = size & 0xff;\n    buffer[index + 1] = (size >> 8) & 0xff;\n    buffer[index + 2] = (size >> 16) & 0xff;\n    buffer[index + 3] = (size >> 24) & 0xff;\n    index = index + 4 + size - 1;\n    buffer[index++] = 0;\n    return index;\n}\nfunction serializeCode(buffer, key, value, index, checkKeys = false, depth = 0, serializeFunctions = false, ignoreUndefined = true, path) {\n    if (value.scope && typeof value.scope === 'object') {\n        buffer[index++] = BSON_DATA_CODE_W_SCOPE;\n        const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n        index = index + numberOfWrittenBytes;\n        buffer[index++] = 0;\n        let startIndex = index;\n        const functionString = value.code;\n        index = index + 4;\n        const codeSize = ByteUtils.encodeUTF8Into(buffer, functionString, index + 4) + 1;\n        buffer[index] = codeSize & 0xff;\n        buffer[index + 1] = (codeSize >> 8) & 0xff;\n        buffer[index + 2] = (codeSize >> 16) & 0xff;\n        buffer[index + 3] = (codeSize >> 24) & 0xff;\n        buffer[index + 4 + codeSize - 1] = 0;\n        index = index + codeSize + 4;\n        const endIndex = serializeInto(buffer, value.scope, checkKeys, index, depth + 1, serializeFunctions, ignoreUndefined, path);\n        index = endIndex - 1;\n        const totalSize = endIndex - startIndex;\n        buffer[startIndex++] = totalSize & 0xff;\n        buffer[startIndex++] = (totalSize >> 8) & 0xff;\n        buffer[startIndex++] = (totalSize >> 16) & 0xff;\n        buffer[startIndex++] = (totalSize >> 24) & 0xff;\n        buffer[index++] = 0;\n    }\n    else {\n        buffer[index++] = BSON_DATA_CODE;\n        const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n        index = index + numberOfWrittenBytes;\n        buffer[index++] = 0;\n        const functionString = value.code.toString();\n        const size = ByteUtils.encodeUTF8Into(buffer, functionString, index + 4) + 1;\n        buffer[index] = size & 0xff;\n        buffer[index + 1] = (size >> 8) & 0xff;\n        buffer[index + 2] = (size >> 16) & 0xff;\n        buffer[index + 3] = (size >> 24) & 0xff;\n        index = index + 4 + size - 1;\n        buffer[index++] = 0;\n    }\n    return index;\n}\nfunction serializeBinary(buffer, key, value, index) {\n    buffer[index++] = BSON_DATA_BINARY;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    const data = value.buffer;\n    let size = value.position;\n    if (value.sub_type === Binary.SUBTYPE_BYTE_ARRAY)\n        size = size + 4;\n    buffer[index++] = size & 0xff;\n    buffer[index++] = (size >> 8) & 0xff;\n    buffer[index++] = (size >> 16) & 0xff;\n    buffer[index++] = (size >> 24) & 0xff;\n    buffer[index++] = value.sub_type;\n    if (value.sub_type === Binary.SUBTYPE_BYTE_ARRAY) {\n        size = size - 4;\n        buffer[index++] = size & 0xff;\n        buffer[index++] = (size >> 8) & 0xff;\n        buffer[index++] = (size >> 16) & 0xff;\n        buffer[index++] = (size >> 24) & 0xff;\n    }\n    buffer.set(data, index);\n    index = index + value.position;\n    return index;\n}\nfunction serializeSymbol(buffer, key, value, index) {\n    buffer[index++] = BSON_DATA_SYMBOL;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    const size = ByteUtils.encodeUTF8Into(buffer, value.value, index + 4) + 1;\n    buffer[index] = size & 0xff;\n    buffer[index + 1] = (size >> 8) & 0xff;\n    buffer[index + 2] = (size >> 16) & 0xff;\n    buffer[index + 3] = (size >> 24) & 0xff;\n    index = index + 4 + size - 1;\n    buffer[index++] = 0x00;\n    return index;\n}\nfunction serializeDBRef(buffer, key, value, index, depth, serializeFunctions, path) {\n    buffer[index++] = BSON_DATA_OBJECT;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    let startIndex = index;\n    let output = {\n        $ref: value.collection || value.namespace,\n        $id: value.oid\n    };\n    if (value.db != null) {\n        output.$db = value.db;\n    }\n    output = Object.assign(output, value.fields);\n    const endIndex = serializeInto(buffer, output, false, index, depth + 1, serializeFunctions, true, path);\n    const size = endIndex - startIndex;\n    buffer[startIndex++] = size & 0xff;\n    buffer[startIndex++] = (size >> 8) & 0xff;\n    buffer[startIndex++] = (size >> 16) & 0xff;\n    buffer[startIndex++] = (size >> 24) & 0xff;\n    return endIndex;\n}\nfunction serializeInto(buffer, object, checkKeys, startingIndex, depth, serializeFunctions, ignoreUndefined, path) {\n    if (path == null) {\n        if (object == null) {\n            buffer[0] = 0x05;\n            buffer[1] = 0x00;\n            buffer[2] = 0x00;\n            buffer[3] = 0x00;\n            buffer[4] = 0x00;\n            return 5;\n        }\n        if (Array.isArray(object)) {\n            throw new BSONError('serialize does not support an array as the root input');\n        }\n        if (typeof object !== 'object') {\n            throw new BSONError('serialize does not support non-object as the root input');\n        }\n        else if ('_bsontype' in object && typeof object._bsontype === 'string') {\n            throw new BSONError(`BSON types cannot be serialized as a document`);\n        }\n        else if (isDate(object) ||\n            isRegExp(object) ||\n            isUint8Array(object) ||\n            isAnyArrayBuffer(object)) {\n            throw new BSONError(`date, regexp, typedarray, and arraybuffer cannot be BSON documents`);\n        }\n        path = new Set();\n    }\n    path.add(object);\n    let index = startingIndex + 4;\n    if (Array.isArray(object)) {\n        for (let i = 0; i < object.length; i++) {\n            const key = `${i}`;\n            let value = object[i];\n            if (typeof value?.toBSON === 'function') {\n                value = value.toBSON();\n            }\n            if (typeof value === 'string') {\n                index = serializeString(buffer, key, value, index);\n            }\n            else if (typeof value === 'number') {\n                index = serializeNumber(buffer, key, value, index);\n            }\n            else if (typeof value === 'bigint') {\n                index = serializeBigInt(buffer, key, value, index);\n            }\n            else if (typeof value === 'boolean') {\n                index = serializeBoolean(buffer, key, value, index);\n            }\n            else if (value instanceof Date || isDate(value)) {\n                index = serializeDate(buffer, key, value, index);\n            }\n            else if (value === undefined) {\n                index = serializeNull(buffer, key, value, index);\n            }\n            else if (value === null) {\n                index = serializeNull(buffer, key, value, index);\n            }\n            else if (isUint8Array(value)) {\n                index = serializeBuffer(buffer, key, value, index);\n            }\n            else if (value instanceof RegExp || isRegExp(value)) {\n                index = serializeRegExp(buffer, key, value, index);\n            }\n            else if (typeof value === 'object' && value._bsontype == null) {\n                index = serializeObject(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, path);\n            }\n            else if (typeof value === 'object' &&\n                value[Symbol.for('@@mdb.bson.version')] !== BSON_MAJOR_VERSION) {\n                throw new BSONVersionError();\n            }\n            else if (value._bsontype === 'ObjectId') {\n                index = serializeObjectId(buffer, key, value, index);\n            }\n            else if (value._bsontype === 'Decimal128') {\n                index = serializeDecimal128(buffer, key, value, index);\n            }\n            else if (value._bsontype === 'Long' || value._bsontype === 'Timestamp') {\n                index = serializeLong(buffer, key, value, index);\n            }\n            else if (value._bsontype === 'Double') {\n                index = serializeDouble(buffer, key, value, index);\n            }\n            else if (typeof value === 'function' && serializeFunctions) {\n                index = serializeFunction(buffer, key, value, index);\n            }\n            else if (value._bsontype === 'Code') {\n                index = serializeCode(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, path);\n            }\n            else if (value._bsontype === 'Binary') {\n                index = serializeBinary(buffer, key, value, index);\n            }\n            else if (value._bsontype === 'BSONSymbol') {\n                index = serializeSymbol(buffer, key, value, index);\n            }\n            else if (value._bsontype === 'DBRef') {\n                index = serializeDBRef(buffer, key, value, index, depth, serializeFunctions, path);\n            }\n            else if (value._bsontype === 'BSONRegExp') {\n                index = serializeBSONRegExp(buffer, key, value, index);\n            }\n            else if (value._bsontype === 'Int32') {\n                index = serializeInt32(buffer, key, value, index);\n            }\n            else if (value._bsontype === 'MinKey' || value._bsontype === 'MaxKey') {\n                index = serializeMinMax(buffer, key, value, index);\n            }\n            else if (typeof value._bsontype !== 'undefined') {\n                throw new BSONError(`Unrecognized or invalid _bsontype: ${String(value._bsontype)}`);\n            }\n        }\n    }\n    else if (object instanceof Map || isMap(object)) {\n        const iterator = object.entries();\n        let done = false;\n        while (!done) {\n            const entry = iterator.next();\n            done = !!entry.done;\n            if (done)\n                continue;\n            const key = entry.value[0];\n            let value = entry.value[1];\n            if (typeof value?.toBSON === 'function') {\n                value = value.toBSON();\n            }\n            const type = typeof value;\n            if (typeof key === 'string' && !ignoreKeys.has(key)) {\n                if (key.match(regexp) != null) {\n                    throw new BSONError('key ' + key + ' must not contain null bytes');\n                }\n                if (checkKeys) {\n                    if ('$' === key[0]) {\n                        throw new BSONError('key ' + key + \" must not start with '$'\");\n                    }\n                    else if (~key.indexOf('.')) {\n                        throw new BSONError('key ' + key + \" must not contain '.'\");\n                    }\n                }\n            }\n            if (type === 'string') {\n                index = serializeString(buffer, key, value, index);\n            }\n            else if (type === 'number') {\n                index = serializeNumber(buffer, key, value, index);\n            }\n            else if (type === 'bigint') {\n                index = serializeBigInt(buffer, key, value, index);\n            }\n            else if (type === 'boolean') {\n                index = serializeBoolean(buffer, key, value, index);\n            }\n            else if (value instanceof Date || isDate(value)) {\n                index = serializeDate(buffer, key, value, index);\n            }\n            else if (value === null || (value === undefined && ignoreUndefined === false)) {\n                index = serializeNull(buffer, key, value, index);\n            }\n            else if (isUint8Array(value)) {\n                index = serializeBuffer(buffer, key, value, index);\n            }\n            else if (value instanceof RegExp || isRegExp(value)) {\n                index = serializeRegExp(buffer, key, value, index);\n            }\n            else if (type === 'object' && value._bsontype == null) {\n                index = serializeObject(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, path);\n            }\n            else if (typeof value === 'object' &&\n                value[Symbol.for('@@mdb.bson.version')] !== BSON_MAJOR_VERSION) {\n                throw new BSONVersionError();\n            }\n            else if (value._bsontype === 'ObjectId') {\n                index = serializeObjectId(buffer, key, value, index);\n            }\n            else if (type === 'object' && value._bsontype === 'Decimal128') {\n                index = serializeDecimal128(buffer, key, value, index);\n            }\n            else if (value._bsontype === 'Long' || value._bsontype === 'Timestamp') {\n                index = serializeLong(buffer, key, value, index);\n            }\n            else if (value._bsontype === 'Double') {\n                index = serializeDouble(buffer, key, value, index);\n            }\n            else if (value._bsontype === 'Code') {\n                index = serializeCode(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, path);\n            }\n            else if (typeof value === 'function' && serializeFunctions) {\n                index = serializeFunction(buffer, key, value, index);\n            }\n            else if (value._bsontype === 'Binary') {\n                index = serializeBinary(buffer, key, value, index);\n            }\n            else if (value._bsontype === 'BSONSymbol') {\n                index = serializeSymbol(buffer, key, value, index);\n            }\n            else if (value._bsontype === 'DBRef') {\n                index = serializeDBRef(buffer, key, value, index, depth, serializeFunctions, path);\n            }\n            else if (value._bsontype === 'BSONRegExp') {\n                index = serializeBSONRegExp(buffer, key, value, index);\n            }\n            else if (value._bsontype === 'Int32') {\n                index = serializeInt32(buffer, key, value, index);\n            }\n            else if (value._bsontype === 'MinKey' || value._bsontype === 'MaxKey') {\n                index = serializeMinMax(buffer, key, value, index);\n            }\n            else if (typeof value._bsontype !== 'undefined') {\n                throw new BSONError(`Unrecognized or invalid _bsontype: ${String(value._bsontype)}`);\n            }\n        }\n    }\n    else {\n        if (typeof object?.toBSON === 'function') {\n            object = object.toBSON();\n            if (object != null && typeof object !== 'object') {\n                throw new BSONError('toBSON function did not return an object');\n            }\n        }\n        for (const key of Object.keys(object)) {\n            let value = object[key];\n            if (typeof value?.toBSON === 'function') {\n                value = value.toBSON();\n            }\n            const type = typeof value;\n            if (typeof key === 'string' && !ignoreKeys.has(key)) {\n                if (key.match(regexp) != null) {\n                    throw new BSONError('key ' + key + ' must not contain null bytes');\n                }\n                if (checkKeys) {\n                    if ('$' === key[0]) {\n                        throw new BSONError('key ' + key + \" must not start with '$'\");\n                    }\n                    else if (~key.indexOf('.')) {\n                        throw new BSONError('key ' + key + \" must not contain '.'\");\n                    }\n                }\n            }\n            if (type === 'string') {\n                index = serializeString(buffer, key, value, index);\n            }\n            else if (type === 'number') {\n                index = serializeNumber(buffer, key, value, index);\n            }\n            else if (type === 'bigint') {\n                index = serializeBigInt(buffer, key, value, index);\n            }\n            else if (type === 'boolean') {\n                index = serializeBoolean(buffer, key, value, index);\n            }\n            else if (value instanceof Date || isDate(value)) {\n                index = serializeDate(buffer, key, value, index);\n            }\n            else if (value === undefined) {\n                if (ignoreUndefined === false)\n                    index = serializeNull(buffer, key, value, index);\n            }\n            else if (value === null) {\n                index = serializeNull(buffer, key, value, index);\n            }\n            else if (isUint8Array(value)) {\n                index = serializeBuffer(buffer, key, value, index);\n            }\n            else if (value instanceof RegExp || isRegExp(value)) {\n                index = serializeRegExp(buffer, key, value, index);\n            }\n            else if (type === 'object' && value._bsontype == null) {\n                index = serializeObject(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, path);\n            }\n            else if (typeof value === 'object' &&\n                value[Symbol.for('@@mdb.bson.version')] !== BSON_MAJOR_VERSION) {\n                throw new BSONVersionError();\n            }\n            else if (value._bsontype === 'ObjectId') {\n                index = serializeObjectId(buffer, key, value, index);\n            }\n            else if (type === 'object' && value._bsontype === 'Decimal128') {\n                index = serializeDecimal128(buffer, key, value, index);\n            }\n            else if (value._bsontype === 'Long' || value._bsontype === 'Timestamp') {\n                index = serializeLong(buffer, key, value, index);\n            }\n            else if (value._bsontype === 'Double') {\n                index = serializeDouble(buffer, key, value, index);\n            }\n            else if (value._bsontype === 'Code') {\n                index = serializeCode(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, path);\n            }\n            else if (typeof value === 'function' && serializeFunctions) {\n                index = serializeFunction(buffer, key, value, index);\n            }\n            else if (value._bsontype === 'Binary') {\n                index = serializeBinary(buffer, key, value, index);\n            }\n            else if (value._bsontype === 'BSONSymbol') {\n                index = serializeSymbol(buffer, key, value, index);\n            }\n            else if (value._bsontype === 'DBRef') {\n                index = serializeDBRef(buffer, key, value, index, depth, serializeFunctions, path);\n            }\n            else if (value._bsontype === 'BSONRegExp') {\n                index = serializeBSONRegExp(buffer, key, value, index);\n            }\n            else if (value._bsontype === 'Int32') {\n                index = serializeInt32(buffer, key, value, index);\n            }\n            else if (value._bsontype === 'MinKey' || value._bsontype === 'MaxKey') {\n                index = serializeMinMax(buffer, key, value, index);\n            }\n            else if (typeof value._bsontype !== 'undefined') {\n                throw new BSONError(`Unrecognized or invalid _bsontype: ${String(value._bsontype)}`);\n            }\n        }\n    }\n    path.delete(object);\n    buffer[index++] = 0x00;\n    const size = index - startingIndex;\n    buffer[startingIndex++] = size & 0xff;\n    buffer[startingIndex++] = (size >> 8) & 0xff;\n    buffer[startingIndex++] = (size >> 16) & 0xff;\n    buffer[startingIndex++] = (size >> 24) & 0xff;\n    return index;\n}\n\nfunction isBSONType(value) {\n    return (value != null &&\n        typeof value === 'object' &&\n        '_bsontype' in value &&\n        typeof value._bsontype === 'string');\n}\nconst keysToCodecs = {\n    $oid: ObjectId,\n    $binary: Binary,\n    $uuid: Binary,\n    $symbol: BSONSymbol,\n    $numberInt: Int32,\n    $numberDecimal: Decimal128,\n    $numberDouble: Double,\n    $numberLong: Long,\n    $minKey: MinKey,\n    $maxKey: MaxKey,\n    $regex: BSONRegExp,\n    $regularExpression: BSONRegExp,\n    $timestamp: Timestamp\n};\nfunction deserializeValue(value, options = {}) {\n    if (typeof value === 'number') {\n        const in32BitRange = value <= BSON_INT32_MAX && value >= BSON_INT32_MIN;\n        const in64BitRange = value <= BSON_INT64_MAX && value >= BSON_INT64_MIN;\n        if (options.relaxed || options.legacy) {\n            return value;\n        }\n        if (Number.isInteger(value) && !Object.is(value, -0)) {\n            if (in32BitRange) {\n                return new Int32(value);\n            }\n            if (in64BitRange) {\n                if (options.useBigInt64) {\n                    return BigInt(value);\n                }\n                return Long.fromNumber(value);\n            }\n        }\n        return new Double(value);\n    }\n    if (value == null || typeof value !== 'object')\n        return value;\n    if (value.$undefined)\n        return null;\n    const keys = Object.keys(value).filter(k => k.startsWith('$') && value[k] != null);\n    for (let i = 0; i < keys.length; i++) {\n        const c = keysToCodecs[keys[i]];\n        if (c)\n            return c.fromExtendedJSON(value, options);\n    }\n    if (value.$date != null) {\n        const d = value.$date;\n        const date = new Date();\n        if (options.legacy) {\n            if (typeof d === 'number')\n                date.setTime(d);\n            else if (typeof d === 'string')\n                date.setTime(Date.parse(d));\n            else if (typeof d === 'bigint')\n                date.setTime(Number(d));\n            else\n                throw new BSONRuntimeError(`Unrecognized type for EJSON date: ${typeof d}`);\n        }\n        else {\n            if (typeof d === 'string')\n                date.setTime(Date.parse(d));\n            else if (Long.isLong(d))\n                date.setTime(d.toNumber());\n            else if (typeof d === 'number' && options.relaxed)\n                date.setTime(d);\n            else if (typeof d === 'bigint')\n                date.setTime(Number(d));\n            else\n                throw new BSONRuntimeError(`Unrecognized type for EJSON date: ${typeof d}`);\n        }\n        return date;\n    }\n    if (value.$code != null) {\n        const copy = Object.assign({}, value);\n        if (value.$scope) {\n            copy.$scope = deserializeValue(value.$scope);\n        }\n        return Code.fromExtendedJSON(value);\n    }\n    if (isDBRefLike(value) || value.$dbPointer) {\n        const v = value.$ref ? value : value.$dbPointer;\n        if (v instanceof DBRef)\n            return v;\n        const dollarKeys = Object.keys(v).filter(k => k.startsWith('$'));\n        let valid = true;\n        dollarKeys.forEach(k => {\n            if (['$ref', '$id', '$db'].indexOf(k) === -1)\n                valid = false;\n        });\n        if (valid)\n            return DBRef.fromExtendedJSON(v);\n    }\n    return value;\n}\nfunction serializeArray(array, options) {\n    return array.map((v, index) => {\n        options.seenObjects.push({ propertyName: `index ${index}`, obj: null });\n        try {\n            return serializeValue(v, options);\n        }\n        finally {\n            options.seenObjects.pop();\n        }\n    });\n}\nfunction getISOString(date) {\n    const isoStr = date.toISOString();\n    return date.getUTCMilliseconds() !== 0 ? isoStr : isoStr.slice(0, -5) + 'Z';\n}\nfunction serializeValue(value, options) {\n    if (value instanceof Map || isMap(value)) {\n        const obj = Object.create(null);\n        for (const [k, v] of value) {\n            if (typeof k !== 'string') {\n                throw new BSONError('Can only serialize maps with string keys');\n            }\n            obj[k] = v;\n        }\n        return serializeValue(obj, options);\n    }\n    if ((typeof value === 'object' || typeof value === 'function') && value !== null) {\n        const index = options.seenObjects.findIndex(entry => entry.obj === value);\n        if (index !== -1) {\n            const props = options.seenObjects.map(entry => entry.propertyName);\n            const leadingPart = props\n                .slice(0, index)\n                .map(prop => `${prop} -> `)\n                .join('');\n            const alreadySeen = props[index];\n            const circularPart = ' -> ' +\n                props\n                    .slice(index + 1, props.length - 1)\n                    .map(prop => `${prop} -> `)\n                    .join('');\n            const current = props[props.length - 1];\n            const leadingSpace = ' '.repeat(leadingPart.length + alreadySeen.length / 2);\n            const dashes = '-'.repeat(circularPart.length + (alreadySeen.length + current.length) / 2 - 1);\n            throw new BSONError('Converting circular structure to EJSON:\\n' +\n                `    ${leadingPart}${alreadySeen}${circularPart}${current}\\n` +\n                `    ${leadingSpace}\\\\${dashes}/`);\n        }\n        options.seenObjects[options.seenObjects.length - 1].obj = value;\n    }\n    if (Array.isArray(value))\n        return serializeArray(value, options);\n    if (value === undefined)\n        return null;\n    if (value instanceof Date || isDate(value)) {\n        const dateNum = value.getTime(), inRange = dateNum > -1 && dateNum < 253402318800000;\n        if (options.legacy) {\n            return options.relaxed && inRange\n                ? { $date: value.getTime() }\n                : { $date: getISOString(value) };\n        }\n        return options.relaxed && inRange\n            ? { $date: getISOString(value) }\n            : { $date: { $numberLong: value.getTime().toString() } };\n    }\n    if (typeof value === 'number' && (!options.relaxed || !isFinite(value))) {\n        if (Number.isInteger(value) && !Object.is(value, -0)) {\n            if (value >= BSON_INT32_MIN && value <= BSON_INT32_MAX) {\n                return { $numberInt: value.toString() };\n            }\n            if (value >= BSON_INT64_MIN && value <= BSON_INT64_MAX) {\n                return { $numberLong: value.toString() };\n            }\n        }\n        return { $numberDouble: Object.is(value, -0) ? '-0.0' : value.toString() };\n    }\n    if (typeof value === 'bigint') {\n        if (!options.relaxed) {\n            return { $numberLong: BigInt.asIntN(64, value).toString() };\n        }\n        return Number(BigInt.asIntN(64, value));\n    }\n    if (value instanceof RegExp || isRegExp(value)) {\n        let flags = value.flags;\n        if (flags === undefined) {\n            const match = value.toString().match(/[gimuy]*$/);\n            if (match) {\n                flags = match[0];\n            }\n        }\n        const rx = new BSONRegExp(value.source, flags);\n        return rx.toExtendedJSON(options);\n    }\n    if (value != null && typeof value === 'object')\n        return serializeDocument(value, options);\n    return value;\n}\nconst BSON_TYPE_MAPPINGS = {\n    Binary: (o) => new Binary(o.value(), o.sub_type),\n    Code: (o) => new Code(o.code, o.scope),\n    DBRef: (o) => new DBRef(o.collection || o.namespace, o.oid, o.db, o.fields),\n    Decimal128: (o) => new Decimal128(o.bytes),\n    Double: (o) => new Double(o.value),\n    Int32: (o) => new Int32(o.value),\n    Long: (o) => Long.fromBits(o.low != null ? o.low : o.low_, o.low != null ? o.high : o.high_, o.low != null ? o.unsigned : o.unsigned_),\n    MaxKey: () => new MaxKey(),\n    MinKey: () => new MinKey(),\n    ObjectId: (o) => new ObjectId(o),\n    BSONRegExp: (o) => new BSONRegExp(o.pattern, o.options),\n    BSONSymbol: (o) => new BSONSymbol(o.value),\n    Timestamp: (o) => Timestamp.fromBits(o.low, o.high)\n};\nfunction serializeDocument(doc, options) {\n    if (doc == null || typeof doc !== 'object')\n        throw new BSONError('not an object instance');\n    const bsontype = doc._bsontype;\n    if (typeof bsontype === 'undefined') {\n        const _doc = {};\n        for (const name of Object.keys(doc)) {\n            options.seenObjects.push({ propertyName: name, obj: null });\n            try {\n                const value = serializeValue(doc[name], options);\n                if (name === '__proto__') {\n                    Object.defineProperty(_doc, name, {\n                        value,\n                        writable: true,\n                        enumerable: true,\n                        configurable: true\n                    });\n                }\n                else {\n                    _doc[name] = value;\n                }\n            }\n            finally {\n                options.seenObjects.pop();\n            }\n        }\n        return _doc;\n    }\n    else if (doc != null &&\n        typeof doc === 'object' &&\n        typeof doc._bsontype === 'string' &&\n        doc[Symbol.for('@@mdb.bson.version')] !== BSON_MAJOR_VERSION) {\n        throw new BSONVersionError();\n    }\n    else if (isBSONType(doc)) {\n        let outDoc = doc;\n        if (typeof outDoc.toExtendedJSON !== 'function') {\n            const mapper = BSON_TYPE_MAPPINGS[doc._bsontype];\n            if (!mapper) {\n                throw new BSONError('Unrecognized or invalid _bsontype: ' + doc._bsontype);\n            }\n            outDoc = mapper(outDoc);\n        }\n        if (bsontype === 'Code' && outDoc.scope) {\n            outDoc = new Code(outDoc.code, serializeValue(outDoc.scope, options));\n        }\n        else if (bsontype === 'DBRef' && outDoc.oid) {\n            outDoc = new DBRef(serializeValue(outDoc.collection, options), serializeValue(outDoc.oid, options), serializeValue(outDoc.db, options), serializeValue(outDoc.fields, options));\n        }\n        return outDoc.toExtendedJSON(options);\n    }\n    else {\n        throw new BSONError('_bsontype must be a string, but was: ' + typeof bsontype);\n    }\n}\nfunction parse(text, options) {\n    const ejsonOptions = {\n        useBigInt64: options?.useBigInt64 ?? false,\n        relaxed: options?.relaxed ?? true,\n        legacy: options?.legacy ?? false\n    };\n    return JSON.parse(text, (key, value) => {\n        if (key.indexOf('\\x00') !== -1) {\n            throw new BSONError(`BSON Document field names cannot contain null bytes, found: ${JSON.stringify(key)}`);\n        }\n        return deserializeValue(value, ejsonOptions);\n    });\n}\nfunction stringify(value, replacer, space, options) {\n    if (space != null && typeof space === 'object') {\n        options = space;\n        space = 0;\n    }\n    if (replacer != null && typeof replacer === 'object' && !Array.isArray(replacer)) {\n        options = replacer;\n        replacer = undefined;\n        space = 0;\n    }\n    const serializeOptions = Object.assign({ relaxed: true, legacy: false }, options, {\n        seenObjects: [{ propertyName: '(root)', obj: null }]\n    });\n    const doc = serializeValue(value, serializeOptions);\n    return JSON.stringify(doc, replacer, space);\n}\nfunction EJSONserialize(value, options) {\n    options = options || {};\n    return JSON.parse(stringify(value, options));\n}\nfunction EJSONdeserialize(ejson, options) {\n    options = options || {};\n    return parse(JSON.stringify(ejson), options);\n}\nconst EJSON = Object.create(null);\nEJSON.parse = parse;\nEJSON.stringify = stringify;\nEJSON.serialize = EJSONserialize;\nEJSON.deserialize = EJSONdeserialize;\nObject.freeze(EJSON);\n\nconst MAXSIZE = 1024 * 1024 * 17;\nlet buffer = ByteUtils.allocate(MAXSIZE);\nfunction setInternalBufferSize(size) {\n    if (buffer.length < size) {\n        buffer = ByteUtils.allocate(size);\n    }\n}\nfunction serialize(object, options = {}) {\n    const checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;\n    const serializeFunctions = typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n    const ignoreUndefined = typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : true;\n    const minInternalBufferSize = typeof options.minInternalBufferSize === 'number' ? options.minInternalBufferSize : MAXSIZE;\n    if (buffer.length < minInternalBufferSize) {\n        buffer = ByteUtils.allocate(minInternalBufferSize);\n    }\n    const serializationIndex = serializeInto(buffer, object, checkKeys, 0, 0, serializeFunctions, ignoreUndefined, null);\n    const finishedBuffer = ByteUtils.allocate(serializationIndex);\n    finishedBuffer.set(buffer.subarray(0, serializationIndex), 0);\n    return finishedBuffer;\n}\nfunction serializeWithBufferAndIndex(object, finalBuffer, options = {}) {\n    const checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;\n    const serializeFunctions = typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n    const ignoreUndefined = typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : true;\n    const startIndex = typeof options.index === 'number' ? options.index : 0;\n    const serializationIndex = serializeInto(buffer, object, checkKeys, 0, 0, serializeFunctions, ignoreUndefined, null);\n    finalBuffer.set(buffer.subarray(0, serializationIndex), startIndex);\n    return startIndex + serializationIndex - 1;\n}\nfunction deserialize(buffer, options = {}) {\n    return internalDeserialize(ByteUtils.toLocalBufferType(buffer), options);\n}\nfunction calculateObjectSize(object, options = {}) {\n    options = options || {};\n    const serializeFunctions = typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n    const ignoreUndefined = typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : true;\n    return internalCalculateObjectSize(object, serializeFunctions, ignoreUndefined);\n}\nfunction deserializeStream(data, startIndex, numberOfDocuments, documents, docStartIndex, options) {\n    const internalOptions = Object.assign({ allowObjectSmallerThanBufferSize: true, index: 0 }, options);\n    const bufferData = ByteUtils.toLocalBufferType(data);\n    let index = startIndex;\n    for (let i = 0; i < numberOfDocuments; i++) {\n        const size = bufferData[index] |\n            (bufferData[index + 1] << 8) |\n            (bufferData[index + 2] << 16) |\n            (bufferData[index + 3] << 24);\n        internalOptions.index = index;\n        documents[docStartIndex + i] = internalDeserialize(bufferData, internalOptions);\n        index = index + size;\n    }\n    return index;\n}\n\nvar bson = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    BSONError: BSONError,\n    BSONRegExp: BSONRegExp,\n    BSONRuntimeError: BSONRuntimeError,\n    BSONSymbol: BSONSymbol,\n    BSONType: BSONType,\n    BSONValue: BSONValue,\n    BSONVersionError: BSONVersionError,\n    Binary: Binary,\n    Code: Code,\n    DBRef: DBRef,\n    Decimal128: Decimal128,\n    Double: Double,\n    EJSON: EJSON,\n    Int32: Int32,\n    Long: Long,\n    MaxKey: MaxKey,\n    MinKey: MinKey,\n    ObjectId: ObjectId,\n    Timestamp: Timestamp,\n    UUID: UUID,\n    calculateObjectSize: calculateObjectSize,\n    deserialize: deserialize,\n    deserializeStream: deserializeStream,\n    serialize: serialize,\n    serializeWithBufferAndIndex: serializeWithBufferAndIndex,\n    setInternalBufferSize: setInternalBufferSize\n});\n\nexports.BSON = bson;\nexports.BSONError = BSONError;\nexports.BSONRegExp = BSONRegExp;\nexports.BSONRuntimeError = BSONRuntimeError;\nexports.BSONSymbol = BSONSymbol;\nexports.BSONType = BSONType;\nexports.BSONValue = BSONValue;\nexports.BSONVersionError = BSONVersionError;\nexports.Binary = Binary;\nexports.Code = Code;\nexports.DBRef = DBRef;\nexports.Decimal128 = Decimal128;\nexports.Double = Double;\nexports.EJSON = EJSON;\nexports.Int32 = Int32;\nexports.Long = Long;\nexports.MaxKey = MaxKey;\nexports.MinKey = MinKey;\nexports.ObjectId = ObjectId;\nexports.Timestamp = Timestamp;\nexports.UUID = UUID;\nexports.calculateObjectSize = calculateObjectSize;\nexports.deserialize = deserialize;\nexports.deserializeStream = deserializeStream;\nexports.serialize = serialize;\nexports.serializeWithBufferAndIndex = serializeWithBufferAndIndex;\nexports.setInternalBufferSize = setInternalBufferSize;\n//# sourceMappingURL=bson.cjs.map\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 4035, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}