{
  "version": 3,
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/error.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isResumableError = exports.isNetworkTimeoutError = exports.isSDAMUnrecoverableError = exports.isNodeShuttingDownError = exports.isRetryableReadError = exports.isRetryableWriteError = exports.needsRetryableWriteLabel = exports.MongoWriteConcernError = exports.MongoServerSelectionError = exports.MongoSystemError = exports.MongoMissingDependencyError = exports.MongoMissingCredentialsError = exports.MongoCompatibilityError = exports.MongoInvalidArgumentError = exports.MongoParseError = exports.MongoNetworkTimeoutError = exports.MongoNetworkError = exports.isNetworkErrorBeforeHandshake = exports.MongoTopologyClosedError = exports.MongoCursorExhaustedError = exports.MongoServerClosedError = exports.MongoCursorInUseError = exports.MongoUnexpectedServerResponseError = exports.MongoGridFSChunkError = exports.MongoGridFSStreamError = exports.MongoTailableCursorError = exports.MongoChangeStreamError = exports.MongoAzureError = exports.MongoAWSError = exports.MongoKerberosError = exports.MongoExpiredSessionError = exports.MongoTransactionError = exports.MongoNotConnectedError = exports.MongoDecompressionError = exports.MongoBatchReExecutionError = exports.MongoRuntimeError = exports.MongoAPIError = exports.MongoDriverError = exports.MongoServerError = exports.MongoError = exports.MongoErrorLabel = exports.GET_MORE_RESUMABLE_CODES = exports.MONGODB_ERROR_CODES = exports.NODE_IS_RECOVERING_ERROR_MESSAGE = exports.LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE = exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE = void 0;\n/** @internal */\nconst kErrorLabels = Symbol('errorLabels');\n/**\n * @internal\n * The legacy error message from the server that indicates the node is not a writable primary\n * https://github.com/mongodb/specifications/blob/b07c26dc40d04ac20349f989db531c9845fdd755/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-writable-primary-and-node-is-recovering\n */\nexports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE = new RegExp('not master', 'i');\n/**\n * @internal\n * The legacy error message from the server that indicates the node is not a primary or secondary\n * https://github.com/mongodb/specifications/blob/b07c26dc40d04ac20349f989db531c9845fdd755/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-writable-primary-and-node-is-recovering\n */\nexports.LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE = new RegExp('not master or secondary', 'i');\n/**\n * @internal\n * The error message from the server that indicates the node is recovering\n * https://github.com/mongodb/specifications/blob/b07c26dc40d04ac20349f989db531c9845fdd755/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-writable-primary-and-node-is-recovering\n */\nexports.NODE_IS_RECOVERING_ERROR_MESSAGE = new RegExp('node is recovering', 'i');\n/** @internal MongoDB Error Codes */\nexports.MONGODB_ERROR_CODES = Object.freeze({\n    HostUnreachable: 6,\n    HostNotFound: 7,\n    NetworkTimeout: 89,\n    ShutdownInProgress: 91,\n    PrimarySteppedDown: 189,\n    ExceededTimeLimit: 262,\n    SocketException: 9001,\n    NotWritablePrimary: 10107,\n    InterruptedAtShutdown: 11600,\n    InterruptedDueToReplStateChange: 11602,\n    NotPrimaryNoSecondaryOk: 13435,\n    NotPrimaryOrSecondary: 13436,\n    StaleShardVersion: 63,\n    StaleEpoch: 150,\n    StaleConfig: 13388,\n    RetryChangeStream: 234,\n    FailedToSatisfyReadPreference: 133,\n    CursorNotFound: 43,\n    LegacyNotPrimary: 10058,\n    WriteConcernFailed: 64,\n    NamespaceNotFound: 26,\n    IllegalOperation: 20,\n    MaxTimeMSExpired: 50,\n    UnknownReplWriteConcern: 79,\n    UnsatisfiableWriteConcern: 100,\n    Reauthenticate: 391\n});\n// From spec@https://github.com/mongodb/specifications/blob/f93d78191f3db2898a59013a7ed5650352ef6da8/source/change-streams/change-streams.rst#resumable-error\nexports.GET_MORE_RESUMABLE_CODES = new Set([\n    exports.MONGODB_ERROR_CODES.HostUnreachable,\n    exports.MONGODB_ERROR_CODES.HostNotFound,\n    exports.MONGODB_ERROR_CODES.NetworkTimeout,\n    exports.MONGODB_ERROR_CODES.ShutdownInProgress,\n    exports.MONGODB_ERROR_CODES.PrimarySteppedDown,\n    exports.MONGODB_ERROR_CODES.ExceededTimeLimit,\n    exports.MONGODB_ERROR_CODES.SocketException,\n    exports.MONGODB_ERROR_CODES.NotWritablePrimary,\n    exports.MONGODB_ERROR_CODES.InterruptedAtShutdown,\n    exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange,\n    exports.MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk,\n    exports.MONGODB_ERROR_CODES.NotPrimaryOrSecondary,\n    exports.MONGODB_ERROR_CODES.StaleShardVersion,\n    exports.MONGODB_ERROR_CODES.StaleEpoch,\n    exports.MONGODB_ERROR_CODES.StaleConfig,\n    exports.MONGODB_ERROR_CODES.RetryChangeStream,\n    exports.MONGODB_ERROR_CODES.FailedToSatisfyReadPreference,\n    exports.MONGODB_ERROR_CODES.CursorNotFound\n]);\n/** @public */\nexports.MongoErrorLabel = Object.freeze({\n    RetryableWriteError: 'RetryableWriteError',\n    TransientTransactionError: 'TransientTransactionError',\n    UnknownTransactionCommitResult: 'UnknownTransactionCommitResult',\n    ResumableChangeStreamError: 'ResumableChangeStreamError',\n    HandshakeError: 'HandshakeError',\n    ResetPool: 'ResetPool',\n    PoolRequstedRetry: 'PoolRequstedRetry',\n    InterruptInUseConnections: 'InterruptInUseConnections',\n    NoWritesPerformed: 'NoWritesPerformed'\n});\nfunction isAggregateError(e) {\n    return 'errors' in e && Array.isArray(e.errors);\n}\n/**\n * @public\n * @category Error\n *\n * @privateRemarks\n * mongodb-client-encryption has a dependency on this error, it uses the constructor with a string argument\n */\nclass MongoError extends Error {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, options) {\n        super(message, options);\n        this[kErrorLabels] = new Set();\n    }\n    /** @internal */\n    static buildErrorMessage(e) {\n        if (typeof e === 'string') {\n            return e;\n        }\n        if (isAggregateError(e) && e.message.length === 0) {\n            return e.errors.length === 0\n                ? 'AggregateError has an empty errors array. Please check the `cause` property for more information.'\n                : e.errors.map(({ message }) => message).join(', ');\n        }\n        return e.message;\n    }\n    get name() {\n        return 'MongoError';\n    }\n    /** Legacy name for server error responses */\n    get errmsg() {\n        return this.message;\n    }\n    /**\n     * Checks the error to see if it has an error label\n     *\n     * @param label - The error label to check for\n     * @returns returns true if the error has the provided error label\n     */\n    hasErrorLabel(label) {\n        return this[kErrorLabels].has(label);\n    }\n    addErrorLabel(label) {\n        this[kErrorLabels].add(label);\n    }\n    get errorLabels() {\n        return Array.from(this[kErrorLabels]);\n    }\n}\nexports.MongoError = MongoError;\n/**\n * An error coming from the mongo server\n *\n * @public\n * @category Error\n */\nclass MongoServerError extends MongoError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message.message || message.errmsg || message.$err || 'n/a');\n        if (message.errorLabels) {\n            this[kErrorLabels] = new Set(message.errorLabels);\n        }\n        for (const name in message) {\n            if (name !== 'errorLabels' && name !== 'errmsg' && name !== 'message')\n                this[name] = message[name];\n        }\n    }\n    get name() {\n        return 'MongoServerError';\n    }\n}\nexports.MongoServerError = MongoServerError;\n/**\n * An error generated by the driver\n *\n * @public\n * @category Error\n */\nclass MongoDriverError extends MongoError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, options) {\n        super(message, options);\n    }\n    get name() {\n        return 'MongoDriverError';\n    }\n}\nexports.MongoDriverError = MongoDriverError;\n/**\n * An error generated when the driver API is used incorrectly\n *\n * @privateRemarks\n * Should **never** be directly instantiated\n *\n * @public\n * @category Error\n */\nclass MongoAPIError extends MongoDriverError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, options) {\n        super(message, options);\n    }\n    get name() {\n        return 'MongoAPIError';\n    }\n}\nexports.MongoAPIError = MongoAPIError;\n/**\n * An error generated when the driver encounters unexpected input\n * or reaches an unexpected/invalid internal state\n *\n * @privateRemarks\n * Should **never** be directly instantiated.\n *\n * @public\n * @category Error\n */\nclass MongoRuntimeError extends MongoDriverError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, options) {\n        super(message, options);\n    }\n    get name() {\n        return 'MongoRuntimeError';\n    }\n}\nexports.MongoRuntimeError = MongoRuntimeError;\n/**\n * An error generated when a batch command is re-executed after one of the commands in the batch\n * has failed\n *\n * @public\n * @category Error\n */\nclass MongoBatchReExecutionError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message = 'This batch has already been executed, create new batch to execute') {\n        super(message);\n    }\n    get name() {\n        return 'MongoBatchReExecutionError';\n    }\n}\nexports.MongoBatchReExecutionError = MongoBatchReExecutionError;\n/**\n * An error generated when the driver fails to decompress\n * data received from the server.\n *\n * @public\n * @category Error\n */\nclass MongoDecompressionError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoDecompressionError';\n    }\n}\nexports.MongoDecompressionError = MongoDecompressionError;\n/**\n * An error thrown when the user attempts to operate on a database or collection through a MongoClient\n * that has not yet successfully called the \"connect\" method\n *\n * @public\n * @category Error\n */\nclass MongoNotConnectedError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoNotConnectedError';\n    }\n}\nexports.MongoNotConnectedError = MongoNotConnectedError;\n/**\n * An error generated when the user makes a mistake in the usage of transactions.\n * (e.g. attempting to commit a transaction with a readPreference other than primary)\n *\n * @public\n * @category Error\n */\nclass MongoTransactionError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoTransactionError';\n    }\n}\nexports.MongoTransactionError = MongoTransactionError;\n/**\n * An error generated when the user attempts to operate\n * on a session that has expired or has been closed.\n *\n * @public\n * @category Error\n */\nclass MongoExpiredSessionError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message = 'Cannot use a session that has ended') {\n        super(message);\n    }\n    get name() {\n        return 'MongoExpiredSessionError';\n    }\n}\nexports.MongoExpiredSessionError = MongoExpiredSessionError;\n/**\n * A error generated when the user attempts to authenticate\n * via Kerberos, but fails to connect to the Kerberos client.\n *\n * @public\n * @category Error\n */\nclass MongoKerberosError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoKerberosError';\n    }\n}\nexports.MongoKerberosError = MongoKerberosError;\n/**\n * A error generated when the user attempts to authenticate\n * via AWS, but fails\n *\n * @public\n * @category Error\n */\nclass MongoAWSError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoAWSError';\n    }\n}\nexports.MongoAWSError = MongoAWSError;\n/**\n * A error generated when the user attempts to authenticate\n * via Azure, but fails.\n *\n * @public\n * @category Error\n */\nclass MongoAzureError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoAzureError';\n    }\n}\nexports.MongoAzureError = MongoAzureError;\n/**\n * An error generated when a ChangeStream operation fails to execute.\n *\n * @public\n * @category Error\n */\nclass MongoChangeStreamError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoChangeStreamError';\n    }\n}\nexports.MongoChangeStreamError = MongoChangeStreamError;\n/**\n * An error thrown when the user calls a function or method not supported on a tailable cursor\n *\n * @public\n * @category Error\n */\nclass MongoTailableCursorError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message = 'Tailable cursor does not support this operation') {\n        super(message);\n    }\n    get name() {\n        return 'MongoTailableCursorError';\n    }\n}\nexports.MongoTailableCursorError = MongoTailableCursorError;\n/** An error generated when a GridFSStream operation fails to execute.\n *\n * @public\n * @category Error\n */\nclass MongoGridFSStreamError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoGridFSStreamError';\n    }\n}\nexports.MongoGridFSStreamError = MongoGridFSStreamError;\n/**\n * An error generated when a malformed or invalid chunk is\n * encountered when reading from a GridFSStream.\n *\n * @public\n * @category Error\n */\nclass MongoGridFSChunkError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoGridFSChunkError';\n    }\n}\nexports.MongoGridFSChunkError = MongoGridFSChunkError;\n/**\n * An error generated when a **parsable** unexpected response comes from the server.\n * This is generally an error where the driver in a state expecting a certain behavior to occur in\n * the next message from MongoDB but it receives something else.\n * This error **does not** represent an issue with wire message formatting.\n *\n * #### Example\n * When an operation fails, it is the driver's job to retry it. It must perform serverSelection\n * again to make sure that it attempts the operation against a server in a good state. If server\n * selection returns a server that does not support retryable operations, this error is used.\n * This scenario is unlikely as retryable support would also have been determined on the first attempt\n * but it is possible the state change could report a selectable server that does not support retries.\n *\n * @public\n * @category Error\n */\nclass MongoUnexpectedServerResponseError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoUnexpectedServerResponseError';\n    }\n}\nexports.MongoUnexpectedServerResponseError = MongoUnexpectedServerResponseError;\n/**\n * An error thrown when the user attempts to add options to a cursor that has already been\n * initialized\n *\n * @public\n * @category Error\n */\nclass MongoCursorInUseError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message = 'Cursor is already initialized') {\n        super(message);\n    }\n    get name() {\n        return 'MongoCursorInUseError';\n    }\n}\nexports.MongoCursorInUseError = MongoCursorInUseError;\n/**\n * An error generated when an attempt is made to operate\n * on a closed/closing server.\n *\n * @public\n * @category Error\n */\nclass MongoServerClosedError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message = 'Server is closed') {\n        super(message);\n    }\n    get name() {\n        return 'MongoServerClosedError';\n    }\n}\nexports.MongoServerClosedError = MongoServerClosedError;\n/**\n * An error thrown when an attempt is made to read from a cursor that has been exhausted\n *\n * @public\n * @category Error\n */\nclass MongoCursorExhaustedError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message || 'Cursor is exhausted');\n    }\n    get name() {\n        return 'MongoCursorExhaustedError';\n    }\n}\nexports.MongoCursorExhaustedError = MongoCursorExhaustedError;\n/**\n * An error generated when an attempt is made to operate on a\n * dropped, or otherwise unavailable, database.\n *\n * @public\n * @category Error\n */\nclass MongoTopologyClosedError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message = 'Topology is closed') {\n        super(message);\n    }\n    get name() {\n        return 'MongoTopologyClosedError';\n    }\n}\nexports.MongoTopologyClosedError = MongoTopologyClosedError;\n/** @internal */\nconst kBeforeHandshake = Symbol('beforeHandshake');\nfunction isNetworkErrorBeforeHandshake(err) {\n    return err[kBeforeHandshake] === true;\n}\nexports.isNetworkErrorBeforeHandshake = isNetworkErrorBeforeHandshake;\n/**\n * An error indicating an issue with the network, including TCP errors and timeouts.\n * @public\n * @category Error\n */\nclass MongoNetworkError extends MongoError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, options) {\n        super(message, { cause: options?.cause });\n        if (options && typeof options.beforeHandshake === 'boolean') {\n            this[kBeforeHandshake] = options.beforeHandshake;\n        }\n    }\n    get name() {\n        return 'MongoNetworkError';\n    }\n}\nexports.MongoNetworkError = MongoNetworkError;\n/**\n * An error indicating a network timeout occurred\n * @public\n * @category Error\n *\n * @privateRemarks\n * mongodb-client-encryption has a dependency on this error with an instanceof check\n */\nclass MongoNetworkTimeoutError extends MongoNetworkError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, options) {\n        super(message, options);\n    }\n    get name() {\n        return 'MongoNetworkTimeoutError';\n    }\n}\nexports.MongoNetworkTimeoutError = MongoNetworkTimeoutError;\n/**\n * An error used when attempting to parse a value (like a connection string)\n * @public\n * @category Error\n */\nclass MongoParseError extends MongoDriverError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoParseError';\n    }\n}\nexports.MongoParseError = MongoParseError;\n/**\n * An error generated when the user supplies malformed or unexpected arguments\n * or when a required argument or field is not provided.\n *\n *\n * @public\n * @category Error\n */\nclass MongoInvalidArgumentError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoInvalidArgumentError';\n    }\n}\nexports.MongoInvalidArgumentError = MongoInvalidArgumentError;\n/**\n * An error generated when a feature that is not enabled or allowed for the current server\n * configuration is used\n *\n *\n * @public\n * @category Error\n */\nclass MongoCompatibilityError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoCompatibilityError';\n    }\n}\nexports.MongoCompatibilityError = MongoCompatibilityError;\n/**\n * An error generated when the user fails to provide authentication credentials before attempting\n * to connect to a mongo server instance.\n *\n *\n * @public\n * @category Error\n */\nclass MongoMissingCredentialsError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoMissingCredentialsError';\n    }\n}\nexports.MongoMissingCredentialsError = MongoMissingCredentialsError;\n/**\n * An error generated when a required module or dependency is not present in the local environment\n *\n * @public\n * @category Error\n */\nclass MongoMissingDependencyError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, options = {}) {\n        super(message, options);\n    }\n    get name() {\n        return 'MongoMissingDependencyError';\n    }\n}\nexports.MongoMissingDependencyError = MongoMissingDependencyError;\n/**\n * An error signifying a general system issue\n * @public\n * @category Error\n */\nclass MongoSystemError extends MongoError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, reason) {\n        if (reason && reason.error) {\n            super(MongoError.buildErrorMessage(reason.error.message || reason.error), {\n                cause: reason.error\n            });\n        }\n        else {\n            super(message);\n        }\n        if (reason) {\n            this.reason = reason;\n        }\n        this.code = reason.error?.code;\n    }\n    get name() {\n        return 'MongoSystemError';\n    }\n}\nexports.MongoSystemError = MongoSystemError;\n/**\n * An error signifying a client-side server selection error\n * @public\n * @category Error\n */\nclass MongoServerSelectionError extends MongoSystemError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, reason) {\n        super(message, reason);\n    }\n    get name() {\n        return 'MongoServerSelectionError';\n    }\n}\nexports.MongoServerSelectionError = MongoServerSelectionError;\nfunction makeWriteConcernResultObject(input) {\n    const output = Object.assign({}, input);\n    if (output.ok === 0) {\n        output.ok = 1;\n        delete output.errmsg;\n        delete output.code;\n        delete output.codeName;\n    }\n    return output;\n}\n/**\n * An error thrown when the server reports a writeConcernError\n * @public\n * @category Error\n */\nclass MongoWriteConcernError extends MongoServerError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, result) {\n        if (result && Array.isArray(result.errorLabels)) {\n            message.errorLabels = result.errorLabels;\n        }\n        super(message);\n        this.errInfo = message.errInfo;\n        if (result != null) {\n            this.result = makeWriteConcernResultObject(result);\n        }\n    }\n    get name() {\n        return 'MongoWriteConcernError';\n    }\n}\nexports.MongoWriteConcernError = MongoWriteConcernError;\n// https://github.com/mongodb/specifications/blob/master/source/retryable-reads/retryable-reads.rst#retryable-error\nconst RETRYABLE_READ_ERROR_CODES = new Set([\n    exports.MONGODB_ERROR_CODES.HostUnreachable,\n    exports.MONGODB_ERROR_CODES.HostNotFound,\n    exports.MONGODB_ERROR_CODES.NetworkTimeout,\n    exports.MONGODB_ERROR_CODES.ShutdownInProgress,\n    exports.MONGODB_ERROR_CODES.PrimarySteppedDown,\n    exports.MONGODB_ERROR_CODES.SocketException,\n    exports.MONGODB_ERROR_CODES.NotWritablePrimary,\n    exports.MONGODB_ERROR_CODES.InterruptedAtShutdown,\n    exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange,\n    exports.MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk,\n    exports.MONGODB_ERROR_CODES.NotPrimaryOrSecondary\n]);\n// see: https://github.com/mongodb/specifications/blob/master/source/retryable-writes/retryable-writes.rst#terms\nconst RETRYABLE_WRITE_ERROR_CODES = new Set([\n    ...RETRYABLE_READ_ERROR_CODES,\n    exports.MONGODB_ERROR_CODES.ExceededTimeLimit\n]);\nfunction needsRetryableWriteLabel(error, maxWireVersion) {\n    // pre-4.4 server, then the driver adds an error label for every valid case\n    // execute operation will only inspect the label, code/message logic is handled here\n    if (error instanceof MongoNetworkError) {\n        return true;\n    }\n    if (error instanceof MongoError) {\n        if ((maxWireVersion >= 9 || isRetryableWriteError(error)) &&\n            !error.hasErrorLabel(exports.MongoErrorLabel.HandshakeError)) {\n            // If we already have the error label no need to add it again. 4.4+ servers add the label.\n            // In the case where we have a handshake error, need to fall down to the logic checking\n            // the codes.\n            return false;\n        }\n    }\n    if (error instanceof MongoWriteConcernError) {\n        return RETRYABLE_WRITE_ERROR_CODES.has(error.result?.code ?? error.code ?? 0);\n    }\n    if (error instanceof MongoError && typeof error.code === 'number') {\n        return RETRYABLE_WRITE_ERROR_CODES.has(error.code);\n    }\n    const isNotWritablePrimaryError = exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE.test(error.message);\n    if (isNotWritablePrimaryError) {\n        return true;\n    }\n    const isNodeIsRecoveringError = exports.NODE_IS_RECOVERING_ERROR_MESSAGE.test(error.message);\n    if (isNodeIsRecoveringError) {\n        return true;\n    }\n    return false;\n}\nexports.needsRetryableWriteLabel = needsRetryableWriteLabel;\nfunction isRetryableWriteError(error) {\n    return (error.hasErrorLabel(exports.MongoErrorLabel.RetryableWriteError) ||\n        error.hasErrorLabel(exports.MongoErrorLabel.PoolRequstedRetry));\n}\nexports.isRetryableWriteError = isRetryableWriteError;\n/** Determines whether an error is something the driver should attempt to retry */\nfunction isRetryableReadError(error) {\n    const hasRetryableErrorCode = typeof error.code === 'number' ? RETRYABLE_READ_ERROR_CODES.has(error.code) : false;\n    if (hasRetryableErrorCode) {\n        return true;\n    }\n    if (error instanceof MongoNetworkError) {\n        return true;\n    }\n    const isNotWritablePrimaryError = exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE.test(error.message);\n    if (isNotWritablePrimaryError) {\n        return true;\n    }\n    const isNodeIsRecoveringError = exports.NODE_IS_RECOVERING_ERROR_MESSAGE.test(error.message);\n    if (isNodeIsRecoveringError) {\n        return true;\n    }\n    return false;\n}\nexports.isRetryableReadError = isRetryableReadError;\nconst SDAM_RECOVERING_CODES = new Set([\n    exports.MONGODB_ERROR_CODES.ShutdownInProgress,\n    exports.MONGODB_ERROR_CODES.PrimarySteppedDown,\n    exports.MONGODB_ERROR_CODES.InterruptedAtShutdown,\n    exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange,\n    exports.MONGODB_ERROR_CODES.NotPrimaryOrSecondary\n]);\nconst SDAM_NOT_PRIMARY_CODES = new Set([\n    exports.MONGODB_ERROR_CODES.NotWritablePrimary,\n    exports.MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk,\n    exports.MONGODB_ERROR_CODES.LegacyNotPrimary\n]);\nconst SDAM_NODE_SHUTTING_DOWN_ERROR_CODES = new Set([\n    exports.MONGODB_ERROR_CODES.InterruptedAtShutdown,\n    exports.MONGODB_ERROR_CODES.ShutdownInProgress\n]);\nfunction isRecoveringError(err) {\n    if (typeof err.code === 'number') {\n        // If any error code exists, we ignore the error.message\n        return SDAM_RECOVERING_CODES.has(err.code);\n    }\n    return (exports.LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE.test(err.message) ||\n        exports.NODE_IS_RECOVERING_ERROR_MESSAGE.test(err.message));\n}\nfunction isNotWritablePrimaryError(err) {\n    if (typeof err.code === 'number') {\n        // If any error code exists, we ignore the error.message\n        return SDAM_NOT_PRIMARY_CODES.has(err.code);\n    }\n    if (isRecoveringError(err)) {\n        return false;\n    }\n    return exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE.test(err.message);\n}\nfunction isNodeShuttingDownError(err) {\n    return !!(typeof err.code === 'number' && SDAM_NODE_SHUTTING_DOWN_ERROR_CODES.has(err.code));\n}\nexports.isNodeShuttingDownError = isNodeShuttingDownError;\n/**\n * Determines whether SDAM can recover from a given error. If it cannot\n * then the pool will be cleared, and server state will completely reset\n * locally.\n *\n * @see https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-master-and-node-is-recovering\n */\nfunction isSDAMUnrecoverableError(error) {\n    // NOTE: null check is here for a strictly pre-CMAP world, a timeout or\n    //       close event are considered unrecoverable\n    if (error instanceof MongoParseError || error == null) {\n        return true;\n    }\n    return isRecoveringError(error) || isNotWritablePrimaryError(error);\n}\nexports.isSDAMUnrecoverableError = isSDAMUnrecoverableError;\nfunction isNetworkTimeoutError(err) {\n    return !!(err instanceof MongoNetworkError && err.message.match(/timed out/));\n}\nexports.isNetworkTimeoutError = isNetworkTimeoutError;\nfunction isResumableError(error, wireVersion) {\n    if (error == null || !(error instanceof MongoError)) {\n        return false;\n    }\n    if (error instanceof MongoNetworkError) {\n        return true;\n    }\n    if (wireVersion != null && wireVersion >= 9) {\n        // DRIVERS-1308: For 4.4 drivers running against 4.4 servers, drivers will add a special case to treat the CursorNotFound error code as resumable\n        if (error.code === exports.MONGODB_ERROR_CODES.CursorNotFound) {\n            return true;\n        }\n        return error.hasErrorLabel(exports.MongoErrorLabel.ResumableChangeStreamError);\n    }\n    if (typeof error.code === 'number') {\n        return exports.GET_MORE_RESUMABLE_CODES.has(error.code);\n    }\n    return false;\n}\nexports.isResumableError = isResumableError;\n//# sourceMappingURL=error.js.map"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1107, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1111, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/client-side-encryption/errors.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MongoCryptKMSRequestNetworkTimeoutError = exports.MongoCryptAzureKMSRequestError = exports.MongoCryptCreateEncryptedCollectionError = exports.MongoCryptCreateDataKeyError = exports.MongoCryptInvalidArgumentError = exports.MongoCryptError = void 0;\nconst error_1 = require(\"../error\");\n/**\n * @public\n * An error indicating that something went wrong specifically with MongoDB Client Encryption\n */\nclass MongoCryptError extends error_1.MongoError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, options = {}) {\n        super(message, options);\n    }\n    get name() {\n        return 'MongoCryptError';\n    }\n}\nexports.MongoCryptError = MongoCryptError;\n/**\n * @public\n *\n * An error indicating an invalid argument was provided to an encryption API.\n */\nclass MongoCryptInvalidArgumentError extends MongoCryptError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoCryptInvalidArgumentError';\n    }\n}\nexports.MongoCryptInvalidArgumentError = MongoCryptInvalidArgumentError;\n/**\n * @public\n * An error indicating that `ClientEncryption.createEncryptedCollection()` failed to create data keys\n */\nclass MongoCryptCreateDataKeyError extends MongoCryptError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(encryptedFields, { cause }) {\n        super(`Unable to complete creating data keys: ${cause.message}`, { cause });\n        this.encryptedFields = encryptedFields;\n    }\n    get name() {\n        return 'MongoCryptCreateDataKeyError';\n    }\n}\nexports.MongoCryptCreateDataKeyError = MongoCryptCreateDataKeyError;\n/**\n * @public\n * An error indicating that `ClientEncryption.createEncryptedCollection()` failed to create a collection\n */\nclass MongoCryptCreateEncryptedCollectionError extends MongoCryptError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(encryptedFields, { cause }) {\n        super(`Unable to create collection: ${cause.message}`, { cause });\n        this.encryptedFields = encryptedFields;\n    }\n    get name() {\n        return 'MongoCryptCreateEncryptedCollectionError';\n    }\n}\nexports.MongoCryptCreateEncryptedCollectionError = MongoCryptCreateEncryptedCollectionError;\n/**\n * @public\n * An error indicating that mongodb-client-encryption failed to auto-refresh Azure KMS credentials.\n */\nclass MongoCryptAzureKMSRequestError extends MongoCryptError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, body) {\n        super(message);\n        this.body = body;\n    }\n    get name() {\n        return 'MongoCryptAzureKMSRequestError';\n    }\n}\nexports.MongoCryptAzureKMSRequestError = MongoCryptAzureKMSRequestError;\n/** @public */\nclass MongoCryptKMSRequestNetworkTimeoutError extends MongoCryptError {\n    get name() {\n        return 'MongoCryptKMSRequestNetworkTimeoutError';\n    }\n}\nexports.MongoCryptKMSRequestNetworkTimeoutError = MongoCryptKMSRequestNetworkTimeoutError;\n//# sourceMappingURL=errors.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,uCAAuC,GAAG,QAAQ,8BAA8B,GAAG,QAAQ,wCAAwC,GAAG,QAAQ,4BAA4B,GAAG,QAAQ,8BAA8B,GAAG,QAAQ,eAAe,GAAG,KAAK;AAC7P,MAAM,UAAU;AAChB;;;CAGC,GACD,MAAM,wBAAwB,QAAQ,UAAU;IAC5C;;;;;;;;;;MAUE,GACF,YAAY,OAAO,EAAE,UAAU,CAAC,CAAC,CAAE;QAC/B,KAAK,CAAC,SAAS;IACnB;IACA,IAAI,OAAO;QACP,OAAO;IACX;AACJ;AACA,QAAQ,eAAe,GAAG;AAC1B;;;;CAIC,GACD,MAAM,uCAAuC;IACzC;;;;;;;;;;MAUE,GACF,YAAY,OAAO,CAAE;QACjB,KAAK,CAAC;IACV;IACA,IAAI,OAAO;QACP,OAAO;IACX;AACJ;AACA,QAAQ,8BAA8B,GAAG;AACzC;;;CAGC,GACD,MAAM,qCAAqC;IACvC;;;;;;;;;;MAUE,GACF,YAAY,eAAe,EAAE,EAAE,KAAK,EAAE,CAAE;QACpC,KAAK,CAAC,CAAC,uCAAuC,EAAE,MAAM,OAAO,CAAC,CAAC,EAAE;YAAE;QAAM;QACzE,IAAI,CAAC,eAAe,GAAG;IAC3B;IACA,IAAI,OAAO;QACP,OAAO;IACX;AACJ;AACA,QAAQ,4BAA4B,GAAG;AACvC;;;CAGC,GACD,MAAM,iDAAiD;IACnD;;;;;;;;;;MAUE,GACF,YAAY,eAAe,EAAE,EAAE,KAAK,EAAE,CAAE;QACpC,KAAK,CAAC,CAAC,6BAA6B,EAAE,MAAM,OAAO,CAAC,CAAC,EAAE;YAAE;QAAM;QAC/D,IAAI,CAAC,eAAe,GAAG;IAC3B;IACA,IAAI,OAAO;QACP,OAAO;IACX;AACJ;AACA,QAAQ,wCAAwC,GAAG;AACnD;;;CAGC,GACD,MAAM,uCAAuC;IACzC;;;;;;;;;;MAUE,GACF,YAAY,OAAO,EAAE,IAAI,CAAE;QACvB,KAAK,CAAC;QACN,IAAI,CAAC,IAAI,GAAG;IAChB;IACA,IAAI,OAAO;QACP,OAAO;IACX;AACJ;AACA,QAAQ,8BAA8B,GAAG;AACzC,YAAY,GACZ,MAAM,gDAAgD;IAClD,IAAI,OAAO;QACP,OAAO;IACX;AACJ;AACA,QAAQ,uCAAuC,GAAG,yCAClD,kCAAkC"}},
    {"offset": {"line": 1241, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1245, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/write_concern.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WriteConcern = exports.WRITE_CONCERN_KEYS = void 0;\nexports.WRITE_CONCERN_KEYS = ['w', 'wtimeout', 'j', 'journal', 'fsync'];\n/**\n * A MongoDB WriteConcern, which describes the level of acknowledgement\n * requested from MongoDB for write operations.\n * @public\n *\n * @see https://www.mongodb.com/docs/manual/reference/write-concern/\n */\nclass WriteConcern {\n    /**\n     * Constructs a WriteConcern from the write concern properties.\n     * @param w - request acknowledgment that the write operation has propagated to a specified number of mongod instances or to mongod instances with specified tags.\n     * @param wtimeoutMS - specify a time limit to prevent write operations from blocking indefinitely\n     * @param journal - request acknowledgment that the write operation has been written to the on-disk journal\n     * @param fsync - equivalent to the j option. Is deprecated and will be removed in the next major version.\n     */\n    constructor(w, wtimeoutMS, journal, fsync) {\n        if (w != null) {\n            if (!Number.isNaN(Number(w))) {\n                this.w = Number(w);\n            }\n            else {\n                this.w = w;\n            }\n        }\n        if (wtimeoutMS != null) {\n            this.wtimeoutMS = this.wtimeout = wtimeoutMS;\n        }\n        if (journal != null) {\n            this.journal = this.j = journal;\n        }\n        if (fsync != null) {\n            this.journal = this.j = fsync ? true : false;\n        }\n    }\n    /**\n     * Apply a write concern to a command document. Will modify and return the command.\n     */\n    static apply(command, writeConcern) {\n        const wc = {};\n        // The write concern document sent to the server has w/wtimeout/j fields.\n        if (writeConcern.w != null)\n            wc.w = writeConcern.w;\n        if (writeConcern.wtimeoutMS != null)\n            wc.wtimeout = writeConcern.wtimeoutMS;\n        if (writeConcern.journal != null)\n            wc.j = writeConcern.j;\n        command.writeConcern = wc;\n        return command;\n    }\n    /** Construct a WriteConcern given an options object. */\n    static fromOptions(options, inherit) {\n        if (options == null)\n            return undefined;\n        inherit = inherit ?? {};\n        let opts;\n        if (typeof options === 'string' || typeof options === 'number') {\n            opts = { w: options };\n        }\n        else if (options instanceof WriteConcern) {\n            opts = options;\n        }\n        else {\n            opts = options.writeConcern;\n        }\n        const parentOpts = inherit instanceof WriteConcern ? inherit : inherit.writeConcern;\n        const { w = undefined, wtimeout = undefined, j = undefined, fsync = undefined, journal = undefined, wtimeoutMS = undefined } = {\n            ...parentOpts,\n            ...opts\n        };\n        if (w != null ||\n            wtimeout != null ||\n            wtimeoutMS != null ||\n            j != null ||\n            journal != null ||\n            fsync != null) {\n            return new WriteConcern(w, wtimeout ?? wtimeoutMS, j ?? journal, fsync);\n        }\n        return undefined;\n    }\n}\nexports.WriteConcern = WriteConcern;\n//# sourceMappingURL=write_concern.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,YAAY,GAAG,QAAQ,kBAAkB,GAAG,KAAK;AACzD,QAAQ,kBAAkB,GAAG;IAAC;IAAK;IAAY;IAAK;IAAW;CAAQ;AACvE;;;;;;CAMC,GACD,MAAM;IACF;;;;;;KAMC,GACD,YAAY,CAAC,EAAE,UAAU,EAAE,OAAO,EAAE,KAAK,CAAE;QACvC,IAAI,KAAK,MAAM;YACX,IAAI,CAAC,OAAO,KAAK,CAAC,OAAO,KAAK;gBAC1B,IAAI,CAAC,CAAC,GAAG,OAAO;YACpB,OACK;gBACD,IAAI,CAAC,CAAC,GAAG;YACb;QACJ;QACA,IAAI,cAAc,MAAM;YACpB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,QAAQ,GAAG;QACtC;QACA,IAAI,WAAW,MAAM;YACjB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,CAAC,GAAG;QAC5B;QACA,IAAI,SAAS,MAAM;YACf,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,CAAC,GAAG,QAAQ,OAAO;QAC3C;IACJ;IACA;;KAEC,GACD,OAAO,MAAM,OAAO,EAAE,YAAY,EAAE;QAChC,MAAM,KAAK,CAAC;QACZ,yEAAyE;QACzE,IAAI,aAAa,CAAC,IAAI,MAClB,GAAG,CAAC,GAAG,aAAa,CAAC;QACzB,IAAI,aAAa,UAAU,IAAI,MAC3B,GAAG,QAAQ,GAAG,aAAa,UAAU;QACzC,IAAI,aAAa,OAAO,IAAI,MACxB,GAAG,CAAC,GAAG,aAAa,CAAC;QACzB,QAAQ,YAAY,GAAG;QACvB,OAAO;IACX;IACA,sDAAsD,GACtD,OAAO,YAAY,OAAO,EAAE,OAAO,EAAE;QACjC,IAAI,WAAW,MACX,OAAO;QACX,UAAU,WAAW,CAAC;QACtB,IAAI;QACJ,IAAI,OAAO,YAAY,YAAY,OAAO,YAAY,UAAU;YAC5D,OAAO;gBAAE,GAAG;YAAQ;QACxB,OACK,IAAI,mBAAmB,cAAc;YACtC,OAAO;QACX,OACK;YACD,OAAO,QAAQ,YAAY;QAC/B;QACA,MAAM,aAAa,mBAAmB,eAAe,UAAU,QAAQ,YAAY;QACnF,MAAM,EAAE,IAAI,SAAS,EAAE,WAAW,SAAS,EAAE,IAAI,SAAS,EAAE,QAAQ,SAAS,EAAE,UAAU,SAAS,EAAE,aAAa,SAAS,EAAE,GAAG;YAC3H,GAAG,UAAU;YACb,GAAG,IAAI;QACX;QACA,IAAI,KAAK,QACL,YAAY,QACZ,cAAc,QACd,KAAK,QACL,WAAW,QACX,SAAS,MAAM;YACf,OAAO,IAAI,aAAa,GAAG,YAAY,YAAY,KAAK,SAAS;QACrE;QACA,OAAO;IACX;AACJ;AACA,QAAQ,YAAY,GAAG,cACvB,yCAAyC"}},
    {"offset": {"line": 1324, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1328, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/sdam/common.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports._advanceClusterTime = exports.drainTimerQueue = exports.ServerType = exports.TopologyType = exports.STATE_CONNECTED = exports.STATE_CONNECTING = exports.STATE_CLOSED = exports.STATE_CLOSING = void 0;\nconst timers_1 = require(\"timers\");\n// shared state names\nexports.STATE_CLOSING = 'closing';\nexports.STATE_CLOSED = 'closed';\nexports.STATE_CONNECTING = 'connecting';\nexports.STATE_CONNECTED = 'connected';\n/**\n * An enumeration of topology types we know about\n * @public\n */\nexports.TopologyType = Object.freeze({\n    Single: 'Single',\n    ReplicaSetNoPrimary: 'ReplicaSetNoPrimary',\n    ReplicaSetWithPrimary: 'ReplicaSetWithPrimary',\n    Sharded: 'Sharded',\n    Unknown: 'Unknown',\n    LoadBalanced: 'LoadBalanced'\n});\n/**\n * An enumeration of server types we know about\n * @public\n */\nexports.ServerType = Object.freeze({\n    Standalone: 'Standalone',\n    Mongos: 'Mongos',\n    PossiblePrimary: 'PossiblePrimary',\n    RSPrimary: 'RSPrimary',\n    RSSecondary: 'RSSecondary',\n    RSArbiter: 'RSArbiter',\n    RSOther: 'RSOther',\n    RSGhost: 'RSGhost',\n    Unknown: 'Unknown',\n    LoadBalancer: 'LoadBalancer'\n});\n/** @internal */\nfunction drainTimerQueue(queue) {\n    queue.forEach(timers_1.clearTimeout);\n    queue.clear();\n}\nexports.drainTimerQueue = drainTimerQueue;\n/** Shared function to determine clusterTime for a given topology or session */\nfunction _advanceClusterTime(entity, $clusterTime) {\n    if (entity.clusterTime == null) {\n        entity.clusterTime = $clusterTime;\n    }\n    else {\n        if ($clusterTime.clusterTime.greaterThan(entity.clusterTime.clusterTime)) {\n            entity.clusterTime = $clusterTime;\n        }\n    }\n}\nexports._advanceClusterTime = _advanceClusterTime;\n//# sourceMappingURL=common.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,mBAAmB,GAAG,QAAQ,eAAe,GAAG,QAAQ,UAAU,GAAG,QAAQ,YAAY,GAAG,QAAQ,eAAe,GAAG,QAAQ,gBAAgB,GAAG,QAAQ,YAAY,GAAG,QAAQ,aAAa,GAAG,KAAK;AAC7M,MAAM,WAAW;AACjB,qBAAqB;AACrB,QAAQ,aAAa,GAAG;AACxB,QAAQ,YAAY,GAAG;AACvB,QAAQ,gBAAgB,GAAG;AAC3B,QAAQ,eAAe,GAAG;AAC1B;;;CAGC,GACD,QAAQ,YAAY,GAAG,OAAO,MAAM,CAAC;IACjC,QAAQ;IACR,qBAAqB;IACrB,uBAAuB;IACvB,SAAS;IACT,SAAS;IACT,cAAc;AAClB;AACA;;;CAGC,GACD,QAAQ,UAAU,GAAG,OAAO,MAAM,CAAC;IAC/B,YAAY;IACZ,QAAQ;IACR,iBAAiB;IACjB,WAAW;IACX,aAAa;IACb,WAAW;IACX,SAAS;IACT,SAAS;IACT,SAAS;IACT,cAAc;AAClB;AACA,cAAc,GACd,SAAS,gBAAgB,KAAK;IAC1B,MAAM,OAAO,CAAC,SAAS,YAAY;IACnC,MAAM,KAAK;AACf;AACA,QAAQ,eAAe,GAAG;AAC1B,6EAA6E,GAC7E,SAAS,oBAAoB,MAAM,EAAE,YAAY;IAC7C,IAAI,OAAO,WAAW,IAAI,MAAM;QAC5B,OAAO,WAAW,GAAG;IACzB,OACK;QACD,IAAI,aAAa,WAAW,CAAC,WAAW,CAAC,OAAO,WAAW,CAAC,WAAW,GAAG;YACtE,OAAO,WAAW,GAAG;QACzB;IACJ;AACJ;AACA,QAAQ,mBAAmB,GAAG,qBAC9B,kCAAkC"}},
    {"offset": {"line": 1380, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1384, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/read_preference.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ReadPreference = exports.ReadPreferenceMode = void 0;\nconst error_1 = require(\"./error\");\n/** @public */\nexports.ReadPreferenceMode = Object.freeze({\n    primary: 'primary',\n    primaryPreferred: 'primaryPreferred',\n    secondary: 'secondary',\n    secondaryPreferred: 'secondaryPreferred',\n    nearest: 'nearest'\n});\n/**\n * The **ReadPreference** class is a class that represents a MongoDB ReadPreference and is\n * used to construct connections.\n * @public\n *\n * @see https://www.mongodb.com/docs/manual/core/read-preference/\n */\nclass ReadPreference {\n    /**\n     * @param mode - A string describing the read preference mode (primary|primaryPreferred|secondary|secondaryPreferred|nearest)\n     * @param tags - A tag set used to target reads to members with the specified tag(s). tagSet is not available if using read preference mode primary.\n     * @param options - Additional read preference options\n     */\n    constructor(mode, tags, options) {\n        if (!ReadPreference.isValid(mode)) {\n            throw new error_1.MongoInvalidArgumentError(`Invalid read preference mode ${JSON.stringify(mode)}`);\n        }\n        if (options == null && typeof tags === 'object' && !Array.isArray(tags)) {\n            options = tags;\n            tags = undefined;\n        }\n        else if (tags && !Array.isArray(tags)) {\n            throw new error_1.MongoInvalidArgumentError('ReadPreference tags must be an array');\n        }\n        this.mode = mode;\n        this.tags = tags;\n        this.hedge = options?.hedge;\n        this.maxStalenessSeconds = undefined;\n        this.minWireVersion = undefined;\n        options = options ?? {};\n        if (options.maxStalenessSeconds != null) {\n            if (options.maxStalenessSeconds <= 0) {\n                throw new error_1.MongoInvalidArgumentError('maxStalenessSeconds must be a positive integer');\n            }\n            this.maxStalenessSeconds = options.maxStalenessSeconds;\n            // NOTE: The minimum required wire version is 5 for this read preference. If the existing\n            //       topology has a lower value then a MongoError will be thrown during server selection.\n            this.minWireVersion = 5;\n        }\n        if (this.mode === ReadPreference.PRIMARY) {\n            if (this.tags && Array.isArray(this.tags) && this.tags.length > 0) {\n                throw new error_1.MongoInvalidArgumentError('Primary read preference cannot be combined with tags');\n            }\n            if (this.maxStalenessSeconds) {\n                throw new error_1.MongoInvalidArgumentError('Primary read preference cannot be combined with maxStalenessSeconds');\n            }\n            if (this.hedge) {\n                throw new error_1.MongoInvalidArgumentError('Primary read preference cannot be combined with hedge');\n            }\n        }\n    }\n    // Support the deprecated `preference` property introduced in the porcelain layer\n    get preference() {\n        return this.mode;\n    }\n    static fromString(mode) {\n        return new ReadPreference(mode);\n    }\n    /**\n     * Construct a ReadPreference given an options object.\n     *\n     * @param options - The options object from which to extract the read preference.\n     */\n    static fromOptions(options) {\n        if (!options)\n            return;\n        const readPreference = options.readPreference ?? options.session?.transaction.options.readPreference;\n        const readPreferenceTags = options.readPreferenceTags;\n        if (readPreference == null) {\n            return;\n        }\n        if (typeof readPreference === 'string') {\n            return new ReadPreference(readPreference, readPreferenceTags, {\n                maxStalenessSeconds: options.maxStalenessSeconds,\n                hedge: options.hedge\n            });\n        }\n        else if (!(readPreference instanceof ReadPreference) && typeof readPreference === 'object') {\n            const mode = readPreference.mode || readPreference.preference;\n            if (mode && typeof mode === 'string') {\n                return new ReadPreference(mode, readPreference.tags ?? readPreferenceTags, {\n                    maxStalenessSeconds: readPreference.maxStalenessSeconds,\n                    hedge: options.hedge\n                });\n            }\n        }\n        if (readPreferenceTags) {\n            readPreference.tags = readPreferenceTags;\n        }\n        return readPreference;\n    }\n    /**\n     * Replaces options.readPreference with a ReadPreference instance\n     */\n    static translate(options) {\n        if (options.readPreference == null)\n            return options;\n        const r = options.readPreference;\n        if (typeof r === 'string') {\n            options.readPreference = new ReadPreference(r);\n        }\n        else if (r && !(r instanceof ReadPreference) && typeof r === 'object') {\n            const mode = r.mode || r.preference;\n            if (mode && typeof mode === 'string') {\n                options.readPreference = new ReadPreference(mode, r.tags, {\n                    maxStalenessSeconds: r.maxStalenessSeconds\n                });\n            }\n        }\n        else if (!(r instanceof ReadPreference)) {\n            throw new error_1.MongoInvalidArgumentError(`Invalid read preference: ${r}`);\n        }\n        return options;\n    }\n    /**\n     * Validate if a mode is legal\n     *\n     * @param mode - The string representing the read preference mode.\n     */\n    static isValid(mode) {\n        const VALID_MODES = new Set([\n            ReadPreference.PRIMARY,\n            ReadPreference.PRIMARY_PREFERRED,\n            ReadPreference.SECONDARY,\n            ReadPreference.SECONDARY_PREFERRED,\n            ReadPreference.NEAREST,\n            null\n        ]);\n        return VALID_MODES.has(mode);\n    }\n    /**\n     * Validate if a mode is legal\n     *\n     * @param mode - The string representing the read preference mode.\n     */\n    isValid(mode) {\n        return ReadPreference.isValid(typeof mode === 'string' ? mode : this.mode);\n    }\n    /**\n     * Indicates that this readPreference needs the \"SecondaryOk\" bit when sent over the wire\n     * @see https://www.mongodb.com/docs/manual/reference/mongodb-wire-protocol/#op-query\n     */\n    secondaryOk() {\n        const NEEDS_SECONDARYOK = new Set([\n            ReadPreference.PRIMARY_PREFERRED,\n            ReadPreference.SECONDARY,\n            ReadPreference.SECONDARY_PREFERRED,\n            ReadPreference.NEAREST\n        ]);\n        return NEEDS_SECONDARYOK.has(this.mode);\n    }\n    /**\n     * Check if the two ReadPreferences are equivalent\n     *\n     * @param readPreference - The read preference with which to check equality\n     */\n    equals(readPreference) {\n        return readPreference.mode === this.mode;\n    }\n    /** Return JSON representation */\n    toJSON() {\n        const readPreference = { mode: this.mode };\n        if (Array.isArray(this.tags))\n            readPreference.tags = this.tags;\n        if (this.maxStalenessSeconds)\n            readPreference.maxStalenessSeconds = this.maxStalenessSeconds;\n        if (this.hedge)\n            readPreference.hedge = this.hedge;\n        return readPreference;\n    }\n}\nReadPreference.PRIMARY = exports.ReadPreferenceMode.primary;\nReadPreference.PRIMARY_PREFERRED = exports.ReadPreferenceMode.primaryPreferred;\nReadPreference.SECONDARY = exports.ReadPreferenceMode.secondary;\nReadPreference.SECONDARY_PREFERRED = exports.ReadPreferenceMode.secondaryPreferred;\nReadPreference.NEAREST = exports.ReadPreferenceMode.nearest;\nReadPreference.primary = new ReadPreference(exports.ReadPreferenceMode.primary);\nReadPreference.primaryPreferred = new ReadPreference(exports.ReadPreferenceMode.primaryPreferred);\nReadPreference.secondary = new ReadPreference(exports.ReadPreferenceMode.secondary);\nReadPreference.secondaryPreferred = new ReadPreference(exports.ReadPreferenceMode.secondaryPreferred);\nReadPreference.nearest = new ReadPreference(exports.ReadPreferenceMode.nearest);\nexports.ReadPreference = ReadPreference;\n//# sourceMappingURL=read_preference.js.map"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1563, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1567, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/read_concern.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ReadConcern = exports.ReadConcernLevel = void 0;\n/** @public */\nexports.ReadConcernLevel = Object.freeze({\n    local: 'local',\n    majority: 'majority',\n    linearizable: 'linearizable',\n    available: 'available',\n    snapshot: 'snapshot'\n});\n/**\n * The MongoDB ReadConcern, which allows for control of the consistency and isolation properties\n * of the data read from replica sets and replica set shards.\n * @public\n *\n * @see https://www.mongodb.com/docs/manual/reference/read-concern/index.html\n */\nclass ReadConcern {\n    /** Constructs a ReadConcern from the read concern level.*/\n    constructor(level) {\n        /**\n         * A spec test exists that allows level to be any string.\n         * \"invalid readConcern with out stage\"\n         * @see ./test/spec/crud/v2/aggregate-out-readConcern.json\n         * @see https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.rst#unknown-levels-and-additional-options-for-string-based-readconcerns\n         */\n        this.level = exports.ReadConcernLevel[level] ?? level;\n    }\n    /**\n     * Construct a ReadConcern given an options object.\n     *\n     * @param options - The options object from which to extract the write concern.\n     */\n    static fromOptions(options) {\n        if (options == null) {\n            return;\n        }\n        if (options.readConcern) {\n            const { readConcern } = options;\n            if (readConcern instanceof ReadConcern) {\n                return readConcern;\n            }\n            else if (typeof readConcern === 'string') {\n                return new ReadConcern(readConcern);\n            }\n            else if ('level' in readConcern && readConcern.level) {\n                return new ReadConcern(readConcern.level);\n            }\n        }\n        if (options.level) {\n            return new ReadConcern(options.level);\n        }\n        return;\n    }\n    static get MAJORITY() {\n        return exports.ReadConcernLevel.majority;\n    }\n    static get AVAILABLE() {\n        return exports.ReadConcernLevel.available;\n    }\n    static get LINEARIZABLE() {\n        return exports.ReadConcernLevel.linearizable;\n    }\n    static get SNAPSHOT() {\n        return exports.ReadConcernLevel.snapshot;\n    }\n    toJSON() {\n        return { level: this.level };\n    }\n}\nexports.ReadConcern = ReadConcern;\n//# sourceMappingURL=read_concern.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,WAAW,GAAG,QAAQ,gBAAgB,GAAG,KAAK;AACtD,YAAY,GACZ,QAAQ,gBAAgB,GAAG,OAAO,MAAM,CAAC;IACrC,OAAO;IACP,UAAU;IACV,cAAc;IACd,WAAW;IACX,UAAU;AACd;AACA;;;;;;CAMC,GACD,MAAM;IACF,yDAAyD,GACzD,YAAY,KAAK,CAAE;QACf;;;;;SAKC,GACD,IAAI,CAAC,KAAK,GAAG,QAAQ,gBAAgB,CAAC,MAAM,IAAI;IACpD;IACA;;;;KAIC,GACD,OAAO,YAAY,OAAO,EAAE;QACxB,IAAI,WAAW,MAAM;YACjB;QACJ;QACA,IAAI,QAAQ,WAAW,EAAE;YACrB,MAAM,EAAE,WAAW,EAAE,GAAG;YACxB,IAAI,uBAAuB,aAAa;gBACpC,OAAO;YACX,OACK,IAAI,OAAO,gBAAgB,UAAU;gBACtC,OAAO,IAAI,YAAY;YAC3B,OACK,IAAI,WAAW,eAAe,YAAY,KAAK,EAAE;gBAClD,OAAO,IAAI,YAAY,YAAY,KAAK;YAC5C;QACJ;QACA,IAAI,QAAQ,KAAK,EAAE;YACf,OAAO,IAAI,YAAY,QAAQ,KAAK;QACxC;QACA;IACJ;IACA,WAAW,WAAW;QAClB,OAAO,QAAQ,gBAAgB,CAAC,QAAQ;IAC5C;IACA,WAAW,YAAY;QACnB,OAAO,QAAQ,gBAAgB,CAAC,SAAS;IAC7C;IACA,WAAW,eAAe;QACtB,OAAO,QAAQ,gBAAgB,CAAC,YAAY;IAChD;IACA,WAAW,WAAW;QAClB,OAAO,QAAQ,gBAAgB,CAAC,QAAQ;IAC5C;IACA,SAAS;QACL,OAAO;YAAE,OAAO,IAAI,CAAC,KAAK;QAAC;IAC/B;AACJ;AACA,QAAQ,WAAW,GAAG,aACtB,wCAAwC"}},
    {"offset": {"line": 1636, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1640, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/constants.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TOPOLOGY_EVENTS = exports.CMAP_EVENTS = exports.HEARTBEAT_EVENTS = exports.RESUME_TOKEN_CHANGED = exports.END = exports.CHANGE = exports.INIT = exports.MORE = exports.RESPONSE = exports.SERVER_HEARTBEAT_FAILED = exports.SERVER_HEARTBEAT_SUCCEEDED = exports.SERVER_HEARTBEAT_STARTED = exports.COMMAND_FAILED = exports.COMMAND_SUCCEEDED = exports.COMMAND_STARTED = exports.CLUSTER_TIME_RECEIVED = exports.CONNECTION_CHECKED_IN = exports.CONNECTION_CHECKED_OUT = exports.CONNECTION_CHECK_OUT_FAILED = exports.CONNECTION_CHECK_OUT_STARTED = exports.CONNECTION_CLOSED = exports.CONNECTION_READY = exports.CONNECTION_CREATED = exports.CONNECTION_POOL_READY = exports.CONNECTION_POOL_CLEARED = exports.CONNECTION_POOL_CLOSED = exports.CONNECTION_POOL_CREATED = exports.TOPOLOGY_DESCRIPTION_CHANGED = exports.TOPOLOGY_CLOSED = exports.TOPOLOGY_OPENING = exports.SERVER_DESCRIPTION_CHANGED = exports.SERVER_CLOSED = exports.SERVER_OPENING = exports.DESCRIPTION_RECEIVED = exports.UNPINNED = exports.PINNED = exports.MESSAGE = exports.ENDED = exports.CLOSED = exports.CONNECT = exports.OPEN = exports.CLOSE = exports.TIMEOUT = exports.ERROR = exports.SYSTEM_JS_COLLECTION = exports.SYSTEM_COMMAND_COLLECTION = exports.SYSTEM_USER_COLLECTION = exports.SYSTEM_PROFILE_COLLECTION = exports.SYSTEM_INDEX_COLLECTION = exports.SYSTEM_NAMESPACE_COLLECTION = void 0;\nexports.LEGACY_HELLO_COMMAND_CAMEL_CASE = exports.LEGACY_HELLO_COMMAND = exports.MONGO_CLIENT_EVENTS = exports.LOCAL_SERVER_EVENTS = exports.SERVER_RELAY_EVENTS = exports.APM_EVENTS = void 0;\nexports.SYSTEM_NAMESPACE_COLLECTION = 'system.namespaces';\nexports.SYSTEM_INDEX_COLLECTION = 'system.indexes';\nexports.SYSTEM_PROFILE_COLLECTION = 'system.profile';\nexports.SYSTEM_USER_COLLECTION = 'system.users';\nexports.SYSTEM_COMMAND_COLLECTION = '$cmd';\nexports.SYSTEM_JS_COLLECTION = 'system.js';\n// events\nexports.ERROR = 'error';\nexports.TIMEOUT = 'timeout';\nexports.CLOSE = 'close';\nexports.OPEN = 'open';\nexports.CONNECT = 'connect';\nexports.CLOSED = 'closed';\nexports.ENDED = 'ended';\nexports.MESSAGE = 'message';\nexports.PINNED = 'pinned';\nexports.UNPINNED = 'unpinned';\nexports.DESCRIPTION_RECEIVED = 'descriptionReceived';\nexports.SERVER_OPENING = 'serverOpening';\nexports.SERVER_CLOSED = 'serverClosed';\nexports.SERVER_DESCRIPTION_CHANGED = 'serverDescriptionChanged';\nexports.TOPOLOGY_OPENING = 'topologyOpening';\nexports.TOPOLOGY_CLOSED = 'topologyClosed';\nexports.TOPOLOGY_DESCRIPTION_CHANGED = 'topologyDescriptionChanged';\n/** @internal */\nexports.CONNECTION_POOL_CREATED = 'connectionPoolCreated';\n/** @internal */\nexports.CONNECTION_POOL_CLOSED = 'connectionPoolClosed';\n/** @internal */\nexports.CONNECTION_POOL_CLEARED = 'connectionPoolCleared';\n/** @internal */\nexports.CONNECTION_POOL_READY = 'connectionPoolReady';\n/** @internal */\nexports.CONNECTION_CREATED = 'connectionCreated';\n/** @internal */\nexports.CONNECTION_READY = 'connectionReady';\n/** @internal */\nexports.CONNECTION_CLOSED = 'connectionClosed';\n/** @internal */\nexports.CONNECTION_CHECK_OUT_STARTED = 'connectionCheckOutStarted';\n/** @internal */\nexports.CONNECTION_CHECK_OUT_FAILED = 'connectionCheckOutFailed';\n/** @internal */\nexports.CONNECTION_CHECKED_OUT = 'connectionCheckedOut';\n/** @internal */\nexports.CONNECTION_CHECKED_IN = 'connectionCheckedIn';\nexports.CLUSTER_TIME_RECEIVED = 'clusterTimeReceived';\nexports.COMMAND_STARTED = 'commandStarted';\nexports.COMMAND_SUCCEEDED = 'commandSucceeded';\nexports.COMMAND_FAILED = 'commandFailed';\nexports.SERVER_HEARTBEAT_STARTED = 'serverHeartbeatStarted';\nexports.SERVER_HEARTBEAT_SUCCEEDED = 'serverHeartbeatSucceeded';\nexports.SERVER_HEARTBEAT_FAILED = 'serverHeartbeatFailed';\nexports.RESPONSE = 'response';\nexports.MORE = 'more';\nexports.INIT = 'init';\nexports.CHANGE = 'change';\nexports.END = 'end';\nexports.RESUME_TOKEN_CHANGED = 'resumeTokenChanged';\n/** @public */\nexports.HEARTBEAT_EVENTS = Object.freeze([\n    exports.SERVER_HEARTBEAT_STARTED,\n    exports.SERVER_HEARTBEAT_SUCCEEDED,\n    exports.SERVER_HEARTBEAT_FAILED\n]);\n/** @public */\nexports.CMAP_EVENTS = Object.freeze([\n    exports.CONNECTION_POOL_CREATED,\n    exports.CONNECTION_POOL_READY,\n    exports.CONNECTION_POOL_CLEARED,\n    exports.CONNECTION_POOL_CLOSED,\n    exports.CONNECTION_CREATED,\n    exports.CONNECTION_READY,\n    exports.CONNECTION_CLOSED,\n    exports.CONNECTION_CHECK_OUT_STARTED,\n    exports.CONNECTION_CHECK_OUT_FAILED,\n    exports.CONNECTION_CHECKED_OUT,\n    exports.CONNECTION_CHECKED_IN\n]);\n/** @public */\nexports.TOPOLOGY_EVENTS = Object.freeze([\n    exports.SERVER_OPENING,\n    exports.SERVER_CLOSED,\n    exports.SERVER_DESCRIPTION_CHANGED,\n    exports.TOPOLOGY_OPENING,\n    exports.TOPOLOGY_CLOSED,\n    exports.TOPOLOGY_DESCRIPTION_CHANGED,\n    exports.ERROR,\n    exports.TIMEOUT,\n    exports.CLOSE\n]);\n/** @public */\nexports.APM_EVENTS = Object.freeze([\n    exports.COMMAND_STARTED,\n    exports.COMMAND_SUCCEEDED,\n    exports.COMMAND_FAILED\n]);\n/**\n * All events that we relay to the `Topology`\n * @internal\n */\nexports.SERVER_RELAY_EVENTS = Object.freeze([\n    exports.SERVER_HEARTBEAT_STARTED,\n    exports.SERVER_HEARTBEAT_SUCCEEDED,\n    exports.SERVER_HEARTBEAT_FAILED,\n    exports.COMMAND_STARTED,\n    exports.COMMAND_SUCCEEDED,\n    exports.COMMAND_FAILED,\n    ...exports.CMAP_EVENTS\n]);\n/**\n * All events we listen to from `Server` instances, but do not forward to the client\n * @internal\n */\nexports.LOCAL_SERVER_EVENTS = Object.freeze([\n    exports.CONNECT,\n    exports.DESCRIPTION_RECEIVED,\n    exports.CLOSED,\n    exports.ENDED\n]);\n/** @public */\nexports.MONGO_CLIENT_EVENTS = Object.freeze([\n    ...exports.CMAP_EVENTS,\n    ...exports.APM_EVENTS,\n    ...exports.TOPOLOGY_EVENTS,\n    ...exports.HEARTBEAT_EVENTS\n]);\n/**\n * @internal\n * The legacy hello command that was deprecated in MongoDB 5.0.\n */\nexports.LEGACY_HELLO_COMMAND = 'ismaster';\n/**\n * @internal\n * The legacy hello command that was deprecated in MongoDB 5.0.\n */\nexports.LEGACY_HELLO_COMMAND_CAMEL_CASE = 'isMaster';\n//# sourceMappingURL=constants.js.map"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1763, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1767, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/cmap/wire_protocol/constants.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OP_MSG = exports.OP_COMPRESSED = exports.OP_DELETE = exports.OP_QUERY = exports.OP_INSERT = exports.OP_UPDATE = exports.OP_REPLY = exports.MIN_SUPPORTED_QE_SERVER_VERSION = exports.MIN_SUPPORTED_QE_WIRE_VERSION = exports.MAX_SUPPORTED_WIRE_VERSION = exports.MIN_SUPPORTED_WIRE_VERSION = exports.MAX_SUPPORTED_SERVER_VERSION = exports.MIN_SUPPORTED_SERVER_VERSION = void 0;\nexports.MIN_SUPPORTED_SERVER_VERSION = '3.6';\nexports.MAX_SUPPORTED_SERVER_VERSION = '7.0';\nexports.MIN_SUPPORTED_WIRE_VERSION = 6;\nexports.MAX_SUPPORTED_WIRE_VERSION = 21;\nexports.MIN_SUPPORTED_QE_WIRE_VERSION = 21;\nexports.MIN_SUPPORTED_QE_SERVER_VERSION = '7.0';\nexports.OP_REPLY = 1;\nexports.OP_UPDATE = 2001;\nexports.OP_INSERT = 2002;\nexports.OP_QUERY = 2004;\nexports.OP_DELETE = 2006;\nexports.OP_COMPRESSED = 2012;\nexports.OP_MSG = 2013;\n//# sourceMappingURL=constants.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,MAAM,GAAG,QAAQ,aAAa,GAAG,QAAQ,SAAS,GAAG,QAAQ,QAAQ,GAAG,QAAQ,SAAS,GAAG,QAAQ,SAAS,GAAG,QAAQ,QAAQ,GAAG,QAAQ,+BAA+B,GAAG,QAAQ,6BAA6B,GAAG,QAAQ,0BAA0B,GAAG,QAAQ,0BAA0B,GAAG,QAAQ,4BAA4B,GAAG,QAAQ,4BAA4B,GAAG,KAAK;AAC1X,QAAQ,4BAA4B,GAAG;AACvC,QAAQ,4BAA4B,GAAG;AACvC,QAAQ,0BAA0B,GAAG;AACrC,QAAQ,0BAA0B,GAAG;AACrC,QAAQ,6BAA6B,GAAG;AACxC,QAAQ,+BAA+B,GAAG;AAC1C,QAAQ,QAAQ,GAAG;AACnB,QAAQ,SAAS,GAAG;AACpB,QAAQ,SAAS,GAAG;AACpB,QAAQ,QAAQ,GAAG;AACnB,QAAQ,SAAS,GAAG;AACpB,QAAQ,aAAa,GAAG;AACxB,QAAQ,MAAM,GAAG,MACjB,qCAAqC"}},
    {"offset": {"line": 1785, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1789, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/bson.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.resolveBSONOptions = exports.pluckBSONSerializeOptions = exports.UUID = exports.Timestamp = exports.serialize = exports.ObjectId = exports.MinKey = exports.MaxKey = exports.Long = exports.Int32 = exports.Double = exports.deserialize = exports.Decimal128 = exports.DBRef = exports.Code = exports.calculateObjectSize = exports.BSONType = exports.BSONSymbol = exports.BSONRegExp = exports.BSON = exports.Binary = void 0;\nvar bson_1 = require(\"bson\");\nObject.defineProperty(exports, \"Binary\", { enumerable: true, get: function () { return bson_1.Binary; } });\nObject.defineProperty(exports, \"BSON\", { enumerable: true, get: function () { return bson_1.BSON; } });\nObject.defineProperty(exports, \"BSONRegExp\", { enumerable: true, get: function () { return bson_1.BSONRegExp; } });\nObject.defineProperty(exports, \"BSONSymbol\", { enumerable: true, get: function () { return bson_1.BSONSymbol; } });\nObject.defineProperty(exports, \"BSONType\", { enumerable: true, get: function () { return bson_1.BSONType; } });\nObject.defineProperty(exports, \"calculateObjectSize\", { enumerable: true, get: function () { return bson_1.calculateObjectSize; } });\nObject.defineProperty(exports, \"Code\", { enumerable: true, get: function () { return bson_1.Code; } });\nObject.defineProperty(exports, \"DBRef\", { enumerable: true, get: function () { return bson_1.DBRef; } });\nObject.defineProperty(exports, \"Decimal128\", { enumerable: true, get: function () { return bson_1.Decimal128; } });\nObject.defineProperty(exports, \"deserialize\", { enumerable: true, get: function () { return bson_1.deserialize; } });\nObject.defineProperty(exports, \"Double\", { enumerable: true, get: function () { return bson_1.Double; } });\nObject.defineProperty(exports, \"Int32\", { enumerable: true, get: function () { return bson_1.Int32; } });\nObject.defineProperty(exports, \"Long\", { enumerable: true, get: function () { return bson_1.Long; } });\nObject.defineProperty(exports, \"MaxKey\", { enumerable: true, get: function () { return bson_1.MaxKey; } });\nObject.defineProperty(exports, \"MinKey\", { enumerable: true, get: function () { return bson_1.MinKey; } });\nObject.defineProperty(exports, \"ObjectId\", { enumerable: true, get: function () { return bson_1.ObjectId; } });\nObject.defineProperty(exports, \"serialize\", { enumerable: true, get: function () { return bson_1.serialize; } });\nObject.defineProperty(exports, \"Timestamp\", { enumerable: true, get: function () { return bson_1.Timestamp; } });\nObject.defineProperty(exports, \"UUID\", { enumerable: true, get: function () { return bson_1.UUID; } });\nfunction pluckBSONSerializeOptions(options) {\n    const { fieldsAsRaw, useBigInt64, promoteValues, promoteBuffers, promoteLongs, serializeFunctions, ignoreUndefined, bsonRegExp, raw, enableUtf8Validation } = options;\n    return {\n        fieldsAsRaw,\n        useBigInt64,\n        promoteValues,\n        promoteBuffers,\n        promoteLongs,\n        serializeFunctions,\n        ignoreUndefined,\n        bsonRegExp,\n        raw,\n        enableUtf8Validation\n    };\n}\nexports.pluckBSONSerializeOptions = pluckBSONSerializeOptions;\n/**\n * Merge the given BSONSerializeOptions, preferring options over the parent's options, and\n * substituting defaults for values not set.\n *\n * @internal\n */\nfunction resolveBSONOptions(options, parent) {\n    const parentOptions = parent?.bsonOptions;\n    return {\n        raw: options?.raw ?? parentOptions?.raw ?? false,\n        useBigInt64: options?.useBigInt64 ?? parentOptions?.useBigInt64 ?? false,\n        promoteLongs: options?.promoteLongs ?? parentOptions?.promoteLongs ?? true,\n        promoteValues: options?.promoteValues ?? parentOptions?.promoteValues ?? true,\n        promoteBuffers: options?.promoteBuffers ?? parentOptions?.promoteBuffers ?? false,\n        ignoreUndefined: options?.ignoreUndefined ?? parentOptions?.ignoreUndefined ?? false,\n        bsonRegExp: options?.bsonRegExp ?? parentOptions?.bsonRegExp ?? false,\n        serializeFunctions: options?.serializeFunctions ?? parentOptions?.serializeFunctions ?? false,\n        fieldsAsRaw: options?.fieldsAsRaw ?? parentOptions?.fieldsAsRaw ?? {},\n        enableUtf8Validation: options?.enableUtf8Validation ?? parentOptions?.enableUtf8Validation ?? true\n    };\n}\nexports.resolveBSONOptions = resolveBSONOptions;\n//# sourceMappingURL=bson.js.map"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1946, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1950, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/utils.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DOCUMENT_DB_CHECK = exports.TimeoutController = exports.request = exports.matchesParentDomain = exports.parseUnsignedInteger = exports.parseInteger = exports.compareObjectId = exports.commandSupportsReadConcern = exports.shuffle = exports.supportsRetryableWrites = exports.enumToString = exports.emitWarningOnce = exports.emitWarning = exports.MONGODB_WARNING_CODE = exports.DEFAULT_PK_FACTORY = exports.HostAddress = exports.BufferPool = exports.List = exports.deepCopy = exports.isRecord = exports.setDifference = exports.isHello = exports.isSuperset = exports.resolveOptions = exports.hasAtomicOperators = exports.calculateDurationInMs = exports.now = exports.makeStateMachine = exports.errorStrictEqual = exports.arrayStrictEqual = exports.eachAsync = exports.maxWireVersion = exports.uuidV4 = exports.maybeCallback = exports.makeCounter = exports.MongoDBCollectionNamespace = exports.MongoDBNamespace = exports.ns = exports.getTopology = exports.decorateWithExplain = exports.decorateWithReadConcern = exports.decorateWithCollation = exports.isPromiseLike = exports.applyRetryableWrites = exports.filterOptions = exports.mergeOptions = exports.isObject = exports.normalizeHintField = exports.hostMatchesWildcards = exports.ByteUtils = void 0;\nexports.isHostMatch = exports.COSMOS_DB_MSG = exports.DOCUMENT_DB_MSG = exports.COSMOS_DB_CHECK = void 0;\nconst crypto = require(\"crypto\");\nconst http = require(\"http\");\nconst timers_1 = require(\"timers\");\nconst url = require(\"url\");\nconst url_1 = require(\"url\");\nconst bson_1 = require(\"./bson\");\nconst constants_1 = require(\"./cmap/wire_protocol/constants\");\nconst constants_2 = require(\"./constants\");\nconst error_1 = require(\"./error\");\nconst read_concern_1 = require(\"./read_concern\");\nconst read_preference_1 = require(\"./read_preference\");\nconst common_1 = require(\"./sdam/common\");\nconst write_concern_1 = require(\"./write_concern\");\nexports.ByteUtils = {\n    toLocalBufferType(buffer) {\n        return Buffer.isBuffer(buffer)\n            ? buffer\n            : Buffer.from(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n    },\n    equals(seqA, seqB) {\n        return exports.ByteUtils.toLocalBufferType(seqA).equals(seqB);\n    },\n    compare(seqA, seqB) {\n        return exports.ByteUtils.toLocalBufferType(seqA).compare(seqB);\n    },\n    toBase64(uint8array) {\n        return exports.ByteUtils.toLocalBufferType(uint8array).toString('base64');\n    }\n};\n/**\n * Determines if a connection's address matches a user provided list\n * of domain wildcards.\n */\nfunction hostMatchesWildcards(host, wildcards) {\n    for (const wildcard of wildcards) {\n        if (host === wildcard ||\n            (wildcard.startsWith('*.') && host?.endsWith(wildcard.substring(2, wildcard.length))) ||\n            (wildcard.startsWith('*/') && host?.endsWith(wildcard.substring(2, wildcard.length)))) {\n            return true;\n        }\n    }\n    return false;\n}\nexports.hostMatchesWildcards = hostMatchesWildcards;\n/**\n * Ensure Hint field is in a shape we expect:\n * - object of index names mapping to 1 or -1\n * - just an index name\n * @internal\n */\nfunction normalizeHintField(hint) {\n    let finalHint = undefined;\n    if (typeof hint === 'string') {\n        finalHint = hint;\n    }\n    else if (Array.isArray(hint)) {\n        finalHint = {};\n        hint.forEach(param => {\n            finalHint[param] = 1;\n        });\n    }\n    else if (hint != null && typeof hint === 'object') {\n        finalHint = {};\n        for (const name in hint) {\n            finalHint[name] = hint[name];\n        }\n    }\n    return finalHint;\n}\nexports.normalizeHintField = normalizeHintField;\nconst TO_STRING = (object) => Object.prototype.toString.call(object);\n/**\n * Checks if arg is an Object:\n * - **NOTE**: the check is based on the `[Symbol.toStringTag]() === 'Object'`\n * @internal\n */\nfunction isObject(arg) {\n    return '[object Object]' === TO_STRING(arg);\n}\nexports.isObject = isObject;\n/** @internal */\nfunction mergeOptions(target, source) {\n    return { ...target, ...source };\n}\nexports.mergeOptions = mergeOptions;\n/** @internal */\nfunction filterOptions(options, names) {\n    const filterOptions = {};\n    for (const name in options) {\n        if (names.includes(name)) {\n            filterOptions[name] = options[name];\n        }\n    }\n    // Filtered options\n    return filterOptions;\n}\nexports.filterOptions = filterOptions;\n/**\n * Applies retryWrites: true to a command if retryWrites is set on the command's database.\n * @internal\n *\n * @param target - The target command to which we will apply retryWrites.\n * @param db - The database from which we can inherit a retryWrites value.\n */\nfunction applyRetryableWrites(target, db) {\n    if (db && db.s.options?.retryWrites) {\n        target.retryWrites = true;\n    }\n    return target;\n}\nexports.applyRetryableWrites = applyRetryableWrites;\n/**\n * Applies a write concern to a command based on well defined inheritance rules, optionally\n * detecting support for the write concern in the first place.\n * @internal\n *\n * @param target - the target command we will be applying the write concern to\n * @param sources - sources where we can inherit default write concerns from\n * @param options - optional settings passed into a command for write concern overrides\n */\n/**\n * Checks if a given value is a Promise\n *\n * @typeParam T - The resolution type of the possible promise\n * @param value - An object that could be a promise\n * @returns true if the provided value is a Promise\n */\nfunction isPromiseLike(value) {\n    return !!value && typeof value.then === 'function';\n}\nexports.isPromiseLike = isPromiseLike;\n/**\n * Applies collation to a given command.\n * @internal\n *\n * @param command - the command on which to apply collation\n * @param target - target of command\n * @param options - options containing collation settings\n */\nfunction decorateWithCollation(command, target, options) {\n    const capabilities = getTopology(target).capabilities;\n    if (options.collation && typeof options.collation === 'object') {\n        if (capabilities && capabilities.commandsTakeCollation) {\n            command.collation = options.collation;\n        }\n        else {\n            throw new error_1.MongoCompatibilityError(`Current topology does not support collation`);\n        }\n    }\n}\nexports.decorateWithCollation = decorateWithCollation;\n/**\n * Applies a read concern to a given command.\n * @internal\n *\n * @param command - the command on which to apply the read concern\n * @param coll - the parent collection of the operation calling this method\n */\nfunction decorateWithReadConcern(command, coll, options) {\n    if (options && options.session && options.session.inTransaction()) {\n        return;\n    }\n    const readConcern = Object.assign({}, command.readConcern || {});\n    if (coll.s.readConcern) {\n        Object.assign(readConcern, coll.s.readConcern);\n    }\n    if (Object.keys(readConcern).length > 0) {\n        Object.assign(command, { readConcern: readConcern });\n    }\n}\nexports.decorateWithReadConcern = decorateWithReadConcern;\n/**\n * Applies an explain to a given command.\n * @internal\n *\n * @param command - the command on which to apply the explain\n * @param options - the options containing the explain verbosity\n */\nfunction decorateWithExplain(command, explain) {\n    if (command.explain) {\n        return command;\n    }\n    return { explain: command, verbosity: explain.verbosity };\n}\nexports.decorateWithExplain = decorateWithExplain;\n/**\n * A helper function to get the topology from a given provider. Throws\n * if the topology cannot be found.\n * @throws MongoNotConnectedError\n * @internal\n */\nfunction getTopology(provider) {\n    // MongoClient or ClientSession or AbstractCursor\n    if ('topology' in provider && provider.topology) {\n        return provider.topology;\n    }\n    else if ('client' in provider && provider.client.topology) {\n        return provider.client.topology;\n    }\n    throw new error_1.MongoNotConnectedError('MongoClient must be connected to perform this operation');\n}\nexports.getTopology = getTopology;\n/** @internal */\nfunction ns(ns) {\n    return MongoDBNamespace.fromString(ns);\n}\nexports.ns = ns;\n/** @public */\nclass MongoDBNamespace {\n    /**\n     * Create a namespace object\n     *\n     * @param db - database name\n     * @param collection - collection name\n     */\n    constructor(db, collection) {\n        this.db = db;\n        this.collection = collection;\n        this.collection = collection === '' ? undefined : collection;\n    }\n    toString() {\n        return this.collection ? `${this.db}.${this.collection}` : this.db;\n    }\n    withCollection(collection) {\n        return new MongoDBCollectionNamespace(this.db, collection);\n    }\n    static fromString(namespace) {\n        if (typeof namespace !== 'string' || namespace === '') {\n            // TODO(NODE-3483): Replace with MongoNamespaceError\n            throw new error_1.MongoRuntimeError(`Cannot parse namespace from \"${namespace}\"`);\n        }\n        const [db, ...collectionParts] = namespace.split('.');\n        const collection = collectionParts.join('.');\n        return new MongoDBNamespace(db, collection === '' ? undefined : collection);\n    }\n}\nexports.MongoDBNamespace = MongoDBNamespace;\n/**\n * @public\n *\n * A class representing a collection's namespace.  This class enforces (through Typescript) that\n * the `collection` portion of the namespace is defined and should only be\n * used in scenarios where this can be guaranteed.\n */\nclass MongoDBCollectionNamespace extends MongoDBNamespace {\n    constructor(db, collection) {\n        super(db, collection);\n        this.collection = collection;\n    }\n    static fromString(namespace) {\n        return super.fromString(namespace);\n    }\n}\nexports.MongoDBCollectionNamespace = MongoDBCollectionNamespace;\n/** @internal */\nfunction* makeCounter(seed = 0) {\n    let count = seed;\n    while (true) {\n        const newCount = count;\n        count += 1;\n        yield newCount;\n    }\n}\nexports.makeCounter = makeCounter;\nfunction maybeCallback(promiseFn, callback) {\n    const promise = promiseFn();\n    if (callback == null) {\n        return promise;\n    }\n    promise.then(result => callback(undefined, result), error => callback(error));\n    return;\n}\nexports.maybeCallback = maybeCallback;\n/**\n * Synchronously Generate a UUIDv4\n * @internal\n */\nfunction uuidV4() {\n    const result = crypto.randomBytes(16);\n    result[6] = (result[6] & 0x0f) | 0x40;\n    result[8] = (result[8] & 0x3f) | 0x80;\n    return result;\n}\nexports.uuidV4 = uuidV4;\n/**\n * A helper function for determining `maxWireVersion` between legacy and new topology instances\n * @internal\n */\nfunction maxWireVersion(topologyOrServer) {\n    if (topologyOrServer) {\n        if (topologyOrServer.loadBalanced) {\n            // Since we do not have a monitor, we assume the load balanced server is always\n            // pointed at the latest mongodb version. There is a risk that for on-prem\n            // deployments that don't upgrade immediately that this could alert to the\n            // application that a feature is available that is actually not.\n            return constants_1.MAX_SUPPORTED_WIRE_VERSION;\n        }\n        if (topologyOrServer.hello) {\n            return topologyOrServer.hello.maxWireVersion;\n        }\n        if ('lastHello' in topologyOrServer && typeof topologyOrServer.lastHello === 'function') {\n            const lastHello = topologyOrServer.lastHello();\n            if (lastHello) {\n                return lastHello.maxWireVersion;\n            }\n        }\n        if (topologyOrServer.description &&\n            'maxWireVersion' in topologyOrServer.description &&\n            topologyOrServer.description.maxWireVersion != null) {\n            return topologyOrServer.description.maxWireVersion;\n        }\n    }\n    return 0;\n}\nexports.maxWireVersion = maxWireVersion;\n/**\n * Applies the function `eachFn` to each item in `arr`, in parallel.\n * @internal\n *\n * @param arr - An array of items to asynchronously iterate over\n * @param eachFn - A function to call on each item of the array. The callback signature is `(item, callback)`, where the callback indicates iteration is complete.\n * @param callback - The callback called after every item has been iterated\n */\nfunction eachAsync(arr, eachFn, callback) {\n    arr = arr || [];\n    let idx = 0;\n    let awaiting = 0;\n    for (idx = 0; idx < arr.length; ++idx) {\n        awaiting++;\n        eachFn(arr[idx], eachCallback);\n    }\n    if (awaiting === 0) {\n        callback();\n        return;\n    }\n    function eachCallback(err) {\n        awaiting--;\n        if (err) {\n            callback(err);\n            return;\n        }\n        if (idx === arr.length && awaiting <= 0) {\n            callback();\n        }\n    }\n}\nexports.eachAsync = eachAsync;\n/** @internal */\nfunction arrayStrictEqual(arr, arr2) {\n    if (!Array.isArray(arr) || !Array.isArray(arr2)) {\n        return false;\n    }\n    return arr.length === arr2.length && arr.every((elt, idx) => elt === arr2[idx]);\n}\nexports.arrayStrictEqual = arrayStrictEqual;\n/** @internal */\nfunction errorStrictEqual(lhs, rhs) {\n    if (lhs === rhs) {\n        return true;\n    }\n    if (!lhs || !rhs) {\n        return lhs === rhs;\n    }\n    if ((lhs == null && rhs != null) || (lhs != null && rhs == null)) {\n        return false;\n    }\n    if (lhs.constructor.name !== rhs.constructor.name) {\n        return false;\n    }\n    if (lhs.message !== rhs.message) {\n        return false;\n    }\n    return true;\n}\nexports.errorStrictEqual = errorStrictEqual;\n/** @internal */\nfunction makeStateMachine(stateTable) {\n    return function stateTransition(target, newState) {\n        const legalStates = stateTable[target.s.state];\n        if (legalStates && legalStates.indexOf(newState) < 0) {\n            throw new error_1.MongoRuntimeError(`illegal state transition from [${target.s.state}] => [${newState}], allowed: [${legalStates}]`);\n        }\n        target.emit('stateChanged', target.s.state, newState);\n        target.s.state = newState;\n    };\n}\nexports.makeStateMachine = makeStateMachine;\n/** @internal */\nfunction now() {\n    const hrtime = process.hrtime();\n    return Math.floor(hrtime[0] * 1000 + hrtime[1] / 1000000);\n}\nexports.now = now;\n/** @internal */\nfunction calculateDurationInMs(started) {\n    if (typeof started !== 'number') {\n        throw new error_1.MongoInvalidArgumentError('Numeric value required to calculate duration');\n    }\n    const elapsed = now() - started;\n    return elapsed < 0 ? 0 : elapsed;\n}\nexports.calculateDurationInMs = calculateDurationInMs;\n/** @internal */\nfunction hasAtomicOperators(doc) {\n    if (Array.isArray(doc)) {\n        for (const document of doc) {\n            if (hasAtomicOperators(document)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    const keys = Object.keys(doc);\n    return keys.length > 0 && keys[0][0] === '$';\n}\nexports.hasAtomicOperators = hasAtomicOperators;\n/**\n * Merge inherited properties from parent into options, prioritizing values from options,\n * then values from parent.\n * @internal\n */\nfunction resolveOptions(parent, options) {\n    const result = Object.assign({}, options, (0, bson_1.resolveBSONOptions)(options, parent));\n    // Users cannot pass a readConcern/writeConcern to operations in a transaction\n    const session = options?.session;\n    if (!session?.inTransaction()) {\n        const readConcern = read_concern_1.ReadConcern.fromOptions(options) ?? parent?.readConcern;\n        if (readConcern) {\n            result.readConcern = readConcern;\n        }\n        const writeConcern = write_concern_1.WriteConcern.fromOptions(options) ?? parent?.writeConcern;\n        if (writeConcern) {\n            result.writeConcern = writeConcern;\n        }\n    }\n    const readPreference = read_preference_1.ReadPreference.fromOptions(options) ?? parent?.readPreference;\n    if (readPreference) {\n        result.readPreference = readPreference;\n    }\n    return result;\n}\nexports.resolveOptions = resolveOptions;\nfunction isSuperset(set, subset) {\n    set = Array.isArray(set) ? new Set(set) : set;\n    subset = Array.isArray(subset) ? new Set(subset) : subset;\n    for (const elem of subset) {\n        if (!set.has(elem)) {\n            return false;\n        }\n    }\n    return true;\n}\nexports.isSuperset = isSuperset;\n/**\n * Checks if the document is a Hello request\n * @internal\n */\nfunction isHello(doc) {\n    return doc[constants_2.LEGACY_HELLO_COMMAND] || doc.hello ? true : false;\n}\nexports.isHello = isHello;\n/** Returns the items that are uniquely in setA */\nfunction setDifference(setA, setB) {\n    const difference = new Set(setA);\n    for (const elem of setB) {\n        difference.delete(elem);\n    }\n    return difference;\n}\nexports.setDifference = setDifference;\nconst HAS_OWN = (object, prop) => Object.prototype.hasOwnProperty.call(object, prop);\nfunction isRecord(value, requiredKeys = undefined) {\n    if (!isObject(value)) {\n        return false;\n    }\n    const ctor = value.constructor;\n    if (ctor && ctor.prototype) {\n        if (!isObject(ctor.prototype)) {\n            return false;\n        }\n        // Check to see if some method exists from the Object exists\n        if (!HAS_OWN(ctor.prototype, 'isPrototypeOf')) {\n            return false;\n        }\n    }\n    if (requiredKeys) {\n        const keys = Object.keys(value);\n        return isSuperset(keys, requiredKeys);\n    }\n    return true;\n}\nexports.isRecord = isRecord;\n/**\n * Make a deep copy of an object\n *\n * NOTE: This is not meant to be the perfect implementation of a deep copy,\n * but instead something that is good enough for the purposes of\n * command monitoring.\n */\nfunction deepCopy(value) {\n    if (value == null) {\n        return value;\n    }\n    else if (Array.isArray(value)) {\n        return value.map(item => deepCopy(item));\n    }\n    else if (isRecord(value)) {\n        const res = {};\n        for (const key in value) {\n            res[key] = deepCopy(value[key]);\n        }\n        return res;\n    }\n    const ctor = value.constructor;\n    if (ctor) {\n        switch (ctor.name.toLowerCase()) {\n            case 'date':\n                return new ctor(Number(value));\n            case 'map':\n                return new Map(value);\n            case 'set':\n                return new Set(value);\n            case 'buffer':\n                return Buffer.from(value);\n        }\n    }\n    return value;\n}\nexports.deepCopy = deepCopy;\n/**\n * A sequential list of items in a circularly linked list\n * @remarks\n * The head node is special, it is always defined and has a value of null.\n * It is never \"included\" in the list, in that, it is not returned by pop/shift or yielded by the iterator.\n * The circular linkage and always defined head node are to reduce checks for null next/prev references to zero.\n * New nodes are declared as object literals with keys always in the same order: next, prev, value.\n * @internal\n */\nclass List {\n    get length() {\n        return this.count;\n    }\n    get [Symbol.toStringTag]() {\n        return 'List';\n    }\n    constructor() {\n        this.count = 0;\n        // this is carefully crafted:\n        // declaring a complete and consistently key ordered\n        // object is beneficial to the runtime optimizations\n        this.head = {\n            next: null,\n            prev: null,\n            value: null\n        };\n        this.head.next = this.head;\n        this.head.prev = this.head;\n    }\n    toArray() {\n        return Array.from(this);\n    }\n    toString() {\n        return `head <=> ${this.toArray().join(' <=> ')} <=> head`;\n    }\n    *[Symbol.iterator]() {\n        for (const node of this.nodes()) {\n            yield node.value;\n        }\n    }\n    *nodes() {\n        let ptr = this.head.next;\n        while (ptr !== this.head) {\n            // Save next before yielding so that we make removing within iteration safe\n            const { next } = ptr;\n            yield ptr;\n            ptr = next;\n        }\n    }\n    /** Insert at end of list */\n    push(value) {\n        this.count += 1;\n        const newNode = {\n            next: this.head,\n            prev: this.head.prev,\n            value\n        };\n        this.head.prev.next = newNode;\n        this.head.prev = newNode;\n    }\n    /** Inserts every item inside an iterable instead of the iterable itself */\n    pushMany(iterable) {\n        for (const value of iterable) {\n            this.push(value);\n        }\n    }\n    /** Insert at front of list */\n    unshift(value) {\n        this.count += 1;\n        const newNode = {\n            next: this.head.next,\n            prev: this.head,\n            value\n        };\n        this.head.next.prev = newNode;\n        this.head.next = newNode;\n    }\n    remove(node) {\n        if (node === this.head || this.length === 0) {\n            return null;\n        }\n        this.count -= 1;\n        const prevNode = node.prev;\n        const nextNode = node.next;\n        prevNode.next = nextNode;\n        nextNode.prev = prevNode;\n        return node.value;\n    }\n    /** Removes the first node at the front of the list */\n    shift() {\n        return this.remove(this.head.next);\n    }\n    /** Removes the last node at the end of the list */\n    pop() {\n        return this.remove(this.head.prev);\n    }\n    /** Iterates through the list and removes nodes where filter returns true */\n    prune(filter) {\n        for (const node of this.nodes()) {\n            if (filter(node.value)) {\n                this.remove(node);\n            }\n        }\n    }\n    clear() {\n        this.count = 0;\n        this.head.next = this.head;\n        this.head.prev = this.head;\n    }\n    /** Returns the first item in the list, does not remove */\n    first() {\n        // If the list is empty, value will be the head's null\n        return this.head.next.value;\n    }\n    /** Returns the last item in the list, does not remove */\n    last() {\n        // If the list is empty, value will be the head's null\n        return this.head.prev.value;\n    }\n}\nexports.List = List;\n/**\n * A pool of Buffers which allow you to read them as if they were one\n * @internal\n */\nclass BufferPool {\n    constructor() {\n        this.buffers = new List();\n        this.totalByteLength = 0;\n    }\n    get length() {\n        return this.totalByteLength;\n    }\n    /** Adds a buffer to the internal buffer pool list */\n    append(buffer) {\n        this.buffers.push(buffer);\n        this.totalByteLength += buffer.length;\n    }\n    /**\n     * If BufferPool contains 4 bytes or more construct an int32 from the leading bytes,\n     * otherwise return null. Size can be negative, caller should error check.\n     */\n    getInt32() {\n        if (this.totalByteLength < 4) {\n            return null;\n        }\n        const firstBuffer = this.buffers.first();\n        if (firstBuffer != null && firstBuffer.byteLength >= 4) {\n            return firstBuffer.readInt32LE(0);\n        }\n        // Unlikely case: an int32 is split across buffers.\n        // Use read and put the returned buffer back on top\n        const top4Bytes = this.read(4);\n        const value = top4Bytes.readInt32LE(0);\n        // Put it back.\n        this.totalByteLength += 4;\n        this.buffers.unshift(top4Bytes);\n        return value;\n    }\n    /** Reads the requested number of bytes, optionally consuming them */\n    read(size) {\n        if (typeof size !== 'number' || size < 0) {\n            throw new error_1.MongoInvalidArgumentError('Argument \"size\" must be a non-negative number');\n        }\n        // oversized request returns empty buffer\n        if (size > this.totalByteLength) {\n            return Buffer.alloc(0);\n        }\n        // We know we have enough, we just don't know how it is spread across chunks\n        // TODO(NODE-4732): alloc API should change based on raw option\n        const result = Buffer.allocUnsafe(size);\n        for (let bytesRead = 0; bytesRead < size;) {\n            const buffer = this.buffers.shift();\n            if (buffer == null) {\n                break;\n            }\n            const bytesRemaining = size - bytesRead;\n            const bytesReadable = Math.min(bytesRemaining, buffer.byteLength);\n            const bytes = buffer.subarray(0, bytesReadable);\n            result.set(bytes, bytesRead);\n            bytesRead += bytesReadable;\n            this.totalByteLength -= bytesReadable;\n            if (bytesReadable < buffer.byteLength) {\n                this.buffers.unshift(buffer.subarray(bytesReadable));\n            }\n        }\n        return result;\n    }\n}\nexports.BufferPool = BufferPool;\n/** @public */\nclass HostAddress {\n    constructor(hostString) {\n        this.host = undefined;\n        this.port = undefined;\n        this.socketPath = undefined;\n        this.isIPv6 = false;\n        const escapedHost = hostString.split(' ').join('%20'); // escape spaces, for socket path hosts\n        if (escapedHost.endsWith('.sock')) {\n            // heuristically determine if we're working with a domain socket\n            this.socketPath = decodeURIComponent(escapedHost);\n            return;\n        }\n        const urlString = `iLoveJS://${escapedHost}`;\n        let url;\n        try {\n            url = new url_1.URL(urlString);\n        }\n        catch (urlError) {\n            const runtimeError = new error_1.MongoRuntimeError(`Unable to parse ${escapedHost} with URL`);\n            runtimeError.cause = urlError;\n            throw runtimeError;\n        }\n        const hostname = url.hostname;\n        const port = url.port;\n        let normalized = decodeURIComponent(hostname).toLowerCase();\n        if (normalized.startsWith('[') && normalized.endsWith(']')) {\n            this.isIPv6 = true;\n            normalized = normalized.substring(1, hostname.length - 1);\n        }\n        this.host = normalized.toLowerCase();\n        if (typeof port === 'number') {\n            this.port = port;\n        }\n        else if (typeof port === 'string' && port !== '') {\n            this.port = Number.parseInt(port, 10);\n        }\n        else {\n            this.port = 27017;\n        }\n        if (this.port === 0) {\n            throw new error_1.MongoParseError('Invalid port (zero) with hostname');\n        }\n        Object.freeze(this);\n    }\n    [Symbol.for('nodejs.util.inspect.custom')]() {\n        return this.inspect();\n    }\n    inspect() {\n        return `new HostAddress('${this.toString()}')`;\n    }\n    toString() {\n        if (typeof this.host === 'string') {\n            if (this.isIPv6) {\n                return `[${this.host}]:${this.port}`;\n            }\n            return `${this.host}:${this.port}`;\n        }\n        return `${this.socketPath}`;\n    }\n    static fromString(s) {\n        return new HostAddress(s);\n    }\n    static fromHostPort(host, port) {\n        if (host.includes(':')) {\n            host = `[${host}]`; // IPv6 address\n        }\n        return HostAddress.fromString(`${host}:${port}`);\n    }\n    static fromSrvRecord({ name, port }) {\n        return HostAddress.fromHostPort(name, port);\n    }\n    toHostPort() {\n        if (this.socketPath) {\n            return { host: this.socketPath, port: 0 };\n        }\n        const host = this.host ?? '';\n        const port = this.port ?? 0;\n        return { host, port };\n    }\n}\nexports.HostAddress = HostAddress;\nexports.DEFAULT_PK_FACTORY = {\n    // We prefer not to rely on ObjectId having a createPk method\n    createPk() {\n        return new bson_1.ObjectId();\n    }\n};\n/**\n * When the driver used emitWarning the code will be equal to this.\n * @public\n *\n * @example\n * ```ts\n * process.on('warning', (warning) => {\n *  if (warning.code === MONGODB_WARNING_CODE) console.error('Ah an important warning! :)')\n * })\n * ```\n */\nexports.MONGODB_WARNING_CODE = 'MONGODB DRIVER';\n/** @internal */\nfunction emitWarning(message) {\n    return process.emitWarning(message, { code: exports.MONGODB_WARNING_CODE });\n}\nexports.emitWarning = emitWarning;\nconst emittedWarnings = new Set();\n/**\n * Will emit a warning once for the duration of the application.\n * Uses the message to identify if it has already been emitted\n * so using string interpolation can cause multiple emits\n * @internal\n */\nfunction emitWarningOnce(message) {\n    if (!emittedWarnings.has(message)) {\n        emittedWarnings.add(message);\n        return emitWarning(message);\n    }\n}\nexports.emitWarningOnce = emitWarningOnce;\n/**\n * Takes a JS object and joins the values into a string separated by ', '\n */\nfunction enumToString(en) {\n    return Object.values(en).join(', ');\n}\nexports.enumToString = enumToString;\n/**\n * Determine if a server supports retryable writes.\n *\n * @internal\n */\nfunction supportsRetryableWrites(server) {\n    if (!server) {\n        return false;\n    }\n    if (server.loadBalanced) {\n        // Loadbalanced topologies will always support retry writes\n        return true;\n    }\n    if (server.description.logicalSessionTimeoutMinutes != null) {\n        // that supports sessions\n        if (server.description.type !== common_1.ServerType.Standalone) {\n            // and that is not a standalone\n            return true;\n        }\n    }\n    return false;\n}\nexports.supportsRetryableWrites = supportsRetryableWrites;\n/**\n * Fisher–Yates Shuffle\n *\n * Reference: https://bost.ocks.org/mike/shuffle/\n * @param sequence - items to be shuffled\n * @param limit - Defaults to `0`. If nonzero shuffle will slice the randomized array e.g, `.slice(0, limit)` otherwise will return the entire randomized array.\n */\nfunction shuffle(sequence, limit = 0) {\n    const items = Array.from(sequence); // shallow copy in order to never shuffle the input\n    if (limit > items.length) {\n        throw new error_1.MongoRuntimeError('Limit must be less than the number of items');\n    }\n    let remainingItemsToShuffle = items.length;\n    const lowerBound = limit % items.length === 0 ? 1 : items.length - limit;\n    while (remainingItemsToShuffle > lowerBound) {\n        // Pick a remaining element\n        const randomIndex = Math.floor(Math.random() * remainingItemsToShuffle);\n        remainingItemsToShuffle -= 1;\n        // And swap it with the current element\n        const swapHold = items[remainingItemsToShuffle];\n        items[remainingItemsToShuffle] = items[randomIndex];\n        items[randomIndex] = swapHold;\n    }\n    return limit % items.length === 0 ? items : items.slice(lowerBound);\n}\nexports.shuffle = shuffle;\n// TODO(NODE-4936): read concern eligibility for commands should be codified in command construction\n// @see https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.rst#read-concern\nfunction commandSupportsReadConcern(command) {\n    if (command.aggregate || command.count || command.distinct || command.find || command.geoNear) {\n        return true;\n    }\n    return false;\n}\nexports.commandSupportsReadConcern = commandSupportsReadConcern;\n/**\n * Compare objectIds. `null` is always less\n * - `+1 = oid1 is greater than oid2`\n * - `-1 = oid1 is less than oid2`\n * - `+0 = oid1 is equal oid2`\n */\nfunction compareObjectId(oid1, oid2) {\n    if (oid1 == null && oid2 == null) {\n        return 0;\n    }\n    if (oid1 == null) {\n        return -1;\n    }\n    if (oid2 == null) {\n        return 1;\n    }\n    return exports.ByteUtils.compare(oid1.id, oid2.id);\n}\nexports.compareObjectId = compareObjectId;\nfunction parseInteger(value) {\n    if (typeof value === 'number')\n        return Math.trunc(value);\n    const parsedValue = Number.parseInt(String(value), 10);\n    return Number.isNaN(parsedValue) ? null : parsedValue;\n}\nexports.parseInteger = parseInteger;\nfunction parseUnsignedInteger(value) {\n    const parsedInt = parseInteger(value);\n    return parsedInt != null && parsedInt >= 0 ? parsedInt : null;\n}\nexports.parseUnsignedInteger = parseUnsignedInteger;\n/**\n * Determines whether a provided address matches the provided parent domain.\n *\n * If a DNS server were to become compromised SRV records would still need to\n * advertise addresses that are under the same domain as the srvHost.\n *\n * @param address - The address to check against a domain\n * @param srvHost - The domain to check the provided address against\n * @returns Whether the provided address matches the parent domain\n */\nfunction matchesParentDomain(address, srvHost) {\n    // Remove trailing dot if exists on either the resolved address or the srv hostname\n    const normalizedAddress = address.endsWith('.') ? address.slice(0, address.length - 1) : address;\n    const normalizedSrvHost = srvHost.endsWith('.') ? srvHost.slice(0, srvHost.length - 1) : srvHost;\n    const allCharacterBeforeFirstDot = /^.*?\\./;\n    // Remove all characters before first dot\n    // Add leading dot back to string so\n    //   an srvHostDomain = '.trusted.site'\n    //   will not satisfy an addressDomain that endsWith '.fake-trusted.site'\n    const addressDomain = `.${normalizedAddress.replace(allCharacterBeforeFirstDot, '')}`;\n    const srvHostDomain = `.${normalizedSrvHost.replace(allCharacterBeforeFirstDot, '')}`;\n    return addressDomain.endsWith(srvHostDomain);\n}\nexports.matchesParentDomain = matchesParentDomain;\nasync function request(uri, options = {}) {\n    return new Promise((resolve, reject) => {\n        const requestOptions = {\n            method: 'GET',\n            timeout: 10000,\n            json: true,\n            ...url.parse(uri),\n            ...options\n        };\n        const req = http.request(requestOptions, res => {\n            res.setEncoding('utf8');\n            let data = '';\n            res.on('data', d => {\n                data += d;\n            });\n            res.once('end', () => {\n                if (options.json === false) {\n                    resolve(data);\n                    return;\n                }\n                try {\n                    const parsed = JSON.parse(data);\n                    resolve(parsed);\n                }\n                catch {\n                    // TODO(NODE-3483)\n                    reject(new error_1.MongoRuntimeError(`Invalid JSON response: \"${data}\"`));\n                }\n            });\n        });\n        req.once('timeout', () => req.destroy(new error_1.MongoNetworkTimeoutError(`Network request to ${uri} timed out after ${options.timeout} ms`)));\n        req.once('error', error => reject(error));\n        req.end();\n    });\n}\nexports.request = request;\n/**\n * A custom AbortController that aborts after a specified timeout.\n *\n * If `timeout` is undefined or \\<=0, the abort controller never aborts.\n *\n * This class provides two benefits over the built-in AbortSignal.timeout() method.\n * - This class provides a mechanism for cancelling the timeout\n * - This class supports infinite timeouts by interpreting a timeout of 0 as infinite.  This is\n *    consistent with existing timeout options in the Node driver (serverSelectionTimeoutMS, for example).\n * @internal\n */\nclass TimeoutController extends AbortController {\n    constructor(timeout = 0, timeoutId = timeout > 0 ? (0, timers_1.setTimeout)(() => this.abort(), timeout) : null) {\n        super();\n        this.timeoutId = timeoutId;\n    }\n    clear() {\n        if (this.timeoutId != null) {\n            (0, timers_1.clearTimeout)(this.timeoutId);\n        }\n        this.timeoutId = null;\n    }\n}\nexports.TimeoutController = TimeoutController;\n/** @internal */\nexports.DOCUMENT_DB_CHECK = /(\\.docdb\\.amazonaws\\.com$)|(\\.docdb-elastic\\.amazonaws\\.com$)/;\n/** @internal */\nexports.COSMOS_DB_CHECK = /\\.cosmos\\.azure\\.com$/;\n/** @internal */\nexports.DOCUMENT_DB_MSG = 'You appear to be connected to a DocumentDB cluster. For more information regarding feature compatibility and support please visit https://www.mongodb.com/supportability/documentdb';\n/** @internal */\nexports.COSMOS_DB_MSG = 'You appear to be connected to a CosmosDB cluster. For more information regarding feature compatibility and support please visit https://www.mongodb.com/supportability/cosmosdb';\n/** @internal */\nfunction isHostMatch(match, host) {\n    return host && match.test(host.toLowerCase()) ? true : false;\n}\nexports.isHostMatch = isHostMatch;\n//# sourceMappingURL=utils.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,iBAAiB,GAAG,QAAQ,iBAAiB,GAAG,QAAQ,OAAO,GAAG,QAAQ,mBAAmB,GAAG,QAAQ,oBAAoB,GAAG,QAAQ,YAAY,GAAG,QAAQ,eAAe,GAAG,QAAQ,0BAA0B,GAAG,QAAQ,OAAO,GAAG,QAAQ,uBAAuB,GAAG,QAAQ,YAAY,GAAG,QAAQ,eAAe,GAAG,QAAQ,WAAW,GAAG,QAAQ,oBAAoB,GAAG,QAAQ,kBAAkB,GAAG,QAAQ,WAAW,GAAG,QAAQ,UAAU,GAAG,QAAQ,IAAI,GAAG,QAAQ,QAAQ,GAAG,QAAQ,QAAQ,GAAG,QAAQ,aAAa,GAAG,QAAQ,OAAO,GAAG,QAAQ,UAAU,GAAG,QAAQ,cAAc,GAAG,QAAQ,kBAAkB,GAAG,QAAQ,qBAAqB,GAAG,QAAQ,GAAG,GAAG,QAAQ,gBAAgB,GAAG,QAAQ,gBAAgB,GAAG,QAAQ,gBAAgB,GAAG,QAAQ,SAAS,GAAG,QAAQ,cAAc,GAAG,QAAQ,MAAM,GAAG,QAAQ,aAAa,GAAG,QAAQ,WAAW,GAAG,QAAQ,0BAA0B,GAAG,QAAQ,gBAAgB,GAAG,QAAQ,EAAE,GAAG,QAAQ,WAAW,GAAG,QAAQ,mBAAmB,GAAG,QAAQ,uBAAuB,GAAG,QAAQ,qBAAqB,GAAG,QAAQ,aAAa,GAAG,QAAQ,oBAAoB,GAAG,QAAQ,aAAa,GAAG,QAAQ,YAAY,GAAG,QAAQ,QAAQ,GAAG,QAAQ,kBAAkB,GAAG,QAAQ,oBAAoB,GAAG,QAAQ,SAAS,GAAG,KAAK;AACruC,QAAQ,WAAW,GAAG,QAAQ,aAAa,GAAG,QAAQ,eAAe,GAAG,QAAQ,eAAe,GAAG,KAAK;AACvG,MAAM,SAAS;AACf,MAAM,OAAO;AACb,MAAM,WAAW;AACjB,MAAM,MAAM;AACZ,MAAM,QAAQ;AACd,MAAM,SAAS;AACf,MAAM,cAAc;AACpB,MAAM,cAAc;AACpB,MAAM,UAAU;AAChB,MAAM,iBAAiB;AACvB,MAAM,oBAAoB;AAC1B,MAAM,WAAW;AACjB,MAAM,kBAAkB;AACxB,QAAQ,SAAS,GAAG;IAChB,mBAAkB,MAAM;QACpB,OAAO,OAAO,QAAQ,CAAC,UACjB,SACA,OAAO,IAAI,CAAC,OAAO,MAAM,EAAE,OAAO,UAAU,EAAE,OAAO,UAAU;IACzE;IACA,QAAO,IAAI,EAAE,IAAI;QACb,OAAO,QAAQ,SAAS,CAAC,iBAAiB,CAAC,MAAM,MAAM,CAAC;IAC5D;IACA,SAAQ,IAAI,EAAE,IAAI;QACd,OAAO,QAAQ,SAAS,CAAC,iBAAiB,CAAC,MAAM,OAAO,CAAC;IAC7D;IACA,UAAS,UAAU;QACf,OAAO,QAAQ,SAAS,CAAC,iBAAiB,CAAC,YAAY,QAAQ,CAAC;IACpE;AACJ;AACA;;;CAGC,GACD,SAAS,qBAAqB,IAAI,EAAE,SAAS;IACzC,KAAK,MAAM,YAAY,UAAW;QAC9B,IAAI,SAAS,YACR,SAAS,UAAU,CAAC,SAAS,MAAM,SAAS,SAAS,SAAS,CAAC,GAAG,SAAS,MAAM,MACjF,SAAS,UAAU,CAAC,SAAS,MAAM,SAAS,SAAS,SAAS,CAAC,GAAG,SAAS,MAAM,IAAK;YACvF,OAAO;QACX;IACJ;IACA,OAAO;AACX;AACA,QAAQ,oBAAoB,GAAG;AAC/B;;;;;CAKC,GACD,SAAS,mBAAmB,IAAI;IAC5B,IAAI,YAAY;IAChB,IAAI,OAAO,SAAS,UAAU;QAC1B,YAAY;IAChB,OACK,IAAI,MAAM,OAAO,CAAC,OAAO;QAC1B,YAAY,CAAC;QACb,KAAK,OAAO,CAAC,CAAA;YACT,SAAS,CAAC,MAAM,GAAG;QACvB;IACJ,OACK,IAAI,QAAQ,QAAQ,OAAO,SAAS,UAAU;QAC/C,YAAY,CAAC;QACb,IAAK,MAAM,QAAQ,KAAM;YACrB,SAAS,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK;QAChC;IACJ;IACA,OAAO;AACX;AACA,QAAQ,kBAAkB,GAAG;AAC7B,MAAM,YAAY,CAAC,SAAW,OAAO,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC;AAC7D;;;;CAIC,GACD,SAAS,SAAS,GAAG;IACjB,OAAO,sBAAsB,UAAU;AAC3C;AACA,QAAQ,QAAQ,GAAG;AACnB,cAAc,GACd,SAAS,aAAa,MAAM,EAAE,MAAM;IAChC,OAAO;QAAE,GAAG,MAAM;QAAE,GAAG,MAAM;IAAC;AAClC;AACA,QAAQ,YAAY,GAAG;AACvB,cAAc,GACd,SAAS,cAAc,OAAO,EAAE,KAAK;IACjC,MAAM,gBAAgB,CAAC;IACvB,IAAK,MAAM,QAAQ,QAAS;QACxB,IAAI,MAAM,QAAQ,CAAC,OAAO;YACtB,aAAa,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK;QACvC;IACJ;IACA,mBAAmB;IACnB,OAAO;AACX;AACA,QAAQ,aAAa,GAAG;AACxB;;;;;;CAMC,GACD,SAAS,qBAAqB,MAAM,EAAE,EAAE;IACpC,IAAI,MAAM,GAAG,CAAC,CAAC,OAAO,EAAE,aAAa;QACjC,OAAO,WAAW,GAAG;IACzB;IACA,OAAO;AACX;AACA,QAAQ,oBAAoB,GAAG;AAC/B;;;;;;;;CAQC,GACD;;;;;;CAMC,GACD,SAAS,cAAc,KAAK;IACxB,OAAO,CAAC,CAAC,SAAS,OAAO,MAAM,IAAI,KAAK;AAC5C;AACA,QAAQ,aAAa,GAAG;AACxB;;;;;;;CAOC,GACD,SAAS,sBAAsB,OAAO,EAAE,MAAM,EAAE,OAAO;IACnD,MAAM,eAAe,YAAY,QAAQ,YAAY;IACrD,IAAI,QAAQ,SAAS,IAAI,OAAO,QAAQ,SAAS,KAAK,UAAU;QAC5D,IAAI,gBAAgB,aAAa,qBAAqB,EAAE;YACpD,QAAQ,SAAS,GAAG,QAAQ,SAAS;QACzC,OACK;YACD,MAAM,IAAI,QAAQ,uBAAuB,CAAC,CAAC,2CAA2C,CAAC;QAC3F;IACJ;AACJ;AACA,QAAQ,qBAAqB,GAAG;AAChC;;;;;;CAMC,GACD,SAAS,wBAAwB,OAAO,EAAE,IAAI,EAAE,OAAO;IACnD,IAAI,WAAW,QAAQ,OAAO,IAAI,QAAQ,OAAO,CAAC,aAAa,IAAI;QAC/D;IACJ;IACA,MAAM,cAAc,OAAO,MAAM,CAAC,CAAC,GAAG,QAAQ,WAAW,IAAI,CAAC;IAC9D,IAAI,KAAK,CAAC,CAAC,WAAW,EAAE;QACpB,OAAO,MAAM,CAAC,aAAa,KAAK,CAAC,CAAC,WAAW;IACjD;IACA,IAAI,OAAO,IAAI,CAAC,aAAa,MAAM,GAAG,GAAG;QACrC,OAAO,MAAM,CAAC,SAAS;YAAE,aAAa;QAAY;IACtD;AACJ;AACA,QAAQ,uBAAuB,GAAG;AAClC;;;;;;CAMC,GACD,SAAS,oBAAoB,OAAO,EAAE,OAAO;IACzC,IAAI,QAAQ,OAAO,EAAE;QACjB,OAAO;IACX;IACA,OAAO;QAAE,SAAS;QAAS,WAAW,QAAQ,SAAS;IAAC;AAC5D;AACA,QAAQ,mBAAmB,GAAG;AAC9B;;;;;CAKC,GACD,SAAS,YAAY,QAAQ;IACzB,iDAAiD;IACjD,IAAI,cAAc,YAAY,SAAS,QAAQ,EAAE;QAC7C,OAAO,SAAS,QAAQ;IAC5B,OACK,IAAI,YAAY,YAAY,SAAS,MAAM,CAAC,QAAQ,EAAE;QACvD,OAAO,SAAS,MAAM,CAAC,QAAQ;IACnC;IACA,MAAM,IAAI,QAAQ,sBAAsB,CAAC;AAC7C;AACA,QAAQ,WAAW,GAAG;AACtB,cAAc,GACd,SAAS,GAAG,EAAE;IACV,OAAO,iBAAiB,UAAU,CAAC;AACvC;AACA,QAAQ,EAAE,GAAG;AACb,YAAY,GACZ,MAAM;IACF;;;;;KAKC,GACD,YAAY,EAAE,EAAE,UAAU,CAAE;QACxB,IAAI,CAAC,EAAE,GAAG;QACV,IAAI,CAAC,UAAU,GAAG;QAClB,IAAI,CAAC,UAAU,GAAG,eAAe,KAAK,YAAY;IACtD;IACA,WAAW;QACP,OAAO,IAAI,CAAC,UAAU,GAAG,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,IAAI,CAAC,EAAE;IACtE;IACA,eAAe,UAAU,EAAE;QACvB,OAAO,IAAI,2BAA2B,IAAI,CAAC,EAAE,EAAE;IACnD;IACA,OAAO,WAAW,SAAS,EAAE;QACzB,IAAI,OAAO,cAAc,YAAY,cAAc,IAAI;YACnD,oDAAoD;YACpD,MAAM,IAAI,QAAQ,iBAAiB,CAAC,CAAC,6BAA6B,EAAE,UAAU,CAAC,CAAC;QACpF;QACA,MAAM,CAAC,IAAI,GAAG,gBAAgB,GAAG,UAAU,KAAK,CAAC;QACjD,MAAM,aAAa,gBAAgB,IAAI,CAAC;QACxC,OAAO,IAAI,iBAAiB,IAAI,eAAe,KAAK,YAAY;IACpE;AACJ;AACA,QAAQ,gBAAgB,GAAG;AAC3B;;;;;;CAMC,GACD,MAAM,mCAAmC;IACrC,YAAY,EAAE,EAAE,UAAU,CAAE;QACxB,KAAK,CAAC,IAAI;QACV,IAAI,CAAC,UAAU,GAAG;IACtB;IACA,OAAO,WAAW,SAAS,EAAE;QACzB,OAAO,KAAK,CAAC,WAAW;IAC5B;AACJ;AACA,QAAQ,0BAA0B,GAAG;AACrC,cAAc,GACd,UAAU,YAAY,OAAO,CAAC;IAC1B,IAAI,QAAQ;IACZ,MAAO,KAAM;QACT,MAAM,WAAW;QACjB,SAAS;QACT,MAAM;IACV;AACJ;AACA,QAAQ,WAAW,GAAG;AACtB,SAAS,cAAc,SAAS,EAAE,QAAQ;IACtC,MAAM,UAAU;IAChB,IAAI,YAAY,MAAM;QAClB,OAAO;IACX;IACA,QAAQ,IAAI,CAAC,CAAA,SAAU,SAAS,WAAW,SAAS,CAAA,QAAS,SAAS;IACtE;AACJ;AACA,QAAQ,aAAa,GAAG;AACxB;;;CAGC,GACD,SAAS;IACL,MAAM,SAAS,OAAO,WAAW,CAAC;IAClC,MAAM,CAAC,EAAE,GAAG,AAAC,MAAM,CAAC,EAAE,GAAG,OAAQ;IACjC,MAAM,CAAC,EAAE,GAAG,AAAC,MAAM,CAAC,EAAE,GAAG,OAAQ;IACjC,OAAO;AACX;AACA,QAAQ,MAAM,GAAG;AACjB;;;CAGC,GACD,SAAS,eAAe,gBAAgB;IACpC,IAAI,kBAAkB;QAClB,IAAI,iBAAiB,YAAY,EAAE;YAC/B,+EAA+E;YAC/E,0EAA0E;YAC1E,0EAA0E;YAC1E,gEAAgE;YAChE,OAAO,YAAY,0BAA0B;QACjD;QACA,IAAI,iBAAiB,KAAK,EAAE;YACxB,OAAO,iBAAiB,KAAK,CAAC,cAAc;QAChD;QACA,IAAI,eAAe,oBAAoB,OAAO,iBAAiB,SAAS,KAAK,YAAY;YACrF,MAAM,YAAY,iBAAiB,SAAS;YAC5C,IAAI,WAAW;gBACX,OAAO,UAAU,cAAc;YACnC;QACJ;QACA,IAAI,iBAAiB,WAAW,IAC5B,oBAAoB,iBAAiB,WAAW,IAChD,iBAAiB,WAAW,CAAC,cAAc,IAAI,MAAM;YACrD,OAAO,iBAAiB,WAAW,CAAC,cAAc;QACtD;IACJ;IACA,OAAO;AACX;AACA,QAAQ,cAAc,GAAG;AACzB;;;;;;;CAOC,GACD,SAAS,UAAU,GAAG,EAAE,MAAM,EAAE,QAAQ;IACpC,MAAM,OAAO,EAAE;IACf,IAAI,MAAM;IACV,IAAI,WAAW;IACf,IAAK,MAAM,GAAG,MAAM,IAAI,MAAM,EAAE,EAAE,IAAK;QACnC;QACA,OAAO,GAAG,CAAC,IAAI,EAAE;IACrB;IACA,IAAI,aAAa,GAAG;QAChB;QACA;IACJ;IACA,SAAS,aAAa,GAAG;QACrB;QACA,IAAI,KAAK;YACL,SAAS;YACT;QACJ;QACA,IAAI,QAAQ,IAAI,MAAM,IAAI,YAAY,GAAG;YACrC;QACJ;IACJ;AACJ;AACA,QAAQ,SAAS,GAAG;AACpB,cAAc,GACd,SAAS,iBAAiB,GAAG,EAAE,IAAI;IAC/B,IAAI,CAAC,MAAM,OAAO,CAAC,QAAQ,CAAC,MAAM,OAAO,CAAC,OAAO;QAC7C,OAAO;IACX;IACA,OAAO,IAAI,MAAM,KAAK,KAAK,MAAM,IAAI,IAAI,KAAK,CAAC,CAAC,KAAK,MAAQ,QAAQ,IAAI,CAAC,IAAI;AAClF;AACA,QAAQ,gBAAgB,GAAG;AAC3B,cAAc,GACd,SAAS,iBAAiB,GAAG,EAAE,GAAG;IAC9B,IAAI,QAAQ,KAAK;QACb,OAAO;IACX;IACA,IAAI,CAAC,OAAO,CAAC,KAAK;QACd,OAAO,QAAQ;IACnB;IACA,IAAI,AAAC,OAAO,QAAQ,OAAO,QAAU,OAAO,QAAQ,OAAO,MAAO;QAC9D,OAAO;IACX;IACA,IAAI,IAAI,WAAW,CAAC,IAAI,KAAK,IAAI,WAAW,CAAC,IAAI,EAAE;QAC/C,OAAO;IACX;IACA,IAAI,IAAI,OAAO,KAAK,IAAI,OAAO,EAAE;QAC7B,OAAO;IACX;IACA,OAAO;AACX;AACA,QAAQ,gBAAgB,GAAG;AAC3B,cAAc,GACd,SAAS,iBAAiB,UAAU;IAChC,OAAO,SAAS,gBAAgB,MAAM,EAAE,QAAQ;QAC5C,MAAM,cAAc,UAAU,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC;QAC9C,IAAI,eAAe,YAAY,OAAO,CAAC,YAAY,GAAG;YAClD,MAAM,IAAI,QAAQ,iBAAiB,CAAC,CAAC,+BAA+B,EAAE,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,EAAE,SAAS,aAAa,EAAE,YAAY,CAAC,CAAC;QACvI;QACA,OAAO,IAAI,CAAC,gBAAgB,OAAO,CAAC,CAAC,KAAK,EAAE;QAC5C,OAAO,CAAC,CAAC,KAAK,GAAG;IACrB;AACJ;AACA,QAAQ,gBAAgB,GAAG;AAC3B,cAAc,GACd,SAAS;IACL,MAAM,SAAS,QAAQ,MAAM;IAC7B,OAAO,KAAK,KAAK,CAAC,MAAM,CAAC,EAAE,GAAG,OAAO,MAAM,CAAC,EAAE,GAAG;AACrD;AACA,QAAQ,GAAG,GAAG;AACd,cAAc,GACd,SAAS,sBAAsB,OAAO;IAClC,IAAI,OAAO,YAAY,UAAU;QAC7B,MAAM,IAAI,QAAQ,yBAAyB,CAAC;IAChD;IACA,MAAM,UAAU,QAAQ;IACxB,OAAO,UAAU,IAAI,IAAI;AAC7B;AACA,QAAQ,qBAAqB,GAAG;AAChC,cAAc,GACd,SAAS,mBAAmB,GAAG;IAC3B,IAAI,MAAM,OAAO,CAAC,MAAM;QACpB,KAAK,MAAM,YAAY,IAAK;YACxB,IAAI,mBAAmB,WAAW;gBAC9B,OAAO;YACX;QACJ;QACA,OAAO;IACX;IACA,MAAM,OAAO,OAAO,IAAI,CAAC;IACzB,OAAO,KAAK,MAAM,GAAG,KAAK,IAAI,CAAC,EAAE,CAAC,EAAE,KAAK;AAC7C;AACA,QAAQ,kBAAkB,GAAG;AAC7B;;;;CAIC,GACD,SAAS,eAAe,MAAM,EAAE,OAAO;IACnC,MAAM,SAAS,OAAO,MAAM,CAAC,CAAC,GAAG,SAAS,AAAC,CAAA,GAAG,OAAO,kBAAkB,AAAD,EAAG,SAAS;IAClF,8EAA8E;IAC9E,MAAM,UAAU,SAAS;IACzB,IAAI,CAAC,SAAS,iBAAiB;QAC3B,MAAM,cAAc,eAAe,WAAW,CAAC,WAAW,CAAC,YAAY,QAAQ;QAC/E,IAAI,aAAa;YACb,OAAO,WAAW,GAAG;QACzB;QACA,MAAM,eAAe,gBAAgB,YAAY,CAAC,WAAW,CAAC,YAAY,QAAQ;QAClF,IAAI,cAAc;YACd,OAAO,YAAY,GAAG;QAC1B;IACJ;IACA,MAAM,iBAAiB,kBAAkB,cAAc,CAAC,WAAW,CAAC,YAAY,QAAQ;IACxF,IAAI,gBAAgB;QAChB,OAAO,cAAc,GAAG;IAC5B;IACA,OAAO;AACX;AACA,QAAQ,cAAc,GAAG;AACzB,SAAS,WAAW,GAAG,EAAE,MAAM;IAC3B,MAAM,MAAM,OAAO,CAAC,OAAO,IAAI,IAAI,OAAO;IAC1C,SAAS,MAAM,OAAO,CAAC,UAAU,IAAI,IAAI,UAAU;IACnD,KAAK,MAAM,QAAQ,OAAQ;QACvB,IAAI,CAAC,IAAI,GAAG,CAAC,OAAO;YAChB,OAAO;QACX;IACJ;IACA,OAAO;AACX;AACA,QAAQ,UAAU,GAAG;AACrB;;;CAGC,GACD,SAAS,QAAQ,GAAG;IAChB,OAAO,GAAG,CAAC,YAAY,oBAAoB,CAAC,IAAI,IAAI,KAAK,GAAG,OAAO;AACvE;AACA,QAAQ,OAAO,GAAG;AAClB,gDAAgD,GAChD,SAAS,cAAc,IAAI,EAAE,IAAI;IAC7B,MAAM,aAAa,IAAI,IAAI;IAC3B,KAAK,MAAM,QAAQ,KAAM;QACrB,WAAW,MAAM,CAAC;IACtB;IACA,OAAO;AACX;AACA,QAAQ,aAAa,GAAG;AACxB,MAAM,UAAU,CAAC,QAAQ,OAAS,OAAO,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ;AAC/E,SAAS,SAAS,KAAK,EAAE,eAAe,SAAS;IAC7C,IAAI,CAAC,SAAS,QAAQ;QAClB,OAAO;IACX;IACA,MAAM,OAAO,MAAM,WAAW;IAC9B,IAAI,QAAQ,KAAK,SAAS,EAAE;QACxB,IAAI,CAAC,SAAS,KAAK,SAAS,GAAG;YAC3B,OAAO;QACX;QACA,4DAA4D;QAC5D,IAAI,CAAC,QAAQ,KAAK,SAAS,EAAE,kBAAkB;YAC3C,OAAO;QACX;IACJ;IACA,IAAI,cAAc;QACd,MAAM,OAAO,OAAO,IAAI,CAAC;QACzB,OAAO,WAAW,MAAM;IAC5B;IACA,OAAO;AACX;AACA,QAAQ,QAAQ,GAAG;AACnB;;;;;;CAMC,GACD,SAAS,SAAS,KAAK;IACnB,IAAI,SAAS,MAAM;QACf,OAAO;IACX,OACK,IAAI,MAAM,OAAO,CAAC,QAAQ;QAC3B,OAAO,MAAM,GAAG,CAAC,CAAA,OAAQ,SAAS;IACtC,OACK,IAAI,SAAS,QAAQ;QACtB,MAAM,MAAM,CAAC;QACb,IAAK,MAAM,OAAO,MAAO;YACrB,GAAG,CAAC,IAAI,GAAG,SAAS,KAAK,CAAC,IAAI;QAClC;QACA,OAAO;IACX;IACA,MAAM,OAAO,MAAM,WAAW;IAC9B,IAAI,MAAM;QACN,OAAQ,KAAK,IAAI,CAAC,WAAW;YACzB,KAAK;gBACD,OAAO,IAAI,KAAK,OAAO;YAC3B,KAAK;gBACD,OAAO,IAAI,IAAI;YACnB,KAAK;gBACD,OAAO,IAAI,IAAI;YACnB,KAAK;gBACD,OAAO,OAAO,IAAI,CAAC;QAC3B;IACJ;IACA,OAAO;AACX;AACA,QAAQ,QAAQ,GAAG;AACnB;;;;;;;;CAQC,GACD,MAAM;IACF,IAAI,SAAS;QACT,OAAO,IAAI,CAAC,KAAK;IACrB;IACA,IAAI,CAAC,OAAO,WAAW,CAAC,GAAG;QACvB,OAAO;IACX;IACA,aAAc;QACV,IAAI,CAAC,KAAK,GAAG;QACb,6BAA6B;QAC7B,oDAAoD;QACpD,oDAAoD;QACpD,IAAI,CAAC,IAAI,GAAG;YACR,MAAM;YACN,MAAM;YACN,OAAO;QACX;QACA,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI;QAC1B,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI;IAC9B;IACA,UAAU;QACN,OAAO,MAAM,IAAI,CAAC,IAAI;IAC1B;IACA,WAAW;QACP,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,SAAS,SAAS,CAAC;IAC9D;IACA,CAAC,CAAC,OAAO,QAAQ,CAAC,GAAG;QACjB,KAAK,MAAM,QAAQ,IAAI,CAAC,KAAK,GAAI;YAC7B,MAAM,KAAK,KAAK;QACpB;IACJ;IACA,CAAC,QAAQ;QACL,IAAI,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI;QACxB,MAAO,QAAQ,IAAI,CAAC,IAAI,CAAE;YACtB,2EAA2E;YAC3E,MAAM,EAAE,IAAI,EAAE,GAAG;YACjB,MAAM;YACN,MAAM;QACV;IACJ;IACA,0BAA0B,GAC1B,KAAK,KAAK,EAAE;QACR,IAAI,CAAC,KAAK,IAAI;QACd,MAAM,UAAU;YACZ,MAAM,IAAI,CAAC,IAAI;YACf,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI;YACpB;QACJ;QACA,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG;QACtB,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG;IACrB;IACA,yEAAyE,GACzE,SAAS,QAAQ,EAAE;QACf,KAAK,MAAM,SAAS,SAAU;YAC1B,IAAI,CAAC,IAAI,CAAC;QACd;IACJ;IACA,4BAA4B,GAC5B,QAAQ,KAAK,EAAE;QACX,IAAI,CAAC,KAAK,IAAI;QACd,MAAM,UAAU;YACZ,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI;YACpB,MAAM,IAAI,CAAC,IAAI;YACf;QACJ;QACA,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG;QACtB,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG;IACrB;IACA,OAAO,IAAI,EAAE;QACT,IAAI,SAAS,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,KAAK,GAAG;YACzC,OAAO;QACX;QACA,IAAI,CAAC,KAAK,IAAI;QACd,MAAM,WAAW,KAAK,IAAI;QAC1B,MAAM,WAAW,KAAK,IAAI;QAC1B,SAAS,IAAI,GAAG;QAChB,SAAS,IAAI,GAAG;QAChB,OAAO,KAAK,KAAK;IACrB;IACA,oDAAoD,GACpD,QAAQ;QACJ,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI;IACrC;IACA,iDAAiD,GACjD,MAAM;QACF,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI;IACrC;IACA,0EAA0E,GAC1E,MAAM,MAAM,EAAE;QACV,KAAK,MAAM,QAAQ,IAAI,CAAC,KAAK,GAAI;YAC7B,IAAI,OAAO,KAAK,KAAK,GAAG;gBACpB,IAAI,CAAC,MAAM,CAAC;YAChB;QACJ;IACJ;IACA,QAAQ;QACJ,IAAI,CAAC,KAAK,GAAG;QACb,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI;QAC1B,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI;IAC9B;IACA,wDAAwD,GACxD,QAAQ;QACJ,sDAAsD;QACtD,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK;IAC/B;IACA,uDAAuD,GACvD,OAAO;QACH,sDAAsD;QACtD,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK;IAC/B;AACJ;AACA,QAAQ,IAAI,GAAG;AACf;;;CAGC,GACD,MAAM;IACF,aAAc;QACV,IAAI,CAAC,OAAO,GAAG,IAAI;QACnB,IAAI,CAAC,eAAe,GAAG;IAC3B;IACA,IAAI,SAAS;QACT,OAAO,IAAI,CAAC,eAAe;IAC/B;IACA,mDAAmD,GACnD,OAAO,MAAM,EAAE;QACX,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;QAClB,IAAI,CAAC,eAAe,IAAI,OAAO,MAAM;IACzC;IACA;;;KAGC,GACD,WAAW;QACP,IAAI,IAAI,CAAC,eAAe,GAAG,GAAG;YAC1B,OAAO;QACX;QACA,MAAM,cAAc,IAAI,CAAC,OAAO,CAAC,KAAK;QACtC,IAAI,eAAe,QAAQ,YAAY,UAAU,IAAI,GAAG;YACpD,OAAO,YAAY,WAAW,CAAC;QACnC;QACA,mDAAmD;QACnD,mDAAmD;QACnD,MAAM,YAAY,IAAI,CAAC,IAAI,CAAC;QAC5B,MAAM,QAAQ,UAAU,WAAW,CAAC;QACpC,eAAe;QACf,IAAI,CAAC,eAAe,IAAI;QACxB,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;QACrB,OAAO;IACX;IACA,mEAAmE,GACnE,KAAK,IAAI,EAAE;QACP,IAAI,OAAO,SAAS,YAAY,OAAO,GAAG;YACtC,MAAM,IAAI,QAAQ,yBAAyB,CAAC;QAChD;QACA,yCAAyC;QACzC,IAAI,OAAO,IAAI,CAAC,eAAe,EAAE;YAC7B,OAAO,OAAO,KAAK,CAAC;QACxB;QACA,4EAA4E;QAC5E,+DAA+D;QAC/D,MAAM,SAAS,OAAO,WAAW,CAAC;QAClC,IAAK,IAAI,YAAY,GAAG,YAAY,MAAO;YACvC,MAAM,SAAS,IAAI,CAAC,OAAO,CAAC,KAAK;YACjC,IAAI,UAAU,MAAM;gBAChB;YACJ;YACA,MAAM,iBAAiB,OAAO;YAC9B,MAAM,gBAAgB,KAAK,GAAG,CAAC,gBAAgB,OAAO,UAAU;YAChE,MAAM,QAAQ,OAAO,QAAQ,CAAC,GAAG;YACjC,OAAO,GAAG,CAAC,OAAO;YAClB,aAAa;YACb,IAAI,CAAC,eAAe,IAAI;YACxB,IAAI,gBAAgB,OAAO,UAAU,EAAE;gBACnC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,QAAQ,CAAC;YACzC;QACJ;QACA,OAAO;IACX;AACJ;AACA,QAAQ,UAAU,GAAG;AACrB,YAAY,GACZ,MAAM;IACF,YAAY,UAAU,CAAE;QACpB,IAAI,CAAC,IAAI,GAAG;QACZ,IAAI,CAAC,IAAI,GAAG;QACZ,IAAI,CAAC,UAAU,GAAG;QAClB,IAAI,CAAC,MAAM,GAAG;QACd,MAAM,cAAc,WAAW,KAAK,CAAC,KAAK,IAAI,CAAC,QAAQ,uCAAuC;QAC9F,IAAI,YAAY,QAAQ,CAAC,UAAU;YAC/B,gEAAgE;YAChE,IAAI,CAAC,UAAU,GAAG,mBAAmB;YACrC;QACJ;QACA,MAAM,YAAY,CAAC,UAAU,EAAE,YAAY,CAAC;QAC5C,IAAI;QACJ,IAAI;YACA,MAAM,IAAI,MAAM,GAAG,CAAC;QACxB,EACA,OAAO,UAAU;YACb,MAAM,eAAe,IAAI,QAAQ,iBAAiB,CAAC,CAAC,gBAAgB,EAAE,YAAY,SAAS,CAAC;YAC5F,aAAa,KAAK,GAAG;YACrB,MAAM;QACV;QACA,MAAM,WAAW,IAAI,QAAQ;QAC7B,MAAM,OAAO,IAAI,IAAI;QACrB,IAAI,aAAa,mBAAmB,UAAU,WAAW;QACzD,IAAI,WAAW,UAAU,CAAC,QAAQ,WAAW,QAAQ,CAAC,MAAM;YACxD,IAAI,CAAC,MAAM,GAAG;YACd,aAAa,WAAW,SAAS,CAAC,GAAG,SAAS,MAAM,GAAG;QAC3D;QACA,IAAI,CAAC,IAAI,GAAG,WAAW,WAAW;QAClC,IAAI,OAAO,SAAS,UAAU;YAC1B,IAAI,CAAC,IAAI,GAAG;QAChB,OACK,IAAI,OAAO,SAAS,YAAY,SAAS,IAAI;YAC9C,IAAI,CAAC,IAAI,GAAG,OAAO,QAAQ,CAAC,MAAM;QACtC,OACK;YACD,IAAI,CAAC,IAAI,GAAG;QAChB;QACA,IAAI,IAAI,CAAC,IAAI,KAAK,GAAG;YACjB,MAAM,IAAI,QAAQ,eAAe,CAAC;QACtC;QACA,OAAO,MAAM,CAAC,IAAI;IACtB;IACA,CAAC,OAAO,GAAG,CAAC,8BAA8B,GAAG;QACzC,OAAO,IAAI,CAAC,OAAO;IACvB;IACA,UAAU;QACN,OAAO,CAAC,iBAAiB,EAAE,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;IAClD;IACA,WAAW;QACP,IAAI,OAAO,IAAI,CAAC,IAAI,KAAK,UAAU;YAC/B,IAAI,IAAI,CAAC,MAAM,EAAE;gBACb,OAAO,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;YACxC;YACA,OAAO,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;QACtC;QACA,OAAO,CAAC,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;IAC/B;IACA,OAAO,WAAW,CAAC,EAAE;QACjB,OAAO,IAAI,YAAY;IAC3B;IACA,OAAO,aAAa,IAAI,EAAE,IAAI,EAAE;QAC5B,IAAI,KAAK,QAAQ,CAAC,MAAM;YACpB,OAAO,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,eAAe;QACvC;QACA,OAAO,YAAY,UAAU,CAAC,CAAC,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC;IACnD;IACA,OAAO,cAAc,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE;QACjC,OAAO,YAAY,YAAY,CAAC,MAAM;IAC1C;IACA,aAAa;QACT,IAAI,IAAI,CAAC,UAAU,EAAE;YACjB,OAAO;gBAAE,MAAM,IAAI,CAAC,UAAU;gBAAE,MAAM;YAAE;QAC5C;QACA,MAAM,OAAO,IAAI,CAAC,IAAI,IAAI;QAC1B,MAAM,OAAO,IAAI,CAAC,IAAI,IAAI;QAC1B,OAAO;YAAE;YAAM;QAAK;IACxB;AACJ;AACA,QAAQ,WAAW,GAAG;AACtB,QAAQ,kBAAkB,GAAG;IACzB,6DAA6D;IAC7D;QACI,OAAO,IAAI,OAAO,QAAQ;IAC9B;AACJ;AACA;;;;;;;;;;CAUC,GACD,QAAQ,oBAAoB,GAAG;AAC/B,cAAc,GACd,SAAS,YAAY,OAAO;IACxB,OAAO,QAAQ,WAAW,CAAC,SAAS;QAAE,MAAM,QAAQ,oBAAoB;IAAC;AAC7E;AACA,QAAQ,WAAW,GAAG;AACtB,MAAM,kBAAkB,IAAI;AAC5B;;;;;CAKC,GACD,SAAS,gBAAgB,OAAO;IAC5B,IAAI,CAAC,gBAAgB,GAAG,CAAC,UAAU;QAC/B,gBAAgB,GAAG,CAAC;QACpB,OAAO,YAAY;IACvB;AACJ;AACA,QAAQ,eAAe,GAAG;AAC1B;;CAEC,GACD,SAAS,aAAa,EAAE;IACpB,OAAO,OAAO,MAAM,CAAC,IAAI,IAAI,CAAC;AAClC;AACA,QAAQ,YAAY,GAAG;AACvB;;;;CAIC,GACD,SAAS,wBAAwB,MAAM;IACnC,IAAI,CAAC,QAAQ;QACT,OAAO;IACX;IACA,IAAI,OAAO,YAAY,EAAE;QACrB,2DAA2D;QAC3D,OAAO;IACX;IACA,IAAI,OAAO,WAAW,CAAC,4BAA4B,IAAI,MAAM;QACzD,yBAAyB;QACzB,IAAI,OAAO,WAAW,CAAC,IAAI,KAAK,SAAS,UAAU,CAAC,UAAU,EAAE;YAC5D,+BAA+B;YAC/B,OAAO;QACX;IACJ;IACA,OAAO;AACX;AACA,QAAQ,uBAAuB,GAAG;AAClC;;;;;;CAMC,GACD,SAAS,QAAQ,QAAQ,EAAE,QAAQ,CAAC;IAChC,MAAM,QAAQ,MAAM,IAAI,CAAC,WAAW,mDAAmD;IACvF,IAAI,QAAQ,MAAM,MAAM,EAAE;QACtB,MAAM,IAAI,QAAQ,iBAAiB,CAAC;IACxC;IACA,IAAI,0BAA0B,MAAM,MAAM;IAC1C,MAAM,aAAa,QAAQ,MAAM,MAAM,KAAK,IAAI,IAAI,MAAM,MAAM,GAAG;IACnE,MAAO,0BAA0B,WAAY;QACzC,2BAA2B;QAC3B,MAAM,cAAc,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK;QAC/C,2BAA2B;QAC3B,uCAAuC;QACvC,MAAM,WAAW,KAAK,CAAC,wBAAwB;QAC/C,KAAK,CAAC,wBAAwB,GAAG,KAAK,CAAC,YAAY;QACnD,KAAK,CAAC,YAAY,GAAG;IACzB;IACA,OAAO,QAAQ,MAAM,MAAM,KAAK,IAAI,QAAQ,MAAM,KAAK,CAAC;AAC5D;AACA,QAAQ,OAAO,GAAG;AAClB,oGAAoG;AACpG,2HAA2H;AAC3H,SAAS,2BAA2B,OAAO;IACvC,IAAI,QAAQ,SAAS,IAAI,QAAQ,KAAK,IAAI,QAAQ,QAAQ,IAAI,QAAQ,IAAI,IAAI,QAAQ,OAAO,EAAE;QAC3F,OAAO;IACX;IACA,OAAO;AACX;AACA,QAAQ,0BAA0B,GAAG;AACrC;;;;;CAKC,GACD,SAAS,gBAAgB,IAAI,EAAE,IAAI;IAC/B,IAAI,QAAQ,QAAQ,QAAQ,MAAM;QAC9B,OAAO;IACX;IACA,IAAI,QAAQ,MAAM;QACd,OAAO,CAAC;IACZ;IACA,IAAI,QAAQ,MAAM;QACd,OAAO;IACX;IACA,OAAO,QAAQ,SAAS,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,KAAK,EAAE;AACrD;AACA,QAAQ,eAAe,GAAG;AAC1B,SAAS,aAAa,KAAK;IACvB,IAAI,OAAO,UAAU,UACjB,OAAO,KAAK,KAAK,CAAC;IACtB,MAAM,cAAc,OAAO,QAAQ,CAAC,OAAO,QAAQ;IACnD,OAAO,OAAO,KAAK,CAAC,eAAe,OAAO;AAC9C;AACA,QAAQ,YAAY,GAAG;AACvB,SAAS,qBAAqB,KAAK;IAC/B,MAAM,YAAY,aAAa;IAC/B,OAAO,aAAa,QAAQ,aAAa,IAAI,YAAY;AAC7D;AACA,QAAQ,oBAAoB,GAAG;AAC/B;;;;;;;;;CASC,GACD,SAAS,oBAAoB,OAAO,EAAE,OAAO;IACzC,mFAAmF;IACnF,MAAM,oBAAoB,QAAQ,QAAQ,CAAC,OAAO,QAAQ,KAAK,CAAC,GAAG,QAAQ,MAAM,GAAG,KAAK;IACzF,MAAM,oBAAoB,QAAQ,QAAQ,CAAC,OAAO,QAAQ,KAAK,CAAC,GAAG,QAAQ,MAAM,GAAG,KAAK;IACzF,MAAM,6BAA6B;IACnC,yCAAyC;IACzC,oCAAoC;IACpC,uCAAuC;IACvC,yEAAyE;IACzE,MAAM,gBAAgB,CAAC,CAAC,EAAE,kBAAkB,OAAO,CAAC,4BAA4B,IAAI,CAAC;IACrF,MAAM,gBAAgB,CAAC,CAAC,EAAE,kBAAkB,OAAO,CAAC,4BAA4B,IAAI,CAAC;IACrF,OAAO,cAAc,QAAQ,CAAC;AAClC;AACA,QAAQ,mBAAmB,GAAG;AAC9B,eAAe,QAAQ,GAAG,EAAE,UAAU,CAAC,CAAC;IACpC,OAAO,IAAI,QAAQ,CAAC,SAAS;QACzB,MAAM,iBAAiB;YACnB,QAAQ;YACR,SAAS;YACT,MAAM;YACN,GAAG,IAAI,KAAK,CAAC,IAAI;YACjB,GAAG,OAAO;QACd;QACA,MAAM,MAAM,KAAK,OAAO,CAAC,gBAAgB,CAAA;YACrC,IAAI,WAAW,CAAC;YAChB,IAAI,OAAO;YACX,IAAI,EAAE,CAAC,QAAQ,CAAA;gBACX,QAAQ;YACZ;YACA,IAAI,IAAI,CAAC,OAAO;gBACZ,IAAI,QAAQ,IAAI,KAAK,OAAO;oBACxB,QAAQ;oBACR;gBACJ;gBACA,IAAI;oBACA,MAAM,SAAS,KAAK,KAAK,CAAC;oBAC1B,QAAQ;gBACZ,EACA,OAAM;oBACF,kBAAkB;oBAClB,OAAO,IAAI,QAAQ,iBAAiB,CAAC,CAAC,wBAAwB,EAAE,KAAK,CAAC,CAAC;gBAC3E;YACJ;QACJ;QACA,IAAI,IAAI,CAAC,WAAW,IAAM,IAAI,OAAO,CAAC,IAAI,QAAQ,wBAAwB,CAAC,CAAC,mBAAmB,EAAE,IAAI,iBAAiB,EAAE,QAAQ,OAAO,CAAC,GAAG,CAAC;QAC5I,IAAI,IAAI,CAAC,SAAS,CAAA,QAAS,OAAO;QAClC,IAAI,GAAG;IACX;AACJ;AACA,QAAQ,OAAO,GAAG;AAClB;;;;;;;;;;CAUC,GACD,MAAM,0BAA0B;IAC5B,YAAY,UAAU,CAAC,EAAE,YAAY,UAAU,IAAI,AAAC,CAAA,GAAG,SAAS,UAAU,AAAD,EAAG,IAAM,IAAI,CAAC,KAAK,IAAI,WAAW,IAAI,CAAE;QAC7G,KAAK;QACL,IAAI,CAAC,SAAS,GAAG;IACrB;IACA,QAAQ;QACJ,IAAI,IAAI,CAAC,SAAS,IAAI,MAAM;YACvB,CAAA,GAAG,SAAS,YAAY,AAAD,EAAG,IAAI,CAAC,SAAS;QAC7C;QACA,IAAI,CAAC,SAAS,GAAG;IACrB;AACJ;AACA,QAAQ,iBAAiB,GAAG;AAC5B,cAAc,GACd,QAAQ,iBAAiB,GAAG;AAC5B,cAAc,GACd,QAAQ,eAAe,GAAG;AAC1B,cAAc,GACd,QAAQ,eAAe,GAAG;AAC1B,cAAc,GACd,QAAQ,aAAa,GAAG;AACxB,cAAc,GACd,SAAS,YAAY,KAAK,EAAE,IAAI;IAC5B,OAAO,QAAQ,MAAM,IAAI,CAAC,KAAK,WAAW,MAAM,OAAO;AAC3D;AACA,QAAQ,WAAW,GAAG,aACtB,iCAAiC"}},
    {"offset": {"line": 2928, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2932, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/mongo_types.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CancellationToken = exports.TypedEventEmitter = void 0;\nconst events_1 = require(\"events\");\n/**\n * Typescript type safe event emitter\n * @public\n */\nclass TypedEventEmitter extends events_1.EventEmitter {\n    /** @internal */\n    emitAndLog(event, ...args) {\n        this.emit(event, ...args);\n        if (this.component)\n            this.mongoLogger?.debug(this.component, args[0]);\n    }\n}\nexports.TypedEventEmitter = TypedEventEmitter;\n/** @public */\nclass CancellationToken extends TypedEventEmitter {\n}\nexports.CancellationToken = CancellationToken;\n//# sourceMappingURL=mongo_types.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,iBAAiB,GAAG,QAAQ,iBAAiB,GAAG,KAAK;AAC7D,MAAM,WAAW;AACjB;;;CAGC,GACD,MAAM,0BAA0B,SAAS,YAAY;IACjD,cAAc,GACd,WAAW,KAAK,EAAE,GAAG,IAAI,EAAE;QACvB,IAAI,CAAC,IAAI,CAAC,UAAU;QACpB,IAAI,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,WAAW,EAAE,MAAM,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,EAAE;IACvD;AACJ;AACA,QAAQ,iBAAiB,GAAG;AAC5B,YAAY,GACZ,MAAM,0BAA0B;AAChC;AACA,QAAQ,iBAAiB,GAAG,mBAC5B,uCAAuC"}},
    {"offset": {"line": 2951, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2955, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/sdam/srv_polling.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SrvPoller = exports.SrvPollingEvent = void 0;\nconst dns = require(\"dns\");\nconst timers_1 = require(\"timers\");\nconst error_1 = require(\"../error\");\nconst mongo_types_1 = require(\"../mongo_types\");\nconst utils_1 = require(\"../utils\");\n/**\n * @internal\n * @category Event\n */\nclass SrvPollingEvent {\n    constructor(srvRecords) {\n        this.srvRecords = srvRecords;\n    }\n    hostnames() {\n        return new Set(this.srvRecords.map(r => utils_1.HostAddress.fromSrvRecord(r).toString()));\n    }\n}\nexports.SrvPollingEvent = SrvPollingEvent;\n/** @internal */\nclass SrvPoller extends mongo_types_1.TypedEventEmitter {\n    constructor(options) {\n        super();\n        if (!options || !options.srvHost) {\n            throw new error_1.MongoRuntimeError('Options for SrvPoller must exist and include srvHost');\n        }\n        this.srvHost = options.srvHost;\n        this.srvMaxHosts = options.srvMaxHosts ?? 0;\n        this.srvServiceName = options.srvServiceName ?? 'mongodb';\n        this.rescanSrvIntervalMS = 60000;\n        this.heartbeatFrequencyMS = options.heartbeatFrequencyMS ?? 10000;\n        this.haMode = false;\n        this.generation = 0;\n        this._timeout = undefined;\n    }\n    get srvAddress() {\n        return `_${this.srvServiceName}._tcp.${this.srvHost}`;\n    }\n    get intervalMS() {\n        return this.haMode ? this.heartbeatFrequencyMS : this.rescanSrvIntervalMS;\n    }\n    start() {\n        if (!this._timeout) {\n            this.schedule();\n        }\n    }\n    stop() {\n        if (this._timeout) {\n            (0, timers_1.clearTimeout)(this._timeout);\n            this.generation += 1;\n            this._timeout = undefined;\n        }\n    }\n    // TODO(NODE-4994): implement new logging logic for SrvPoller failures\n    schedule() {\n        if (this._timeout) {\n            (0, timers_1.clearTimeout)(this._timeout);\n        }\n        this._timeout = (0, timers_1.setTimeout)(() => {\n            this._poll().catch(() => null);\n        }, this.intervalMS);\n    }\n    success(srvRecords) {\n        this.haMode = false;\n        this.schedule();\n        this.emit(SrvPoller.SRV_RECORD_DISCOVERY, new SrvPollingEvent(srvRecords));\n    }\n    failure() {\n        this.haMode = true;\n        this.schedule();\n    }\n    async _poll() {\n        const generation = this.generation;\n        let srvRecords;\n        try {\n            srvRecords = await dns.promises.resolveSrv(this.srvAddress);\n        }\n        catch (dnsError) {\n            this.failure();\n            return;\n        }\n        if (generation !== this.generation) {\n            return;\n        }\n        const finalAddresses = [];\n        for (const record of srvRecords) {\n            if ((0, utils_1.matchesParentDomain)(record.name, this.srvHost)) {\n                finalAddresses.push(record);\n            }\n        }\n        if (!finalAddresses.length) {\n            this.failure();\n            return;\n        }\n        this.success(finalAddresses);\n    }\n}\n/** @event */\nSrvPoller.SRV_RECORD_DISCOVERY = 'srvRecordDiscovery';\nexports.SrvPoller = SrvPoller;\n//# sourceMappingURL=srv_polling.js.map"],"names":[],"mappings":"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"}},
    {"offset": {"line": 3055, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3059, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/sdam/events.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ServerHeartbeatFailedEvent = exports.ServerHeartbeatSucceededEvent = exports.ServerHeartbeatStartedEvent = exports.TopologyClosedEvent = exports.TopologyOpeningEvent = exports.TopologyDescriptionChangedEvent = exports.ServerClosedEvent = exports.ServerOpeningEvent = exports.ServerDescriptionChangedEvent = void 0;\n/**\n * Emitted when server description changes, but does NOT include changes to the RTT.\n * @public\n * @category Event\n */\nclass ServerDescriptionChangedEvent {\n    /** @internal */\n    constructor(topologyId, address, previousDescription, newDescription) {\n        this.topologyId = topologyId;\n        this.address = address;\n        this.previousDescription = previousDescription;\n        this.newDescription = newDescription;\n    }\n}\nexports.ServerDescriptionChangedEvent = ServerDescriptionChangedEvent;\n/**\n * Emitted when server is initialized.\n * @public\n * @category Event\n */\nclass ServerOpeningEvent {\n    /** @internal */\n    constructor(topologyId, address) {\n        this.topologyId = topologyId;\n        this.address = address;\n    }\n}\nexports.ServerOpeningEvent = ServerOpeningEvent;\n/**\n * Emitted when server is closed.\n * @public\n * @category Event\n */\nclass ServerClosedEvent {\n    /** @internal */\n    constructor(topologyId, address) {\n        this.topologyId = topologyId;\n        this.address = address;\n    }\n}\nexports.ServerClosedEvent = ServerClosedEvent;\n/**\n * Emitted when topology description changes.\n * @public\n * @category Event\n */\nclass TopologyDescriptionChangedEvent {\n    /** @internal */\n    constructor(topologyId, previousDescription, newDescription) {\n        this.topologyId = topologyId;\n        this.previousDescription = previousDescription;\n        this.newDescription = newDescription;\n    }\n}\nexports.TopologyDescriptionChangedEvent = TopologyDescriptionChangedEvent;\n/**\n * Emitted when topology is initialized.\n * @public\n * @category Event\n */\nclass TopologyOpeningEvent {\n    /** @internal */\n    constructor(topologyId) {\n        this.topologyId = topologyId;\n    }\n}\nexports.TopologyOpeningEvent = TopologyOpeningEvent;\n/**\n * Emitted when topology is closed.\n * @public\n * @category Event\n */\nclass TopologyClosedEvent {\n    /** @internal */\n    constructor(topologyId) {\n        this.topologyId = topologyId;\n    }\n}\nexports.TopologyClosedEvent = TopologyClosedEvent;\n/**\n * Emitted when the server monitor’s hello command is started - immediately before\n * the hello command is serialized into raw BSON and written to the socket.\n *\n * @public\n * @category Event\n */\nclass ServerHeartbeatStartedEvent {\n    /** @internal */\n    constructor(connectionId, awaited) {\n        this.connectionId = connectionId;\n        this.awaited = awaited;\n    }\n}\nexports.ServerHeartbeatStartedEvent = ServerHeartbeatStartedEvent;\n/**\n * Emitted when the server monitor’s hello succeeds.\n * @public\n * @category Event\n */\nclass ServerHeartbeatSucceededEvent {\n    /** @internal */\n    constructor(connectionId, duration, reply, awaited) {\n        this.connectionId = connectionId;\n        this.duration = duration;\n        this.reply = reply ?? {};\n        this.awaited = awaited;\n    }\n}\nexports.ServerHeartbeatSucceededEvent = ServerHeartbeatSucceededEvent;\n/**\n * Emitted when the server monitor’s hello fails, either with an “ok: 0” or a socket exception.\n * @public\n * @category Event\n */\nclass ServerHeartbeatFailedEvent {\n    /** @internal */\n    constructor(connectionId, duration, failure, awaited) {\n        this.connectionId = connectionId;\n        this.duration = duration;\n        this.failure = failure;\n        this.awaited = awaited;\n    }\n}\nexports.ServerHeartbeatFailedEvent = ServerHeartbeatFailedEvent;\n//# sourceMappingURL=events.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,0BAA0B,GAAG,QAAQ,6BAA6B,GAAG,QAAQ,2BAA2B,GAAG,QAAQ,mBAAmB,GAAG,QAAQ,oBAAoB,GAAG,QAAQ,+BAA+B,GAAG,QAAQ,iBAAiB,GAAG,QAAQ,kBAAkB,GAAG,QAAQ,6BAA6B,GAAG,KAAK;AAChU;;;;CAIC,GACD,MAAM;IACF,cAAc,GACd,YAAY,UAAU,EAAE,OAAO,EAAE,mBAAmB,EAAE,cAAc,CAAE;QAClE,IAAI,CAAC,UAAU,GAAG;QAClB,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,mBAAmB,GAAG;QAC3B,IAAI,CAAC,cAAc,GAAG;IAC1B;AACJ;AACA,QAAQ,6BAA6B,GAAG;AACxC;;;;CAIC,GACD,MAAM;IACF,cAAc,GACd,YAAY,UAAU,EAAE,OAAO,CAAE;QAC7B,IAAI,CAAC,UAAU,GAAG;QAClB,IAAI,CAAC,OAAO,GAAG;IACnB;AACJ;AACA,QAAQ,kBAAkB,GAAG;AAC7B;;;;CAIC,GACD,MAAM;IACF,cAAc,GACd,YAAY,UAAU,EAAE,OAAO,CAAE;QAC7B,IAAI,CAAC,UAAU,GAAG;QAClB,IAAI,CAAC,OAAO,GAAG;IACnB;AACJ;AACA,QAAQ,iBAAiB,GAAG;AAC5B;;;;CAIC,GACD,MAAM;IACF,cAAc,GACd,YAAY,UAAU,EAAE,mBAAmB,EAAE,cAAc,CAAE;QACzD,IAAI,CAAC,UAAU,GAAG;QAClB,IAAI,CAAC,mBAAmB,GAAG;QAC3B,IAAI,CAAC,cAAc,GAAG;IAC1B;AACJ;AACA,QAAQ,+BAA+B,GAAG;AAC1C;;;;CAIC,GACD,MAAM;IACF,cAAc,GACd,YAAY,UAAU,CAAE;QACpB,IAAI,CAAC,UAAU,GAAG;IACtB;AACJ;AACA,QAAQ,oBAAoB,GAAG;AAC/B;;;;CAIC,GACD,MAAM;IACF,cAAc,GACd,YAAY,UAAU,CAAE;QACpB,IAAI,CAAC,UAAU,GAAG;IACtB;AACJ;AACA,QAAQ,mBAAmB,GAAG;AAC9B;;;;;;CAMC,GACD,MAAM;IACF,cAAc,GACd,YAAY,YAAY,EAAE,OAAO,CAAE;QAC/B,IAAI,CAAC,YAAY,GAAG;QACpB,IAAI,CAAC,OAAO,GAAG;IACnB;AACJ;AACA,QAAQ,2BAA2B,GAAG;AACtC;;;;CAIC,GACD,MAAM;IACF,cAAc,GACd,YAAY,YAAY,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,CAAE;QAChD,IAAI,CAAC,YAAY,GAAG;QACpB,IAAI,CAAC,QAAQ,GAAG;QAChB,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;QACvB,IAAI,CAAC,OAAO,GAAG;IACnB;AACJ;AACA,QAAQ,6BAA6B,GAAG;AACxC;;;;CAIC,GACD,MAAM;IACF,cAAc,GACd,YAAY,YAAY,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,CAAE;QAClD,IAAI,CAAC,YAAY,GAAG;QACpB,IAAI,CAAC,QAAQ,GAAG;QAChB,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,OAAO,GAAG;IACnB;AACJ;AACA,QAAQ,0BAA0B,GAAG,4BACrC,kCAAkC"}},
    {"offset": {"line": 3170, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3174, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/cmap/connection_pool_events.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConnectionPoolClearedEvent = exports.ConnectionCheckedInEvent = exports.ConnectionCheckedOutEvent = exports.ConnectionCheckOutFailedEvent = exports.ConnectionCheckOutStartedEvent = exports.ConnectionClosedEvent = exports.ConnectionReadyEvent = exports.ConnectionCreatedEvent = exports.ConnectionPoolClosedEvent = exports.ConnectionPoolReadyEvent = exports.ConnectionPoolCreatedEvent = exports.ConnectionPoolMonitoringEvent = void 0;\nconst constants_1 = require(\"../constants\");\n/**\n * The base export class for all monitoring events published from the connection pool\n * @public\n * @category Event\n */\nclass ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool) {\n        this.time = new Date();\n        this.address = pool.address;\n    }\n}\nexports.ConnectionPoolMonitoringEvent = ConnectionPoolMonitoringEvent;\n/**\n * An event published when a connection pool is created\n * @public\n * @category Event\n */\nclass ConnectionPoolCreatedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_POOL_CREATED;\n        const { maxConnecting, maxPoolSize, minPoolSize, maxIdleTimeMS, waitQueueTimeoutMS } = pool.options;\n        this.options = { maxConnecting, maxPoolSize, minPoolSize, maxIdleTimeMS, waitQueueTimeoutMS };\n    }\n}\nexports.ConnectionPoolCreatedEvent = ConnectionPoolCreatedEvent;\n/**\n * An event published when a connection pool is ready\n * @public\n * @category Event\n */\nclass ConnectionPoolReadyEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_POOL_READY;\n    }\n}\nexports.ConnectionPoolReadyEvent = ConnectionPoolReadyEvent;\n/**\n * An event published when a connection pool is closed\n * @public\n * @category Event\n */\nclass ConnectionPoolClosedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_POOL_CLOSED;\n    }\n}\nexports.ConnectionPoolClosedEvent = ConnectionPoolClosedEvent;\n/**\n * An event published when a connection pool creates a new connection\n * @public\n * @category Event\n */\nclass ConnectionCreatedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool, connection) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_CREATED;\n        this.connectionId = connection.id;\n    }\n}\nexports.ConnectionCreatedEvent = ConnectionCreatedEvent;\n/**\n * An event published when a connection is ready for use\n * @public\n * @category Event\n */\nclass ConnectionReadyEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool, connection) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_READY;\n        this.connectionId = connection.id;\n    }\n}\nexports.ConnectionReadyEvent = ConnectionReadyEvent;\n/**\n * An event published when a connection is closed\n * @public\n * @category Event\n */\nclass ConnectionClosedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool, connection, reason, error) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_CLOSED;\n        this.connectionId = connection.id;\n        this.reason = reason;\n        this.serviceId = connection.serviceId;\n        this.error = error ?? null;\n    }\n}\nexports.ConnectionClosedEvent = ConnectionClosedEvent;\n/**\n * An event published when a request to check a connection out begins\n * @public\n * @category Event\n */\nclass ConnectionCheckOutStartedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_CHECK_OUT_STARTED;\n    }\n}\nexports.ConnectionCheckOutStartedEvent = ConnectionCheckOutStartedEvent;\n/**\n * An event published when a request to check a connection out fails\n * @public\n * @category Event\n */\nclass ConnectionCheckOutFailedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool, reason, error) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_CHECK_OUT_FAILED;\n        this.reason = reason;\n        this.error = error;\n    }\n}\nexports.ConnectionCheckOutFailedEvent = ConnectionCheckOutFailedEvent;\n/**\n * An event published when a connection is checked out of the connection pool\n * @public\n * @category Event\n */\nclass ConnectionCheckedOutEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool, connection) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_CHECKED_OUT;\n        this.connectionId = connection.id;\n    }\n}\nexports.ConnectionCheckedOutEvent = ConnectionCheckedOutEvent;\n/**\n * An event published when a connection is checked into the connection pool\n * @public\n * @category Event\n */\nclass ConnectionCheckedInEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool, connection) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_CHECKED_IN;\n        this.connectionId = connection.id;\n    }\n}\nexports.ConnectionCheckedInEvent = ConnectionCheckedInEvent;\n/**\n * An event published when a connection pool is cleared\n * @public\n * @category Event\n */\nclass ConnectionPoolClearedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool, options = {}) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_POOL_CLEARED;\n        this.serviceId = options.serviceId;\n        this.interruptInUseConnections = options.interruptInUseConnections;\n    }\n}\nexports.ConnectionPoolClearedEvent = ConnectionPoolClearedEvent;\n//# sourceMappingURL=connection_pool_events.js.map"],"names":[],"mappings":"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"}},
    {"offset": {"line": 3332, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3336, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/deps.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getMongoDBClientEncryption = exports.aws4 = exports.getSocks = exports.getSnappy = exports.getGcpMetadata = exports.getAwsCredentialProvider = exports.getZstdLibrary = exports.ZStandard = exports.getKerberos = exports.Kerberos = void 0;\nconst error_1 = require(\"./error\");\nfunction makeErrorModule(error) {\n    const props = error ? { kModuleError: error } : {};\n    return new Proxy(props, {\n        get: (_, key) => {\n            if (key === 'kModuleError') {\n                return error;\n            }\n            throw error;\n        },\n        set: () => {\n            throw error;\n        }\n    });\n}\nexports.Kerberos = makeErrorModule(new error_1.MongoMissingDependencyError('Optional module `kerberos` not found. Please install it to enable kerberos authentication'));\nfunction getKerberos() {\n    try {\n        // Ensure you always wrap an optional require in the try block NODE-3199\n        exports.Kerberos = require('kerberos');\n        return exports.Kerberos;\n    }\n    catch {\n        return exports.Kerberos;\n    }\n}\nexports.getKerberos = getKerberos;\nexports.ZStandard = makeErrorModule(new error_1.MongoMissingDependencyError('Optional module `@mongodb-js/zstd` not found. Please install it to enable zstd compression'));\nfunction getZstdLibrary() {\n    try {\n        exports.ZStandard = require('@mongodb-js/zstd');\n        return exports.ZStandard;\n    }\n    catch {\n        return exports.ZStandard;\n    }\n}\nexports.getZstdLibrary = getZstdLibrary;\nfunction getAwsCredentialProvider() {\n    try {\n        // Ensure you always wrap an optional require in the try block NODE-3199\n        const credentialProvider = require('@aws-sdk/credential-providers');\n        return credentialProvider;\n    }\n    catch {\n        return makeErrorModule(new error_1.MongoMissingDependencyError('Optional module `@aws-sdk/credential-providers` not found.' +\n            ' Please install it to enable getting aws credentials via the official sdk.'));\n    }\n}\nexports.getAwsCredentialProvider = getAwsCredentialProvider;\nfunction getGcpMetadata() {\n    try {\n        // Ensure you always wrap an optional require in the try block NODE-3199\n        const credentialProvider = require('gcp-metadata');\n        return credentialProvider;\n    }\n    catch {\n        return makeErrorModule(new error_1.MongoMissingDependencyError('Optional module `gcp-metadata` not found.' +\n            ' Please install it to enable getting gcp credentials via the official sdk.'));\n    }\n}\nexports.getGcpMetadata = getGcpMetadata;\nfunction getSnappy() {\n    try {\n        // Ensure you always wrap an optional require in the try block NODE-3199\n        const value = require('snappy');\n        return value;\n    }\n    catch (cause) {\n        const kModuleError = new error_1.MongoMissingDependencyError('Optional module `snappy` not found. Please install it to enable snappy compression', { cause });\n        return { kModuleError };\n    }\n}\nexports.getSnappy = getSnappy;\nfunction getSocks() {\n    try {\n        // Ensure you always wrap an optional require in the try block NODE-3199\n        const value = require('socks');\n        return value;\n    }\n    catch (cause) {\n        const kModuleError = new error_1.MongoMissingDependencyError('Optional module `socks` not found. Please install it to connections over a SOCKS5 proxy', { cause });\n        return { kModuleError };\n    }\n}\nexports.getSocks = getSocks;\nexports.aws4 = makeErrorModule(new error_1.MongoMissingDependencyError('Optional module `aws4` not found. Please install it to enable AWS authentication'));\ntry {\n    // Ensure you always wrap an optional require in the try block NODE-3199\n    exports.aws4 = require('aws4');\n}\ncatch { } // eslint-disable-line\n/** A utility function to get the instance of mongodb-client-encryption, if it exists. */\nfunction getMongoDBClientEncryption() {\n    let mongodbClientEncryption = null;\n    try {\n        // NOTE(NODE-3199): Ensure you always wrap an optional require literally in the try block\n        // Cannot be moved to helper utility function, bundlers search and replace the actual require call\n        // in a way that makes this line throw at bundle time, not runtime, catching here will make bundling succeed\n        mongodbClientEncryption = require('mongodb-client-encryption');\n    }\n    catch (cause) {\n        const kModuleError = new error_1.MongoMissingDependencyError('Optional module `mongodb-client-encryption` not found. Please install it to use auto encryption or ClientEncryption.', { cause });\n        return { kModuleError };\n    }\n    return mongodbClientEncryption;\n}\nexports.getMongoDBClientEncryption = getMongoDBClientEncryption;\n//# sourceMappingURL=deps.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,0BAA0B,GAAG,QAAQ,IAAI,GAAG,QAAQ,QAAQ,GAAG,QAAQ,SAAS,GAAG,QAAQ,cAAc,GAAG,QAAQ,wBAAwB,GAAG,QAAQ,cAAc,GAAG,QAAQ,SAAS,GAAG,QAAQ,WAAW,GAAG,QAAQ,QAAQ,GAAG,KAAK;AAClP,MAAM,UAAU;AAChB,SAAS,gBAAgB,KAAK;IAC1B,MAAM,QAAQ,QAAQ;QAAE,cAAc;IAAM,IAAI,CAAC;IACjD,OAAO,IAAI,MAAM,OAAO;QACpB,KAAK,CAAC,GAAG;YACL,IAAI,QAAQ,gBAAgB;gBACxB,OAAO;YACX;YACA,MAAM;QACV;QACA,KAAK;YACD,MAAM;QACV;IACJ;AACJ;AACA,QAAQ,QAAQ,GAAG,gBAAgB,IAAI,QAAQ,2BAA2B,CAAC;AAC3E,SAAS;IACL,IAAI;QACA,wEAAwE;QACxE,QAAQ,QAAQ,GAAG;;;;;QACnB,OAAO,QAAQ,QAAQ;IAC3B,EACA,OAAM;QACF,OAAO,QAAQ,QAAQ;IAC3B;AACJ;AACA,QAAQ,WAAW,GAAG;AACtB,QAAQ,SAAS,GAAG,gBAAgB,IAAI,QAAQ,2BAA2B,CAAC;AAC5E,SAAS;IACL,IAAI;QACA,QAAQ,SAAS,GAAG;;;;;QACpB,OAAO,QAAQ,SAAS;IAC5B,EACA,OAAM;QACF,OAAO,QAAQ,SAAS;IAC5B;AACJ;AACA,QAAQ,cAAc,GAAG;AACzB,SAAS;IACL,IAAI;QACA,wEAAwE;QACxE,MAAM,qBAAqB;;;;;QAC3B,OAAO;IACX,EACA,OAAM;QACF,OAAO,gBAAgB,IAAI,QAAQ,2BAA2B,CAAC,+DAC3D;IACR;AACJ;AACA,QAAQ,wBAAwB,GAAG;AACnC,SAAS;IACL,IAAI;QACA,wEAAwE;QACxE,MAAM,qBAAqB;QAC3B,OAAO;IACX,EACA,OAAM;QACF,OAAO,gBAAgB,IAAI,QAAQ,2BAA2B,CAAC,8CAC3D;IACR;AACJ;AACA,QAAQ,cAAc,GAAG;AACzB,SAAS;IACL,IAAI;QACA,wEAAwE;QACxE,MAAM,QAAQ;;;;;QACd,OAAO;IACX,EACA,OAAO,OAAO;QACV,MAAM,eAAe,IAAI,QAAQ,2BAA2B,CAAC,sFAAsF;YAAE;QAAM;QAC3J,OAAO;YAAE;QAAa;IAC1B;AACJ;AACA,QAAQ,SAAS,GAAG;AACpB,SAAS;IACL,IAAI;QACA,wEAAwE;QACxE,MAAM,QAAQ;;;;;QACd,OAAO;IACX,EACA,OAAO,OAAO;QACV,MAAM,eAAe,IAAI,QAAQ,2BAA2B,CAAC,2FAA2F;YAAE;QAAM;QAChK,OAAO;YAAE;QAAa;IAC1B;AACJ;AACA,QAAQ,QAAQ,GAAG;AACnB,QAAQ,IAAI,GAAG,gBAAgB,IAAI,QAAQ,2BAA2B,CAAC;AACvE,IAAI;IACA,wEAAwE;IACxE,QAAQ,IAAI,GAAG;;;;;AACnB,EACA,OAAM,CAAE,EAAE,sBAAsB;AAChC,uFAAuF,GACvF,SAAS;IACL,IAAI,0BAA0B;IAC9B,IAAI;QACA,yFAAyF;QACzF,kGAAkG;QAClG,4GAA4G;QAC5G,0BAA0B;;;;;IAC9B,EACA,OAAO,OAAO;QACV,MAAM,eAAe,IAAI,QAAQ,2BAA2B,CAAC,wHAAwH;YAAE;QAAM;QAC7L,OAAO;YAAE;QAAa;IAC1B;IACA,OAAO;AACX;AACA,QAAQ,0BAA0B,GAAG,4BACrC,gCAAgC"}},
    {"offset": {"line": 3480, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3484, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/cmap/wire_protocol/compression.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decompressResponse = exports.compressCommand = exports.decompress = exports.compress = exports.uncompressibleCommands = exports.Compressor = void 0;\nconst util_1 = require(\"util\");\nconst zlib = require(\"zlib\");\nconst constants_1 = require(\"../../constants\");\nconst deps_1 = require(\"../../deps\");\nconst error_1 = require(\"../../error\");\nconst commands_1 = require(\"../commands\");\nconst constants_2 = require(\"./constants\");\n/** @public */\nexports.Compressor = Object.freeze({\n    none: 0,\n    snappy: 1,\n    zlib: 2,\n    zstd: 3\n});\nexports.uncompressibleCommands = new Set([\n    constants_1.LEGACY_HELLO_COMMAND,\n    'saslStart',\n    'saslContinue',\n    'getnonce',\n    'authenticate',\n    'createUser',\n    'updateUser',\n    'copydbSaslStart',\n    'copydbgetnonce',\n    'copydb'\n]);\nconst ZSTD_COMPRESSION_LEVEL = 3;\nconst zlibInflate = (0, util_1.promisify)(zlib.inflate.bind(zlib));\nconst zlibDeflate = (0, util_1.promisify)(zlib.deflate.bind(zlib));\nlet zstd;\nlet Snappy = null;\nfunction loadSnappy() {\n    if (Snappy == null) {\n        const snappyImport = (0, deps_1.getSnappy)();\n        if ('kModuleError' in snappyImport) {\n            throw snappyImport.kModuleError;\n        }\n        Snappy = snappyImport;\n    }\n    return Snappy;\n}\n// Facilitate compressing a message using an agreed compressor\nasync function compress(options, dataToBeCompressed) {\n    const zlibOptions = {};\n    switch (options.agreedCompressor) {\n        case 'snappy': {\n            Snappy ??= loadSnappy();\n            return Snappy.compress(dataToBeCompressed);\n        }\n        case 'zstd': {\n            loadZstd();\n            if ('kModuleError' in zstd) {\n                throw zstd['kModuleError'];\n            }\n            return zstd.compress(dataToBeCompressed, ZSTD_COMPRESSION_LEVEL);\n        }\n        case 'zlib': {\n            if (options.zlibCompressionLevel) {\n                zlibOptions.level = options.zlibCompressionLevel;\n            }\n            return zlibDeflate(dataToBeCompressed, zlibOptions);\n        }\n        default: {\n            throw new error_1.MongoInvalidArgumentError(`Unknown compressor ${options.agreedCompressor} failed to compress`);\n        }\n    }\n}\nexports.compress = compress;\n// Decompress a message using the given compressor\nasync function decompress(compressorID, compressedData) {\n    if (compressorID !== exports.Compressor.snappy &&\n        compressorID !== exports.Compressor.zstd &&\n        compressorID !== exports.Compressor.zlib &&\n        compressorID !== exports.Compressor.none) {\n        throw new error_1.MongoDecompressionError(`Server sent message compressed using an unsupported compressor. (Received compressor ID ${compressorID})`);\n    }\n    switch (compressorID) {\n        case exports.Compressor.snappy: {\n            Snappy ??= loadSnappy();\n            return Snappy.uncompress(compressedData, { asBuffer: true });\n        }\n        case exports.Compressor.zstd: {\n            loadZstd();\n            if ('kModuleError' in zstd) {\n                throw zstd['kModuleError'];\n            }\n            return zstd.decompress(compressedData);\n        }\n        case exports.Compressor.zlib: {\n            return zlibInflate(compressedData);\n        }\n        default: {\n            return compressedData;\n        }\n    }\n}\nexports.decompress = decompress;\n/**\n * Load ZStandard if it is not already set.\n */\nfunction loadZstd() {\n    if (!zstd) {\n        zstd = (0, deps_1.getZstdLibrary)();\n    }\n}\nconst MESSAGE_HEADER_SIZE = 16;\n/**\n * @internal\n *\n * Compresses an OP_MSG or OP_QUERY message, if compression is configured.  This method\n * also serializes the command to BSON.\n */\nasync function compressCommand(command, description) {\n    const finalCommand = description.agreedCompressor === 'none' || !commands_1.OpCompressedRequest.canCompress(command)\n        ? command\n        : new commands_1.OpCompressedRequest(command, {\n            agreedCompressor: description.agreedCompressor ?? 'none',\n            zlibCompressionLevel: description.zlibCompressionLevel ?? 0\n        });\n    const data = await finalCommand.toBin();\n    return Buffer.concat(data);\n}\nexports.compressCommand = compressCommand;\n/**\n * @internal\n *\n * Decompresses an OP_MSG or OP_QUERY response from the server, if compression is configured.\n *\n * This method does not parse the response's BSON.\n */\nasync function decompressResponse(message) {\n    const messageHeader = {\n        length: message.readInt32LE(0),\n        requestId: message.readInt32LE(4),\n        responseTo: message.readInt32LE(8),\n        opCode: message.readInt32LE(12)\n    };\n    if (messageHeader.opCode !== constants_2.OP_COMPRESSED) {\n        const ResponseType = messageHeader.opCode === constants_2.OP_MSG ? commands_1.OpMsgResponse : commands_1.OpQueryResponse;\n        const messageBody = message.subarray(MESSAGE_HEADER_SIZE);\n        return new ResponseType(message, messageHeader, messageBody);\n    }\n    const header = {\n        ...messageHeader,\n        fromCompressed: true,\n        opCode: message.readInt32LE(MESSAGE_HEADER_SIZE),\n        length: message.readInt32LE(MESSAGE_HEADER_SIZE + 4)\n    };\n    const compressorID = message[MESSAGE_HEADER_SIZE + 8];\n    const compressedBuffer = message.slice(MESSAGE_HEADER_SIZE + 9);\n    // recalculate based on wrapped opcode\n    const ResponseType = header.opCode === constants_2.OP_MSG ? commands_1.OpMsgResponse : commands_1.OpQueryResponse;\n    const messageBody = await decompress(compressorID, compressedBuffer);\n    if (messageBody.length !== header.length) {\n        throw new error_1.MongoDecompressionError('Message body and message header must be the same length');\n    }\n    return new ResponseType(message, header, messageBody);\n}\nexports.decompressResponse = decompressResponse;\n//# sourceMappingURL=compression.js.map"],"names":[],"mappings":"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"}},
    {"offset": {"line": 3649, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3653, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/cmap/commands.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OpCompressedRequest = exports.OpMsgResponse = exports.OpMsgRequest = exports.OpQueryResponse = exports.OpQueryRequest = void 0;\nconst BSON = require(\"../bson\");\nconst error_1 = require(\"../error\");\nconst read_preference_1 = require(\"../read_preference\");\nconst compression_1 = require(\"./wire_protocol/compression\");\nconst constants_1 = require(\"./wire_protocol/constants\");\n// Incrementing request id\nlet _requestId = 0;\n// Query flags\nconst OPTS_TAILABLE_CURSOR = 2;\nconst OPTS_SECONDARY = 4;\nconst OPTS_OPLOG_REPLAY = 8;\nconst OPTS_NO_CURSOR_TIMEOUT = 16;\nconst OPTS_AWAIT_DATA = 32;\nconst OPTS_EXHAUST = 64;\nconst OPTS_PARTIAL = 128;\n// Response flags\nconst CURSOR_NOT_FOUND = 1;\nconst QUERY_FAILURE = 2;\nconst SHARD_CONFIG_STALE = 4;\nconst AWAIT_CAPABLE = 8;\n/**************************************************************\n * QUERY\n **************************************************************/\n/** @internal */\nclass OpQueryRequest {\n    constructor(databaseName, query, options) {\n        this.databaseName = databaseName;\n        this.query = query;\n        // Basic options needed to be passed in\n        // TODO(NODE-3483): Replace with MongoCommandError\n        const ns = `${databaseName}.$cmd`;\n        if (typeof databaseName !== 'string') {\n            throw new error_1.MongoRuntimeError('Database name must be a string for a query');\n        }\n        // TODO(NODE-3483): Replace with MongoCommandError\n        if (query == null)\n            throw new error_1.MongoRuntimeError('A query document must be specified for query');\n        // Validate that we are not passing 0x00 in the collection name\n        if (ns.indexOf('\\x00') !== -1) {\n            // TODO(NODE-3483): Use MongoNamespace static method\n            throw new error_1.MongoRuntimeError('Namespace cannot contain a null character');\n        }\n        // Basic options\n        this.ns = ns;\n        // Additional options\n        this.numberToSkip = options.numberToSkip || 0;\n        this.numberToReturn = options.numberToReturn || 0;\n        this.returnFieldSelector = options.returnFieldSelector || undefined;\n        this.requestId = options.requestId ?? OpQueryRequest.getRequestId();\n        // special case for pre-3.2 find commands, delete ASAP\n        this.pre32Limit = options.pre32Limit;\n        // Serialization option\n        this.serializeFunctions =\n            typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n        this.ignoreUndefined =\n            typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : false;\n        this.maxBsonSize = options.maxBsonSize || 1024 * 1024 * 16;\n        this.checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;\n        this.batchSize = this.numberToReturn;\n        // Flags\n        this.tailable = false;\n        this.secondaryOk = typeof options.secondaryOk === 'boolean' ? options.secondaryOk : false;\n        this.oplogReplay = false;\n        this.noCursorTimeout = false;\n        this.awaitData = false;\n        this.exhaust = false;\n        this.partial = false;\n    }\n    /** Assign next request Id. */\n    incRequestId() {\n        this.requestId = _requestId++;\n    }\n    /** Peek next request Id. */\n    nextRequestId() {\n        return _requestId + 1;\n    }\n    /** Increment then return next request Id. */\n    static getRequestId() {\n        return ++_requestId;\n    }\n    // Uses a single allocated buffer for the process, avoiding multiple memory allocations\n    toBin() {\n        const buffers = [];\n        let projection = null;\n        // Set up the flags\n        let flags = 0;\n        if (this.tailable) {\n            flags |= OPTS_TAILABLE_CURSOR;\n        }\n        if (this.secondaryOk) {\n            flags |= OPTS_SECONDARY;\n        }\n        if (this.oplogReplay) {\n            flags |= OPTS_OPLOG_REPLAY;\n        }\n        if (this.noCursorTimeout) {\n            flags |= OPTS_NO_CURSOR_TIMEOUT;\n        }\n        if (this.awaitData) {\n            flags |= OPTS_AWAIT_DATA;\n        }\n        if (this.exhaust) {\n            flags |= OPTS_EXHAUST;\n        }\n        if (this.partial) {\n            flags |= OPTS_PARTIAL;\n        }\n        // If batchSize is different to this.numberToReturn\n        if (this.batchSize !== this.numberToReturn)\n            this.numberToReturn = this.batchSize;\n        // Allocate write protocol header buffer\n        const header = Buffer.alloc(4 * 4 + // Header\n            4 + // Flags\n            Buffer.byteLength(this.ns) +\n            1 + // namespace\n            4 + // numberToSkip\n            4 // numberToReturn\n        );\n        // Add header to buffers\n        buffers.push(header);\n        // Serialize the query\n        const query = BSON.serialize(this.query, {\n            checkKeys: this.checkKeys,\n            serializeFunctions: this.serializeFunctions,\n            ignoreUndefined: this.ignoreUndefined\n        });\n        // Add query document\n        buffers.push(query);\n        if (this.returnFieldSelector && Object.keys(this.returnFieldSelector).length > 0) {\n            // Serialize the projection document\n            projection = BSON.serialize(this.returnFieldSelector, {\n                checkKeys: this.checkKeys,\n                serializeFunctions: this.serializeFunctions,\n                ignoreUndefined: this.ignoreUndefined\n            });\n            // Add projection document\n            buffers.push(projection);\n        }\n        // Total message size\n        const totalLength = header.length + query.length + (projection ? projection.length : 0);\n        // Set up the index\n        let index = 4;\n        // Write total document length\n        header[3] = (totalLength >> 24) & 0xff;\n        header[2] = (totalLength >> 16) & 0xff;\n        header[1] = (totalLength >> 8) & 0xff;\n        header[0] = totalLength & 0xff;\n        // Write header information requestId\n        header[index + 3] = (this.requestId >> 24) & 0xff;\n        header[index + 2] = (this.requestId >> 16) & 0xff;\n        header[index + 1] = (this.requestId >> 8) & 0xff;\n        header[index] = this.requestId & 0xff;\n        index = index + 4;\n        // Write header information responseTo\n        header[index + 3] = (0 >> 24) & 0xff;\n        header[index + 2] = (0 >> 16) & 0xff;\n        header[index + 1] = (0 >> 8) & 0xff;\n        header[index] = 0 & 0xff;\n        index = index + 4;\n        // Write header information OP_QUERY\n        header[index + 3] = (constants_1.OP_QUERY >> 24) & 0xff;\n        header[index + 2] = (constants_1.OP_QUERY >> 16) & 0xff;\n        header[index + 1] = (constants_1.OP_QUERY >> 8) & 0xff;\n        header[index] = constants_1.OP_QUERY & 0xff;\n        index = index + 4;\n        // Write header information flags\n        header[index + 3] = (flags >> 24) & 0xff;\n        header[index + 2] = (flags >> 16) & 0xff;\n        header[index + 1] = (flags >> 8) & 0xff;\n        header[index] = flags & 0xff;\n        index = index + 4;\n        // Write collection name\n        index = index + header.write(this.ns, index, 'utf8') + 1;\n        header[index - 1] = 0;\n        // Write header information flags numberToSkip\n        header[index + 3] = (this.numberToSkip >> 24) & 0xff;\n        header[index + 2] = (this.numberToSkip >> 16) & 0xff;\n        header[index + 1] = (this.numberToSkip >> 8) & 0xff;\n        header[index] = this.numberToSkip & 0xff;\n        index = index + 4;\n        // Write header information flags numberToReturn\n        header[index + 3] = (this.numberToReturn >> 24) & 0xff;\n        header[index + 2] = (this.numberToReturn >> 16) & 0xff;\n        header[index + 1] = (this.numberToReturn >> 8) & 0xff;\n        header[index] = this.numberToReturn & 0xff;\n        index = index + 4;\n        // Return the buffers\n        return buffers;\n    }\n}\nexports.OpQueryRequest = OpQueryRequest;\n/** @internal */\nclass OpQueryResponse {\n    constructor(message, msgHeader, msgBody, opts) {\n        this.documents = new Array(0);\n        this.parsed = false;\n        this.raw = message;\n        this.data = msgBody;\n        this.opts = opts ?? {\n            useBigInt64: false,\n            promoteLongs: true,\n            promoteValues: true,\n            promoteBuffers: false,\n            bsonRegExp: false\n        };\n        // Read the message header\n        this.length = msgHeader.length;\n        this.requestId = msgHeader.requestId;\n        this.responseTo = msgHeader.responseTo;\n        this.opCode = msgHeader.opCode;\n        this.fromCompressed = msgHeader.fromCompressed;\n        // Flag values\n        this.useBigInt64 = typeof this.opts.useBigInt64 === 'boolean' ? this.opts.useBigInt64 : false;\n        this.promoteLongs = typeof this.opts.promoteLongs === 'boolean' ? this.opts.promoteLongs : true;\n        this.promoteValues =\n            typeof this.opts.promoteValues === 'boolean' ? this.opts.promoteValues : true;\n        this.promoteBuffers =\n            typeof this.opts.promoteBuffers === 'boolean' ? this.opts.promoteBuffers : false;\n        this.bsonRegExp = typeof this.opts.bsonRegExp === 'boolean' ? this.opts.bsonRegExp : false;\n    }\n    isParsed() {\n        return this.parsed;\n    }\n    parse(options) {\n        // Don't parse again if not needed\n        if (this.parsed)\n            return;\n        options = options ?? {};\n        // Allow the return of raw documents instead of parsing\n        const raw = options.raw || false;\n        const documentsReturnedIn = options.documentsReturnedIn || null;\n        const useBigInt64 = options.useBigInt64 ?? this.opts.useBigInt64;\n        const promoteLongs = options.promoteLongs ?? this.opts.promoteLongs;\n        const promoteValues = options.promoteValues ?? this.opts.promoteValues;\n        const promoteBuffers = options.promoteBuffers ?? this.opts.promoteBuffers;\n        const bsonRegExp = options.bsonRegExp ?? this.opts.bsonRegExp;\n        let bsonSize;\n        // Set up the options\n        const _options = {\n            useBigInt64,\n            promoteLongs,\n            promoteValues,\n            promoteBuffers,\n            bsonRegExp\n        };\n        // Position within OP_REPLY at which documents start\n        // (See https://www.mongodb.com/docs/manual/reference/mongodb-wire-protocol/#wire-op-reply)\n        this.index = 20;\n        // Read the message body\n        this.responseFlags = this.data.readInt32LE(0);\n        this.cursorId = new BSON.Long(this.data.readInt32LE(4), this.data.readInt32LE(8));\n        this.startingFrom = this.data.readInt32LE(12);\n        this.numberReturned = this.data.readInt32LE(16);\n        // Preallocate document array\n        this.documents = new Array(this.numberReturned);\n        this.cursorNotFound = (this.responseFlags & CURSOR_NOT_FOUND) !== 0;\n        this.queryFailure = (this.responseFlags & QUERY_FAILURE) !== 0;\n        this.shardConfigStale = (this.responseFlags & SHARD_CONFIG_STALE) !== 0;\n        this.awaitCapable = (this.responseFlags & AWAIT_CAPABLE) !== 0;\n        // Parse Body\n        for (let i = 0; i < this.numberReturned; i++) {\n            bsonSize =\n                this.data[this.index] |\n                    (this.data[this.index + 1] << 8) |\n                    (this.data[this.index + 2] << 16) |\n                    (this.data[this.index + 3] << 24);\n            // If we have raw results specified slice the return document\n            if (raw) {\n                this.documents[i] = this.data.slice(this.index, this.index + bsonSize);\n            }\n            else {\n                this.documents[i] = BSON.deserialize(this.data.slice(this.index, this.index + bsonSize), _options);\n            }\n            // Adjust the index\n            this.index = this.index + bsonSize;\n        }\n        if (this.documents.length === 1 && documentsReturnedIn != null && raw) {\n            const fieldsAsRaw = {};\n            fieldsAsRaw[documentsReturnedIn] = true;\n            _options.fieldsAsRaw = fieldsAsRaw;\n            const doc = BSON.deserialize(this.documents[0], _options);\n            this.documents = [doc];\n        }\n        // Set parsed\n        this.parsed = true;\n    }\n}\nexports.OpQueryResponse = OpQueryResponse;\n// Implementation of OP_MSG spec:\n// https://github.com/mongodb/specifications/blob/master/source/message/OP_MSG.rst\n//\n// struct Section {\n//   uint8 payloadType;\n//   union payload {\n//       document  document; // payloadType == 0\n//       struct sequence { // payloadType == 1\n//           int32      size;\n//           cstring    identifier;\n//           document*  documents;\n//       };\n//   };\n// };\n// struct OP_MSG {\n//   struct MsgHeader {\n//       int32  messageLength;\n//       int32  requestID;\n//       int32  responseTo;\n//       int32  opCode = 2013;\n//   };\n//   uint32      flagBits;\n//   Section+    sections;\n//   [uint32     checksum;]\n// };\n// Msg Flags\nconst OPTS_CHECKSUM_PRESENT = 1;\nconst OPTS_MORE_TO_COME = 2;\nconst OPTS_EXHAUST_ALLOWED = 1 << 16;\n/** @internal */\nclass OpMsgRequest {\n    constructor(databaseName, command, options) {\n        this.databaseName = databaseName;\n        this.command = command;\n        this.options = options;\n        // Basic options needed to be passed in\n        if (command == null)\n            throw new error_1.MongoInvalidArgumentError('Query document must be specified for query');\n        // Basic options\n        this.command.$db = databaseName;\n        if (options.readPreference && options.readPreference.mode !== read_preference_1.ReadPreference.PRIMARY) {\n            this.command.$readPreference = options.readPreference.toJSON();\n        }\n        // Ensure empty options\n        this.options = options ?? {};\n        // Additional options\n        this.requestId = options.requestId ? options.requestId : OpMsgRequest.getRequestId();\n        // Serialization option\n        this.serializeFunctions =\n            typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n        this.ignoreUndefined =\n            typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : false;\n        this.checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;\n        this.maxBsonSize = options.maxBsonSize || 1024 * 1024 * 16;\n        // flags\n        this.checksumPresent = false;\n        this.moreToCome = options.moreToCome || false;\n        this.exhaustAllowed =\n            typeof options.exhaustAllowed === 'boolean' ? options.exhaustAllowed : false;\n    }\n    toBin() {\n        const buffers = [];\n        let flags = 0;\n        if (this.checksumPresent) {\n            flags |= OPTS_CHECKSUM_PRESENT;\n        }\n        if (this.moreToCome) {\n            flags |= OPTS_MORE_TO_COME;\n        }\n        if (this.exhaustAllowed) {\n            flags |= OPTS_EXHAUST_ALLOWED;\n        }\n        const header = Buffer.alloc(4 * 4 + // Header\n            4 // Flags\n        );\n        buffers.push(header);\n        let totalLength = header.length;\n        const command = this.command;\n        totalLength += this.makeDocumentSegment(buffers, command);\n        header.writeInt32LE(totalLength, 0); // messageLength\n        header.writeInt32LE(this.requestId, 4); // requestID\n        header.writeInt32LE(0, 8); // responseTo\n        header.writeInt32LE(constants_1.OP_MSG, 12); // opCode\n        header.writeUInt32LE(flags, 16); // flags\n        return buffers;\n    }\n    makeDocumentSegment(buffers, document) {\n        const payloadTypeBuffer = Buffer.alloc(1);\n        payloadTypeBuffer[0] = 0;\n        const documentBuffer = this.serializeBson(document);\n        buffers.push(payloadTypeBuffer);\n        buffers.push(documentBuffer);\n        return payloadTypeBuffer.length + documentBuffer.length;\n    }\n    serializeBson(document) {\n        return BSON.serialize(document, {\n            checkKeys: this.checkKeys,\n            serializeFunctions: this.serializeFunctions,\n            ignoreUndefined: this.ignoreUndefined\n        });\n    }\n    static getRequestId() {\n        _requestId = (_requestId + 1) & 0x7fffffff;\n        return _requestId;\n    }\n}\nexports.OpMsgRequest = OpMsgRequest;\n/** @internal */\nclass OpMsgResponse {\n    constructor(message, msgHeader, msgBody, opts) {\n        this.parsed = false;\n        this.raw = message;\n        this.data = msgBody;\n        this.opts = opts ?? {\n            useBigInt64: false,\n            promoteLongs: true,\n            promoteValues: true,\n            promoteBuffers: false,\n            bsonRegExp: false\n        };\n        // Read the message header\n        this.length = msgHeader.length;\n        this.requestId = msgHeader.requestId;\n        this.responseTo = msgHeader.responseTo;\n        this.opCode = msgHeader.opCode;\n        this.fromCompressed = msgHeader.fromCompressed;\n        // Read response flags\n        this.responseFlags = msgBody.readInt32LE(0);\n        this.checksumPresent = (this.responseFlags & OPTS_CHECKSUM_PRESENT) !== 0;\n        this.moreToCome = (this.responseFlags & OPTS_MORE_TO_COME) !== 0;\n        this.exhaustAllowed = (this.responseFlags & OPTS_EXHAUST_ALLOWED) !== 0;\n        this.useBigInt64 = typeof this.opts.useBigInt64 === 'boolean' ? this.opts.useBigInt64 : false;\n        this.promoteLongs = typeof this.opts.promoteLongs === 'boolean' ? this.opts.promoteLongs : true;\n        this.promoteValues =\n            typeof this.opts.promoteValues === 'boolean' ? this.opts.promoteValues : true;\n        this.promoteBuffers =\n            typeof this.opts.promoteBuffers === 'boolean' ? this.opts.promoteBuffers : false;\n        this.bsonRegExp = typeof this.opts.bsonRegExp === 'boolean' ? this.opts.bsonRegExp : false;\n        this.documents = [];\n    }\n    isParsed() {\n        return this.parsed;\n    }\n    parse(options) {\n        // Don't parse again if not needed\n        if (this.parsed)\n            return;\n        options = options ?? {};\n        this.index = 4;\n        // Allow the return of raw documents instead of parsing\n        const raw = options.raw || false;\n        const documentsReturnedIn = options.documentsReturnedIn || null;\n        const useBigInt64 = options.useBigInt64 ?? this.opts.useBigInt64;\n        const promoteLongs = options.promoteLongs ?? this.opts.promoteLongs;\n        const promoteValues = options.promoteValues ?? this.opts.promoteValues;\n        const promoteBuffers = options.promoteBuffers ?? this.opts.promoteBuffers;\n        const bsonRegExp = options.bsonRegExp ?? this.opts.bsonRegExp;\n        const validation = this.parseBsonSerializationOptions(options);\n        // Set up the options\n        const bsonOptions = {\n            useBigInt64,\n            promoteLongs,\n            promoteValues,\n            promoteBuffers,\n            bsonRegExp,\n            validation\n            // Due to the strictness of the BSON libraries validation option we need this cast\n        };\n        while (this.index < this.data.length) {\n            const payloadType = this.data.readUInt8(this.index++);\n            if (payloadType === 0) {\n                const bsonSize = this.data.readUInt32LE(this.index);\n                const bin = this.data.slice(this.index, this.index + bsonSize);\n                this.documents.push(raw ? bin : BSON.deserialize(bin, bsonOptions));\n                this.index += bsonSize;\n            }\n            else if (payloadType === 1) {\n                // It was decided that no driver makes use of payload type 1\n                // TODO(NODE-3483): Replace with MongoDeprecationError\n                throw new error_1.MongoRuntimeError('OP_MSG Payload Type 1 detected unsupported protocol');\n            }\n        }\n        if (this.documents.length === 1 && documentsReturnedIn != null && raw) {\n            const fieldsAsRaw = {};\n            fieldsAsRaw[documentsReturnedIn] = true;\n            bsonOptions.fieldsAsRaw = fieldsAsRaw;\n            const doc = BSON.deserialize(this.documents[0], bsonOptions);\n            this.documents = [doc];\n        }\n        this.parsed = true;\n    }\n    parseBsonSerializationOptions({ enableUtf8Validation }) {\n        if (enableUtf8Validation === false) {\n            return { utf8: false };\n        }\n        return { utf8: { writeErrors: false } };\n    }\n}\nexports.OpMsgResponse = OpMsgResponse;\nconst MESSAGE_HEADER_SIZE = 16;\nconst COMPRESSION_DETAILS_SIZE = 9; // originalOpcode + uncompressedSize, compressorID\n/**\n * @internal\n *\n * An OP_COMPRESSED request wraps either an OP_QUERY or OP_MSG message.\n */\nclass OpCompressedRequest {\n    constructor(command, options) {\n        this.command = command;\n        this.options = options;\n    }\n    // Return whether a command contains an uncompressible command term\n    // Will return true if command contains no uncompressible command terms\n    static canCompress(command) {\n        const commandDoc = command instanceof OpMsgRequest ? command.command : command.query;\n        const commandName = Object.keys(commandDoc)[0];\n        return !compression_1.uncompressibleCommands.has(commandName);\n    }\n    async toBin() {\n        const concatenatedOriginalCommandBuffer = Buffer.concat(this.command.toBin());\n        // otherwise, compress the message\n        const messageToBeCompressed = concatenatedOriginalCommandBuffer.slice(MESSAGE_HEADER_SIZE);\n        // Extract information needed for OP_COMPRESSED from the uncompressed message\n        const originalCommandOpCode = concatenatedOriginalCommandBuffer.readInt32LE(12);\n        // Compress the message body\n        const compressedMessage = await (0, compression_1.compress)(this.options, messageToBeCompressed);\n        // Create the msgHeader of OP_COMPRESSED\n        const msgHeader = Buffer.alloc(MESSAGE_HEADER_SIZE);\n        msgHeader.writeInt32LE(MESSAGE_HEADER_SIZE + COMPRESSION_DETAILS_SIZE + compressedMessage.length, 0); // messageLength\n        msgHeader.writeInt32LE(this.command.requestId, 4); // requestID\n        msgHeader.writeInt32LE(0, 8); // responseTo (zero)\n        msgHeader.writeInt32LE(constants_1.OP_COMPRESSED, 12); // opCode\n        // Create the compression details of OP_COMPRESSED\n        const compressionDetails = Buffer.alloc(COMPRESSION_DETAILS_SIZE);\n        compressionDetails.writeInt32LE(originalCommandOpCode, 0); // originalOpcode\n        compressionDetails.writeInt32LE(messageToBeCompressed.length, 4); // Size of the uncompressed compressedMessage, excluding the MsgHeader\n        compressionDetails.writeUInt8(compression_1.Compressor[this.options.agreedCompressor], 8); // compressorID\n        return [msgHeader, compressionDetails, compressedMessage];\n    }\n}\nexports.OpCompressedRequest = OpCompressedRequest;\n//# sourceMappingURL=commands.js.map"],"names":[],"mappings":"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"}},
    {"offset": {"line": 4170, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4174, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/cmap/command_monitoring_events.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SENSITIVE_COMMANDS = exports.CommandFailedEvent = exports.CommandSucceededEvent = exports.CommandStartedEvent = void 0;\nconst constants_1 = require(\"../constants\");\nconst utils_1 = require(\"../utils\");\nconst commands_1 = require(\"./commands\");\n/**\n * An event indicating the start of a given command\n * @public\n * @category Event\n */\nclass CommandStartedEvent {\n    /**\n     * Create a started event\n     *\n     * @internal\n     * @param pool - the pool that originated the command\n     * @param command - the command\n     */\n    constructor(connection, command) {\n        /** @internal */\n        this.name = constants_1.COMMAND_STARTED;\n        const cmd = extractCommand(command);\n        const commandName = extractCommandName(cmd);\n        const { address, connectionId, serviceId } = extractConnectionDetails(connection);\n        // TODO: remove in major revision, this is not spec behavior\n        if (exports.SENSITIVE_COMMANDS.has(commandName)) {\n            this.commandObj = {};\n            this.commandObj[commandName] = true;\n        }\n        this.address = address;\n        this.connectionId = connectionId;\n        this.serviceId = serviceId;\n        this.requestId = command.requestId;\n        this.databaseName = command.databaseName;\n        this.commandName = commandName;\n        this.command = maybeRedact(commandName, cmd, cmd);\n    }\n    /* @internal */\n    get hasServiceId() {\n        return !!this.serviceId;\n    }\n}\nexports.CommandStartedEvent = CommandStartedEvent;\n/**\n * An event indicating the success of a given command\n * @public\n * @category Event\n */\nclass CommandSucceededEvent {\n    /**\n     * Create a succeeded event\n     *\n     * @internal\n     * @param pool - the pool that originated the command\n     * @param command - the command\n     * @param reply - the reply for this command from the server\n     * @param started - a high resolution tuple timestamp of when the command was first sent, to calculate duration\n     */\n    constructor(connection, command, reply, started) {\n        /** @internal */\n        this.name = constants_1.COMMAND_SUCCEEDED;\n        const cmd = extractCommand(command);\n        const commandName = extractCommandName(cmd);\n        const { address, connectionId, serviceId } = extractConnectionDetails(connection);\n        this.address = address;\n        this.connectionId = connectionId;\n        this.serviceId = serviceId;\n        this.requestId = command.requestId;\n        this.commandName = commandName;\n        this.duration = (0, utils_1.calculateDurationInMs)(started);\n        this.reply = maybeRedact(commandName, cmd, extractReply(command, reply));\n    }\n    /* @internal */\n    get hasServiceId() {\n        return !!this.serviceId;\n    }\n}\nexports.CommandSucceededEvent = CommandSucceededEvent;\n/**\n * An event indicating the failure of a given command\n * @public\n * @category Event\n */\nclass CommandFailedEvent {\n    /**\n     * Create a failure event\n     *\n     * @internal\n     * @param pool - the pool that originated the command\n     * @param command - the command\n     * @param error - the generated error or a server error response\n     * @param started - a high resolution tuple timestamp of when the command was first sent, to calculate duration\n     */\n    constructor(connection, command, error, started) {\n        /** @internal */\n        this.name = constants_1.COMMAND_FAILED;\n        const cmd = extractCommand(command);\n        const commandName = extractCommandName(cmd);\n        const { address, connectionId, serviceId } = extractConnectionDetails(connection);\n        this.address = address;\n        this.connectionId = connectionId;\n        this.serviceId = serviceId;\n        this.requestId = command.requestId;\n        this.commandName = commandName;\n        this.duration = (0, utils_1.calculateDurationInMs)(started);\n        this.failure = maybeRedact(commandName, cmd, error);\n    }\n    /* @internal */\n    get hasServiceId() {\n        return !!this.serviceId;\n    }\n}\nexports.CommandFailedEvent = CommandFailedEvent;\n/**\n * Commands that we want to redact because of the sensitive nature of their contents\n * @internal\n */\nexports.SENSITIVE_COMMANDS = new Set([\n    'authenticate',\n    'saslStart',\n    'saslContinue',\n    'getnonce',\n    'createUser',\n    'updateUser',\n    'copydbgetnonce',\n    'copydbsaslstart',\n    'copydb'\n]);\nconst HELLO_COMMANDS = new Set(['hello', constants_1.LEGACY_HELLO_COMMAND, constants_1.LEGACY_HELLO_COMMAND_CAMEL_CASE]);\n// helper methods\nconst extractCommandName = (commandDoc) => Object.keys(commandDoc)[0];\nconst namespace = (command) => command.ns;\nconst collectionName = (command) => command.ns.split('.')[1];\nconst maybeRedact = (commandName, commandDoc, result) => exports.SENSITIVE_COMMANDS.has(commandName) ||\n    (HELLO_COMMANDS.has(commandName) && commandDoc.speculativeAuthenticate)\n    ? {}\n    : result;\nconst LEGACY_FIND_QUERY_MAP = {\n    $query: 'filter',\n    $orderby: 'sort',\n    $hint: 'hint',\n    $comment: 'comment',\n    $maxScan: 'maxScan',\n    $max: 'max',\n    $min: 'min',\n    $returnKey: 'returnKey',\n    $showDiskLoc: 'showRecordId',\n    $maxTimeMS: 'maxTimeMS',\n    $snapshot: 'snapshot'\n};\nconst LEGACY_FIND_OPTIONS_MAP = {\n    numberToSkip: 'skip',\n    numberToReturn: 'batchSize',\n    returnFieldSelector: 'projection'\n};\nconst OP_QUERY_KEYS = [\n    'tailable',\n    'oplogReplay',\n    'noCursorTimeout',\n    'awaitData',\n    'partial',\n    'exhaust'\n];\n/** Extract the actual command from the query, possibly up-converting if it's a legacy format */\nfunction extractCommand(command) {\n    if (command instanceof commands_1.OpMsgRequest) {\n        return (0, utils_1.deepCopy)(command.command);\n    }\n    if (command.query?.$query) {\n        let result;\n        if (command.ns === 'admin.$cmd') {\n            // up-convert legacy command\n            result = Object.assign({}, command.query.$query);\n        }\n        else {\n            // up-convert legacy find command\n            result = { find: collectionName(command) };\n            Object.keys(LEGACY_FIND_QUERY_MAP).forEach(key => {\n                if (command.query[key] != null) {\n                    result[LEGACY_FIND_QUERY_MAP[key]] = (0, utils_1.deepCopy)(command.query[key]);\n                }\n            });\n        }\n        Object.keys(LEGACY_FIND_OPTIONS_MAP).forEach(key => {\n            const legacyKey = key;\n            if (command[legacyKey] != null) {\n                result[LEGACY_FIND_OPTIONS_MAP[legacyKey]] = (0, utils_1.deepCopy)(command[legacyKey]);\n            }\n        });\n        OP_QUERY_KEYS.forEach(key => {\n            if (command[key]) {\n                result[key] = command[key];\n            }\n        });\n        if (command.pre32Limit != null) {\n            result.limit = command.pre32Limit;\n        }\n        if (command.query.$explain) {\n            return { explain: result };\n        }\n        return result;\n    }\n    const clonedQuery = {};\n    const clonedCommand = {};\n    if (command.query) {\n        for (const k in command.query) {\n            clonedQuery[k] = (0, utils_1.deepCopy)(command.query[k]);\n        }\n        clonedCommand.query = clonedQuery;\n    }\n    for (const k in command) {\n        if (k === 'query')\n            continue;\n        clonedCommand[k] = (0, utils_1.deepCopy)(command[k]);\n    }\n    return command.query ? clonedQuery : clonedCommand;\n}\nfunction extractReply(command, reply) {\n    if (!reply) {\n        return reply;\n    }\n    if (command instanceof commands_1.OpMsgRequest) {\n        return (0, utils_1.deepCopy)(reply.result ? reply.result : reply);\n    }\n    // is this a legacy find command?\n    if (command.query && command.query.$query != null) {\n        return {\n            ok: 1,\n            cursor: {\n                id: (0, utils_1.deepCopy)(reply.cursorId),\n                ns: namespace(command),\n                firstBatch: (0, utils_1.deepCopy)(reply.documents)\n            }\n        };\n    }\n    return (0, utils_1.deepCopy)(reply.result ? reply.result : reply);\n}\nfunction extractConnectionDetails(connection) {\n    let connectionId;\n    if ('id' in connection) {\n        connectionId = connection.id;\n    }\n    return {\n        address: connection.address,\n        serviceId: connection.serviceId,\n        connectionId\n    };\n}\n//# sourceMappingURL=command_monitoring_events.js.map"],"names":[],"mappings":"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"}},
    {"offset": {"line": 4414, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4418, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/operations/operation.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.defineAspects = exports.AbstractOperation = exports.Aspect = void 0;\nconst bson_1 = require(\"../bson\");\nconst read_preference_1 = require(\"../read_preference\");\nexports.Aspect = {\n    READ_OPERATION: Symbol('READ_OPERATION'),\n    WRITE_OPERATION: Symbol('WRITE_OPERATION'),\n    RETRYABLE: Symbol('RETRYABLE'),\n    EXPLAINABLE: Symbol('EXPLAINABLE'),\n    SKIP_COLLATION: Symbol('SKIP_COLLATION'),\n    CURSOR_CREATING: Symbol('CURSOR_CREATING'),\n    MUST_SELECT_SAME_SERVER: Symbol('MUST_SELECT_SAME_SERVER')\n};\n/** @internal */\nconst kSession = Symbol('session');\n/**\n * This class acts as a parent class for any operation and is responsible for setting this.options,\n * as well as setting and getting a session.\n * Additionally, this class implements `hasAspect`, which determines whether an operation has\n * a specific aspect.\n * @internal\n */\nclass AbstractOperation {\n    constructor(options = {}) {\n        this.readPreference = this.hasAspect(exports.Aspect.WRITE_OPERATION)\n            ? read_preference_1.ReadPreference.primary\n            : read_preference_1.ReadPreference.fromOptions(options) ?? read_preference_1.ReadPreference.primary;\n        // Pull the BSON serialize options from the already-resolved options\n        this.bsonOptions = (0, bson_1.resolveBSONOptions)(options);\n        this[kSession] = options.session != null ? options.session : undefined;\n        this.options = options;\n        this.bypassPinningCheck = !!options.bypassPinningCheck;\n        this.trySecondaryWrite = false;\n    }\n    hasAspect(aspect) {\n        const ctor = this.constructor;\n        if (ctor.aspects == null) {\n            return false;\n        }\n        return ctor.aspects.has(aspect);\n    }\n    get session() {\n        return this[kSession];\n    }\n    clearSession() {\n        this[kSession] = undefined;\n    }\n    get canRetryRead() {\n        return true;\n    }\n    get canRetryWrite() {\n        return true;\n    }\n}\nexports.AbstractOperation = AbstractOperation;\nfunction defineAspects(operation, aspects) {\n    if (!Array.isArray(aspects) && !(aspects instanceof Set)) {\n        aspects = [aspects];\n    }\n    aspects = new Set(aspects);\n    Object.defineProperty(operation, 'aspects', {\n        value: aspects,\n        writable: false\n    });\n    return aspects;\n}\nexports.defineAspects = defineAspects;\n//# sourceMappingURL=operation.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,aAAa,GAAG,QAAQ,iBAAiB,GAAG,QAAQ,MAAM,GAAG,KAAK;AAC1E,MAAM,SAAS;AACf,MAAM,oBAAoB;AAC1B,QAAQ,MAAM,GAAG;IACb,gBAAgB,OAAO;IACvB,iBAAiB,OAAO;IACxB,WAAW,OAAO;IAClB,aAAa,OAAO;IACpB,gBAAgB,OAAO;IACvB,iBAAiB,OAAO;IACxB,yBAAyB,OAAO;AACpC;AACA,cAAc,GACd,MAAM,WAAW,OAAO;AACxB;;;;;;CAMC,GACD,MAAM;IACF,YAAY,UAAU,CAAC,CAAC,CAAE;QACtB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,MAAM,CAAC,eAAe,IAC7D,kBAAkB,cAAc,CAAC,OAAO,GACxC,kBAAkB,cAAc,CAAC,WAAW,CAAC,YAAY,kBAAkB,cAAc,CAAC,OAAO;QACvG,oEAAoE;QACpE,IAAI,CAAC,WAAW,GAAG,AAAC,CAAA,GAAG,OAAO,kBAAkB,AAAD,EAAG;QAClD,IAAI,CAAC,SAAS,GAAG,QAAQ,OAAO,IAAI,OAAO,QAAQ,OAAO,GAAG;QAC7D,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,kBAAkB,GAAG,CAAC,CAAC,QAAQ,kBAAkB;QACtD,IAAI,CAAC,iBAAiB,GAAG;IAC7B;IACA,UAAU,MAAM,EAAE;QACd,MAAM,OAAO,IAAI,CAAC,WAAW;QAC7B,IAAI,KAAK,OAAO,IAAI,MAAM;YACtB,OAAO;QACX;QACA,OAAO,KAAK,OAAO,CAAC,GAAG,CAAC;IAC5B;IACA,IAAI,UAAU;QACV,OAAO,IAAI,CAAC,SAAS;IACzB;IACA,eAAe;QACX,IAAI,CAAC,SAAS,GAAG;IACrB;IACA,IAAI,eAAe;QACf,OAAO;IACX;IACA,IAAI,gBAAgB;QAChB,OAAO;IACX;AACJ;AACA,QAAQ,iBAAiB,GAAG;AAC5B,SAAS,cAAc,SAAS,EAAE,OAAO;IACrC,IAAI,CAAC,MAAM,OAAO,CAAC,YAAY,CAAC,CAAC,mBAAmB,GAAG,GAAG;QACtD,UAAU;YAAC;SAAQ;IACvB;IACA,UAAU,IAAI,IAAI;IAClB,OAAO,cAAc,CAAC,WAAW,WAAW;QACxC,OAAO;QACP,UAAU;IACd;IACA,OAAO;AACX;AACA,QAAQ,aAAa,GAAG,eACxB,qCAAqC"}},
    {"offset": {"line": 4486, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4490, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/sdam/server_selection.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.readPreferenceServerSelector = exports.secondaryWritableServerSelector = exports.sameServerSelector = exports.writableServerSelector = exports.MIN_SECONDARY_WRITE_WIRE_VERSION = void 0;\nconst error_1 = require(\"../error\");\nconst read_preference_1 = require(\"../read_preference\");\nconst common_1 = require(\"./common\");\n// max staleness constants\nconst IDLE_WRITE_PERIOD = 10000;\nconst SMALLEST_MAX_STALENESS_SECONDS = 90;\n//  Minimum version to try writes on secondaries.\nexports.MIN_SECONDARY_WRITE_WIRE_VERSION = 13;\n/**\n * Returns a server selector that selects for writable servers\n */\nfunction writableServerSelector() {\n    return (topologyDescription, servers) => latencyWindowReducer(topologyDescription, servers.filter((s) => s.isWritable));\n}\nexports.writableServerSelector = writableServerSelector;\n/**\n * The purpose of this selector is to select the same server, only\n * if it is in a state that it can have commands sent to it.\n */\nfunction sameServerSelector(description) {\n    return (topologyDescription, servers) => {\n        if (!description)\n            return [];\n        // Filter the servers to match the provided description only if\n        // the type is not unknown.\n        return servers.filter(sd => {\n            return sd.address === description.address && sd.type !== common_1.ServerType.Unknown;\n        });\n    };\n}\nexports.sameServerSelector = sameServerSelector;\n/**\n * Returns a server selector that uses a read preference to select a\n * server potentially for a write on a secondary.\n */\nfunction secondaryWritableServerSelector(wireVersion, readPreference) {\n    // If server version < 5.0, read preference always primary.\n    // If server version >= 5.0...\n    // - If read preference is supplied, use that.\n    // - If no read preference is supplied, use primary.\n    if (!readPreference ||\n        !wireVersion ||\n        (wireVersion && wireVersion < exports.MIN_SECONDARY_WRITE_WIRE_VERSION)) {\n        return readPreferenceServerSelector(read_preference_1.ReadPreference.primary);\n    }\n    return readPreferenceServerSelector(readPreference);\n}\nexports.secondaryWritableServerSelector = secondaryWritableServerSelector;\n/**\n * Reduces the passed in array of servers by the rules of the \"Max Staleness\" specification\n * found here: https://github.com/mongodb/specifications/blob/master/source/max-staleness/max-staleness.rst\n *\n * @param readPreference - The read preference providing max staleness guidance\n * @param topologyDescription - The topology description\n * @param servers - The list of server descriptions to be reduced\n * @returns The list of servers that satisfy the requirements of max staleness\n */\nfunction maxStalenessReducer(readPreference, topologyDescription, servers) {\n    if (readPreference.maxStalenessSeconds == null || readPreference.maxStalenessSeconds < 0) {\n        return servers;\n    }\n    const maxStaleness = readPreference.maxStalenessSeconds;\n    const maxStalenessVariance = (topologyDescription.heartbeatFrequencyMS + IDLE_WRITE_PERIOD) / 1000;\n    if (maxStaleness < maxStalenessVariance) {\n        throw new error_1.MongoInvalidArgumentError(`Option \"maxStalenessSeconds\" must be at least ${maxStalenessVariance} seconds`);\n    }\n    if (maxStaleness < SMALLEST_MAX_STALENESS_SECONDS) {\n        throw new error_1.MongoInvalidArgumentError(`Option \"maxStalenessSeconds\" must be at least ${SMALLEST_MAX_STALENESS_SECONDS} seconds`);\n    }\n    if (topologyDescription.type === common_1.TopologyType.ReplicaSetWithPrimary) {\n        const primary = Array.from(topologyDescription.servers.values()).filter(primaryFilter)[0];\n        return servers.reduce((result, server) => {\n            const stalenessMS = server.lastUpdateTime -\n                server.lastWriteDate -\n                (primary.lastUpdateTime - primary.lastWriteDate) +\n                topologyDescription.heartbeatFrequencyMS;\n            const staleness = stalenessMS / 1000;\n            const maxStalenessSeconds = readPreference.maxStalenessSeconds ?? 0;\n            if (staleness <= maxStalenessSeconds) {\n                result.push(server);\n            }\n            return result;\n        }, []);\n    }\n    if (topologyDescription.type === common_1.TopologyType.ReplicaSetNoPrimary) {\n        if (servers.length === 0) {\n            return servers;\n        }\n        const sMax = servers.reduce((max, s) => s.lastWriteDate > max.lastWriteDate ? s : max);\n        return servers.reduce((result, server) => {\n            const stalenessMS = sMax.lastWriteDate - server.lastWriteDate + topologyDescription.heartbeatFrequencyMS;\n            const staleness = stalenessMS / 1000;\n            const maxStalenessSeconds = readPreference.maxStalenessSeconds ?? 0;\n            if (staleness <= maxStalenessSeconds) {\n                result.push(server);\n            }\n            return result;\n        }, []);\n    }\n    return servers;\n}\n/**\n * Determines whether a server's tags match a given set of tags\n *\n * @param tagSet - The requested tag set to match\n * @param serverTags - The server's tags\n */\nfunction tagSetMatch(tagSet, serverTags) {\n    const keys = Object.keys(tagSet);\n    const serverTagKeys = Object.keys(serverTags);\n    for (let i = 0; i < keys.length; ++i) {\n        const key = keys[i];\n        if (serverTagKeys.indexOf(key) === -1 || serverTags[key] !== tagSet[key]) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Reduces a set of server descriptions based on tags requested by the read preference\n *\n * @param readPreference - The read preference providing the requested tags\n * @param servers - The list of server descriptions to reduce\n * @returns The list of servers matching the requested tags\n */\nfunction tagSetReducer(readPreference, servers) {\n    if (readPreference.tags == null ||\n        (Array.isArray(readPreference.tags) && readPreference.tags.length === 0)) {\n        return servers;\n    }\n    for (let i = 0; i < readPreference.tags.length; ++i) {\n        const tagSet = readPreference.tags[i];\n        const serversMatchingTagset = servers.reduce((matched, server) => {\n            if (tagSetMatch(tagSet, server.tags))\n                matched.push(server);\n            return matched;\n        }, []);\n        if (serversMatchingTagset.length) {\n            return serversMatchingTagset;\n        }\n    }\n    return [];\n}\n/**\n * Reduces a list of servers to ensure they fall within an acceptable latency window. This is\n * further specified in the \"Server Selection\" specification, found here:\n * https://github.com/mongodb/specifications/blob/master/source/server-selection/server-selection.rst\n *\n * @param topologyDescription - The topology description\n * @param servers - The list of servers to reduce\n * @returns The servers which fall within an acceptable latency window\n */\nfunction latencyWindowReducer(topologyDescription, servers) {\n    const low = servers.reduce((min, server) => min === -1 ? server.roundTripTime : Math.min(server.roundTripTime, min), -1);\n    const high = low + topologyDescription.localThresholdMS;\n    return servers.reduce((result, server) => {\n        if (server.roundTripTime <= high && server.roundTripTime >= low)\n            result.push(server);\n        return result;\n    }, []);\n}\n// filters\nfunction primaryFilter(server) {\n    return server.type === common_1.ServerType.RSPrimary;\n}\nfunction secondaryFilter(server) {\n    return server.type === common_1.ServerType.RSSecondary;\n}\nfunction nearestFilter(server) {\n    return server.type === common_1.ServerType.RSSecondary || server.type === common_1.ServerType.RSPrimary;\n}\nfunction knownFilter(server) {\n    return server.type !== common_1.ServerType.Unknown;\n}\nfunction loadBalancerFilter(server) {\n    return server.type === common_1.ServerType.LoadBalancer;\n}\n/**\n * Returns a function which selects servers based on a provided read preference\n *\n * @param readPreference - The read preference to select with\n */\nfunction readPreferenceServerSelector(readPreference) {\n    if (!readPreference.isValid()) {\n        throw new error_1.MongoInvalidArgumentError('Invalid read preference specified');\n    }\n    return (topologyDescription, servers) => {\n        const commonWireVersion = topologyDescription.commonWireVersion;\n        if (commonWireVersion &&\n            readPreference.minWireVersion &&\n            readPreference.minWireVersion > commonWireVersion) {\n            throw new error_1.MongoCompatibilityError(`Minimum wire version '${readPreference.minWireVersion}' required, but found '${commonWireVersion}'`);\n        }\n        if (topologyDescription.type === common_1.TopologyType.LoadBalanced) {\n            return servers.filter(loadBalancerFilter);\n        }\n        if (topologyDescription.type === common_1.TopologyType.Unknown) {\n            return [];\n        }\n        if (topologyDescription.type === common_1.TopologyType.Single ||\n            topologyDescription.type === common_1.TopologyType.Sharded) {\n            return latencyWindowReducer(topologyDescription, servers.filter(knownFilter));\n        }\n        const mode = readPreference.mode;\n        if (mode === read_preference_1.ReadPreference.PRIMARY) {\n            return servers.filter(primaryFilter);\n        }\n        if (mode === read_preference_1.ReadPreference.PRIMARY_PREFERRED) {\n            const result = servers.filter(primaryFilter);\n            if (result.length) {\n                return result;\n            }\n        }\n        const filter = mode === read_preference_1.ReadPreference.NEAREST ? nearestFilter : secondaryFilter;\n        const selectedServers = latencyWindowReducer(topologyDescription, tagSetReducer(readPreference, maxStalenessReducer(readPreference, topologyDescription, servers.filter(filter))));\n        if (mode === read_preference_1.ReadPreference.SECONDARY_PREFERRED && selectedServers.length === 0) {\n            return servers.filter(primaryFilter);\n        }\n        return selectedServers;\n    };\n}\nexports.readPreferenceServerSelector = readPreferenceServerSelector;\n//# sourceMappingURL=server_selection.js.map"],"names":[],"mappings":"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"}},
    {"offset": {"line": 4697, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4701, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/explain.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Explain = exports.ExplainVerbosity = void 0;\nconst error_1 = require(\"./error\");\n/** @public */\nexports.ExplainVerbosity = Object.freeze({\n    queryPlanner: 'queryPlanner',\n    queryPlannerExtended: 'queryPlannerExtended',\n    executionStats: 'executionStats',\n    allPlansExecution: 'allPlansExecution'\n});\n/** @internal */\nclass Explain {\n    constructor(verbosity) {\n        if (typeof verbosity === 'boolean') {\n            this.verbosity = verbosity\n                ? exports.ExplainVerbosity.allPlansExecution\n                : exports.ExplainVerbosity.queryPlanner;\n        }\n        else {\n            this.verbosity = verbosity;\n        }\n    }\n    static fromOptions(options) {\n        if (options?.explain == null)\n            return;\n        const explain = options.explain;\n        if (typeof explain === 'boolean' || typeof explain === 'string') {\n            return new Explain(explain);\n        }\n        throw new error_1.MongoInvalidArgumentError('Field \"explain\" must be a string or a boolean');\n    }\n}\nexports.Explain = Explain;\n//# sourceMappingURL=explain.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,OAAO,GAAG,QAAQ,gBAAgB,GAAG,KAAK;AAClD,MAAM,UAAU;AAChB,YAAY,GACZ,QAAQ,gBAAgB,GAAG,OAAO,MAAM,CAAC;IACrC,cAAc;IACd,sBAAsB;IACtB,gBAAgB;IAChB,mBAAmB;AACvB;AACA,cAAc,GACd,MAAM;IACF,YAAY,SAAS,CAAE;QACnB,IAAI,OAAO,cAAc,WAAW;YAChC,IAAI,CAAC,SAAS,GAAG,YACX,QAAQ,gBAAgB,CAAC,iBAAiB,GAC1C,QAAQ,gBAAgB,CAAC,YAAY;QAC/C,OACK;YACD,IAAI,CAAC,SAAS,GAAG;QACrB;IACJ;IACA,OAAO,YAAY,OAAO,EAAE;QACxB,IAAI,SAAS,WAAW,MACpB;QACJ,MAAM,UAAU,QAAQ,OAAO;QAC/B,IAAI,OAAO,YAAY,aAAa,OAAO,YAAY,UAAU;YAC7D,OAAO,IAAI,QAAQ;QACvB;QACA,MAAM,IAAI,QAAQ,yBAAyB,CAAC;IAChD;AACJ;AACA,QAAQ,OAAO,GAAG,SAClB,mCAAmC"}},
    {"offset": {"line": 4731, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4735, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/operations/command.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CommandOperation = void 0;\nconst error_1 = require(\"../error\");\nconst explain_1 = require(\"../explain\");\nconst read_concern_1 = require(\"../read_concern\");\nconst server_selection_1 = require(\"../sdam/server_selection\");\nconst utils_1 = require(\"../utils\");\nconst write_concern_1 = require(\"../write_concern\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass CommandOperation extends operation_1.AbstractOperation {\n    constructor(parent, options) {\n        super(options);\n        this.options = options ?? {};\n        // NOTE: this was explicitly added for the add/remove user operations, it's likely\n        //       something we'd want to reconsider. Perhaps those commands can use `Admin`\n        //       as a parent?\n        const dbNameOverride = options?.dbName || options?.authdb;\n        if (dbNameOverride) {\n            this.ns = new utils_1.MongoDBNamespace(dbNameOverride, '$cmd');\n        }\n        else {\n            this.ns = parent\n                ? parent.s.namespace.withCollection('$cmd')\n                : new utils_1.MongoDBNamespace('admin', '$cmd');\n        }\n        this.readConcern = read_concern_1.ReadConcern.fromOptions(options);\n        this.writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n        if (this.hasAspect(operation_1.Aspect.EXPLAINABLE)) {\n            this.explain = explain_1.Explain.fromOptions(options);\n        }\n        else if (options?.explain != null) {\n            throw new error_1.MongoInvalidArgumentError(`Option \"explain\" is not supported on this command`);\n        }\n    }\n    get canRetryWrite() {\n        if (this.hasAspect(operation_1.Aspect.EXPLAINABLE)) {\n            return this.explain == null;\n        }\n        return true;\n    }\n    async executeCommand(server, session, cmd) {\n        // TODO: consider making this a non-enumerable property\n        this.server = server;\n        const options = {\n            ...this.options,\n            ...this.bsonOptions,\n            readPreference: this.readPreference,\n            session\n        };\n        const serverWireVersion = (0, utils_1.maxWireVersion)(server);\n        const inTransaction = this.session && this.session.inTransaction();\n        if (this.readConcern && (0, utils_1.commandSupportsReadConcern)(cmd) && !inTransaction) {\n            Object.assign(cmd, { readConcern: this.readConcern });\n        }\n        if (this.trySecondaryWrite && serverWireVersion < server_selection_1.MIN_SECONDARY_WRITE_WIRE_VERSION) {\n            options.omitReadPreference = true;\n        }\n        if (this.writeConcern && this.hasAspect(operation_1.Aspect.WRITE_OPERATION) && !inTransaction) {\n            write_concern_1.WriteConcern.apply(cmd, this.writeConcern);\n        }\n        if (options.collation &&\n            typeof options.collation === 'object' &&\n            !this.hasAspect(operation_1.Aspect.SKIP_COLLATION)) {\n            Object.assign(cmd, { collation: options.collation });\n        }\n        if (typeof options.maxTimeMS === 'number') {\n            cmd.maxTimeMS = options.maxTimeMS;\n        }\n        if (this.hasAspect(operation_1.Aspect.EXPLAINABLE) && this.explain) {\n            cmd = (0, utils_1.decorateWithExplain)(cmd, this.explain);\n        }\n        return server.commandAsync(this.ns, cmd, options);\n    }\n}\nexports.CommandOperation = CommandOperation;\n//# sourceMappingURL=command.js.map"],"names":[],"mappings":"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"}},
    {"offset": {"line": 4811, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4815, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/operations/set_profiling_level.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SetProfilingLevelOperation = exports.ProfilingLevel = void 0;\nconst error_1 = require(\"../error\");\nconst utils_1 = require(\"../utils\");\nconst command_1 = require(\"./command\");\nconst levelValues = new Set(['off', 'slow_only', 'all']);\n/** @public */\nexports.ProfilingLevel = Object.freeze({\n    off: 'off',\n    slowOnly: 'slow_only',\n    all: 'all'\n});\n/** @internal */\nclass SetProfilingLevelOperation extends command_1.CommandOperation {\n    constructor(db, level, options) {\n        super(db, options);\n        this.options = options;\n        switch (level) {\n            case exports.ProfilingLevel.off:\n                this.profile = 0;\n                break;\n            case exports.ProfilingLevel.slowOnly:\n                this.profile = 1;\n                break;\n            case exports.ProfilingLevel.all:\n                this.profile = 2;\n                break;\n            default:\n                this.profile = 0;\n                break;\n        }\n        this.level = level;\n    }\n    async execute(server, session) {\n        const level = this.level;\n        if (!levelValues.has(level)) {\n            throw new error_1.MongoInvalidArgumentError(`Profiling level must be one of \"${(0, utils_1.enumToString)(exports.ProfilingLevel)}\"`);\n        }\n        // TODO(NODE-3483): Determine error to put here\n        await super.executeCommand(server, session, { profile: this.profile });\n        return level;\n    }\n}\nexports.SetProfilingLevelOperation = SetProfilingLevelOperation;\n//# sourceMappingURL=set_profiling_level.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,0BAA0B,GAAG,QAAQ,cAAc,GAAG,KAAK;AACnE,MAAM,UAAU;AAChB,MAAM,UAAU;AAChB,MAAM,YAAY;AAClB,MAAM,cAAc,IAAI,IAAI;IAAC;IAAO;IAAa;CAAM;AACvD,YAAY,GACZ,QAAQ,cAAc,GAAG,OAAO,MAAM,CAAC;IACnC,KAAK;IACL,UAAU;IACV,KAAK;AACT;AACA,cAAc,GACd,MAAM,mCAAmC,UAAU,gBAAgB;IAC/D,YAAY,EAAE,EAAE,KAAK,EAAE,OAAO,CAAE;QAC5B,KAAK,CAAC,IAAI;QACV,IAAI,CAAC,OAAO,GAAG;QACf,OAAQ;YACJ,KAAK,QAAQ,cAAc,CAAC,GAAG;gBAC3B,IAAI,CAAC,OAAO,GAAG;gBACf;YACJ,KAAK,QAAQ,cAAc,CAAC,QAAQ;gBAChC,IAAI,CAAC,OAAO,GAAG;gBACf;YACJ,KAAK,QAAQ,cAAc,CAAC,GAAG;gBAC3B,IAAI,CAAC,OAAO,GAAG;gBACf;YACJ;gBACI,IAAI,CAAC,OAAO,GAAG;gBACf;QACR;QACA,IAAI,CAAC,KAAK,GAAG;IACjB;IACA,MAAM,QAAQ,MAAM,EAAE,OAAO,EAAE;QAC3B,MAAM,QAAQ,IAAI,CAAC,KAAK;QACxB,IAAI,CAAC,YAAY,GAAG,CAAC,QAAQ;YACzB,MAAM,IAAI,QAAQ,yBAAyB,CAAC,CAAC,gCAAgC,EAAE,AAAC,CAAA,GAAG,QAAQ,YAAY,AAAD,EAAG,QAAQ,cAAc,EAAE,CAAC,CAAC;QACvI;QACA,+CAA+C;QAC/C,MAAM,KAAK,CAAC,eAAe,QAAQ,SAAS;YAAE,SAAS,IAAI,CAAC,OAAO;QAAC;QACpE,OAAO;IACX;AACJ;AACA,QAAQ,0BAA0B,GAAG,4BACrC,+CAA+C"}},
    {"offset": {"line": 4866, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4870, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/sort.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.formatSort = void 0;\nconst error_1 = require(\"./error\");\n/** @internal */\nfunction prepareDirection(direction = 1) {\n    const value = `${direction}`.toLowerCase();\n    if (isMeta(direction))\n        return direction;\n    switch (value) {\n        case 'ascending':\n        case 'asc':\n        case '1':\n            return 1;\n        case 'descending':\n        case 'desc':\n        case '-1':\n            return -1;\n        default:\n            throw new error_1.MongoInvalidArgumentError(`Invalid sort direction: ${JSON.stringify(direction)}`);\n    }\n}\n/** @internal */\nfunction isMeta(t) {\n    return typeof t === 'object' && t != null && '$meta' in t && typeof t.$meta === 'string';\n}\n/** @internal */\nfunction isPair(t) {\n    if (Array.isArray(t) && t.length === 2) {\n        try {\n            prepareDirection(t[1]);\n            return true;\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    return false;\n}\nfunction isDeep(t) {\n    return Array.isArray(t) && Array.isArray(t[0]);\n}\nfunction isMap(t) {\n    return t instanceof Map && t.size > 0;\n}\n/** @internal */\nfunction pairToMap(v) {\n    return new Map([[`${v[0]}`, prepareDirection([v[1]])]]);\n}\n/** @internal */\nfunction deepToMap(t) {\n    const sortEntries = t.map(([k, v]) => [`${k}`, prepareDirection(v)]);\n    return new Map(sortEntries);\n}\n/** @internal */\nfunction stringsToMap(t) {\n    const sortEntries = t.map(key => [`${key}`, 1]);\n    return new Map(sortEntries);\n}\n/** @internal */\nfunction objectToMap(t) {\n    const sortEntries = Object.entries(t).map(([k, v]) => [\n        `${k}`,\n        prepareDirection(v)\n    ]);\n    return new Map(sortEntries);\n}\n/** @internal */\nfunction mapToMap(t) {\n    const sortEntries = Array.from(t).map(([k, v]) => [\n        `${k}`,\n        prepareDirection(v)\n    ]);\n    return new Map(sortEntries);\n}\n/** converts a Sort type into a type that is valid for the server (SortForCmd) */\nfunction formatSort(sort, direction) {\n    if (sort == null)\n        return undefined;\n    if (typeof sort === 'string')\n        return new Map([[sort, prepareDirection(direction)]]);\n    if (typeof sort !== 'object') {\n        throw new error_1.MongoInvalidArgumentError(`Invalid sort format: ${JSON.stringify(sort)} Sort must be a valid object`);\n    }\n    if (!Array.isArray(sort)) {\n        return isMap(sort) ? mapToMap(sort) : Object.keys(sort).length ? objectToMap(sort) : undefined;\n    }\n    if (!sort.length)\n        return undefined;\n    if (isDeep(sort))\n        return deepToMap(sort);\n    if (isPair(sort))\n        return pairToMap(sort);\n    return stringsToMap(sort);\n}\nexports.formatSort = formatSort;\n//# sourceMappingURL=sort.js.map"],"names":[],"mappings":"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"}},
    {"offset": {"line": 4970, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4974, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/operations/find_and_modify.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FindOneAndUpdateOperation = exports.FindOneAndReplaceOperation = exports.FindOneAndDeleteOperation = exports.ReturnDocument = void 0;\nconst error_1 = require(\"../error\");\nconst read_preference_1 = require(\"../read_preference\");\nconst sort_1 = require(\"../sort\");\nconst utils_1 = require(\"../utils\");\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\n/** @public */\nexports.ReturnDocument = Object.freeze({\n    BEFORE: 'before',\n    AFTER: 'after'\n});\nfunction configureFindAndModifyCmdBaseUpdateOpts(cmdBase, options) {\n    cmdBase.new = options.returnDocument === exports.ReturnDocument.AFTER;\n    cmdBase.upsert = options.upsert === true;\n    if (options.bypassDocumentValidation === true) {\n        cmdBase.bypassDocumentValidation = options.bypassDocumentValidation;\n    }\n    return cmdBase;\n}\n/** @internal */\nclass FindAndModifyOperation extends command_1.CommandOperation {\n    constructor(collection, query, options) {\n        super(collection, options);\n        this.options = options ?? {};\n        this.cmdBase = {\n            remove: false,\n            new: false,\n            upsert: false\n        };\n        options.includeResultMetadata ??= false;\n        const sort = (0, sort_1.formatSort)(options.sort);\n        if (sort) {\n            this.cmdBase.sort = sort;\n        }\n        if (options.projection) {\n            this.cmdBase.fields = options.projection;\n        }\n        if (options.maxTimeMS) {\n            this.cmdBase.maxTimeMS = options.maxTimeMS;\n        }\n        // Decorate the findAndModify command with the write Concern\n        if (options.writeConcern) {\n            this.cmdBase.writeConcern = options.writeConcern;\n        }\n        if (options.let) {\n            this.cmdBase.let = options.let;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (options.comment !== undefined) {\n            this.cmdBase.comment = options.comment;\n        }\n        // force primary read preference\n        this.readPreference = read_preference_1.ReadPreference.primary;\n        this.collection = collection;\n        this.query = query;\n    }\n    async execute(server, session) {\n        const coll = this.collection;\n        const query = this.query;\n        const options = { ...this.options, ...this.bsonOptions };\n        // Create findAndModify command object\n        const cmd = {\n            findAndModify: coll.collectionName,\n            query: query,\n            ...this.cmdBase\n        };\n        // Have we specified collation\n        try {\n            (0, utils_1.decorateWithCollation)(cmd, coll, options);\n        }\n        catch (err) {\n            return err;\n        }\n        if (options.hint) {\n            // TODO: once this method becomes a CommandOperation we will have the server\n            // in place to check.\n            const unacknowledgedWrite = this.writeConcern?.w === 0;\n            if (unacknowledgedWrite || (0, utils_1.maxWireVersion)(server) < 8) {\n                throw new error_1.MongoCompatibilityError('The current topology does not support a hint on findAndModify commands');\n            }\n            cmd.hint = options.hint;\n        }\n        // Execute the command\n        const result = await super.executeCommand(server, session, cmd);\n        return options.includeResultMetadata ? result : result.value ?? null;\n    }\n}\n/** @internal */\nclass FindOneAndDeleteOperation extends FindAndModifyOperation {\n    constructor(collection, filter, options) {\n        // Basic validation\n        if (filter == null || typeof filter !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Argument \"filter\" must be an object');\n        }\n        super(collection, filter, options);\n        this.cmdBase.remove = true;\n    }\n}\nexports.FindOneAndDeleteOperation = FindOneAndDeleteOperation;\n/** @internal */\nclass FindOneAndReplaceOperation extends FindAndModifyOperation {\n    constructor(collection, filter, replacement, options) {\n        if (filter == null || typeof filter !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Argument \"filter\" must be an object');\n        }\n        if (replacement == null || typeof replacement !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Argument \"replacement\" must be an object');\n        }\n        if ((0, utils_1.hasAtomicOperators)(replacement)) {\n            throw new error_1.MongoInvalidArgumentError('Replacement document must not contain atomic operators');\n        }\n        super(collection, filter, options);\n        this.cmdBase.update = replacement;\n        configureFindAndModifyCmdBaseUpdateOpts(this.cmdBase, options);\n    }\n}\nexports.FindOneAndReplaceOperation = FindOneAndReplaceOperation;\n/** @internal */\nclass FindOneAndUpdateOperation extends FindAndModifyOperation {\n    constructor(collection, filter, update, options) {\n        if (filter == null || typeof filter !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Argument \"filter\" must be an object');\n        }\n        if (update == null || typeof update !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Argument \"update\" must be an object');\n        }\n        if (!(0, utils_1.hasAtomicOperators)(update)) {\n            throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n        super(collection, filter, options);\n        this.cmdBase.update = update;\n        configureFindAndModifyCmdBaseUpdateOpts(this.cmdBase, options);\n        if (options.arrayFilters) {\n            this.cmdBase.arrayFilters = options.arrayFilters;\n        }\n    }\n}\nexports.FindOneAndUpdateOperation = FindOneAndUpdateOperation;\n(0, operation_1.defineAspects)(FindAndModifyOperation, [\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.EXPLAINABLE\n]);\n//# sourceMappingURL=find_and_modify.js.map"],"names":[],"mappings":"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"}},
    {"offset": {"line": 5120, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5124, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/transactions.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isTransactionCommand = exports.Transaction = exports.TxnState = void 0;\nconst error_1 = require(\"./error\");\nconst read_concern_1 = require(\"./read_concern\");\nconst read_preference_1 = require(\"./read_preference\");\nconst write_concern_1 = require(\"./write_concern\");\n/** @internal */\nexports.TxnState = Object.freeze({\n    NO_TRANSACTION: 'NO_TRANSACTION',\n    STARTING_TRANSACTION: 'STARTING_TRANSACTION',\n    TRANSACTION_IN_PROGRESS: 'TRANSACTION_IN_PROGRESS',\n    TRANSACTION_COMMITTED: 'TRANSACTION_COMMITTED',\n    TRANSACTION_COMMITTED_EMPTY: 'TRANSACTION_COMMITTED_EMPTY',\n    TRANSACTION_ABORTED: 'TRANSACTION_ABORTED'\n});\nconst stateMachine = {\n    [exports.TxnState.NO_TRANSACTION]: [exports.TxnState.NO_TRANSACTION, exports.TxnState.STARTING_TRANSACTION],\n    [exports.TxnState.STARTING_TRANSACTION]: [\n        exports.TxnState.TRANSACTION_IN_PROGRESS,\n        exports.TxnState.TRANSACTION_COMMITTED,\n        exports.TxnState.TRANSACTION_COMMITTED_EMPTY,\n        exports.TxnState.TRANSACTION_ABORTED\n    ],\n    [exports.TxnState.TRANSACTION_IN_PROGRESS]: [\n        exports.TxnState.TRANSACTION_IN_PROGRESS,\n        exports.TxnState.TRANSACTION_COMMITTED,\n        exports.TxnState.TRANSACTION_ABORTED\n    ],\n    [exports.TxnState.TRANSACTION_COMMITTED]: [\n        exports.TxnState.TRANSACTION_COMMITTED,\n        exports.TxnState.TRANSACTION_COMMITTED_EMPTY,\n        exports.TxnState.STARTING_TRANSACTION,\n        exports.TxnState.NO_TRANSACTION\n    ],\n    [exports.TxnState.TRANSACTION_ABORTED]: [exports.TxnState.STARTING_TRANSACTION, exports.TxnState.NO_TRANSACTION],\n    [exports.TxnState.TRANSACTION_COMMITTED_EMPTY]: [\n        exports.TxnState.TRANSACTION_COMMITTED_EMPTY,\n        exports.TxnState.NO_TRANSACTION\n    ]\n};\nconst ACTIVE_STATES = new Set([\n    exports.TxnState.STARTING_TRANSACTION,\n    exports.TxnState.TRANSACTION_IN_PROGRESS\n]);\nconst COMMITTED_STATES = new Set([\n    exports.TxnState.TRANSACTION_COMMITTED,\n    exports.TxnState.TRANSACTION_COMMITTED_EMPTY,\n    exports.TxnState.TRANSACTION_ABORTED\n]);\n/**\n * @public\n * A class maintaining state related to a server transaction. Internal Only\n */\nclass Transaction {\n    /** Create a transaction @internal */\n    constructor(options) {\n        options = options ?? {};\n        this.state = exports.TxnState.NO_TRANSACTION;\n        this.options = {};\n        const writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n        if (writeConcern) {\n            if (writeConcern.w === 0) {\n                throw new error_1.MongoTransactionError('Transactions do not support unacknowledged write concern');\n            }\n            this.options.writeConcern = writeConcern;\n        }\n        if (options.readConcern) {\n            this.options.readConcern = read_concern_1.ReadConcern.fromOptions(options);\n        }\n        if (options.readPreference) {\n            this.options.readPreference = read_preference_1.ReadPreference.fromOptions(options);\n        }\n        if (options.maxCommitTimeMS) {\n            this.options.maxTimeMS = options.maxCommitTimeMS;\n        }\n        // TODO: This isn't technically necessary\n        this._pinnedServer = undefined;\n        this._recoveryToken = undefined;\n    }\n    /** @internal */\n    get server() {\n        return this._pinnedServer;\n    }\n    get recoveryToken() {\n        return this._recoveryToken;\n    }\n    get isPinned() {\n        return !!this.server;\n    }\n    /** @returns Whether the transaction has started */\n    get isStarting() {\n        return this.state === exports.TxnState.STARTING_TRANSACTION;\n    }\n    /**\n     * @returns Whether this session is presently in a transaction\n     */\n    get isActive() {\n        return ACTIVE_STATES.has(this.state);\n    }\n    get isCommitted() {\n        return COMMITTED_STATES.has(this.state);\n    }\n    /**\n     * Transition the transaction in the state machine\n     * @internal\n     * @param nextState - The new state to transition to\n     */\n    transition(nextState) {\n        const nextStates = stateMachine[this.state];\n        if (nextStates && nextStates.includes(nextState)) {\n            this.state = nextState;\n            if (this.state === exports.TxnState.NO_TRANSACTION ||\n                this.state === exports.TxnState.STARTING_TRANSACTION ||\n                this.state === exports.TxnState.TRANSACTION_ABORTED) {\n                this.unpinServer();\n            }\n            return;\n        }\n        throw new error_1.MongoRuntimeError(`Attempted illegal state transition from [${this.state}] to [${nextState}]`);\n    }\n    /** @internal */\n    pinServer(server) {\n        if (this.isActive) {\n            this._pinnedServer = server;\n        }\n    }\n    /** @internal */\n    unpinServer() {\n        this._pinnedServer = undefined;\n    }\n}\nexports.Transaction = Transaction;\nfunction isTransactionCommand(command) {\n    return !!(command.commitTransaction || command.abortTransaction);\n}\nexports.isTransactionCommand = isTransactionCommand;\n//# sourceMappingURL=transactions.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,oBAAoB,GAAG,QAAQ,WAAW,GAAG,QAAQ,QAAQ,GAAG,KAAK;AAC7E,MAAM,UAAU;AAChB,MAAM,iBAAiB;AACvB,MAAM,oBAAoB;AAC1B,MAAM,kBAAkB;AACxB,cAAc,GACd,QAAQ,QAAQ,GAAG,OAAO,MAAM,CAAC;IAC7B,gBAAgB;IAChB,sBAAsB;IACtB,yBAAyB;IACzB,uBAAuB;IACvB,6BAA6B;IAC7B,qBAAqB;AACzB;AACA,MAAM,eAAe;IACjB,CAAC,QAAQ,QAAQ,CAAC,cAAc,CAAC,EAAE;QAAC,QAAQ,QAAQ,CAAC,cAAc;QAAE,QAAQ,QAAQ,CAAC,oBAAoB;KAAC;IAC3G,CAAC,QAAQ,QAAQ,CAAC,oBAAoB,CAAC,EAAE;QACrC,QAAQ,QAAQ,CAAC,uBAAuB;QACxC,QAAQ,QAAQ,CAAC,qBAAqB;QACtC,QAAQ,QAAQ,CAAC,2BAA2B;QAC5C,QAAQ,QAAQ,CAAC,mBAAmB;KACvC;IACD,CAAC,QAAQ,QAAQ,CAAC,uBAAuB,CAAC,EAAE;QACxC,QAAQ,QAAQ,CAAC,uBAAuB;QACxC,QAAQ,QAAQ,CAAC,qBAAqB;QACtC,QAAQ,QAAQ,CAAC,mBAAmB;KACvC;IACD,CAAC,QAAQ,QAAQ,CAAC,qBAAqB,CAAC,EAAE;QACtC,QAAQ,QAAQ,CAAC,qBAAqB;QACtC,QAAQ,QAAQ,CAAC,2BAA2B;QAC5C,QAAQ,QAAQ,CAAC,oBAAoB;QACrC,QAAQ,QAAQ,CAAC,cAAc;KAClC;IACD,CAAC,QAAQ,QAAQ,CAAC,mBAAmB,CAAC,EAAE;QAAC,QAAQ,QAAQ,CAAC,oBAAoB;QAAE,QAAQ,QAAQ,CAAC,cAAc;KAAC;IAChH,CAAC,QAAQ,QAAQ,CAAC,2BAA2B,CAAC,EAAE;QAC5C,QAAQ,QAAQ,CAAC,2BAA2B;QAC5C,QAAQ,QAAQ,CAAC,cAAc;KAClC;AACL;AACA,MAAM,gBAAgB,IAAI,IAAI;IAC1B,QAAQ,QAAQ,CAAC,oBAAoB;IACrC,QAAQ,QAAQ,CAAC,uBAAuB;CAC3C;AACD,MAAM,mBAAmB,IAAI,IAAI;IAC7B,QAAQ,QAAQ,CAAC,qBAAqB;IACtC,QAAQ,QAAQ,CAAC,2BAA2B;IAC5C,QAAQ,QAAQ,CAAC,mBAAmB;CACvC;AACD;;;CAGC,GACD,MAAM;IACF,mCAAmC,GACnC,YAAY,OAAO,CAAE;QACjB,UAAU,WAAW,CAAC;QACtB,IAAI,CAAC,KAAK,GAAG,QAAQ,QAAQ,CAAC,cAAc;QAC5C,IAAI,CAAC,OAAO,GAAG,CAAC;QAChB,MAAM,eAAe,gBAAgB,YAAY,CAAC,WAAW,CAAC;QAC9D,IAAI,cAAc;YACd,IAAI,aAAa,CAAC,KAAK,GAAG;gBACtB,MAAM,IAAI,QAAQ,qBAAqB,CAAC;YAC5C;YACA,IAAI,CAAC,OAAO,CAAC,YAAY,GAAG;QAChC;QACA,IAAI,QAAQ,WAAW,EAAE;YACrB,IAAI,CAAC,OAAO,CAAC,WAAW,GAAG,eAAe,WAAW,CAAC,WAAW,CAAC;QACtE;QACA,IAAI,QAAQ,cAAc,EAAE;YACxB,IAAI,CAAC,OAAO,CAAC,cAAc,GAAG,kBAAkB,cAAc,CAAC,WAAW,CAAC;QAC/E;QACA,IAAI,QAAQ,eAAe,EAAE;YACzB,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,QAAQ,eAAe;QACpD;QACA,yCAAyC;QACzC,IAAI,CAAC,aAAa,GAAG;QACrB,IAAI,CAAC,cAAc,GAAG;IAC1B;IACA,cAAc,GACd,IAAI,SAAS;QACT,OAAO,IAAI,CAAC,aAAa;IAC7B;IACA,IAAI,gBAAgB;QAChB,OAAO,IAAI,CAAC,cAAc;IAC9B;IACA,IAAI,WAAW;QACX,OAAO,CAAC,CAAC,IAAI,CAAC,MAAM;IACxB;IACA,iDAAiD,GACjD,IAAI,aAAa;QACb,OAAO,IAAI,CAAC,KAAK,KAAK,QAAQ,QAAQ,CAAC,oBAAoB;IAC/D;IACA;;KAEC,GACD,IAAI,WAAW;QACX,OAAO,cAAc,GAAG,CAAC,IAAI,CAAC,KAAK;IACvC;IACA,IAAI,cAAc;QACd,OAAO,iBAAiB,GAAG,CAAC,IAAI,CAAC,KAAK;IAC1C;IACA;;;;KAIC,GACD,WAAW,SAAS,EAAE;QAClB,MAAM,aAAa,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC;QAC3C,IAAI,cAAc,WAAW,QAAQ,CAAC,YAAY;YAC9C,IAAI,CAAC,KAAK,GAAG;YACb,IAAI,IAAI,CAAC,KAAK,KAAK,QAAQ,QAAQ,CAAC,cAAc,IAC9C,IAAI,CAAC,KAAK,KAAK,QAAQ,QAAQ,CAAC,oBAAoB,IACpD,IAAI,CAAC,KAAK,KAAK,QAAQ,QAAQ,CAAC,mBAAmB,EAAE;gBACrD,IAAI,CAAC,WAAW;YACpB;YACA;QACJ;QACA,MAAM,IAAI,QAAQ,iBAAiB,CAAC,CAAC,yCAAyC,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;IACnH;IACA,cAAc,GACd,UAAU,MAAM,EAAE;QACd,IAAI,IAAI,CAAC,QAAQ,EAAE;YACf,IAAI,CAAC,aAAa,GAAG;QACzB;IACJ;IACA,cAAc,GACd,cAAc;QACV,IAAI,CAAC,aAAa,GAAG;IACzB;AACJ;AACA,QAAQ,WAAW,GAAG;AACtB,SAAS,qBAAqB,OAAO;IACjC,OAAO,CAAC,CAAC,CAAC,QAAQ,iBAAiB,IAAI,QAAQ,gBAAgB;AACnE;AACA,QAAQ,oBAAoB,GAAG,sBAC/B,wCAAwC"}},
    {"offset": {"line": 5258, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5262, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/operations/run_command.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RunAdminCommandOperation = exports.RunCommandOperation = void 0;\nconst utils_1 = require(\"../utils\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass RunCommandOperation extends operation_1.AbstractOperation {\n    constructor(parent, command, options) {\n        super(options);\n        this.command = command;\n        this.options = options;\n        this.ns = parent.s.namespace.withCollection('$cmd');\n    }\n    async execute(server, session) {\n        this.server = server;\n        return server.commandAsync(this.ns, this.command, {\n            ...this.options,\n            readPreference: this.readPreference,\n            session\n        });\n    }\n}\nexports.RunCommandOperation = RunCommandOperation;\nclass RunAdminCommandOperation extends operation_1.AbstractOperation {\n    constructor(command, options) {\n        super(options);\n        this.command = command;\n        this.options = options;\n        this.ns = new utils_1.MongoDBNamespace('admin', '$cmd');\n    }\n    async execute(server, session) {\n        this.server = server;\n        return server.commandAsync(this.ns, this.command, {\n            ...this.options,\n            readPreference: this.readPreference,\n            session\n        });\n    }\n}\nexports.RunAdminCommandOperation = RunAdminCommandOperation;\n//# sourceMappingURL=run_command.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,wBAAwB,GAAG,QAAQ,mBAAmB,GAAG,KAAK;AACtE,MAAM,UAAU;AAChB,MAAM,cAAc;AACpB,cAAc,GACd,MAAM,4BAA4B,YAAY,iBAAiB;IAC3D,YAAY,MAAM,EAAE,OAAO,EAAE,OAAO,CAAE;QAClC,KAAK,CAAC;QACN,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,EAAE,GAAG,OAAO,CAAC,CAAC,SAAS,CAAC,cAAc,CAAC;IAChD;IACA,MAAM,QAAQ,MAAM,EAAE,OAAO,EAAE;QAC3B,IAAI,CAAC,MAAM,GAAG;QACd,OAAO,OAAO,YAAY,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE;YAC9C,GAAG,IAAI,CAAC,OAAO;YACf,gBAAgB,IAAI,CAAC,cAAc;YACnC;QACJ;IACJ;AACJ;AACA,QAAQ,mBAAmB,GAAG;AAC9B,MAAM,iCAAiC,YAAY,iBAAiB;IAChE,YAAY,OAAO,EAAE,OAAO,CAAE;QAC1B,KAAK,CAAC;QACN,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,EAAE,GAAG,IAAI,QAAQ,gBAAgB,CAAC,SAAS;IACpD;IACA,MAAM,QAAQ,MAAM,EAAE,OAAO,EAAE;QAC3B,IAAI,CAAC,MAAM,GAAG;QACd,OAAO,OAAO,YAAY,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE;YAC9C,GAAG,IAAI,CAAC,OAAO;YACf,gBAAgB,IAAI,CAAC,cAAc;YACnC;QACJ;IACJ;AACJ;AACA,QAAQ,wBAAwB,GAAG,0BACnC,uCAAuC"}},
    {"offset": {"line": 5303, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5307, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/operations/execute_operation.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.executeOperation = void 0;\nconst error_1 = require(\"../error\");\nconst read_preference_1 = require(\"../read_preference\");\nconst server_selection_1 = require(\"../sdam/server_selection\");\nconst utils_1 = require(\"../utils\");\nconst operation_1 = require(\"./operation\");\nconst MMAPv1_RETRY_WRITES_ERROR_CODE = error_1.MONGODB_ERROR_CODES.IllegalOperation;\nconst MMAPv1_RETRY_WRITES_ERROR_MESSAGE = 'This MongoDB deployment does not support retryable writes. Please add retryWrites=false to your connection string.';\nfunction executeOperation(client, operation, callback) {\n    return (0, utils_1.maybeCallback)(() => executeOperationAsync(client, operation), callback);\n}\nexports.executeOperation = executeOperation;\nasync function executeOperationAsync(client, operation) {\n    if (!(operation instanceof operation_1.AbstractOperation)) {\n        // TODO(NODE-3483): Extend MongoRuntimeError\n        throw new error_1.MongoRuntimeError('This method requires a valid operation instance');\n    }\n    if (client.topology == null) {\n        // Auto connect on operation\n        if (client.s.hasBeenClosed) {\n            throw new error_1.MongoNotConnectedError('Client must be connected before running operations');\n        }\n        client.s.options[Symbol.for('@@mdb.skipPingOnConnect')] = true;\n        try {\n            await client.connect();\n        }\n        finally {\n            delete client.s.options[Symbol.for('@@mdb.skipPingOnConnect')];\n        }\n    }\n    const { topology } = client;\n    if (topology == null) {\n        throw new error_1.MongoRuntimeError('client.connect did not create a topology but also did not throw');\n    }\n    // The driver sessions spec mandates that we implicitly create sessions for operations\n    // that are not explicitly provided with a session.\n    let session = operation.session;\n    let owner;\n    if (session == null) {\n        owner = Symbol();\n        session = client.startSession({ owner, explicit: false });\n    }\n    else if (session.hasEnded) {\n        throw new error_1.MongoExpiredSessionError('Use of expired sessions is not permitted');\n    }\n    else if (session.snapshotEnabled && !topology.capabilities.supportsSnapshotReads) {\n        throw new error_1.MongoCompatibilityError('Snapshot reads require MongoDB 5.0 or later');\n    }\n    else if (session.client !== client) {\n        throw new error_1.MongoInvalidArgumentError('ClientSession must be from the same MongoClient');\n    }\n    const readPreference = operation.readPreference ?? read_preference_1.ReadPreference.primary;\n    const inTransaction = !!session?.inTransaction();\n    if (inTransaction && !readPreference.equals(read_preference_1.ReadPreference.primary)) {\n        throw new error_1.MongoTransactionError(`Read preference in a transaction must be primary, not: ${readPreference.mode}`);\n    }\n    if (session?.isPinned && session.transaction.isCommitted && !operation.bypassPinningCheck) {\n        session.unpin();\n    }\n    let selector;\n    if (operation.hasAspect(operation_1.Aspect.MUST_SELECT_SAME_SERVER)) {\n        // GetMore and KillCursor operations must always select the same server, but run through\n        // server selection to potentially force monitor checks if the server is\n        // in an unknown state.\n        selector = (0, server_selection_1.sameServerSelector)(operation.server?.description);\n    }\n    else if (operation.trySecondaryWrite) {\n        // If operation should try to write to secondary use the custom server selector\n        // otherwise provide the read preference.\n        selector = (0, server_selection_1.secondaryWritableServerSelector)(topology.commonWireVersion, readPreference);\n    }\n    else {\n        selector = readPreference;\n    }\n    const server = await topology.selectServerAsync(selector, { session });\n    if (session == null) {\n        // No session also means it is not retryable, early exit\n        return operation.execute(server, undefined);\n    }\n    if (!operation.hasAspect(operation_1.Aspect.RETRYABLE)) {\n        // non-retryable operation, early exit\n        try {\n            return await operation.execute(server, session);\n        }\n        finally {\n            if (session?.owner != null && session.owner === owner) {\n                await session.endSession().catch(() => null);\n            }\n        }\n    }\n    const willRetryRead = topology.s.options.retryReads && !inTransaction && operation.canRetryRead;\n    const willRetryWrite = topology.s.options.retryWrites &&\n        !inTransaction &&\n        (0, utils_1.supportsRetryableWrites)(server) &&\n        operation.canRetryWrite;\n    const hasReadAspect = operation.hasAspect(operation_1.Aspect.READ_OPERATION);\n    const hasWriteAspect = operation.hasAspect(operation_1.Aspect.WRITE_OPERATION);\n    const willRetry = (hasReadAspect && willRetryRead) || (hasWriteAspect && willRetryWrite);\n    if (hasWriteAspect && willRetryWrite) {\n        operation.options.willRetryWrite = true;\n        session.incrementTransactionNumber();\n    }\n    try {\n        return await operation.execute(server, session);\n    }\n    catch (operationError) {\n        if (willRetry && operationError instanceof error_1.MongoError) {\n            return await retryOperation(operation, operationError, {\n                session,\n                topology,\n                selector\n            });\n        }\n        throw operationError;\n    }\n    finally {\n        if (session?.owner != null && session.owner === owner) {\n            await session.endSession().catch(() => null);\n        }\n    }\n}\nasync function retryOperation(operation, originalError, { session, topology, selector }) {\n    const isWriteOperation = operation.hasAspect(operation_1.Aspect.WRITE_OPERATION);\n    const isReadOperation = operation.hasAspect(operation_1.Aspect.READ_OPERATION);\n    if (isWriteOperation && originalError.code === MMAPv1_RETRY_WRITES_ERROR_CODE) {\n        throw new error_1.MongoServerError({\n            message: MMAPv1_RETRY_WRITES_ERROR_MESSAGE,\n            errmsg: MMAPv1_RETRY_WRITES_ERROR_MESSAGE,\n            originalError\n        });\n    }\n    if (isWriteOperation && !(0, error_1.isRetryableWriteError)(originalError)) {\n        throw originalError;\n    }\n    if (isReadOperation && !(0, error_1.isRetryableReadError)(originalError)) {\n        throw originalError;\n    }\n    if (originalError instanceof error_1.MongoNetworkError &&\n        session.isPinned &&\n        !session.inTransaction() &&\n        operation.hasAspect(operation_1.Aspect.CURSOR_CREATING)) {\n        // If we have a cursor and the initial command fails with a network error,\n        // we can retry it on another connection. So we need to check it back in, clear the\n        // pool for the service id, and retry again.\n        session.unpin({ force: true, forceClear: true });\n    }\n    // select a new server, and attempt to retry the operation\n    const server = await topology.selectServerAsync(selector, { session });\n    if (isWriteOperation && !(0, utils_1.supportsRetryableWrites)(server)) {\n        throw new error_1.MongoUnexpectedServerResponseError('Selected server does not support retryable writes');\n    }\n    try {\n        return await operation.execute(server, session);\n    }\n    catch (retryError) {\n        if (retryError instanceof error_1.MongoError &&\n            retryError.hasErrorLabel(error_1.MongoErrorLabel.NoWritesPerformed)) {\n            throw originalError;\n        }\n        throw retryError;\n    }\n}\n//# sourceMappingURL=execute_operation.js.map"],"names":[],"mappings":"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"}},
    {"offset": {"line": 5466, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5470, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/sdam/server_description.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.compareTopologyVersion = exports.parseServerType = exports.ServerDescription = void 0;\nconst bson_1 = require(\"../bson\");\nconst error_1 = require(\"../error\");\nconst utils_1 = require(\"../utils\");\nconst common_1 = require(\"./common\");\nconst WRITABLE_SERVER_TYPES = new Set([\n    common_1.ServerType.RSPrimary,\n    common_1.ServerType.Standalone,\n    common_1.ServerType.Mongos,\n    common_1.ServerType.LoadBalancer\n]);\nconst DATA_BEARING_SERVER_TYPES = new Set([\n    common_1.ServerType.RSPrimary,\n    common_1.ServerType.RSSecondary,\n    common_1.ServerType.Mongos,\n    common_1.ServerType.Standalone,\n    common_1.ServerType.LoadBalancer\n]);\n/**\n * The client's view of a single server, based on the most recent hello outcome.\n *\n * Internal type, not meant to be directly instantiated\n * @public\n */\nclass ServerDescription {\n    /**\n     * Create a ServerDescription\n     * @internal\n     *\n     * @param address - The address of the server\n     * @param hello - An optional hello response for this server\n     */\n    constructor(address, hello, options = {}) {\n        if (address == null || address === '') {\n            throw new error_1.MongoRuntimeError('ServerDescription must be provided with a non-empty address');\n        }\n        this.address =\n            typeof address === 'string'\n                ? utils_1.HostAddress.fromString(address).toString() // Use HostAddress to normalize\n                : address.toString();\n        this.type = parseServerType(hello, options);\n        this.hosts = hello?.hosts?.map((host) => host.toLowerCase()) ?? [];\n        this.passives = hello?.passives?.map((host) => host.toLowerCase()) ?? [];\n        this.arbiters = hello?.arbiters?.map((host) => host.toLowerCase()) ?? [];\n        this.tags = hello?.tags ?? {};\n        this.minWireVersion = hello?.minWireVersion ?? 0;\n        this.maxWireVersion = hello?.maxWireVersion ?? 0;\n        this.roundTripTime = options?.roundTripTime ?? -1;\n        this.lastUpdateTime = (0, utils_1.now)();\n        this.lastWriteDate = hello?.lastWrite?.lastWriteDate ?? 0;\n        this.error = options.error ?? null;\n        // TODO(NODE-2674): Preserve int64 sent from MongoDB\n        this.topologyVersion = this.error?.topologyVersion ?? hello?.topologyVersion ?? null;\n        this.setName = hello?.setName ?? null;\n        this.setVersion = hello?.setVersion ?? null;\n        this.electionId = hello?.electionId ?? null;\n        this.logicalSessionTimeoutMinutes = hello?.logicalSessionTimeoutMinutes ?? null;\n        this.primary = hello?.primary ?? null;\n        this.me = hello?.me?.toLowerCase() ?? null;\n        this.$clusterTime = hello?.$clusterTime ?? null;\n    }\n    get hostAddress() {\n        return utils_1.HostAddress.fromString(this.address);\n    }\n    get allHosts() {\n        return this.hosts.concat(this.arbiters).concat(this.passives);\n    }\n    /** Is this server available for reads*/\n    get isReadable() {\n        return this.type === common_1.ServerType.RSSecondary || this.isWritable;\n    }\n    /** Is this server data bearing */\n    get isDataBearing() {\n        return DATA_BEARING_SERVER_TYPES.has(this.type);\n    }\n    /** Is this server available for writes */\n    get isWritable() {\n        return WRITABLE_SERVER_TYPES.has(this.type);\n    }\n    get host() {\n        const chopLength = `:${this.port}`.length;\n        return this.address.slice(0, -chopLength);\n    }\n    get port() {\n        const port = this.address.split(':').pop();\n        return port ? Number.parseInt(port, 10) : 27017;\n    }\n    /**\n     * Determines if another `ServerDescription` is equal to this one per the rules defined\n     * in the {@link https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#serverdescription|SDAM spec}\n     */\n    equals(other) {\n        // Despite using the comparator that would determine a nullish topologyVersion as greater than\n        // for equality we should only always perform direct equality comparison\n        const topologyVersionsEqual = this.topologyVersion === other?.topologyVersion ||\n            compareTopologyVersion(this.topologyVersion, other?.topologyVersion) === 0;\n        const electionIdsEqual = this.electionId != null && other?.electionId != null\n            ? (0, utils_1.compareObjectId)(this.electionId, other.electionId) === 0\n            : this.electionId === other?.electionId;\n        return (other != null &&\n            (0, utils_1.errorStrictEqual)(this.error, other.error) &&\n            this.type === other.type &&\n            this.minWireVersion === other.minWireVersion &&\n            (0, utils_1.arrayStrictEqual)(this.hosts, other.hosts) &&\n            tagsStrictEqual(this.tags, other.tags) &&\n            this.setName === other.setName &&\n            this.setVersion === other.setVersion &&\n            electionIdsEqual &&\n            this.primary === other.primary &&\n            this.logicalSessionTimeoutMinutes === other.logicalSessionTimeoutMinutes &&\n            topologyVersionsEqual);\n    }\n}\nexports.ServerDescription = ServerDescription;\n// Parses a `hello` message and determines the server type\nfunction parseServerType(hello, options) {\n    if (options?.loadBalanced) {\n        return common_1.ServerType.LoadBalancer;\n    }\n    if (!hello || !hello.ok) {\n        return common_1.ServerType.Unknown;\n    }\n    if (hello.isreplicaset) {\n        return common_1.ServerType.RSGhost;\n    }\n    if (hello.msg && hello.msg === 'isdbgrid') {\n        return common_1.ServerType.Mongos;\n    }\n    if (hello.setName) {\n        if (hello.hidden) {\n            return common_1.ServerType.RSOther;\n        }\n        else if (hello.isWritablePrimary) {\n            return common_1.ServerType.RSPrimary;\n        }\n        else if (hello.secondary) {\n            return common_1.ServerType.RSSecondary;\n        }\n        else if (hello.arbiterOnly) {\n            return common_1.ServerType.RSArbiter;\n        }\n        else {\n            return common_1.ServerType.RSOther;\n        }\n    }\n    return common_1.ServerType.Standalone;\n}\nexports.parseServerType = parseServerType;\nfunction tagsStrictEqual(tags, tags2) {\n    const tagsKeys = Object.keys(tags);\n    const tags2Keys = Object.keys(tags2);\n    return (tagsKeys.length === tags2Keys.length &&\n        tagsKeys.every((key) => tags2[key] === tags[key]));\n}\n/**\n * Compares two topology versions.\n *\n * 1. If the response topologyVersion is unset or the ServerDescription's\n *    topologyVersion is null, the client MUST assume the response is more recent.\n * 1. If the response's topologyVersion.processId is not equal to the\n *    ServerDescription's, the client MUST assume the response is more recent.\n * 1. If the response's topologyVersion.processId is equal to the\n *    ServerDescription's, the client MUST use the counter field to determine\n *    which topologyVersion is more recent.\n *\n * ```ts\n * currentTv <   newTv === -1\n * currentTv === newTv === 0\n * currentTv >   newTv === 1\n * ```\n */\nfunction compareTopologyVersion(currentTv, newTv) {\n    if (currentTv == null || newTv == null) {\n        return -1;\n    }\n    if (!currentTv.processId.equals(newTv.processId)) {\n        return -1;\n    }\n    // TODO(NODE-2674): Preserve int64 sent from MongoDB\n    const currentCounter = bson_1.Long.isLong(currentTv.counter)\n        ? currentTv.counter\n        : bson_1.Long.fromNumber(currentTv.counter);\n    const newCounter = bson_1.Long.isLong(newTv.counter) ? newTv.counter : bson_1.Long.fromNumber(newTv.counter);\n    return currentCounter.compare(newCounter);\n}\nexports.compareTopologyVersion = compareTopologyVersion;\n//# sourceMappingURL=server_description.js.map"],"names":[],"mappings":"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"}},
    {"offset": {"line": 5630, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5634, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/sdam/topology_description.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TopologyDescription = void 0;\nconst WIRE_CONSTANTS = require(\"../cmap/wire_protocol/constants\");\nconst error_1 = require(\"../error\");\nconst utils_1 = require(\"../utils\");\nconst common_1 = require(\"./common\");\nconst server_description_1 = require(\"./server_description\");\n// constants related to compatibility checks\nconst MIN_SUPPORTED_SERVER_VERSION = WIRE_CONSTANTS.MIN_SUPPORTED_SERVER_VERSION;\nconst MAX_SUPPORTED_SERVER_VERSION = WIRE_CONSTANTS.MAX_SUPPORTED_SERVER_VERSION;\nconst MIN_SUPPORTED_WIRE_VERSION = WIRE_CONSTANTS.MIN_SUPPORTED_WIRE_VERSION;\nconst MAX_SUPPORTED_WIRE_VERSION = WIRE_CONSTANTS.MAX_SUPPORTED_WIRE_VERSION;\nconst MONGOS_OR_UNKNOWN = new Set([common_1.ServerType.Mongos, common_1.ServerType.Unknown]);\nconst MONGOS_OR_STANDALONE = new Set([common_1.ServerType.Mongos, common_1.ServerType.Standalone]);\nconst NON_PRIMARY_RS_MEMBERS = new Set([\n    common_1.ServerType.RSSecondary,\n    common_1.ServerType.RSArbiter,\n    common_1.ServerType.RSOther\n]);\n/**\n * Representation of a deployment of servers\n * @public\n */\nclass TopologyDescription {\n    /**\n     * Create a TopologyDescription\n     */\n    constructor(topologyType, serverDescriptions = null, setName = null, maxSetVersion = null, maxElectionId = null, commonWireVersion = null, options = null) {\n        options = options ?? {};\n        this.type = topologyType ?? common_1.TopologyType.Unknown;\n        this.servers = serverDescriptions ?? new Map();\n        this.stale = false;\n        this.compatible = true;\n        this.heartbeatFrequencyMS = options.heartbeatFrequencyMS ?? 0;\n        this.localThresholdMS = options.localThresholdMS ?? 15;\n        this.setName = setName ?? null;\n        this.maxElectionId = maxElectionId ?? null;\n        this.maxSetVersion = maxSetVersion ?? null;\n        this.commonWireVersion = commonWireVersion ?? 0;\n        // determine server compatibility\n        for (const serverDescription of this.servers.values()) {\n            // Load balancer mode is always compatible.\n            if (serverDescription.type === common_1.ServerType.Unknown ||\n                serverDescription.type === common_1.ServerType.LoadBalancer) {\n                continue;\n            }\n            if (serverDescription.minWireVersion > MAX_SUPPORTED_WIRE_VERSION) {\n                this.compatible = false;\n                this.compatibilityError = `Server at ${serverDescription.address} requires wire version ${serverDescription.minWireVersion}, but this version of the driver only supports up to ${MAX_SUPPORTED_WIRE_VERSION} (MongoDB ${MAX_SUPPORTED_SERVER_VERSION})`;\n            }\n            if (serverDescription.maxWireVersion < MIN_SUPPORTED_WIRE_VERSION) {\n                this.compatible = false;\n                this.compatibilityError = `Server at ${serverDescription.address} reports wire version ${serverDescription.maxWireVersion}, but this version of the driver requires at least ${MIN_SUPPORTED_WIRE_VERSION} (MongoDB ${MIN_SUPPORTED_SERVER_VERSION}).`;\n                break;\n            }\n        }\n        // Whenever a client updates the TopologyDescription from a hello response, it MUST set\n        // TopologyDescription.logicalSessionTimeoutMinutes to the smallest logicalSessionTimeoutMinutes\n        // value among ServerDescriptions of all data-bearing server types. If any have a null\n        // logicalSessionTimeoutMinutes, then TopologyDescription.logicalSessionTimeoutMinutes MUST be\n        // set to null.\n        this.logicalSessionTimeoutMinutes = null;\n        for (const [, server] of this.servers) {\n            if (server.isReadable) {\n                if (server.logicalSessionTimeoutMinutes == null) {\n                    // If any of the servers have a null logicalSessionsTimeout, then the whole topology does\n                    this.logicalSessionTimeoutMinutes = null;\n                    break;\n                }\n                if (this.logicalSessionTimeoutMinutes == null) {\n                    // First server with a non null logicalSessionsTimeout\n                    this.logicalSessionTimeoutMinutes = server.logicalSessionTimeoutMinutes;\n                    continue;\n                }\n                // Always select the smaller of the:\n                // current server logicalSessionsTimeout and the topologies logicalSessionsTimeout\n                this.logicalSessionTimeoutMinutes = Math.min(this.logicalSessionTimeoutMinutes, server.logicalSessionTimeoutMinutes);\n            }\n        }\n    }\n    /**\n     * Returns a new TopologyDescription based on the SrvPollingEvent\n     * @internal\n     */\n    updateFromSrvPollingEvent(ev, srvMaxHosts = 0) {\n        /** The SRV addresses defines the set of addresses we should be using */\n        const incomingHostnames = ev.hostnames();\n        const currentHostnames = new Set(this.servers.keys());\n        const hostnamesToAdd = new Set(incomingHostnames);\n        const hostnamesToRemove = new Set();\n        for (const hostname of currentHostnames) {\n            // filter hostnamesToAdd (made from incomingHostnames) down to what is *not* present in currentHostnames\n            hostnamesToAdd.delete(hostname);\n            if (!incomingHostnames.has(hostname)) {\n                // If the SRV Records no longer include this hostname\n                // we have to stop using it\n                hostnamesToRemove.add(hostname);\n            }\n        }\n        if (hostnamesToAdd.size === 0 && hostnamesToRemove.size === 0) {\n            // No new hosts to add and none to remove\n            return this;\n        }\n        const serverDescriptions = new Map(this.servers);\n        for (const removedHost of hostnamesToRemove) {\n            serverDescriptions.delete(removedHost);\n        }\n        if (hostnamesToAdd.size > 0) {\n            if (srvMaxHosts === 0) {\n                // Add all!\n                for (const hostToAdd of hostnamesToAdd) {\n                    serverDescriptions.set(hostToAdd, new server_description_1.ServerDescription(hostToAdd));\n                }\n            }\n            else if (serverDescriptions.size < srvMaxHosts) {\n                // Add only the amount needed to get us back to srvMaxHosts\n                const selectedHosts = (0, utils_1.shuffle)(hostnamesToAdd, srvMaxHosts - serverDescriptions.size);\n                for (const selectedHostToAdd of selectedHosts) {\n                    serverDescriptions.set(selectedHostToAdd, new server_description_1.ServerDescription(selectedHostToAdd));\n                }\n            }\n        }\n        return new TopologyDescription(this.type, serverDescriptions, this.setName, this.maxSetVersion, this.maxElectionId, this.commonWireVersion, { heartbeatFrequencyMS: this.heartbeatFrequencyMS, localThresholdMS: this.localThresholdMS });\n    }\n    /**\n     * Returns a copy of this description updated with a given ServerDescription\n     * @internal\n     */\n    update(serverDescription) {\n        const address = serverDescription.address;\n        // potentially mutated values\n        let { type: topologyType, setName, maxSetVersion, maxElectionId, commonWireVersion } = this;\n        const serverType = serverDescription.type;\n        const serverDescriptions = new Map(this.servers);\n        // update common wire version\n        if (serverDescription.maxWireVersion !== 0) {\n            if (commonWireVersion == null) {\n                commonWireVersion = serverDescription.maxWireVersion;\n            }\n            else {\n                commonWireVersion = Math.min(commonWireVersion, serverDescription.maxWireVersion);\n            }\n        }\n        if (typeof serverDescription.setName === 'string' &&\n            typeof setName === 'string' &&\n            serverDescription.setName !== setName) {\n            if (topologyType === common_1.TopologyType.Single) {\n                // \"Single\" Topology with setName mismatch is direct connection usage, mark unknown do not remove\n                serverDescription = new server_description_1.ServerDescription(address);\n            }\n            else {\n                serverDescriptions.delete(address);\n            }\n        }\n        // update the actual server description\n        serverDescriptions.set(address, serverDescription);\n        if (topologyType === common_1.TopologyType.Single) {\n            // once we are defined as single, that never changes\n            return new TopologyDescription(common_1.TopologyType.Single, serverDescriptions, setName, maxSetVersion, maxElectionId, commonWireVersion, { heartbeatFrequencyMS: this.heartbeatFrequencyMS, localThresholdMS: this.localThresholdMS });\n        }\n        if (topologyType === common_1.TopologyType.Unknown) {\n            if (serverType === common_1.ServerType.Standalone && this.servers.size !== 1) {\n                serverDescriptions.delete(address);\n            }\n            else {\n                topologyType = topologyTypeForServerType(serverType);\n            }\n        }\n        if (topologyType === common_1.TopologyType.Sharded) {\n            if (!MONGOS_OR_UNKNOWN.has(serverType)) {\n                serverDescriptions.delete(address);\n            }\n        }\n        if (topologyType === common_1.TopologyType.ReplicaSetNoPrimary) {\n            if (MONGOS_OR_STANDALONE.has(serverType)) {\n                serverDescriptions.delete(address);\n            }\n            if (serverType === common_1.ServerType.RSPrimary) {\n                const result = updateRsFromPrimary(serverDescriptions, serverDescription, setName, maxSetVersion, maxElectionId);\n                topologyType = result[0];\n                setName = result[1];\n                maxSetVersion = result[2];\n                maxElectionId = result[3];\n            }\n            else if (NON_PRIMARY_RS_MEMBERS.has(serverType)) {\n                const result = updateRsNoPrimaryFromMember(serverDescriptions, serverDescription, setName);\n                topologyType = result[0];\n                setName = result[1];\n            }\n        }\n        if (topologyType === common_1.TopologyType.ReplicaSetWithPrimary) {\n            if (MONGOS_OR_STANDALONE.has(serverType)) {\n                serverDescriptions.delete(address);\n                topologyType = checkHasPrimary(serverDescriptions);\n            }\n            else if (serverType === common_1.ServerType.RSPrimary) {\n                const result = updateRsFromPrimary(serverDescriptions, serverDescription, setName, maxSetVersion, maxElectionId);\n                topologyType = result[0];\n                setName = result[1];\n                maxSetVersion = result[2];\n                maxElectionId = result[3];\n            }\n            else if (NON_PRIMARY_RS_MEMBERS.has(serverType)) {\n                topologyType = updateRsWithPrimaryFromMember(serverDescriptions, serverDescription, setName);\n            }\n            else {\n                topologyType = checkHasPrimary(serverDescriptions);\n            }\n        }\n        return new TopologyDescription(topologyType, serverDescriptions, setName, maxSetVersion, maxElectionId, commonWireVersion, { heartbeatFrequencyMS: this.heartbeatFrequencyMS, localThresholdMS: this.localThresholdMS });\n    }\n    get error() {\n        const descriptionsWithError = Array.from(this.servers.values()).filter((sd) => sd.error);\n        if (descriptionsWithError.length > 0) {\n            return descriptionsWithError[0].error;\n        }\n        return null;\n    }\n    /**\n     * Determines if the topology description has any known servers\n     */\n    get hasKnownServers() {\n        return Array.from(this.servers.values()).some((sd) => sd.type !== common_1.ServerType.Unknown);\n    }\n    /**\n     * Determines if this topology description has a data-bearing server available.\n     */\n    get hasDataBearingServers() {\n        return Array.from(this.servers.values()).some((sd) => sd.isDataBearing);\n    }\n    /**\n     * Determines if the topology has a definition for the provided address\n     * @internal\n     */\n    hasServer(address) {\n        return this.servers.has(address);\n    }\n}\nexports.TopologyDescription = TopologyDescription;\nfunction topologyTypeForServerType(serverType) {\n    switch (serverType) {\n        case common_1.ServerType.Standalone:\n            return common_1.TopologyType.Single;\n        case common_1.ServerType.Mongos:\n            return common_1.TopologyType.Sharded;\n        case common_1.ServerType.RSPrimary:\n            return common_1.TopologyType.ReplicaSetWithPrimary;\n        case common_1.ServerType.RSOther:\n        case common_1.ServerType.RSSecondary:\n            return common_1.TopologyType.ReplicaSetNoPrimary;\n        default:\n            return common_1.TopologyType.Unknown;\n    }\n}\nfunction updateRsFromPrimary(serverDescriptions, serverDescription, setName = null, maxSetVersion = null, maxElectionId = null) {\n    setName = setName || serverDescription.setName;\n    if (setName !== serverDescription.setName) {\n        serverDescriptions.delete(serverDescription.address);\n        return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];\n    }\n    if (serverDescription.maxWireVersion >= 17) {\n        const electionIdComparison = (0, utils_1.compareObjectId)(maxElectionId, serverDescription.electionId);\n        const maxElectionIdIsEqual = electionIdComparison === 0;\n        const maxElectionIdIsLess = electionIdComparison === -1;\n        const maxSetVersionIsLessOrEqual = (maxSetVersion ?? -1) <= (serverDescription.setVersion ?? -1);\n        if (maxElectionIdIsLess || (maxElectionIdIsEqual && maxSetVersionIsLessOrEqual)) {\n            // The reported electionId was greater\n            // or the electionId was equal and reported setVersion was greater\n            // Always update both values, they are a tuple\n            maxElectionId = serverDescription.electionId;\n            maxSetVersion = serverDescription.setVersion;\n        }\n        else {\n            // Stale primary\n            // replace serverDescription with a default ServerDescription of type \"Unknown\"\n            serverDescriptions.set(serverDescription.address, new server_description_1.ServerDescription(serverDescription.address));\n            return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];\n        }\n    }\n    else {\n        const electionId = serverDescription.electionId ? serverDescription.electionId : null;\n        if (serverDescription.setVersion && electionId) {\n            if (maxSetVersion && maxElectionId) {\n                if (maxSetVersion > serverDescription.setVersion ||\n                    (0, utils_1.compareObjectId)(maxElectionId, electionId) > 0) {\n                    // this primary is stale, we must remove it\n                    serverDescriptions.set(serverDescription.address, new server_description_1.ServerDescription(serverDescription.address));\n                    return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];\n                }\n            }\n            maxElectionId = serverDescription.electionId;\n        }\n        if (serverDescription.setVersion != null &&\n            (maxSetVersion == null || serverDescription.setVersion > maxSetVersion)) {\n            maxSetVersion = serverDescription.setVersion;\n        }\n    }\n    // We've heard from the primary. Is it the same primary as before?\n    for (const [address, server] of serverDescriptions) {\n        if (server.type === common_1.ServerType.RSPrimary && server.address !== serverDescription.address) {\n            // Reset old primary's type to Unknown.\n            serverDescriptions.set(address, new server_description_1.ServerDescription(server.address));\n            // There can only be one primary\n            break;\n        }\n    }\n    // Discover new hosts from this primary's response.\n    serverDescription.allHosts.forEach((address) => {\n        if (!serverDescriptions.has(address)) {\n            serverDescriptions.set(address, new server_description_1.ServerDescription(address));\n        }\n    });\n    // Remove hosts not in the response.\n    const currentAddresses = Array.from(serverDescriptions.keys());\n    const responseAddresses = serverDescription.allHosts;\n    currentAddresses\n        .filter((addr) => responseAddresses.indexOf(addr) === -1)\n        .forEach((address) => {\n        serverDescriptions.delete(address);\n    });\n    return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];\n}\nfunction updateRsWithPrimaryFromMember(serverDescriptions, serverDescription, setName = null) {\n    if (setName == null) {\n        // TODO(NODE-3483): should be an appropriate runtime error\n        throw new error_1.MongoRuntimeError('Argument \"setName\" is required if connected to a replica set');\n    }\n    if (setName !== serverDescription.setName ||\n        (serverDescription.me && serverDescription.address !== serverDescription.me)) {\n        serverDescriptions.delete(serverDescription.address);\n    }\n    return checkHasPrimary(serverDescriptions);\n}\nfunction updateRsNoPrimaryFromMember(serverDescriptions, serverDescription, setName = null) {\n    const topologyType = common_1.TopologyType.ReplicaSetNoPrimary;\n    setName = setName ?? serverDescription.setName;\n    if (setName !== serverDescription.setName) {\n        serverDescriptions.delete(serverDescription.address);\n        return [topologyType, setName];\n    }\n    serverDescription.allHosts.forEach((address) => {\n        if (!serverDescriptions.has(address)) {\n            serverDescriptions.set(address, new server_description_1.ServerDescription(address));\n        }\n    });\n    if (serverDescription.me && serverDescription.address !== serverDescription.me) {\n        serverDescriptions.delete(serverDescription.address);\n    }\n    return [topologyType, setName];\n}\nfunction checkHasPrimary(serverDescriptions) {\n    for (const serverDescription of serverDescriptions.values()) {\n        if (serverDescription.type === common_1.ServerType.RSPrimary) {\n            return common_1.TopologyType.ReplicaSetWithPrimary;\n        }\n    }\n    return common_1.TopologyType.ReplicaSetNoPrimary;\n}\n//# sourceMappingURL=topology_description.js.map"],"names":[],"mappings":"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"}},
    {"offset": {"line": 6009, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6013, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/cmap/wire_protocol/shared.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isSharded = exports.getReadPreference = void 0;\nconst error_1 = require(\"../../error\");\nconst read_preference_1 = require(\"../../read_preference\");\nconst common_1 = require(\"../../sdam/common\");\nconst topology_description_1 = require(\"../../sdam/topology_description\");\nfunction getReadPreference(options) {\n    // Default to command version of the readPreference\n    let readPreference = options?.readPreference ?? read_preference_1.ReadPreference.primary;\n    // If we have an option readPreference override the command one\n    if (options?.readPreference) {\n        readPreference = options.readPreference;\n    }\n    if (typeof readPreference === 'string') {\n        readPreference = read_preference_1.ReadPreference.fromString(readPreference);\n    }\n    if (!(readPreference instanceof read_preference_1.ReadPreference)) {\n        throw new error_1.MongoInvalidArgumentError('Option \"readPreference\" must be a ReadPreference instance');\n    }\n    return readPreference;\n}\nexports.getReadPreference = getReadPreference;\nfunction isSharded(topologyOrServer) {\n    if (topologyOrServer == null) {\n        return false;\n    }\n    if (topologyOrServer.description && topologyOrServer.description.type === common_1.ServerType.Mongos) {\n        return true;\n    }\n    // NOTE: This is incredibly inefficient, and should be removed once command construction\n    //       happens based on `Server` not `Topology`.\n    if (topologyOrServer.description && topologyOrServer.description instanceof topology_description_1.TopologyDescription) {\n        const servers = Array.from(topologyOrServer.description.servers.values());\n        return servers.some((server) => server.type === common_1.ServerType.Mongos);\n    }\n    return false;\n}\nexports.isSharded = isSharded;\n//# sourceMappingURL=shared.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,SAAS,GAAG,QAAQ,iBAAiB,GAAG,KAAK;AACrD,MAAM,UAAU;AAChB,MAAM,oBAAoB;AAC1B,MAAM,WAAW;AACjB,MAAM,yBAAyB;AAC/B,SAAS,kBAAkB,OAAO;IAC9B,mDAAmD;IACnD,IAAI,iBAAiB,SAAS,kBAAkB,kBAAkB,cAAc,CAAC,OAAO;IACxF,+DAA+D;IAC/D,IAAI,SAAS,gBAAgB;QACzB,iBAAiB,QAAQ,cAAc;IAC3C;IACA,IAAI,OAAO,mBAAmB,UAAU;QACpC,iBAAiB,kBAAkB,cAAc,CAAC,UAAU,CAAC;IACjE;IACA,IAAI,CAAC,CAAC,0BAA0B,kBAAkB,cAAc,GAAG;QAC/D,MAAM,IAAI,QAAQ,yBAAyB,CAAC;IAChD;IACA,OAAO;AACX;AACA,QAAQ,iBAAiB,GAAG;AAC5B,SAAS,UAAU,gBAAgB;IAC/B,IAAI,oBAAoB,MAAM;QAC1B,OAAO;IACX;IACA,IAAI,iBAAiB,WAAW,IAAI,iBAAiB,WAAW,CAAC,IAAI,KAAK,SAAS,UAAU,CAAC,MAAM,EAAE;QAClG,OAAO;IACX;IACA,wFAAwF;IACxF,kDAAkD;IAClD,IAAI,iBAAiB,WAAW,IAAI,iBAAiB,WAAW,YAAY,uBAAuB,mBAAmB,EAAE;QACpH,MAAM,UAAU,MAAM,IAAI,CAAC,iBAAiB,WAAW,CAAC,OAAO,CAAC,MAAM;QACtE,OAAO,QAAQ,IAAI,CAAC,CAAC,SAAW,OAAO,IAAI,KAAK,SAAS,UAAU,CAAC,MAAM;IAC9E;IACA,OAAO;AACX;AACA,QAAQ,SAAS,GAAG,WACpB,kCAAkC"}},
    {"offset": {"line": 6054, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6058, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/cmap/metrics.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConnectionPoolMetrics = void 0;\n/** @internal */\nclass ConnectionPoolMetrics {\n    constructor() {\n        this.txnConnections = 0;\n        this.cursorConnections = 0;\n        this.otherConnections = 0;\n    }\n    /**\n     * Mark a connection as pinned for a specific operation.\n     */\n    markPinned(pinType) {\n        if (pinType === ConnectionPoolMetrics.TXN) {\n            this.txnConnections += 1;\n        }\n        else if (pinType === ConnectionPoolMetrics.CURSOR) {\n            this.cursorConnections += 1;\n        }\n        else {\n            this.otherConnections += 1;\n        }\n    }\n    /**\n     * Unmark a connection as pinned for an operation.\n     */\n    markUnpinned(pinType) {\n        if (pinType === ConnectionPoolMetrics.TXN) {\n            this.txnConnections -= 1;\n        }\n        else if (pinType === ConnectionPoolMetrics.CURSOR) {\n            this.cursorConnections -= 1;\n        }\n        else {\n            this.otherConnections -= 1;\n        }\n    }\n    /**\n     * Return information about the cmap metrics as a string.\n     */\n    info(maxPoolSize) {\n        return ('Timed out while checking out a connection from connection pool: ' +\n            `maxPoolSize: ${maxPoolSize}, ` +\n            `connections in use by cursors: ${this.cursorConnections}, ` +\n            `connections in use by transactions: ${this.txnConnections}, ` +\n            `connections in use by other operations: ${this.otherConnections}`);\n    }\n    /**\n     * Reset the metrics to the initial values.\n     */\n    reset() {\n        this.txnConnections = 0;\n        this.cursorConnections = 0;\n        this.otherConnections = 0;\n    }\n}\nConnectionPoolMetrics.TXN = 'txn';\nConnectionPoolMetrics.CURSOR = 'cursor';\nConnectionPoolMetrics.OTHER = 'other';\nexports.ConnectionPoolMetrics = ConnectionPoolMetrics;\n//# sourceMappingURL=metrics.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,qBAAqB,GAAG,KAAK;AACrC,cAAc,GACd,MAAM;IACF,aAAc;QACV,IAAI,CAAC,cAAc,GAAG;QACtB,IAAI,CAAC,iBAAiB,GAAG;QACzB,IAAI,CAAC,gBAAgB,GAAG;IAC5B;IACA;;KAEC,GACD,WAAW,OAAO,EAAE;QAChB,IAAI,YAAY,sBAAsB,GAAG,EAAE;YACvC,IAAI,CAAC,cAAc,IAAI;QAC3B,OACK,IAAI,YAAY,sBAAsB,MAAM,EAAE;YAC/C,IAAI,CAAC,iBAAiB,IAAI;QAC9B,OACK;YACD,IAAI,CAAC,gBAAgB,IAAI;QAC7B;IACJ;IACA;;KAEC,GACD,aAAa,OAAO,EAAE;QAClB,IAAI,YAAY,sBAAsB,GAAG,EAAE;YACvC,IAAI,CAAC,cAAc,IAAI;QAC3B,OACK,IAAI,YAAY,sBAAsB,MAAM,EAAE;YAC/C,IAAI,CAAC,iBAAiB,IAAI;QAC9B,OACK;YACD,IAAI,CAAC,gBAAgB,IAAI;QAC7B;IACJ;IACA;;KAEC,GACD,KAAK,WAAW,EAAE;QACd,OAAQ,qEACJ,CAAC,aAAa,EAAE,YAAY,EAAE,CAAC,GAC/B,CAAC,+BAA+B,EAAE,IAAI,CAAC,iBAAiB,CAAC,EAAE,CAAC,GAC5D,CAAC,oCAAoC,EAAE,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,GAC9D,CAAC,wCAAwC,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;IAC1E;IACA;;KAEC,GACD,QAAQ;QACJ,IAAI,CAAC,cAAc,GAAG;QACtB,IAAI,CAAC,iBAAiB,GAAG;QACzB,IAAI,CAAC,gBAAgB,GAAG;IAC5B;AACJ;AACA,sBAAsB,GAAG,GAAG;AAC5B,sBAAsB,MAAM,GAAG;AAC/B,sBAAsB,KAAK,GAAG;AAC9B,QAAQ,qBAAqB,GAAG,uBAChC,mCAAmC"}},
    {"offset": {"line": 6108, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6112, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/sessions.js"],"sourcesContent":["\"use strict\";\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.updateSessionFromResponse = exports.applySession = exports.ServerSessionPool = exports.ServerSession = exports.maybeClearPinnedConnection = exports.ClientSession = void 0;\nconst util_1 = require(\"util\");\nconst bson_1 = require(\"./bson\");\nconst metrics_1 = require(\"./cmap/metrics\");\nconst shared_1 = require(\"./cmap/wire_protocol/shared\");\nconst constants_1 = require(\"./constants\");\nconst error_1 = require(\"./error\");\nconst mongo_types_1 = require(\"./mongo_types\");\nconst execute_operation_1 = require(\"./operations/execute_operation\");\nconst run_command_1 = require(\"./operations/run_command\");\nconst read_concern_1 = require(\"./read_concern\");\nconst read_preference_1 = require(\"./read_preference\");\nconst common_1 = require(\"./sdam/common\");\nconst transactions_1 = require(\"./transactions\");\nconst utils_1 = require(\"./utils\");\nconst write_concern_1 = require(\"./write_concern\");\nconst minWireVersionForShardedTransactions = 8;\n/** @internal */\nconst kServerSession = Symbol('serverSession');\n/** @internal */\nconst kSnapshotTime = Symbol('snapshotTime');\n/** @internal */\nconst kSnapshotEnabled = Symbol('snapshotEnabled');\n/** @internal */\nconst kPinnedConnection = Symbol('pinnedConnection');\n/** @internal Accumulates total number of increments to add to txnNumber when applying session to command */\nconst kTxnNumberIncrement = Symbol('txnNumberIncrement');\n/**\n * A class representing a client session on the server\n *\n * NOTE: not meant to be instantiated directly.\n * @public\n */\nclass ClientSession extends mongo_types_1.TypedEventEmitter {\n    /**\n     * Create a client session.\n     * @internal\n     * @param client - The current client\n     * @param sessionPool - The server session pool (Internal Class)\n     * @param options - Optional settings\n     * @param clientOptions - Optional settings provided when creating a MongoClient\n     */\n    constructor(client, sessionPool, options, clientOptions) {\n        super();\n        /** @internal */\n        this[_a] = false;\n        if (client == null) {\n            // TODO(NODE-3483)\n            throw new error_1.MongoRuntimeError('ClientSession requires a MongoClient');\n        }\n        if (sessionPool == null || !(sessionPool instanceof ServerSessionPool)) {\n            // TODO(NODE-3483)\n            throw new error_1.MongoRuntimeError('ClientSession requires a ServerSessionPool');\n        }\n        options = options ?? {};\n        if (options.snapshot === true) {\n            this[kSnapshotEnabled] = true;\n            if (options.causalConsistency === true) {\n                throw new error_1.MongoInvalidArgumentError('Properties \"causalConsistency\" and \"snapshot\" are mutually exclusive');\n            }\n        }\n        this.client = client;\n        this.sessionPool = sessionPool;\n        this.hasEnded = false;\n        this.clientOptions = clientOptions;\n        this.explicit = !!options.explicit;\n        this[kServerSession] = this.explicit ? this.sessionPool.acquire() : null;\n        this[kTxnNumberIncrement] = 0;\n        const defaultCausalConsistencyValue = this.explicit && options.snapshot !== true;\n        this.supports = {\n            // if we can enable causal consistency, do so by default\n            causalConsistency: options.causalConsistency ?? defaultCausalConsistencyValue\n        };\n        this.clusterTime = options.initialClusterTime;\n        this.operationTime = undefined;\n        this.owner = options.owner;\n        this.defaultTransactionOptions = Object.assign({}, options.defaultTransactionOptions);\n        this.transaction = new transactions_1.Transaction();\n    }\n    /** The server id associated with this session */\n    get id() {\n        return this[kServerSession]?.id;\n    }\n    get serverSession() {\n        let serverSession = this[kServerSession];\n        if (serverSession == null) {\n            if (this.explicit) {\n                throw new error_1.MongoRuntimeError('Unexpected null serverSession for an explicit session');\n            }\n            if (this.hasEnded) {\n                throw new error_1.MongoRuntimeError('Unexpected null serverSession for an ended implicit session');\n            }\n            serverSession = this.sessionPool.acquire();\n            this[kServerSession] = serverSession;\n        }\n        return serverSession;\n    }\n    /** Whether or not this session is configured for snapshot reads */\n    get snapshotEnabled() {\n        return this[kSnapshotEnabled];\n    }\n    get loadBalanced() {\n        return this.client.topology?.description.type === common_1.TopologyType.LoadBalanced;\n    }\n    /** @internal */\n    get pinnedConnection() {\n        return this[kPinnedConnection];\n    }\n    /** @internal */\n    pin(conn) {\n        if (this[kPinnedConnection]) {\n            throw TypeError('Cannot pin multiple connections to the same session');\n        }\n        this[kPinnedConnection] = conn;\n        conn.emit(constants_1.PINNED, this.inTransaction() ? metrics_1.ConnectionPoolMetrics.TXN : metrics_1.ConnectionPoolMetrics.CURSOR);\n    }\n    /** @internal */\n    unpin(options) {\n        if (this.loadBalanced) {\n            return maybeClearPinnedConnection(this, options);\n        }\n        this.transaction.unpinServer();\n    }\n    get isPinned() {\n        return this.loadBalanced ? !!this[kPinnedConnection] : this.transaction.isPinned;\n    }\n    /**\n     * Ends this session on the server\n     *\n     * @param options - Optional settings. Currently reserved for future use\n     */\n    async endSession(options) {\n        try {\n            if (this.inTransaction()) {\n                await this.abortTransaction();\n            }\n            if (!this.hasEnded) {\n                const serverSession = this[kServerSession];\n                if (serverSession != null) {\n                    // release the server session back to the pool\n                    this.sessionPool.release(serverSession);\n                    // Make sure a new serverSession never makes it onto this ClientSession\n                    Object.defineProperty(this, kServerSession, {\n                        value: ServerSession.clone(serverSession),\n                        writable: false\n                    });\n                }\n                // mark the session as ended, and emit a signal\n                this.hasEnded = true;\n                this.emit('ended', this);\n            }\n        }\n        catch {\n            // spec indicates that we should ignore all errors for `endSessions`\n        }\n        finally {\n            maybeClearPinnedConnection(this, { force: true, ...options });\n        }\n    }\n    /**\n     * Advances the operationTime for a ClientSession.\n     *\n     * @param operationTime - the `BSON.Timestamp` of the operation type it is desired to advance to\n     */\n    advanceOperationTime(operationTime) {\n        if (this.operationTime == null) {\n            this.operationTime = operationTime;\n            return;\n        }\n        if (operationTime.greaterThan(this.operationTime)) {\n            this.operationTime = operationTime;\n        }\n    }\n    /**\n     * Advances the clusterTime for a ClientSession to the provided clusterTime of another ClientSession\n     *\n     * @param clusterTime - the $clusterTime returned by the server from another session in the form of a document containing the `BSON.Timestamp` clusterTime and signature\n     */\n    advanceClusterTime(clusterTime) {\n        if (!clusterTime || typeof clusterTime !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('input cluster time must be an object');\n        }\n        if (!clusterTime.clusterTime || clusterTime.clusterTime._bsontype !== 'Timestamp') {\n            throw new error_1.MongoInvalidArgumentError('input cluster time \"clusterTime\" property must be a valid BSON Timestamp');\n        }\n        if (!clusterTime.signature ||\n            clusterTime.signature.hash?._bsontype !== 'Binary' ||\n            (typeof clusterTime.signature.keyId !== 'bigint' &&\n                typeof clusterTime.signature.keyId !== 'number' &&\n                clusterTime.signature.keyId?._bsontype !== 'Long') // apparently we decode the key to number?\n        ) {\n            throw new error_1.MongoInvalidArgumentError('input cluster time must have a valid \"signature\" property with BSON Binary hash and BSON Long keyId');\n        }\n        (0, common_1._advanceClusterTime)(this, clusterTime);\n    }\n    /**\n     * Used to determine if this session equals another\n     *\n     * @param session - The session to compare to\n     */\n    equals(session) {\n        if (!(session instanceof ClientSession)) {\n            return false;\n        }\n        if (this.id == null || session.id == null) {\n            return false;\n        }\n        return utils_1.ByteUtils.equals(this.id.id.buffer, session.id.id.buffer);\n    }\n    /**\n     * Increment the transaction number on the internal ServerSession\n     *\n     * @privateRemarks\n     * This helper increments a value stored on the client session that will be\n     * added to the serverSession's txnNumber upon applying it to a command.\n     * This is because the serverSession is lazily acquired after a connection is obtained\n     */\n    incrementTransactionNumber() {\n        this[kTxnNumberIncrement] += 1;\n    }\n    /** @returns whether this session is currently in a transaction or not */\n    inTransaction() {\n        return this.transaction.isActive;\n    }\n    /**\n     * Starts a new transaction with the given options.\n     *\n     * @param options - Options for the transaction\n     */\n    startTransaction(options) {\n        if (this[kSnapshotEnabled]) {\n            throw new error_1.MongoCompatibilityError('Transactions are not supported in snapshot sessions');\n        }\n        if (this.inTransaction()) {\n            throw new error_1.MongoTransactionError('Transaction already in progress');\n        }\n        if (this.isPinned && this.transaction.isCommitted) {\n            this.unpin();\n        }\n        const topologyMaxWireVersion = (0, utils_1.maxWireVersion)(this.client.topology);\n        if ((0, shared_1.isSharded)(this.client.topology) &&\n            topologyMaxWireVersion != null &&\n            topologyMaxWireVersion < minWireVersionForShardedTransactions) {\n            throw new error_1.MongoCompatibilityError('Transactions are not supported on sharded clusters in MongoDB < 4.2.');\n        }\n        // increment txnNumber\n        this.incrementTransactionNumber();\n        // create transaction state\n        this.transaction = new transactions_1.Transaction({\n            readConcern: options?.readConcern ??\n                this.defaultTransactionOptions.readConcern ??\n                this.clientOptions?.readConcern,\n            writeConcern: options?.writeConcern ??\n                this.defaultTransactionOptions.writeConcern ??\n                this.clientOptions?.writeConcern,\n            readPreference: options?.readPreference ??\n                this.defaultTransactionOptions.readPreference ??\n                this.clientOptions?.readPreference,\n            maxCommitTimeMS: options?.maxCommitTimeMS ?? this.defaultTransactionOptions.maxCommitTimeMS\n        });\n        this.transaction.transition(transactions_1.TxnState.STARTING_TRANSACTION);\n    }\n    /**\n     * Commits the currently active transaction in this session.\n     */\n    async commitTransaction() {\n        return endTransactionAsync(this, 'commitTransaction');\n    }\n    /**\n     * Aborts the currently active transaction in this session.\n     */\n    async abortTransaction() {\n        return endTransactionAsync(this, 'abortTransaction');\n    }\n    /**\n     * This is here to ensure that ClientSession is never serialized to BSON.\n     */\n    toBSON() {\n        throw new error_1.MongoRuntimeError('ClientSession cannot be serialized to BSON.');\n    }\n    /**\n     * Starts a transaction and runs a provided function, ensuring the commitTransaction is always attempted when all operations run in the function have completed.\n     *\n     * **IMPORTANT:** This method requires the user to return a Promise, and `await` all operations.\n     *\n     * @remarks\n     * This function:\n     * - If all operations successfully complete and the `commitTransaction` operation is successful, then this function will return the result of the provided function.\n     * - If the transaction is unable to complete or an error is thrown from within the provided function, then this function will throw an error.\n     *   - If the transaction is manually aborted within the provided function it will not throw.\n     * - May be called multiple times if the driver needs to attempt to retry the operations.\n     *\n     * Checkout a descriptive example here:\n     * @see https://www.mongodb.com/blog/post/quick-start-nodejs--mongodb--how-to-implement-transactions\n     *\n     * @param fn - callback to run within a transaction\n     * @param options - optional settings for the transaction\n     * @returns A raw command response or undefined\n     */\n    async withTransaction(fn, options) {\n        const startTime = (0, utils_1.now)();\n        return attemptTransaction(this, startTime, fn, options);\n    }\n}\nexports.ClientSession = ClientSession;\n_a = kSnapshotEnabled;\nconst MAX_WITH_TRANSACTION_TIMEOUT = 120000;\nconst NON_DETERMINISTIC_WRITE_CONCERN_ERRORS = new Set([\n    'CannotSatisfyWriteConcern',\n    'UnknownReplWriteConcern',\n    'UnsatisfiableWriteConcern'\n]);\nfunction hasNotTimedOut(startTime, max) {\n    return (0, utils_1.calculateDurationInMs)(startTime) < max;\n}\nfunction isUnknownTransactionCommitResult(err) {\n    const isNonDeterministicWriteConcernError = err instanceof error_1.MongoServerError &&\n        err.codeName &&\n        NON_DETERMINISTIC_WRITE_CONCERN_ERRORS.has(err.codeName);\n    return (isMaxTimeMSExpiredError(err) ||\n        (!isNonDeterministicWriteConcernError &&\n            err.code !== error_1.MONGODB_ERROR_CODES.UnsatisfiableWriteConcern &&\n            err.code !== error_1.MONGODB_ERROR_CODES.UnknownReplWriteConcern));\n}\nfunction maybeClearPinnedConnection(session, options) {\n    // unpin a connection if it has been pinned\n    const conn = session[kPinnedConnection];\n    const error = options?.error;\n    if (session.inTransaction() &&\n        error &&\n        error instanceof error_1.MongoError &&\n        error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n        return;\n    }\n    const topology = session.client.topology;\n    // NOTE: the spec talks about what to do on a network error only, but the tests seem to\n    //       to validate that we don't unpin on _all_ errors?\n    if (conn && topology != null) {\n        const servers = Array.from(topology.s.servers.values());\n        const loadBalancer = servers[0];\n        if (options?.error == null || options?.force) {\n            loadBalancer.pool.checkIn(conn);\n            conn.emit(constants_1.UNPINNED, session.transaction.state !== transactions_1.TxnState.NO_TRANSACTION\n                ? metrics_1.ConnectionPoolMetrics.TXN\n                : metrics_1.ConnectionPoolMetrics.CURSOR);\n            if (options?.forceClear) {\n                loadBalancer.pool.clear({ serviceId: conn.serviceId });\n            }\n        }\n        session[kPinnedConnection] = undefined;\n    }\n}\nexports.maybeClearPinnedConnection = maybeClearPinnedConnection;\nfunction isMaxTimeMSExpiredError(err) {\n    if (err == null || !(err instanceof error_1.MongoServerError)) {\n        return false;\n    }\n    return (err.code === error_1.MONGODB_ERROR_CODES.MaxTimeMSExpired ||\n        (err.writeConcernError && err.writeConcernError.code === error_1.MONGODB_ERROR_CODES.MaxTimeMSExpired));\n}\nfunction attemptTransactionCommit(session, startTime, fn, result, options) {\n    return session.commitTransaction().then(() => result, (err) => {\n        if (err instanceof error_1.MongoError &&\n            hasNotTimedOut(startTime, MAX_WITH_TRANSACTION_TIMEOUT) &&\n            !isMaxTimeMSExpiredError(err)) {\n            if (err.hasErrorLabel(error_1.MongoErrorLabel.UnknownTransactionCommitResult)) {\n                return attemptTransactionCommit(session, startTime, fn, result, options);\n            }\n            if (err.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n                return attemptTransaction(session, startTime, fn, options);\n            }\n        }\n        throw err;\n    });\n}\nconst USER_EXPLICIT_TXN_END_STATES = new Set([\n    transactions_1.TxnState.NO_TRANSACTION,\n    transactions_1.TxnState.TRANSACTION_COMMITTED,\n    transactions_1.TxnState.TRANSACTION_ABORTED\n]);\nfunction userExplicitlyEndedTransaction(session) {\n    return USER_EXPLICIT_TXN_END_STATES.has(session.transaction.state);\n}\nfunction attemptTransaction(session, startTime, fn, options = {}) {\n    session.startTransaction(options);\n    let promise;\n    try {\n        promise = fn(session);\n    }\n    catch (err) {\n        promise = Promise.reject(err);\n    }\n    if (!(0, utils_1.isPromiseLike)(promise)) {\n        session.abortTransaction().catch(() => null);\n        return Promise.reject(new error_1.MongoInvalidArgumentError('Function provided to `withTransaction` must return a Promise'));\n    }\n    return promise.then(result => {\n        if (userExplicitlyEndedTransaction(session)) {\n            return result;\n        }\n        return attemptTransactionCommit(session, startTime, fn, result, options);\n    }, err => {\n        function maybeRetryOrThrow(err) {\n            if (err instanceof error_1.MongoError &&\n                err.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError) &&\n                hasNotTimedOut(startTime, MAX_WITH_TRANSACTION_TIMEOUT)) {\n                return attemptTransaction(session, startTime, fn, options);\n            }\n            if (isMaxTimeMSExpiredError(err)) {\n                err.addErrorLabel(error_1.MongoErrorLabel.UnknownTransactionCommitResult);\n            }\n            throw err;\n        }\n        if (session.inTransaction()) {\n            return session.abortTransaction().then(() => maybeRetryOrThrow(err));\n        }\n        return maybeRetryOrThrow(err);\n    });\n}\nconst endTransactionAsync = (0, util_1.promisify)(endTransaction);\nfunction endTransaction(session, commandName, callback) {\n    // handle any initial problematic cases\n    const txnState = session.transaction.state;\n    if (txnState === transactions_1.TxnState.NO_TRANSACTION) {\n        callback(new error_1.MongoTransactionError('No transaction started'));\n        return;\n    }\n    if (commandName === 'commitTransaction') {\n        if (txnState === transactions_1.TxnState.STARTING_TRANSACTION ||\n            txnState === transactions_1.TxnState.TRANSACTION_COMMITTED_EMPTY) {\n            // the transaction was never started, we can safely exit here\n            session.transaction.transition(transactions_1.TxnState.TRANSACTION_COMMITTED_EMPTY);\n            callback();\n            return;\n        }\n        if (txnState === transactions_1.TxnState.TRANSACTION_ABORTED) {\n            callback(new error_1.MongoTransactionError('Cannot call commitTransaction after calling abortTransaction'));\n            return;\n        }\n    }\n    else {\n        if (txnState === transactions_1.TxnState.STARTING_TRANSACTION) {\n            // the transaction was never started, we can safely exit here\n            session.transaction.transition(transactions_1.TxnState.TRANSACTION_ABORTED);\n            callback();\n            return;\n        }\n        if (txnState === transactions_1.TxnState.TRANSACTION_ABORTED) {\n            callback(new error_1.MongoTransactionError('Cannot call abortTransaction twice'));\n            return;\n        }\n        if (txnState === transactions_1.TxnState.TRANSACTION_COMMITTED ||\n            txnState === transactions_1.TxnState.TRANSACTION_COMMITTED_EMPTY) {\n            callback(new error_1.MongoTransactionError('Cannot call abortTransaction after calling commitTransaction'));\n            return;\n        }\n    }\n    // construct and send the command\n    const command = { [commandName]: 1 };\n    // apply a writeConcern if specified\n    let writeConcern;\n    if (session.transaction.options.writeConcern) {\n        writeConcern = Object.assign({}, session.transaction.options.writeConcern);\n    }\n    else if (session.clientOptions && session.clientOptions.writeConcern) {\n        writeConcern = { w: session.clientOptions.writeConcern.w };\n    }\n    if (txnState === transactions_1.TxnState.TRANSACTION_COMMITTED) {\n        writeConcern = Object.assign({ wtimeoutMS: 10000 }, writeConcern, { w: 'majority' });\n    }\n    if (writeConcern) {\n        write_concern_1.WriteConcern.apply(command, writeConcern);\n    }\n    if (commandName === 'commitTransaction' && session.transaction.options.maxTimeMS) {\n        Object.assign(command, { maxTimeMS: session.transaction.options.maxTimeMS });\n    }\n    function commandHandler(error) {\n        if (commandName !== 'commitTransaction') {\n            session.transaction.transition(transactions_1.TxnState.TRANSACTION_ABORTED);\n            if (session.loadBalanced) {\n                maybeClearPinnedConnection(session, { force: false });\n            }\n            // The spec indicates that we should ignore all errors on `abortTransaction`\n            return callback();\n        }\n        session.transaction.transition(transactions_1.TxnState.TRANSACTION_COMMITTED);\n        if (error instanceof error_1.MongoError) {\n            if ((0, error_1.isRetryableWriteError)(error) ||\n                error instanceof error_1.MongoWriteConcernError ||\n                isMaxTimeMSExpiredError(error)) {\n                if (isUnknownTransactionCommitResult(error)) {\n                    error.addErrorLabel(error_1.MongoErrorLabel.UnknownTransactionCommitResult);\n                    // per txns spec, must unpin session in this case\n                    session.unpin({ error });\n                }\n            }\n            else if (error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n                session.unpin({ error });\n            }\n        }\n        callback(error);\n    }\n    if (session.transaction.recoveryToken) {\n        command.recoveryToken = session.transaction.recoveryToken;\n    }\n    // send the command\n    (0, execute_operation_1.executeOperation)(session.client, new run_command_1.RunAdminCommandOperation(command, {\n        session,\n        readPreference: read_preference_1.ReadPreference.primary,\n        bypassPinningCheck: true\n    }), error => {\n        if (command.abortTransaction) {\n            // always unpin on abort regardless of command outcome\n            session.unpin();\n        }\n        if (error instanceof error_1.MongoError && (0, error_1.isRetryableWriteError)(error)) {\n            // SPEC-1185: apply majority write concern when retrying commitTransaction\n            if (command.commitTransaction) {\n                // per txns spec, must unpin session in this case\n                session.unpin({ force: true });\n                command.writeConcern = Object.assign({ wtimeout: 10000 }, command.writeConcern, {\n                    w: 'majority'\n                });\n            }\n            return (0, execute_operation_1.executeOperation)(session.client, new run_command_1.RunAdminCommandOperation(command, {\n                session,\n                readPreference: read_preference_1.ReadPreference.primary,\n                bypassPinningCheck: true\n            }), commandHandler);\n        }\n        commandHandler(error);\n    });\n}\n/**\n * Reflects the existence of a session on the server. Can be reused by the session pool.\n * WARNING: not meant to be instantiated directly. For internal use only.\n * @public\n */\nclass ServerSession {\n    /** @internal */\n    constructor() {\n        this.id = { id: new bson_1.Binary((0, utils_1.uuidV4)(), bson_1.Binary.SUBTYPE_UUID) };\n        this.lastUse = (0, utils_1.now)();\n        this.txnNumber = 0;\n        this.isDirty = false;\n    }\n    /**\n     * Determines if the server session has timed out.\n     *\n     * @param sessionTimeoutMinutes - The server's \"logicalSessionTimeoutMinutes\"\n     */\n    hasTimedOut(sessionTimeoutMinutes) {\n        // Take the difference of the lastUse timestamp and now, which will result in a value in\n        // milliseconds, and then convert milliseconds to minutes to compare to `sessionTimeoutMinutes`\n        const idleTimeMinutes = Math.round((((0, utils_1.calculateDurationInMs)(this.lastUse) % 86400000) % 3600000) / 60000);\n        return idleTimeMinutes > sessionTimeoutMinutes - 1;\n    }\n    /**\n     * @internal\n     * Cloning meant to keep a readable reference to the server session data\n     * after ClientSession has ended\n     */\n    static clone(serverSession) {\n        const arrayBuffer = new ArrayBuffer(16);\n        const idBytes = Buffer.from(arrayBuffer);\n        idBytes.set(serverSession.id.id.buffer);\n        const id = new bson_1.Binary(idBytes, serverSession.id.id.sub_type);\n        // Manual prototype construction to avoid modifying the constructor of this class\n        return Object.setPrototypeOf({\n            id: { id },\n            lastUse: serverSession.lastUse,\n            txnNumber: serverSession.txnNumber,\n            isDirty: serverSession.isDirty\n        }, ServerSession.prototype);\n    }\n}\nexports.ServerSession = ServerSession;\n/**\n * Maintains a pool of Server Sessions.\n * For internal use only\n * @internal\n */\nclass ServerSessionPool {\n    constructor(client) {\n        if (client == null) {\n            throw new error_1.MongoRuntimeError('ServerSessionPool requires a MongoClient');\n        }\n        this.client = client;\n        this.sessions = new utils_1.List();\n    }\n    /**\n     * Acquire a Server Session from the pool.\n     * Iterates through each session in the pool, removing any stale sessions\n     * along the way. The first non-stale session found is removed from the\n     * pool and returned. If no non-stale session is found, a new ServerSession is created.\n     */\n    acquire() {\n        const sessionTimeoutMinutes = this.client.topology?.logicalSessionTimeoutMinutes ?? 10;\n        let session = null;\n        // Try to obtain from session pool\n        while (this.sessions.length > 0) {\n            const potentialSession = this.sessions.shift();\n            if (potentialSession != null &&\n                (!!this.client.topology?.loadBalanced ||\n                    !potentialSession.hasTimedOut(sessionTimeoutMinutes))) {\n                session = potentialSession;\n                break;\n            }\n        }\n        // If nothing valid came from the pool make a new one\n        if (session == null) {\n            session = new ServerSession();\n        }\n        return session;\n    }\n    /**\n     * Release a session to the session pool\n     * Adds the session back to the session pool if the session has not timed out yet.\n     * This method also removes any stale sessions from the pool.\n     *\n     * @param session - The session to release to the pool\n     */\n    release(session) {\n        const sessionTimeoutMinutes = this.client.topology?.logicalSessionTimeoutMinutes ?? 10;\n        if (this.client.topology?.loadBalanced && !sessionTimeoutMinutes) {\n            this.sessions.unshift(session);\n        }\n        if (!sessionTimeoutMinutes) {\n            return;\n        }\n        this.sessions.prune(session => session.hasTimedOut(sessionTimeoutMinutes));\n        if (!session.hasTimedOut(sessionTimeoutMinutes)) {\n            if (session.isDirty) {\n                return;\n            }\n            // otherwise, readd this session to the session pool\n            this.sessions.unshift(session);\n        }\n    }\n}\nexports.ServerSessionPool = ServerSessionPool;\n/**\n * Optionally decorate a command with sessions specific keys\n *\n * @param session - the session tracking transaction state\n * @param command - the command to decorate\n * @param options - Optional settings passed to calling operation\n *\n * @internal\n */\nfunction applySession(session, command, options) {\n    if (session.hasEnded) {\n        return new error_1.MongoExpiredSessionError();\n    }\n    // May acquire serverSession here\n    const serverSession = session.serverSession;\n    if (serverSession == null) {\n        return new error_1.MongoRuntimeError('Unable to acquire server session');\n    }\n    if (options.writeConcern?.w === 0) {\n        if (session && session.explicit) {\n            // Error if user provided an explicit session to an unacknowledged write (SPEC-1019)\n            return new error_1.MongoAPIError('Cannot have explicit session with unacknowledged writes');\n        }\n        return;\n    }\n    // mark the last use of this session, and apply the `lsid`\n    serverSession.lastUse = (0, utils_1.now)();\n    command.lsid = serverSession.id;\n    const inTxnOrTxnCommand = session.inTransaction() || (0, transactions_1.isTransactionCommand)(command);\n    const isRetryableWrite = !!options.willRetryWrite;\n    if (isRetryableWrite || inTxnOrTxnCommand) {\n        serverSession.txnNumber += session[kTxnNumberIncrement];\n        session[kTxnNumberIncrement] = 0;\n        // TODO(NODE-2674): Preserve int64 sent from MongoDB\n        command.txnNumber = bson_1.Long.fromNumber(serverSession.txnNumber);\n    }\n    if (!inTxnOrTxnCommand) {\n        if (session.transaction.state !== transactions_1.TxnState.NO_TRANSACTION) {\n            session.transaction.transition(transactions_1.TxnState.NO_TRANSACTION);\n        }\n        if (session.supports.causalConsistency &&\n            session.operationTime &&\n            (0, utils_1.commandSupportsReadConcern)(command)) {\n            command.readConcern = command.readConcern || {};\n            Object.assign(command.readConcern, { afterClusterTime: session.operationTime });\n        }\n        else if (session[kSnapshotEnabled]) {\n            command.readConcern = command.readConcern || { level: read_concern_1.ReadConcernLevel.snapshot };\n            if (session[kSnapshotTime] != null) {\n                Object.assign(command.readConcern, { atClusterTime: session[kSnapshotTime] });\n            }\n        }\n        return;\n    }\n    // now attempt to apply transaction-specific sessions data\n    // `autocommit` must always be false to differentiate from retryable writes\n    command.autocommit = false;\n    if (session.transaction.state === transactions_1.TxnState.STARTING_TRANSACTION) {\n        session.transaction.transition(transactions_1.TxnState.TRANSACTION_IN_PROGRESS);\n        command.startTransaction = true;\n        const readConcern = session.transaction.options.readConcern || session?.clientOptions?.readConcern;\n        if (readConcern) {\n            command.readConcern = readConcern;\n        }\n        if (session.supports.causalConsistency && session.operationTime) {\n            command.readConcern = command.readConcern || {};\n            Object.assign(command.readConcern, { afterClusterTime: session.operationTime });\n        }\n    }\n    return;\n}\nexports.applySession = applySession;\nfunction updateSessionFromResponse(session, document) {\n    if (document.$clusterTime) {\n        (0, common_1._advanceClusterTime)(session, document.$clusterTime);\n    }\n    if (document.operationTime && session && session.supports.causalConsistency) {\n        session.advanceOperationTime(document.operationTime);\n    }\n    if (document.recoveryToken && session && session.inTransaction()) {\n        session.transaction._recoveryToken = document.recoveryToken;\n    }\n    if (session?.[kSnapshotEnabled] && session[kSnapshotTime] == null) {\n        // find and aggregate commands return atClusterTime on the cursor\n        // distinct includes it in the response body\n        const atClusterTime = document.cursor?.atClusterTime || document.atClusterTime;\n        if (atClusterTime) {\n            session[kSnapshotTime] = atClusterTime;\n        }\n    }\n}\nexports.updateSessionFromResponse = updateSessionFromResponse;\n//# sourceMappingURL=sessions.js.map"],"names":[],"mappings":"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"}},
    {"offset": {"line": 6813, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6821, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/cmap/handshake/client_metadata.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getFAASEnv = exports.makeClientMetadata = exports.LimitedSizeDocument = void 0;\nconst os = require(\"os\");\nconst process = require(\"process\");\nconst bson_1 = require(\"../../bson\");\nconst error_1 = require(\"../../error\");\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst NODE_DRIVER_VERSION = require('../../../package.json').version;\n/** @internal */\nclass LimitedSizeDocument {\n    constructor(maxSize) {\n        this.maxSize = maxSize;\n        this.document = new Map();\n        /** BSON overhead: Int32 + Null byte */\n        this.documentSize = 5;\n    }\n    /** Only adds key/value if the bsonByteLength is less than MAX_SIZE */\n    ifItFitsItSits(key, value) {\n        // The BSON byteLength of the new element is the same as serializing it to its own document\n        // subtracting the document size int32 and the null terminator.\n        const newElementSize = bson_1.BSON.serialize(new Map().set(key, value)).byteLength - 5;\n        if (newElementSize + this.documentSize > this.maxSize) {\n            return false;\n        }\n        this.documentSize += newElementSize;\n        this.document.set(key, value);\n        return true;\n    }\n    toObject() {\n        return bson_1.BSON.deserialize(bson_1.BSON.serialize(this.document), {\n            promoteLongs: false,\n            promoteBuffers: false,\n            promoteValues: false,\n            useBigInt64: false\n        });\n    }\n}\nexports.LimitedSizeDocument = LimitedSizeDocument;\n/**\n * From the specs:\n * Implementors SHOULD cumulatively update fields in the following order until the document is under the size limit:\n * 1. Omit fields from `env` except `env.name`.\n * 2. Omit fields from `os` except `os.type`.\n * 3. Omit the `env` document entirely.\n * 4. Truncate `platform`. -- special we do not truncate this field\n */\nfunction makeClientMetadata(options) {\n    const metadataDocument = new LimitedSizeDocument(512);\n    const { appName = '' } = options;\n    // Add app name first, it must be sent\n    if (appName.length > 0) {\n        const name = Buffer.byteLength(appName, 'utf8') <= 128\n            ? options.appName\n            : Buffer.from(appName, 'utf8').subarray(0, 128).toString('utf8');\n        metadataDocument.ifItFitsItSits('application', { name });\n    }\n    const { name = '', version = '', platform = '' } = options.driverInfo;\n    const driverInfo = {\n        name: name.length > 0 ? `nodejs|${name}` : 'nodejs',\n        version: version.length > 0 ? `${NODE_DRIVER_VERSION}|${version}` : NODE_DRIVER_VERSION\n    };\n    if (!metadataDocument.ifItFitsItSits('driver', driverInfo)) {\n        throw new error_1.MongoInvalidArgumentError('Unable to include driverInfo name and version, metadata cannot exceed 512 bytes');\n    }\n    let runtimeInfo = getRuntimeInfo();\n    if (platform.length > 0) {\n        runtimeInfo = `${runtimeInfo}|${platform}`;\n    }\n    if (!metadataDocument.ifItFitsItSits('platform', runtimeInfo)) {\n        throw new error_1.MongoInvalidArgumentError('Unable to include driverInfo platform, metadata cannot exceed 512 bytes');\n    }\n    // Note: order matters, os.type is last so it will be removed last if we're at maxSize\n    const osInfo = new Map()\n        .set('name', process.platform)\n        .set('architecture', process.arch)\n        .set('version', os.release())\n        .set('type', os.type());\n    if (!metadataDocument.ifItFitsItSits('os', osInfo)) {\n        for (const key of osInfo.keys()) {\n            osInfo.delete(key);\n            if (osInfo.size === 0)\n                break;\n            if (metadataDocument.ifItFitsItSits('os', osInfo))\n                break;\n        }\n    }\n    const faasEnv = getFAASEnv();\n    if (faasEnv != null) {\n        if (!metadataDocument.ifItFitsItSits('env', faasEnv)) {\n            for (const key of faasEnv.keys()) {\n                faasEnv.delete(key);\n                if (faasEnv.size === 0)\n                    break;\n                if (metadataDocument.ifItFitsItSits('env', faasEnv))\n                    break;\n            }\n        }\n    }\n    return metadataDocument.toObject();\n}\nexports.makeClientMetadata = makeClientMetadata;\n/**\n * Collects FaaS metadata.\n * - `name` MUST be the last key in the Map returned.\n */\nfunction getFAASEnv() {\n    const { AWS_EXECUTION_ENV = '', AWS_LAMBDA_RUNTIME_API = '', FUNCTIONS_WORKER_RUNTIME = '', K_SERVICE = '', FUNCTION_NAME = '', VERCEL = '', AWS_LAMBDA_FUNCTION_MEMORY_SIZE = '', AWS_REGION = '', FUNCTION_MEMORY_MB = '', FUNCTION_REGION = '', FUNCTION_TIMEOUT_SEC = '', VERCEL_REGION = '' } = process.env;\n    const isAWSFaaS = AWS_EXECUTION_ENV.startsWith('AWS_Lambda_') || AWS_LAMBDA_RUNTIME_API.length > 0;\n    const isAzureFaaS = FUNCTIONS_WORKER_RUNTIME.length > 0;\n    const isGCPFaaS = K_SERVICE.length > 0 || FUNCTION_NAME.length > 0;\n    const isVercelFaaS = VERCEL.length > 0;\n    // Note: order matters, name must always be the last key\n    const faasEnv = new Map();\n    // When isVercelFaaS is true so is isAWSFaaS; Vercel inherits the AWS env\n    if (isVercelFaaS && !(isAzureFaaS || isGCPFaaS)) {\n        if (VERCEL_REGION.length > 0) {\n            faasEnv.set('region', VERCEL_REGION);\n        }\n        faasEnv.set('name', 'vercel');\n        return faasEnv;\n    }\n    if (isAWSFaaS && !(isAzureFaaS || isGCPFaaS || isVercelFaaS)) {\n        if (AWS_REGION.length > 0) {\n            faasEnv.set('region', AWS_REGION);\n        }\n        if (AWS_LAMBDA_FUNCTION_MEMORY_SIZE.length > 0 &&\n            Number.isInteger(+AWS_LAMBDA_FUNCTION_MEMORY_SIZE)) {\n            faasEnv.set('memory_mb', new bson_1.Int32(AWS_LAMBDA_FUNCTION_MEMORY_SIZE));\n        }\n        faasEnv.set('name', 'aws.lambda');\n        return faasEnv;\n    }\n    if (isAzureFaaS && !(isGCPFaaS || isAWSFaaS || isVercelFaaS)) {\n        faasEnv.set('name', 'azure.func');\n        return faasEnv;\n    }\n    if (isGCPFaaS && !(isAzureFaaS || isAWSFaaS || isVercelFaaS)) {\n        if (FUNCTION_REGION.length > 0) {\n            faasEnv.set('region', FUNCTION_REGION);\n        }\n        if (FUNCTION_MEMORY_MB.length > 0 && Number.isInteger(+FUNCTION_MEMORY_MB)) {\n            faasEnv.set('memory_mb', new bson_1.Int32(FUNCTION_MEMORY_MB));\n        }\n        if (FUNCTION_TIMEOUT_SEC.length > 0 && Number.isInteger(+FUNCTION_TIMEOUT_SEC)) {\n            faasEnv.set('timeout_sec', new bson_1.Int32(FUNCTION_TIMEOUT_SEC));\n        }\n        faasEnv.set('name', 'gcp.func');\n        return faasEnv;\n    }\n    return null;\n}\nexports.getFAASEnv = getFAASEnv;\n/**\n * @internal\n * Get current JavaScript runtime platform\n *\n * NOTE: The version information fetching is intentionally written defensively\n * to avoid having a released driver version that becomes incompatible\n * with a future change to these global objects.\n */\nfunction getRuntimeInfo() {\n    if ('Deno' in globalThis) {\n        const version = typeof Deno?.version?.deno === 'string' ? Deno?.version?.deno : '0.0.0-unknown';\n        return `Deno v${version}, ${os.endianness()}`;\n    }\n    if ('Bun' in globalThis) {\n        const version = typeof Bun?.version === 'string' ? Bun?.version : '0.0.0-unknown';\n        return `Bun v${version}, ${os.endianness()}`;\n    }\n    return `Node.js ${process.version}, ${os.endianness()}`;\n}\n//# sourceMappingURL=client_metadata.js.map"],"names":[],"mappings":"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"}},
    {"offset": {"line": 6980, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6984, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/cmap/stream_description.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StreamDescription = void 0;\nconst common_1 = require(\"../sdam/common\");\nconst server_description_1 = require(\"../sdam/server_description\");\nconst RESPONSE_FIELDS = [\n    'minWireVersion',\n    'maxWireVersion',\n    'maxBsonObjectSize',\n    'maxMessageSizeBytes',\n    'maxWriteBatchSize',\n    'logicalSessionTimeoutMinutes'\n];\n/** @public */\nclass StreamDescription {\n    constructor(address, options) {\n        this.address = address;\n        this.type = common_1.ServerType.Unknown;\n        this.minWireVersion = undefined;\n        this.maxWireVersion = undefined;\n        this.maxBsonObjectSize = 16777216;\n        this.maxMessageSizeBytes = 48000000;\n        this.maxWriteBatchSize = 100000;\n        this.logicalSessionTimeoutMinutes = options?.logicalSessionTimeoutMinutes;\n        this.loadBalanced = !!options?.loadBalanced;\n        this.compressors =\n            options && options.compressors && Array.isArray(options.compressors)\n                ? options.compressors\n                : [];\n    }\n    receiveResponse(response) {\n        if (response == null) {\n            return;\n        }\n        this.type = (0, server_description_1.parseServerType)(response);\n        for (const field of RESPONSE_FIELDS) {\n            if (response[field] != null) {\n                this[field] = response[field];\n            }\n            // testing case\n            if ('__nodejs_mock_server__' in response) {\n                this.__nodejs_mock_server__ = response['__nodejs_mock_server__'];\n            }\n        }\n        if (response.compression) {\n            this.compressor = this.compressors.filter(c => response.compression?.includes(c))[0];\n        }\n    }\n}\nexports.StreamDescription = StreamDescription;\n//# sourceMappingURL=stream_description.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,iBAAiB,GAAG,KAAK;AACjC,MAAM,WAAW;AACjB,MAAM,uBAAuB;AAC7B,MAAM,kBAAkB;IACpB;IACA;IACA;IACA;IACA;IACA;CACH;AACD,YAAY,GACZ,MAAM;IACF,YAAY,OAAO,EAAE,OAAO,CAAE;QAC1B,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,IAAI,GAAG,SAAS,UAAU,CAAC,OAAO;QACvC,IAAI,CAAC,cAAc,GAAG;QACtB,IAAI,CAAC,cAAc,GAAG;QACtB,IAAI,CAAC,iBAAiB,GAAG;QACzB,IAAI,CAAC,mBAAmB,GAAG;QAC3B,IAAI,CAAC,iBAAiB,GAAG;QACzB,IAAI,CAAC,4BAA4B,GAAG,SAAS;QAC7C,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC,SAAS;QAC/B,IAAI,CAAC,WAAW,GACZ,WAAW,QAAQ,WAAW,IAAI,MAAM,OAAO,CAAC,QAAQ,WAAW,IAC7D,QAAQ,WAAW,GACnB,EAAE;IAChB;IACA,gBAAgB,QAAQ,EAAE;QACtB,IAAI,YAAY,MAAM;YAClB;QACJ;QACA,IAAI,CAAC,IAAI,GAAG,AAAC,CAAA,GAAG,qBAAqB,eAAe,AAAD,EAAG;QACtD,KAAK,MAAM,SAAS,gBAAiB;YACjC,IAAI,QAAQ,CAAC,MAAM,IAAI,MAAM;gBACzB,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM;YACjC;YACA,eAAe;YACf,IAAI,4BAA4B,UAAU;gBACtC,IAAI,CAAC,sBAAsB,GAAG,QAAQ,CAAC,yBAAyB;YACpE;QACJ;QACA,IAAI,SAAS,WAAW,EAAE;YACtB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAA,IAAK,SAAS,WAAW,EAAE,SAAS,GAAG,CAAC,EAAE;QACxF;IACJ;AACJ;AACA,QAAQ,iBAAiB,GAAG,mBAC5B,8CAA8C"}},
    {"offset": {"line": 7032, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7036, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/cmap/message_stream.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MessageStream = void 0;\nconst stream_1 = require(\"stream\");\nconst error_1 = require(\"../error\");\nconst utils_1 = require(\"../utils\");\nconst commands_1 = require(\"./commands\");\nconst compression_1 = require(\"./wire_protocol/compression\");\nconst constants_1 = require(\"./wire_protocol/constants\");\nconst MESSAGE_HEADER_SIZE = 16;\nconst COMPRESSION_DETAILS_SIZE = 9; // originalOpcode + uncompressedSize, compressorID\nconst kDefaultMaxBsonMessageSize = 1024 * 1024 * 16 * 4;\n/** @internal */\nconst kBuffer = Symbol('buffer');\n/**\n * A duplex stream that is capable of reading and writing raw wire protocol messages, with\n * support for optional compression\n * @internal\n */\nclass MessageStream extends stream_1.Duplex {\n    constructor(options = {}) {\n        super(options);\n        /** @internal */\n        this.isMonitoringConnection = false;\n        this.maxBsonMessageSize = options.maxBsonMessageSize || kDefaultMaxBsonMessageSize;\n        this[kBuffer] = new utils_1.BufferPool();\n    }\n    get buffer() {\n        return this[kBuffer];\n    }\n    _write(chunk, _, callback) {\n        this[kBuffer].append(chunk);\n        processIncomingData(this, callback);\n    }\n    _read( /* size */) {\n        // NOTE: This implementation is empty because we explicitly push data to be read\n        //       when `writeMessage` is called.\n        return;\n    }\n    writeCommand(command, operationDescription) {\n        const agreedCompressor = operationDescription.agreedCompressor ?? 'none';\n        if (agreedCompressor === 'none' || !commands_1.OpCompressedRequest.canCompress(command)) {\n            const data = command.toBin();\n            this.push(Array.isArray(data) ? Buffer.concat(data) : data);\n            return;\n        }\n        // otherwise, compress the message\n        const concatenatedOriginalCommandBuffer = Buffer.concat(command.toBin());\n        const messageToBeCompressed = concatenatedOriginalCommandBuffer.slice(MESSAGE_HEADER_SIZE);\n        // Extract information needed for OP_COMPRESSED from the uncompressed message\n        const originalCommandOpCode = concatenatedOriginalCommandBuffer.readInt32LE(12);\n        const options = {\n            agreedCompressor,\n            zlibCompressionLevel: operationDescription.zlibCompressionLevel ?? 0\n        };\n        // Compress the message body\n        (0, compression_1.compress)(options, messageToBeCompressed).then(compressedMessage => {\n            // Create the msgHeader of OP_COMPRESSED\n            const msgHeader = Buffer.alloc(MESSAGE_HEADER_SIZE);\n            msgHeader.writeInt32LE(MESSAGE_HEADER_SIZE + COMPRESSION_DETAILS_SIZE + compressedMessage.length, 0); // messageLength\n            msgHeader.writeInt32LE(command.requestId, 4); // requestID\n            msgHeader.writeInt32LE(0, 8); // responseTo (zero)\n            msgHeader.writeInt32LE(constants_1.OP_COMPRESSED, 12); // opCode\n            // Create the compression details of OP_COMPRESSED\n            const compressionDetails = Buffer.alloc(COMPRESSION_DETAILS_SIZE);\n            compressionDetails.writeInt32LE(originalCommandOpCode, 0); // originalOpcode\n            compressionDetails.writeInt32LE(messageToBeCompressed.length, 4); // Size of the uncompressed compressedMessage, excluding the MsgHeader\n            compressionDetails.writeUInt8(compression_1.Compressor[agreedCompressor], 8); // compressorID\n            this.push(Buffer.concat([msgHeader, compressionDetails, compressedMessage]));\n        }, error => {\n            operationDescription.cb(error);\n        });\n    }\n}\nexports.MessageStream = MessageStream;\nfunction processIncomingData(stream, callback) {\n    const buffer = stream[kBuffer];\n    const sizeOfMessage = buffer.getInt32();\n    if (sizeOfMessage == null) {\n        return callback();\n    }\n    if (sizeOfMessage < 0) {\n        return callback(new error_1.MongoParseError(`Invalid message size: ${sizeOfMessage}`));\n    }\n    if (sizeOfMessage > stream.maxBsonMessageSize) {\n        return callback(new error_1.MongoParseError(`Invalid message size: ${sizeOfMessage}, max allowed: ${stream.maxBsonMessageSize}`));\n    }\n    if (sizeOfMessage > buffer.length) {\n        return callback();\n    }\n    const message = buffer.read(sizeOfMessage);\n    const messageHeader = {\n        length: message.readInt32LE(0),\n        requestId: message.readInt32LE(4),\n        responseTo: message.readInt32LE(8),\n        opCode: message.readInt32LE(12)\n    };\n    const monitorHasAnotherHello = () => {\n        if (stream.isMonitoringConnection) {\n            // Can we read the next message size?\n            const sizeOfMessage = buffer.getInt32();\n            if (sizeOfMessage != null && sizeOfMessage <= buffer.length) {\n                return true;\n            }\n        }\n        return false;\n    };\n    let ResponseType = messageHeader.opCode === constants_1.OP_MSG ? commands_1.OpMsgResponse : commands_1.OpQueryResponse;\n    if (messageHeader.opCode !== constants_1.OP_COMPRESSED) {\n        const messageBody = message.subarray(MESSAGE_HEADER_SIZE);\n        // If we are a monitoring connection message stream and\n        // there is more in the buffer that can be read, skip processing since we\n        // want the last hello command response that is in the buffer.\n        if (monitorHasAnotherHello()) {\n            return processIncomingData(stream, callback);\n        }\n        stream.emit('message', new ResponseType(message, messageHeader, messageBody));\n        if (buffer.length >= 4) {\n            return processIncomingData(stream, callback);\n        }\n        return callback();\n    }\n    messageHeader.fromCompressed = true;\n    messageHeader.opCode = message.readInt32LE(MESSAGE_HEADER_SIZE);\n    messageHeader.length = message.readInt32LE(MESSAGE_HEADER_SIZE + 4);\n    const compressorID = message[MESSAGE_HEADER_SIZE + 8];\n    const compressedBuffer = message.slice(MESSAGE_HEADER_SIZE + 9);\n    // recalculate based on wrapped opcode\n    ResponseType = messageHeader.opCode === constants_1.OP_MSG ? commands_1.OpMsgResponse : commands_1.OpQueryResponse;\n    (0, compression_1.decompress)(compressorID, compressedBuffer).then(messageBody => {\n        if (messageBody.length !== messageHeader.length) {\n            return callback(new error_1.MongoDecompressionError('Message body and message header must be the same length'));\n        }\n        // If we are a monitoring connection message stream and\n        // there is more in the buffer that can be read, skip processing since we\n        // want the last hello command response that is in the buffer.\n        if (monitorHasAnotherHello()) {\n            return processIncomingData(stream, callback);\n        }\n        stream.emit('message', new ResponseType(message, messageHeader, messageBody));\n        if (buffer.length >= 4) {\n            return processIncomingData(stream, callback);\n        }\n        return callback();\n    }, error => {\n        return callback(error);\n    });\n}\n//# sourceMappingURL=message_stream.js.map"],"names":[],"mappings":"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"}},
    {"offset": {"line": 7187, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7191, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/cmap/connection.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.read = exports.readMany = exports.writeCommand = exports.readWireProtocolMessages = exports.ModernConnection = exports.hasSessionSupport = exports.CryptoConnection = exports.Connection = void 0;\nconst events_1 = require(\"events\");\nconst stream_1 = require(\"stream\");\nconst timers_1 = require(\"timers\");\nconst util_1 = require(\"util\");\nconst constants_1 = require(\"../constants\");\nconst error_1 = require(\"../error\");\nconst mongo_types_1 = require(\"../mongo_types\");\nconst sessions_1 = require(\"../sessions\");\nconst utils_1 = require(\"../utils\");\nconst command_monitoring_events_1 = require(\"./command_monitoring_events\");\nconst commands_1 = require(\"./commands\");\nconst message_stream_1 = require(\"./message_stream\");\nconst stream_description_1 = require(\"./stream_description\");\nconst compression_1 = require(\"./wire_protocol/compression\");\nconst shared_1 = require(\"./wire_protocol/shared\");\n/** @internal */\nconst kStream = Symbol('stream');\n/** @internal */\nconst kQueue = Symbol('queue');\n/** @internal */\nconst kMessageStream = Symbol('messageStream');\n/** @internal */\nconst kGeneration = Symbol('generation');\n/** @internal */\nconst kLastUseTime = Symbol('lastUseTime');\n/** @internal */\nconst kClusterTime = Symbol('clusterTime');\n/** @internal */\nconst kDescription = Symbol('description');\n/** @internal */\nconst kHello = Symbol('hello');\n/** @internal */\nconst kAutoEncrypter = Symbol('autoEncrypter');\n/** @internal */\nconst kDelayedTimeoutId = Symbol('delayedTimeoutId');\nconst INVALID_QUEUE_SIZE = 'Connection internal queue contains more than 1 operation description';\n/** @internal */\nclass Connection extends mongo_types_1.TypedEventEmitter {\n    constructor(stream, options) {\n        super();\n        this.commandAsync = (0, util_1.promisify)((ns, cmd, options, callback) => this.command(ns, cmd, options, callback));\n        this.id = options.id;\n        this.address = streamIdentifier(stream, options);\n        this.socketTimeoutMS = options.socketTimeoutMS ?? 0;\n        this.monitorCommands = options.monitorCommands;\n        this.serverApi = options.serverApi;\n        this.closed = false;\n        this[kHello] = null;\n        this[kClusterTime] = null;\n        this[kDescription] = new stream_description_1.StreamDescription(this.address, options);\n        this[kGeneration] = options.generation;\n        this[kLastUseTime] = (0, utils_1.now)();\n        // setup parser stream and message handling\n        this[kQueue] = new Map();\n        this[kMessageStream] = new message_stream_1.MessageStream({\n            ...options,\n            maxBsonMessageSize: this.hello?.maxBsonMessageSize\n        });\n        this[kStream] = stream;\n        this[kDelayedTimeoutId] = null;\n        this[kMessageStream].on('message', message => this.onMessage(message));\n        this[kMessageStream].on('error', error => this.onError(error));\n        this[kStream].on('close', () => this.onClose());\n        this[kStream].on('timeout', () => this.onTimeout());\n        this[kStream].on('error', () => {\n            /* ignore errors, listen to `close` instead */\n        });\n        // hook the message stream up to the passed in stream\n        this[kStream].pipe(this[kMessageStream]);\n        this[kMessageStream].pipe(this[kStream]);\n    }\n    get description() {\n        return this[kDescription];\n    }\n    get hello() {\n        return this[kHello];\n    }\n    // the `connect` method stores the result of the handshake hello on the connection\n    set hello(response) {\n        this[kDescription].receiveResponse(response);\n        this[kDescription] = Object.freeze(this[kDescription]);\n        // TODO: remove this, and only use the `StreamDescription` in the future\n        this[kHello] = response;\n    }\n    // Set the whether the message stream is for a monitoring connection.\n    set isMonitoringConnection(value) {\n        this[kMessageStream].isMonitoringConnection = value;\n    }\n    get isMonitoringConnection() {\n        return this[kMessageStream].isMonitoringConnection;\n    }\n    get serviceId() {\n        return this.hello?.serviceId;\n    }\n    get loadBalanced() {\n        return this.description.loadBalanced;\n    }\n    get generation() {\n        return this[kGeneration] || 0;\n    }\n    set generation(generation) {\n        this[kGeneration] = generation;\n    }\n    get idleTime() {\n        return (0, utils_1.calculateDurationInMs)(this[kLastUseTime]);\n    }\n    get clusterTime() {\n        return this[kClusterTime];\n    }\n    get stream() {\n        return this[kStream];\n    }\n    markAvailable() {\n        this[kLastUseTime] = (0, utils_1.now)();\n    }\n    onError(error) {\n        this.cleanup(true, error);\n    }\n    onClose() {\n        const message = `connection ${this.id} to ${this.address} closed`;\n        this.cleanup(true, new error_1.MongoNetworkError(message));\n    }\n    onTimeout() {\n        this[kDelayedTimeoutId] = (0, timers_1.setTimeout)(() => {\n            const message = `connection ${this.id} to ${this.address} timed out`;\n            const beforeHandshake = this.hello == null;\n            this.cleanup(true, new error_1.MongoNetworkTimeoutError(message, { beforeHandshake }));\n        }, 1).unref(); // No need for this timer to hold the event loop open\n    }\n    onMessage(message) {\n        const delayedTimeoutId = this[kDelayedTimeoutId];\n        if (delayedTimeoutId != null) {\n            (0, timers_1.clearTimeout)(delayedTimeoutId);\n            this[kDelayedTimeoutId] = null;\n        }\n        const socketTimeoutMS = this[kStream].timeout ?? 0;\n        this[kStream].setTimeout(0);\n        // always emit the message, in case we are streaming\n        this.emit('message', message);\n        let operationDescription = this[kQueue].get(message.responseTo);\n        if (!operationDescription && this.isMonitoringConnection) {\n            // This is how we recover when the initial hello's requestId is not\n            // the responseTo when hello responses have been skipped:\n            // First check if the map is of invalid size\n            if (this[kQueue].size > 1) {\n                this.cleanup(true, new error_1.MongoRuntimeError(INVALID_QUEUE_SIZE));\n            }\n            else {\n                // Get the first orphaned operation description.\n                const entry = this[kQueue].entries().next();\n                if (entry.value != null) {\n                    const [requestId, orphaned] = entry.value;\n                    // If the orphaned operation description exists then set it.\n                    operationDescription = orphaned;\n                    // Remove the entry with the bad request id from the queue.\n                    this[kQueue].delete(requestId);\n                }\n            }\n        }\n        if (!operationDescription) {\n            return;\n        }\n        const callback = operationDescription.cb;\n        // SERVER-45775: For exhaust responses we should be able to use the same requestId to\n        // track response, however the server currently synthetically produces remote requests\n        // making the `responseTo` change on each response\n        this[kQueue].delete(message.responseTo);\n        if ('moreToCome' in message && message.moreToCome) {\n            // If the operation description check above does find an orphaned\n            // description and sets the operationDescription then this line will put one\n            // back in the queue with the correct requestId and will resolve not being able\n            // to find the next one via the responseTo of the next streaming hello.\n            this[kQueue].set(message.requestId, operationDescription);\n            this[kStream].setTimeout(socketTimeoutMS);\n        }\n        try {\n            // Pass in the entire description because it has BSON parsing options\n            message.parse(operationDescription);\n        }\n        catch (err) {\n            // If this error is generated by our own code, it will already have the correct class applied\n            // if it is not, then it is coming from a catastrophic data parse failure or the BSON library\n            // in either case, it should not be wrapped\n            callback(err);\n            return;\n        }\n        if (message.documents[0]) {\n            const document = message.documents[0];\n            const session = operationDescription.session;\n            if (session) {\n                (0, sessions_1.updateSessionFromResponse)(session, document);\n            }\n            if (document.$clusterTime) {\n                this[kClusterTime] = document.$clusterTime;\n                this.emit(Connection.CLUSTER_TIME_RECEIVED, document.$clusterTime);\n            }\n            if (document.writeConcernError) {\n                callback(new error_1.MongoWriteConcernError(document.writeConcernError, document), document);\n                return;\n            }\n            if (document.ok === 0 || document.$err || document.errmsg || document.code) {\n                callback(new error_1.MongoServerError(document));\n                return;\n            }\n        }\n        callback(undefined, message.documents[0]);\n    }\n    destroy(options, callback) {\n        if (this.closed) {\n            process.nextTick(() => callback?.());\n            return;\n        }\n        if (typeof callback === 'function') {\n            this.once('close', () => process.nextTick(() => callback()));\n        }\n        // load balanced mode requires that these listeners remain on the connection\n        // after cleanup on timeouts, errors or close so we remove them before calling\n        // cleanup.\n        this.removeAllListeners(Connection.PINNED);\n        this.removeAllListeners(Connection.UNPINNED);\n        const message = `connection ${this.id} to ${this.address} closed`;\n        this.cleanup(options.force, new error_1.MongoNetworkError(message));\n    }\n    /**\n     * A method that cleans up the connection.  When `force` is true, this method\n     * forcibly destroys the socket.\n     *\n     * If an error is provided, any in-flight operations will be closed with the error.\n     *\n     * This method does nothing if the connection is already closed.\n     */\n    cleanup(force, error) {\n        if (this.closed) {\n            return;\n        }\n        this.closed = true;\n        const completeCleanup = () => {\n            for (const op of this[kQueue].values()) {\n                op.cb(error);\n            }\n            this[kQueue].clear();\n            this.emit(Connection.CLOSE);\n        };\n        this[kStream].removeAllListeners();\n        this[kMessageStream].removeAllListeners();\n        this[kMessageStream].destroy();\n        if (force) {\n            this[kStream].destroy();\n            completeCleanup();\n            return;\n        }\n        if (!this[kStream].writableEnded) {\n            this[kStream].end(() => {\n                this[kStream].destroy();\n                completeCleanup();\n            });\n        }\n        else {\n            completeCleanup();\n        }\n    }\n    command(ns, command, options, callback) {\n        let cmd = { ...command };\n        const readPreference = (0, shared_1.getReadPreference)(options);\n        const shouldUseOpMsg = supportsOpMsg(this);\n        const session = options?.session;\n        let clusterTime = this.clusterTime;\n        if (this.serverApi) {\n            const { version, strict, deprecationErrors } = this.serverApi;\n            cmd.apiVersion = version;\n            if (strict != null)\n                cmd.apiStrict = strict;\n            if (deprecationErrors != null)\n                cmd.apiDeprecationErrors = deprecationErrors;\n        }\n        if (hasSessionSupport(this) && session) {\n            if (session.clusterTime &&\n                clusterTime &&\n                session.clusterTime.clusterTime.greaterThan(clusterTime.clusterTime)) {\n                clusterTime = session.clusterTime;\n            }\n            const err = (0, sessions_1.applySession)(session, cmd, options);\n            if (err) {\n                return callback(err);\n            }\n        }\n        else if (session?.explicit) {\n            return callback(new error_1.MongoCompatibilityError('Current topology does not support sessions'));\n        }\n        // if we have a known cluster time, gossip it\n        if (clusterTime) {\n            cmd.$clusterTime = clusterTime;\n        }\n        if ((0, shared_1.isSharded)(this) && !shouldUseOpMsg && readPreference && readPreference.mode !== 'primary') {\n            cmd = {\n                $query: cmd,\n                $readPreference: readPreference.toJSON()\n            };\n        }\n        const commandOptions = Object.assign({\n            numberToSkip: 0,\n            numberToReturn: -1,\n            checkKeys: false,\n            // This value is not overridable\n            secondaryOk: readPreference.secondaryOk()\n        }, options);\n        const message = shouldUseOpMsg\n            ? new commands_1.OpMsgRequest(ns.db, cmd, commandOptions)\n            : new commands_1.OpQueryRequest(ns.db, cmd, commandOptions);\n        try {\n            write(this, message, commandOptions, callback);\n        }\n        catch (err) {\n            callback(err);\n        }\n    }\n}\n/** @event */\nConnection.COMMAND_STARTED = constants_1.COMMAND_STARTED;\n/** @event */\nConnection.COMMAND_SUCCEEDED = constants_1.COMMAND_SUCCEEDED;\n/** @event */\nConnection.COMMAND_FAILED = constants_1.COMMAND_FAILED;\n/** @event */\nConnection.CLUSTER_TIME_RECEIVED = constants_1.CLUSTER_TIME_RECEIVED;\n/** @event */\nConnection.CLOSE = constants_1.CLOSE;\n/** @event */\nConnection.MESSAGE = constants_1.MESSAGE;\n/** @event */\nConnection.PINNED = constants_1.PINNED;\n/** @event */\nConnection.UNPINNED = constants_1.UNPINNED;\nexports.Connection = Connection;\n/** @internal */\nclass CryptoConnection extends Connection {\n    constructor(stream, options) {\n        super(stream, options);\n        this[kAutoEncrypter] = options.autoEncrypter;\n    }\n    /** @internal @override */\n    command(ns, cmd, options, callback) {\n        const autoEncrypter = this[kAutoEncrypter];\n        if (!autoEncrypter) {\n            return callback(new error_1.MongoMissingDependencyError('No AutoEncrypter available for encryption'));\n        }\n        const serverWireVersion = (0, utils_1.maxWireVersion)(this);\n        if (serverWireVersion === 0) {\n            // This means the initial handshake hasn't happened yet\n            return super.command(ns, cmd, options, callback);\n        }\n        if (serverWireVersion < 8) {\n            callback(new error_1.MongoCompatibilityError('Auto-encryption requires a minimum MongoDB version of 4.2'));\n            return;\n        }\n        // Save sort or indexKeys based on the command being run\n        // the encrypt API serializes our JS objects to BSON to pass to the native code layer\n        // and then deserializes the encrypted result, the protocol level components\n        // of the command (ex. sort) are then converted to JS objects potentially losing\n        // import key order information. These fields are never encrypted so we can save the values\n        // from before the encryption and replace them after encryption has been performed\n        const sort = cmd.find || cmd.findAndModify ? cmd.sort : null;\n        const indexKeys = cmd.createIndexes\n            ? cmd.indexes.map((index) => index.key)\n            : null;\n        autoEncrypter.encrypt(ns.toString(), cmd, options).then(encrypted => {\n            // Replace the saved values\n            if (sort != null && (cmd.find || cmd.findAndModify)) {\n                encrypted.sort = sort;\n            }\n            if (indexKeys != null && cmd.createIndexes) {\n                for (const [offset, index] of indexKeys.entries()) {\n                    // @ts-expect-error `encrypted` is a generic \"command\", but we've narrowed for only `createIndexes` commands here\n                    encrypted.indexes[offset].key = index;\n                }\n            }\n            super.command(ns, encrypted, options, (err, response) => {\n                if (err || response == null) {\n                    callback(err, response);\n                    return;\n                }\n                autoEncrypter.decrypt(response, options).then(res => callback(undefined, res), err => callback(err));\n            });\n        }, err => {\n            if (err) {\n                callback(err, null);\n            }\n        });\n    }\n}\nexports.CryptoConnection = CryptoConnection;\n/** @internal */\nfunction hasSessionSupport(conn) {\n    const description = conn.description;\n    return description.logicalSessionTimeoutMinutes != null;\n}\nexports.hasSessionSupport = hasSessionSupport;\nfunction supportsOpMsg(conn) {\n    const description = conn.description;\n    if (description == null) {\n        return false;\n    }\n    return (0, utils_1.maxWireVersion)(conn) >= 6 && !description.__nodejs_mock_server__;\n}\nfunction streamIdentifier(stream, options) {\n    if (options.proxyHost) {\n        // If proxy options are specified, the properties of `stream` itself\n        // will not accurately reflect what endpoint this is connected to.\n        return options.hostAddress.toString();\n    }\n    const { remoteAddress, remotePort } = stream;\n    if (typeof remoteAddress === 'string' && typeof remotePort === 'number') {\n        return utils_1.HostAddress.fromHostPort(remoteAddress, remotePort).toString();\n    }\n    return (0, utils_1.uuidV4)().toString('hex');\n}\nfunction write(conn, command, options, callback) {\n    options = options ?? {};\n    const operationDescription = {\n        requestId: command.requestId,\n        cb: callback,\n        session: options.session,\n        noResponse: typeof options.noResponse === 'boolean' ? options.noResponse : false,\n        documentsReturnedIn: options.documentsReturnedIn,\n        // for BSON parsing\n        useBigInt64: typeof options.useBigInt64 === 'boolean' ? options.useBigInt64 : false,\n        promoteLongs: typeof options.promoteLongs === 'boolean' ? options.promoteLongs : true,\n        promoteValues: typeof options.promoteValues === 'boolean' ? options.promoteValues : true,\n        promoteBuffers: typeof options.promoteBuffers === 'boolean' ? options.promoteBuffers : false,\n        bsonRegExp: typeof options.bsonRegExp === 'boolean' ? options.bsonRegExp : false,\n        enableUtf8Validation: typeof options.enableUtf8Validation === 'boolean' ? options.enableUtf8Validation : true,\n        raw: typeof options.raw === 'boolean' ? options.raw : false,\n        started: 0\n    };\n    if (conn[kDescription] && conn[kDescription].compressor) {\n        operationDescription.agreedCompressor = conn[kDescription].compressor;\n        if (conn[kDescription].zlibCompressionLevel) {\n            operationDescription.zlibCompressionLevel = conn[kDescription].zlibCompressionLevel;\n        }\n    }\n    if (typeof options.socketTimeoutMS === 'number') {\n        conn[kStream].setTimeout(options.socketTimeoutMS);\n    }\n    else if (conn.socketTimeoutMS !== 0) {\n        conn[kStream].setTimeout(conn.socketTimeoutMS);\n    }\n    // if command monitoring is enabled we need to modify the callback here\n    if (conn.monitorCommands) {\n        conn.emit(Connection.COMMAND_STARTED, new command_monitoring_events_1.CommandStartedEvent(conn, command));\n        operationDescription.started = (0, utils_1.now)();\n        operationDescription.cb = (err, reply) => {\n            // Command monitoring spec states that if ok is 1, then we must always emit\n            // a command succeeded event, even if there's an error. Write concern errors\n            // will have an ok: 1 in their reply.\n            if (err && reply?.ok !== 1) {\n                conn.emit(Connection.COMMAND_FAILED, new command_monitoring_events_1.CommandFailedEvent(conn, command, err, operationDescription.started));\n            }\n            else {\n                if (reply && (reply.ok === 0 || reply.$err)) {\n                    conn.emit(Connection.COMMAND_FAILED, new command_monitoring_events_1.CommandFailedEvent(conn, command, reply, operationDescription.started));\n                }\n                else {\n                    conn.emit(Connection.COMMAND_SUCCEEDED, new command_monitoring_events_1.CommandSucceededEvent(conn, command, reply, operationDescription.started));\n                }\n            }\n            if (typeof callback === 'function') {\n                // Since we're passing through the reply with the write concern error now, we\n                // need it not to be provided to the original callback in this case so\n                // retryability does not get tricked into thinking the command actually\n                // succeeded.\n                callback(err, err instanceof error_1.MongoWriteConcernError ? undefined : reply);\n            }\n        };\n    }\n    if (!operationDescription.noResponse) {\n        conn[kQueue].set(operationDescription.requestId, operationDescription);\n    }\n    try {\n        conn[kMessageStream].writeCommand(command, operationDescription);\n    }\n    catch (e) {\n        if (!operationDescription.noResponse) {\n            conn[kQueue].delete(operationDescription.requestId);\n            operationDescription.cb(e);\n            return;\n        }\n    }\n    if (operationDescription.noResponse) {\n        operationDescription.cb();\n    }\n}\n/** in-progress connection layer */\n/** @internal */\nclass ModernConnection extends mongo_types_1.TypedEventEmitter {\n    constructor(stream, options) {\n        super();\n        this.commandAsync = (0, util_1.promisify)((ns, cmd, options, callback) => this.command(ns, cmd, options, callback));\n        this.id = options.id;\n        this.address = streamIdentifier(stream, options);\n        this.socketTimeoutMS = options.socketTimeoutMS ?? 0;\n        this.monitorCommands = options.monitorCommands;\n        this.serverApi = options.serverApi;\n        this.closed = false;\n        this[kHello] = null;\n        this[kClusterTime] = null;\n        this[kDescription] = new stream_description_1.StreamDescription(this.address, options);\n        this[kGeneration] = options.generation;\n        this[kLastUseTime] = (0, utils_1.now)();\n        // setup parser stream and message handling\n        this[kQueue] = new Map();\n        this[kMessageStream] = new message_stream_1.MessageStream({\n            ...options,\n            maxBsonMessageSize: this.hello?.maxBsonMessageSize\n        });\n        this.socket = stream;\n        this[kDelayedTimeoutId] = null;\n        this[kMessageStream].on('message', message => this.onMessage(message));\n        this[kMessageStream].on('error', error => this.onError(error));\n        this.socket.on('close', () => this.onClose());\n        this.socket.on('timeout', () => this.onTimeout());\n        this.socket.on('error', () => {\n            /* ignore errors, listen to `close` instead */\n        });\n        // hook the message stream up to the passed in stream\n        this.socket.pipe(this[kMessageStream]);\n        this[kMessageStream].pipe(this.socket);\n    }\n    get description() {\n        return this[kDescription];\n    }\n    get hello() {\n        return this[kHello];\n    }\n    // the `connect` method stores the result of the handshake hello on the connection\n    set hello(response) {\n        this[kDescription].receiveResponse(response);\n        this[kDescription] = Object.freeze(this[kDescription]);\n        // TODO: remove this, and only use the `StreamDescription` in the future\n        this[kHello] = response;\n    }\n    // Set the whether the message stream is for a monitoring connection.\n    set isMonitoringConnection(value) {\n        this[kMessageStream].isMonitoringConnection = value;\n    }\n    get isMonitoringConnection() {\n        return this[kMessageStream].isMonitoringConnection;\n    }\n    get serviceId() {\n        return this.hello?.serviceId;\n    }\n    get loadBalanced() {\n        return this.description.loadBalanced;\n    }\n    get generation() {\n        return this[kGeneration] || 0;\n    }\n    set generation(generation) {\n        this[kGeneration] = generation;\n    }\n    get idleTime() {\n        return (0, utils_1.calculateDurationInMs)(this[kLastUseTime]);\n    }\n    get clusterTime() {\n        return this[kClusterTime];\n    }\n    get stream() {\n        return this.socket;\n    }\n    get hasSessionSupport() {\n        return this.description.logicalSessionTimeoutMinutes != null;\n    }\n    get supportsOpMsg() {\n        return (this.description != null &&\n            (0, utils_1.maxWireVersion)(this) >= 6 &&\n            !this.description.__nodejs_mock_server__);\n    }\n    markAvailable() {\n        this[kLastUseTime] = (0, utils_1.now)();\n    }\n    onError(error) {\n        this.cleanup(true, error);\n    }\n    onClose() {\n        const message = `connection ${this.id} to ${this.address} closed`;\n        this.cleanup(true, new error_1.MongoNetworkError(message));\n    }\n    onTimeout() {\n        this[kDelayedTimeoutId] = (0, timers_1.setTimeout)(() => {\n            const message = `connection ${this.id} to ${this.address} timed out`;\n            const beforeHandshake = this.hello == null;\n            this.cleanup(true, new error_1.MongoNetworkTimeoutError(message, { beforeHandshake }));\n        }, 1).unref(); // No need for this timer to hold the event loop open\n    }\n    onMessage(message) {\n        const delayedTimeoutId = this[kDelayedTimeoutId];\n        if (delayedTimeoutId != null) {\n            (0, timers_1.clearTimeout)(delayedTimeoutId);\n            this[kDelayedTimeoutId] = null;\n        }\n        const socketTimeoutMS = this.socket.timeout ?? 0;\n        this.socket.setTimeout(0);\n        // always emit the message, in case we are streaming\n        this.emit('message', message);\n        let operationDescription = this[kQueue].get(message.responseTo);\n        if (!operationDescription && this.isMonitoringConnection) {\n            // This is how we recover when the initial hello's requestId is not\n            // the responseTo when hello responses have been skipped:\n            // First check if the map is of invalid size\n            if (this[kQueue].size > 1) {\n                this.cleanup(true, new error_1.MongoRuntimeError(INVALID_QUEUE_SIZE));\n            }\n            else {\n                // Get the first orphaned operation description.\n                const entry = this[kQueue].entries().next();\n                if (entry.value != null) {\n                    const [requestId, orphaned] = entry.value;\n                    // If the orphaned operation description exists then set it.\n                    operationDescription = orphaned;\n                    // Remove the entry with the bad request id from the queue.\n                    this[kQueue].delete(requestId);\n                }\n            }\n        }\n        if (!operationDescription) {\n            return;\n        }\n        const callback = operationDescription.cb;\n        // SERVER-45775: For exhaust responses we should be able to use the same requestId to\n        // track response, however the server currently synthetically produces remote requests\n        // making the `responseTo` change on each response\n        this[kQueue].delete(message.responseTo);\n        if ('moreToCome' in message && message.moreToCome) {\n            // If the operation description check above does find an orphaned\n            // description and sets the operationDescription then this line will put one\n            // back in the queue with the correct requestId and will resolve not being able\n            // to find the next one via the responseTo of the next streaming hello.\n            this[kQueue].set(message.requestId, operationDescription);\n            this.socket.setTimeout(socketTimeoutMS);\n        }\n        try {\n            // Pass in the entire description because it has BSON parsing options\n            message.parse(operationDescription);\n        }\n        catch (err) {\n            // If this error is generated by our own code, it will already have the correct class applied\n            // if it is not, then it is coming from a catastrophic data parse failure or the BSON library\n            // in either case, it should not be wrapped\n            callback(err);\n            return;\n        }\n        if (message.documents[0]) {\n            const document = message.documents[0];\n            const session = operationDescription.session;\n            if (session) {\n                (0, sessions_1.updateSessionFromResponse)(session, document);\n            }\n            if (document.$clusterTime) {\n                this[kClusterTime] = document.$clusterTime;\n                this.emit(Connection.CLUSTER_TIME_RECEIVED, document.$clusterTime);\n            }\n            if (document.writeConcernError) {\n                callback(new error_1.MongoWriteConcernError(document.writeConcernError, document), document);\n                return;\n            }\n            if (document.ok === 0 || document.$err || document.errmsg || document.code) {\n                callback(new error_1.MongoServerError(document));\n                return;\n            }\n        }\n        callback(undefined, message.documents[0]);\n    }\n    destroy(options, callback) {\n        if (this.closed) {\n            process.nextTick(() => callback?.());\n            return;\n        }\n        if (typeof callback === 'function') {\n            this.once('close', () => process.nextTick(() => callback()));\n        }\n        // load balanced mode requires that these listeners remain on the connection\n        // after cleanup on timeouts, errors or close so we remove them before calling\n        // cleanup.\n        this.removeAllListeners(Connection.PINNED);\n        this.removeAllListeners(Connection.UNPINNED);\n        const message = `connection ${this.id} to ${this.address} closed`;\n        this.cleanup(options.force, new error_1.MongoNetworkError(message));\n    }\n    /**\n     * A method that cleans up the connection.  When `force` is true, this method\n     * forcibly destroys the socket.\n     *\n     * If an error is provided, any in-flight operations will be closed with the error.\n     *\n     * This method does nothing if the connection is already closed.\n     */\n    cleanup(force, error) {\n        if (this.closed) {\n            return;\n        }\n        this.closed = true;\n        const completeCleanup = () => {\n            for (const op of this[kQueue].values()) {\n                op.cb(error);\n            }\n            this[kQueue].clear();\n            this.emit(Connection.CLOSE);\n        };\n        this.socket.removeAllListeners();\n        this[kMessageStream].removeAllListeners();\n        this[kMessageStream].destroy();\n        if (force) {\n            this.socket.destroy();\n            completeCleanup();\n            return;\n        }\n        if (!this.socket.writableEnded) {\n            this.socket.end(() => {\n                this.socket.destroy();\n                completeCleanup();\n            });\n        }\n        else {\n            completeCleanup();\n        }\n    }\n    command(ns, command, options, callback) {\n        let cmd = { ...command };\n        const readPreference = (0, shared_1.getReadPreference)(options);\n        const session = options?.session;\n        let clusterTime = this.clusterTime;\n        if (this.serverApi) {\n            const { version, strict, deprecationErrors } = this.serverApi;\n            cmd.apiVersion = version;\n            if (strict != null)\n                cmd.apiStrict = strict;\n            if (deprecationErrors != null)\n                cmd.apiDeprecationErrors = deprecationErrors;\n        }\n        if (this.hasSessionSupport && session) {\n            if (session.clusterTime &&\n                clusterTime &&\n                session.clusterTime.clusterTime.greaterThan(clusterTime.clusterTime)) {\n                clusterTime = session.clusterTime;\n            }\n            const err = (0, sessions_1.applySession)(session, cmd, options);\n            if (err) {\n                return callback(err);\n            }\n        }\n        else if (session?.explicit) {\n            return callback(new error_1.MongoCompatibilityError('Current topology does not support sessions'));\n        }\n        // if we have a known cluster time, gossip it\n        if (clusterTime) {\n            cmd.$clusterTime = clusterTime;\n        }\n        if (\n        // @ts-expect-error ModernConnections cannot be passed as connections\n        (0, shared_1.isSharded)(this) &&\n            !this.supportsOpMsg &&\n            readPreference &&\n            readPreference.mode !== 'primary') {\n            cmd = {\n                $query: cmd,\n                $readPreference: readPreference.toJSON()\n            };\n        }\n        const commandOptions = Object.assign({\n            numberToSkip: 0,\n            numberToReturn: -1,\n            checkKeys: false,\n            // This value is not overridable\n            secondaryOk: readPreference.secondaryOk()\n        }, options);\n        const message = this.supportsOpMsg\n            ? new commands_1.OpMsgRequest(ns.db, cmd, commandOptions)\n            : new commands_1.OpQueryRequest(ns.db, cmd, commandOptions);\n        try {\n            write(this, message, commandOptions, callback);\n        }\n        catch (err) {\n            callback(err);\n        }\n    }\n}\n/** @event */\nModernConnection.COMMAND_STARTED = constants_1.COMMAND_STARTED;\n/** @event */\nModernConnection.COMMAND_SUCCEEDED = constants_1.COMMAND_SUCCEEDED;\n/** @event */\nModernConnection.COMMAND_FAILED = constants_1.COMMAND_FAILED;\n/** @event */\nModernConnection.CLUSTER_TIME_RECEIVED = constants_1.CLUSTER_TIME_RECEIVED;\n/** @event */\nModernConnection.CLOSE = constants_1.CLOSE;\n/** @event */\nModernConnection.MESSAGE = constants_1.MESSAGE;\n/** @event */\nModernConnection.PINNED = constants_1.PINNED;\n/** @event */\nModernConnection.UNPINNED = constants_1.UNPINNED;\nexports.ModernConnection = ModernConnection;\nconst kDefaultMaxBsonMessageSize = 1024 * 1024 * 16 * 4;\n/**\n * @internal\n *\n * This helper reads chucks of data out of a socket and buffers them until it has received a\n * full wire protocol message.\n *\n * By itself, produces an infinite async generator of wire protocol messages and consumers must end\n * the stream by calling `return` on the generator.\n *\n * Note that `for-await` loops call `return` automatically when the loop is exited.\n */\nasync function* readWireProtocolMessages(connection) {\n    const bufferPool = new utils_1.BufferPool();\n    const maxBsonMessageSize = connection.hello?.maxBsonMessageSize ?? kDefaultMaxBsonMessageSize;\n    for await (const [chunk] of (0, stream_1.on)(connection.socket, 'data')) {\n        bufferPool.append(chunk);\n        const sizeOfMessage = bufferPool.getInt32();\n        if (sizeOfMessage == null) {\n            continue;\n        }\n        if (sizeOfMessage < 0) {\n            throw new error_1.MongoParseError(`Invalid message size: ${sizeOfMessage}`);\n        }\n        if (sizeOfMessage > maxBsonMessageSize) {\n            throw new error_1.MongoParseError(`Invalid message size: ${sizeOfMessage}, max allowed: ${maxBsonMessageSize}`);\n        }\n        if (sizeOfMessage > bufferPool.length) {\n            continue;\n        }\n        yield bufferPool.read(sizeOfMessage);\n    }\n}\nexports.readWireProtocolMessages = readWireProtocolMessages;\n/**\n * @internal\n *\n * Writes an OP_MSG or OP_QUERY request to the socket, optionally compressing the command. This method\n * waits until the socket's buffer has emptied (the Nodejs socket `drain` event has fired).\n */\nasync function writeCommand(connection, command, options) {\n    const drained = (0, events_1.once)(connection.socket, 'drain');\n    const finalCommand = options.agreedCompressor === 'none' || !commands_1.OpCompressedRequest.canCompress(command)\n        ? command\n        : new commands_1.OpCompressedRequest(command, {\n            agreedCompressor: options.agreedCompressor ?? 'none',\n            zlibCompressionLevel: options.zlibCompressionLevel ?? 0\n        });\n    const buffer = Buffer.concat(await finalCommand.toBin());\n    connection.socket.push(buffer);\n    await drained;\n}\nexports.writeCommand = writeCommand;\n/**\n * @internal\n *\n * Returns an async generator that yields full wire protocol messages from the underlying socket.  This function\n * yields messages until `moreToCome` is false or not present in a response, or the caller cancels the request\n * by calling `return` on the generator.\n *\n * Note that `for-await` loops call `return` automatically when the loop is exited.\n */\nasync function* readMany(connection) {\n    for await (const message of readWireProtocolMessages(connection)) {\n        const response = await (0, compression_1.decompressResponse)(message);\n        yield response;\n        if (!('moreToCome' in response) || !response.moreToCome) {\n            return;\n        }\n    }\n}\nexports.readMany = readMany;\n/**\n * @internal\n *\n * Reads a single wire protocol message out of a connection.\n */\nasync function read(connection) {\n    for await (const value of readMany(connection)) {\n        return value;\n    }\n    throw new error_1.MongoRuntimeError('unable to read message off of connection');\n}\nexports.read = read;\n//# sourceMappingURL=connection.js.map"],"names":[],"mappings":"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"}},
    {"offset": {"line": 8014, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8018, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/cmap/auth/auth_provider.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AuthProvider = exports.AuthContext = void 0;\nconst error_1 = require(\"../../error\");\n/**\n * Context used during authentication\n * @internal\n */\nclass AuthContext {\n    constructor(connection, credentials, options) {\n        /** If the context is for reauthentication. */\n        this.reauthenticating = false;\n        this.connection = connection;\n        this.credentials = credentials;\n        this.options = options;\n    }\n}\nexports.AuthContext = AuthContext;\nclass AuthProvider {\n    /**\n     * Prepare the handshake document before the initial handshake.\n     *\n     * @param handshakeDoc - The document used for the initial handshake on a connection\n     * @param authContext - Context for authentication flow\n     */\n    async prepare(handshakeDoc, _authContext) {\n        return handshakeDoc;\n    }\n    /**\n     * Reauthenticate.\n     * @param context - The shared auth context.\n     */\n    async reauth(context) {\n        if (context.reauthenticating) {\n            throw new error_1.MongoRuntimeError('Reauthentication already in progress.');\n        }\n        try {\n            context.reauthenticating = true;\n            await this.auth(context);\n        }\n        finally {\n            context.reauthenticating = false;\n        }\n    }\n}\nexports.AuthProvider = AuthProvider;\n//# sourceMappingURL=auth_provider.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,YAAY,GAAG,QAAQ,WAAW,GAAG,KAAK;AAClD,MAAM,UAAU;AAChB;;;CAGC,GACD,MAAM;IACF,YAAY,UAAU,EAAE,WAAW,EAAE,OAAO,CAAE;QAC1C,4CAA4C,GAC5C,IAAI,CAAC,gBAAgB,GAAG;QACxB,IAAI,CAAC,UAAU,GAAG;QAClB,IAAI,CAAC,WAAW,GAAG;QACnB,IAAI,CAAC,OAAO,GAAG;IACnB;AACJ;AACA,QAAQ,WAAW,GAAG;AACtB,MAAM;IACF;;;;;KAKC,GACD,MAAM,QAAQ,YAAY,EAAE,YAAY,EAAE;QACtC,OAAO;IACX;IACA;;;KAGC,GACD,MAAM,OAAO,OAAO,EAAE;QAClB,IAAI,QAAQ,gBAAgB,EAAE;YAC1B,MAAM,IAAI,QAAQ,iBAAiB,CAAC;QACxC;QACA,IAAI;YACA,QAAQ,gBAAgB,GAAG;YAC3B,MAAM,IAAI,CAAC,IAAI,CAAC;QACpB,SACQ;YACJ,QAAQ,gBAAgB,GAAG;QAC/B;IACJ;AACJ;AACA,QAAQ,YAAY,GAAG,cACvB,yCAAyC"}},
    {"offset": {"line": 8061, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8065, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/cmap/auth/x509.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.X509 = void 0;\nconst error_1 = require(\"../../error\");\nconst utils_1 = require(\"../../utils\");\nconst auth_provider_1 = require(\"./auth_provider\");\nclass X509 extends auth_provider_1.AuthProvider {\n    async prepare(handshakeDoc, authContext) {\n        const { credentials } = authContext;\n        if (!credentials) {\n            throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n        }\n        return { ...handshakeDoc, speculativeAuthenticate: x509AuthenticateCommand(credentials) };\n    }\n    async auth(authContext) {\n        const connection = authContext.connection;\n        const credentials = authContext.credentials;\n        if (!credentials) {\n            throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n        }\n        const response = authContext.response;\n        if (response?.speculativeAuthenticate) {\n            return;\n        }\n        await connection.commandAsync((0, utils_1.ns)('$external.$cmd'), x509AuthenticateCommand(credentials), undefined);\n    }\n}\nexports.X509 = X509;\nfunction x509AuthenticateCommand(credentials) {\n    const command = { authenticate: 1, mechanism: 'MONGODB-X509' };\n    if (credentials.username) {\n        command.user = credentials.username;\n    }\n    return command;\n}\n//# sourceMappingURL=x509.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,IAAI,GAAG,KAAK;AACpB,MAAM,UAAU;AAChB,MAAM,UAAU;AAChB,MAAM,kBAAkB;AACxB,MAAM,aAAa,gBAAgB,YAAY;IAC3C,MAAM,QAAQ,YAAY,EAAE,WAAW,EAAE;QACrC,MAAM,EAAE,WAAW,EAAE,GAAG;QACxB,IAAI,CAAC,aAAa;YACd,MAAM,IAAI,QAAQ,4BAA4B,CAAC;QACnD;QACA,OAAO;YAAE,GAAG,YAAY;YAAE,yBAAyB,wBAAwB;QAAa;IAC5F;IACA,MAAM,KAAK,WAAW,EAAE;QACpB,MAAM,aAAa,YAAY,UAAU;QACzC,MAAM,cAAc,YAAY,WAAW;QAC3C,IAAI,CAAC,aAAa;YACd,MAAM,IAAI,QAAQ,4BAA4B,CAAC;QACnD;QACA,MAAM,WAAW,YAAY,QAAQ;QACrC,IAAI,UAAU,yBAAyB;YACnC;QACJ;QACA,MAAM,WAAW,YAAY,CAAC,AAAC,CAAA,GAAG,QAAQ,EAAE,AAAD,EAAG,mBAAmB,wBAAwB,cAAc;IAC3G;AACJ;AACA,QAAQ,IAAI,GAAG;AACf,SAAS,wBAAwB,WAAW;IACxC,MAAM,UAAU;QAAE,cAAc;QAAG,WAAW;IAAe;IAC7D,IAAI,YAAY,QAAQ,EAAE;QACtB,QAAQ,IAAI,GAAG,YAAY,QAAQ;IACvC;IACA,OAAO;AACX,EACA,gCAAgC"}},
    {"offset": {"line": 8108, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8112, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/cmap/auth/providers.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AUTH_MECHS_AUTH_SRC_EXTERNAL = exports.AuthMechanism = void 0;\n/** @public */\nexports.AuthMechanism = Object.freeze({\n    MONGODB_AWS: 'MONGODB-AWS',\n    MONGODB_CR: 'MONGODB-CR',\n    MONGODB_DEFAULT: 'DEFAULT',\n    MONGODB_GSSAPI: 'GSSAPI',\n    MONGODB_PLAIN: 'PLAIN',\n    MONGODB_SCRAM_SHA1: 'SCRAM-SHA-1',\n    MONGODB_SCRAM_SHA256: 'SCRAM-SHA-256',\n    MONGODB_X509: 'MONGODB-X509',\n    /** @experimental */\n    MONGODB_OIDC: 'MONGODB-OIDC'\n});\n/** @internal */\nexports.AUTH_MECHS_AUTH_SRC_EXTERNAL = new Set([\n    exports.AuthMechanism.MONGODB_GSSAPI,\n    exports.AuthMechanism.MONGODB_AWS,\n    exports.AuthMechanism.MONGODB_OIDC,\n    exports.AuthMechanism.MONGODB_X509\n]);\n//# sourceMappingURL=providers.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,4BAA4B,GAAG,QAAQ,aAAa,GAAG,KAAK;AACpE,YAAY,GACZ,QAAQ,aAAa,GAAG,OAAO,MAAM,CAAC;IAClC,aAAa;IACb,YAAY;IACZ,iBAAiB;IACjB,gBAAgB;IAChB,eAAe;IACf,oBAAoB;IACpB,sBAAsB;IACtB,cAAc;IACd,kBAAkB,GAClB,cAAc;AAClB;AACA,cAAc,GACd,QAAQ,4BAA4B,GAAG,IAAI,IAAI;IAC3C,QAAQ,aAAa,CAAC,cAAc;IACpC,QAAQ,aAAa,CAAC,WAAW;IACjC,QAAQ,aAAa,CAAC,YAAY;IAClC,QAAQ,aAAa,CAAC,YAAY;CACrC,GACD,qCAAqC"}},
    {"offset": {"line": 8134, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8138, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/cmap/auth/scram.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ScramSHA256 = exports.ScramSHA1 = void 0;\nconst saslprep_1 = require(\"@mongodb-js/saslprep\");\nconst crypto = require(\"crypto\");\nconst util_1 = require(\"util\");\nconst bson_1 = require(\"../../bson\");\nconst error_1 = require(\"../../error\");\nconst utils_1 = require(\"../../utils\");\nconst auth_provider_1 = require(\"./auth_provider\");\nconst providers_1 = require(\"./providers\");\nclass ScramSHA extends auth_provider_1.AuthProvider {\n    constructor(cryptoMethod) {\n        super();\n        this.cryptoMethod = cryptoMethod || 'sha1';\n        this.randomBytesAsync = (0, util_1.promisify)(crypto.randomBytes);\n    }\n    async prepare(handshakeDoc, authContext) {\n        const cryptoMethod = this.cryptoMethod;\n        const credentials = authContext.credentials;\n        if (!credentials) {\n            throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n        }\n        const nonce = await this.randomBytesAsync(24);\n        // store the nonce for later use\n        authContext.nonce = nonce;\n        const request = {\n            ...handshakeDoc,\n            speculativeAuthenticate: {\n                ...makeFirstMessage(cryptoMethod, credentials, nonce),\n                db: credentials.source\n            }\n        };\n        return request;\n    }\n    async auth(authContext) {\n        const { reauthenticating, response } = authContext;\n        if (response?.speculativeAuthenticate && !reauthenticating) {\n            return continueScramConversation(this.cryptoMethod, response.speculativeAuthenticate, authContext);\n        }\n        return executeScram(this.cryptoMethod, authContext);\n    }\n}\nfunction cleanUsername(username) {\n    return username.replace('=', '=3D').replace(',', '=2C');\n}\nfunction clientFirstMessageBare(username, nonce) {\n    // NOTE: This is done b/c Javascript uses UTF-16, but the server is hashing in UTF-8.\n    // Since the username is not sasl-prep-d, we need to do this here.\n    return Buffer.concat([\n        Buffer.from('n=', 'utf8'),\n        Buffer.from(username, 'utf8'),\n        Buffer.from(',r=', 'utf8'),\n        Buffer.from(nonce.toString('base64'), 'utf8')\n    ]);\n}\nfunction makeFirstMessage(cryptoMethod, credentials, nonce) {\n    const username = cleanUsername(credentials.username);\n    const mechanism = cryptoMethod === 'sha1' ? providers_1.AuthMechanism.MONGODB_SCRAM_SHA1 : providers_1.AuthMechanism.MONGODB_SCRAM_SHA256;\n    // NOTE: This is done b/c Javascript uses UTF-16, but the server is hashing in UTF-8.\n    // Since the username is not sasl-prep-d, we need to do this here.\n    return {\n        saslStart: 1,\n        mechanism,\n        payload: new bson_1.Binary(Buffer.concat([Buffer.from('n,,', 'utf8'), clientFirstMessageBare(username, nonce)])),\n        autoAuthorize: 1,\n        options: { skipEmptyExchange: true }\n    };\n}\nasync function executeScram(cryptoMethod, authContext) {\n    const { connection, credentials } = authContext;\n    if (!credentials) {\n        throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n    }\n    if (!authContext.nonce) {\n        throw new error_1.MongoInvalidArgumentError('AuthContext must contain a valid nonce property');\n    }\n    const nonce = authContext.nonce;\n    const db = credentials.source;\n    const saslStartCmd = makeFirstMessage(cryptoMethod, credentials, nonce);\n    const response = await connection.commandAsync((0, utils_1.ns)(`${db}.$cmd`), saslStartCmd, undefined);\n    await continueScramConversation(cryptoMethod, response, authContext);\n}\nasync function continueScramConversation(cryptoMethod, response, authContext) {\n    const connection = authContext.connection;\n    const credentials = authContext.credentials;\n    if (!credentials) {\n        throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n    }\n    if (!authContext.nonce) {\n        throw new error_1.MongoInvalidArgumentError('Unable to continue SCRAM without valid nonce');\n    }\n    const nonce = authContext.nonce;\n    const db = credentials.source;\n    const username = cleanUsername(credentials.username);\n    const password = credentials.password;\n    const processedPassword = cryptoMethod === 'sha256' ? (0, saslprep_1.saslprep)(password) : passwordDigest(username, password);\n    const payload = Buffer.isBuffer(response.payload)\n        ? new bson_1.Binary(response.payload)\n        : response.payload;\n    const dict = parsePayload(payload);\n    const iterations = parseInt(dict.i, 10);\n    if (iterations && iterations < 4096) {\n        // TODO(NODE-3483)\n        throw new error_1.MongoRuntimeError(`Server returned an invalid iteration count ${iterations}`);\n    }\n    const salt = dict.s;\n    const rnonce = dict.r;\n    if (rnonce.startsWith('nonce')) {\n        // TODO(NODE-3483)\n        throw new error_1.MongoRuntimeError(`Server returned an invalid nonce: ${rnonce}`);\n    }\n    // Set up start of proof\n    const withoutProof = `c=biws,r=${rnonce}`;\n    const saltedPassword = HI(processedPassword, Buffer.from(salt, 'base64'), iterations, cryptoMethod);\n    const clientKey = HMAC(cryptoMethod, saltedPassword, 'Client Key');\n    const serverKey = HMAC(cryptoMethod, saltedPassword, 'Server Key');\n    const storedKey = H(cryptoMethod, clientKey);\n    const authMessage = [\n        clientFirstMessageBare(username, nonce),\n        payload.toString('utf8'),\n        withoutProof\n    ].join(',');\n    const clientSignature = HMAC(cryptoMethod, storedKey, authMessage);\n    const clientProof = `p=${xor(clientKey, clientSignature)}`;\n    const clientFinal = [withoutProof, clientProof].join(',');\n    const serverSignature = HMAC(cryptoMethod, serverKey, authMessage);\n    const saslContinueCmd = {\n        saslContinue: 1,\n        conversationId: response.conversationId,\n        payload: new bson_1.Binary(Buffer.from(clientFinal))\n    };\n    const r = await connection.commandAsync((0, utils_1.ns)(`${db}.$cmd`), saslContinueCmd, undefined);\n    const parsedResponse = parsePayload(r.payload);\n    if (!compareDigest(Buffer.from(parsedResponse.v, 'base64'), serverSignature)) {\n        throw new error_1.MongoRuntimeError('Server returned an invalid signature');\n    }\n    if (r.done !== false) {\n        // If the server sends r.done === true we can save one RTT\n        return;\n    }\n    const retrySaslContinueCmd = {\n        saslContinue: 1,\n        conversationId: r.conversationId,\n        payload: Buffer.alloc(0)\n    };\n    await connection.commandAsync((0, utils_1.ns)(`${db}.$cmd`), retrySaslContinueCmd, undefined);\n}\nfunction parsePayload(payload) {\n    const payloadStr = payload.toString('utf8');\n    const dict = {};\n    const parts = payloadStr.split(',');\n    for (let i = 0; i < parts.length; i++) {\n        const valueParts = parts[i].split('=');\n        dict[valueParts[0]] = valueParts[1];\n    }\n    return dict;\n}\nfunction passwordDigest(username, password) {\n    if (typeof username !== 'string') {\n        throw new error_1.MongoInvalidArgumentError('Username must be a string');\n    }\n    if (typeof password !== 'string') {\n        throw new error_1.MongoInvalidArgumentError('Password must be a string');\n    }\n    if (password.length === 0) {\n        throw new error_1.MongoInvalidArgumentError('Password cannot be empty');\n    }\n    let md5;\n    try {\n        md5 = crypto.createHash('md5');\n    }\n    catch (err) {\n        if (crypto.getFips()) {\n            // This error is (slightly) more helpful than what comes from OpenSSL directly, e.g.\n            // 'Error: error:060800C8:digital envelope routines:EVP_DigestInit_ex:disabled for FIPS'\n            throw new Error('Auth mechanism SCRAM-SHA-1 is not supported in FIPS mode');\n        }\n        throw err;\n    }\n    md5.update(`${username}:mongo:${password}`, 'utf8');\n    return md5.digest('hex');\n}\n// XOR two buffers\nfunction xor(a, b) {\n    if (!Buffer.isBuffer(a)) {\n        a = Buffer.from(a);\n    }\n    if (!Buffer.isBuffer(b)) {\n        b = Buffer.from(b);\n    }\n    const length = Math.max(a.length, b.length);\n    const res = [];\n    for (let i = 0; i < length; i += 1) {\n        res.push(a[i] ^ b[i]);\n    }\n    return Buffer.from(res).toString('base64');\n}\nfunction H(method, text) {\n    return crypto.createHash(method).update(text).digest();\n}\nfunction HMAC(method, key, text) {\n    return crypto.createHmac(method, key).update(text).digest();\n}\nlet _hiCache = {};\nlet _hiCacheCount = 0;\nfunction _hiCachePurge() {\n    _hiCache = {};\n    _hiCacheCount = 0;\n}\nconst hiLengthMap = {\n    sha256: 32,\n    sha1: 20\n};\nfunction HI(data, salt, iterations, cryptoMethod) {\n    // omit the work if already generated\n    const key = [data, salt.toString('base64'), iterations].join('_');\n    if (_hiCache[key] != null) {\n        return _hiCache[key];\n    }\n    // generate the salt\n    const saltedData = crypto.pbkdf2Sync(data, salt, iterations, hiLengthMap[cryptoMethod], cryptoMethod);\n    // cache a copy to speed up the next lookup, but prevent unbounded cache growth\n    if (_hiCacheCount >= 200) {\n        _hiCachePurge();\n    }\n    _hiCache[key] = saltedData;\n    _hiCacheCount += 1;\n    return saltedData;\n}\nfunction compareDigest(lhs, rhs) {\n    if (lhs.length !== rhs.length) {\n        return false;\n    }\n    if (typeof crypto.timingSafeEqual === 'function') {\n        return crypto.timingSafeEqual(lhs, rhs);\n    }\n    let result = 0;\n    for (let i = 0; i < lhs.length; i++) {\n        result |= lhs[i] ^ rhs[i];\n    }\n    return result === 0;\n}\nclass ScramSHA1 extends ScramSHA {\n    constructor() {\n        super('sha1');\n    }\n}\nexports.ScramSHA1 = ScramSHA1;\nclass ScramSHA256 extends ScramSHA {\n    constructor() {\n        super('sha256');\n    }\n}\nexports.ScramSHA256 = ScramSHA256;\n//# sourceMappingURL=scram.js.map"],"names":[],"mappings":"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"}},
    {"offset": {"line": 8404, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8408, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/cmap/auth/plain.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Plain = void 0;\nconst bson_1 = require(\"../../bson\");\nconst error_1 = require(\"../../error\");\nconst utils_1 = require(\"../../utils\");\nconst auth_provider_1 = require(\"./auth_provider\");\nclass Plain extends auth_provider_1.AuthProvider {\n    async auth(authContext) {\n        const { connection, credentials } = authContext;\n        if (!credentials) {\n            throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n        }\n        const { username, password } = credentials;\n        const payload = new bson_1.Binary(Buffer.from(`\\x00${username}\\x00${password}`));\n        const command = {\n            saslStart: 1,\n            mechanism: 'PLAIN',\n            payload: payload,\n            autoAuthorize: 1\n        };\n        await connection.commandAsync((0, utils_1.ns)('$external.$cmd'), command, undefined);\n    }\n}\nexports.Plain = Plain;\n//# sourceMappingURL=plain.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,KAAK,GAAG,KAAK;AACrB,MAAM,SAAS;AACf,MAAM,UAAU;AAChB,MAAM,UAAU;AAChB,MAAM,kBAAkB;AACxB,MAAM,cAAc,gBAAgB,YAAY;IAC5C,MAAM,KAAK,WAAW,EAAE;QACpB,MAAM,EAAE,UAAU,EAAE,WAAW,EAAE,GAAG;QACpC,IAAI,CAAC,aAAa;YACd,MAAM,IAAI,QAAQ,4BAA4B,CAAC;QACnD;QACA,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG;QAC/B,MAAM,UAAU,IAAI,OAAO,MAAM,CAAC,OAAO,IAAI,CAAC,CAAC,IAAI,EAAE,SAAS,IAAI,EAAE,SAAS,CAAC;QAC9E,MAAM,UAAU;YACZ,WAAW;YACX,WAAW;YACX,SAAS;YACT,eAAe;QACnB;QACA,MAAM,WAAW,YAAY,CAAC,AAAC,CAAA,GAAG,QAAQ,EAAE,AAAD,EAAG,mBAAmB,SAAS;IAC9E;AACJ;AACA,QAAQ,KAAK,GAAG,OAChB,iCAAiC"}},
    {"offset": {"line": 8435, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8439, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/cache.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Cache = exports.ExpiringCacheEntry = void 0;\n/* 5 minutes in milliseconds */\nconst EXPIRATION_BUFFER_MS = 300000;\n/**\n * An entry in a cache that can expire in a certain amount of time.\n */\nclass ExpiringCacheEntry {\n    /**\n     * Create a new expiring token entry.\n     */\n    constructor(expiration) {\n        this.expiration = this.expirationTime(expiration);\n    }\n    /**\n     * The entry is still valid if the expiration is more than\n     * 5 minutes from the expiration time.\n     */\n    isValid() {\n        return this.expiration - Date.now() > EXPIRATION_BUFFER_MS;\n    }\n    /**\n     * Get an expiration time in milliseconds past epoch.\n     */\n    expirationTime(expiresInSeconds) {\n        return Date.now() + expiresInSeconds * 1000;\n    }\n}\nexports.ExpiringCacheEntry = ExpiringCacheEntry;\n/**\n * Base class for OIDC caches.\n */\nclass Cache {\n    /**\n     * Create a new cache.\n     */\n    constructor() {\n        this.entries = new Map();\n    }\n    /**\n     * Clear the cache.\n     */\n    clear() {\n        this.entries.clear();\n    }\n    /**\n     * Create a cache key from the address and username.\n     */\n    hashedCacheKey(address, username, callbackHash) {\n        return JSON.stringify([address, username, callbackHash]);\n    }\n}\nexports.Cache = Cache;\n//# sourceMappingURL=cache.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,KAAK,GAAG,QAAQ,kBAAkB,GAAG,KAAK;AAClD,6BAA6B,GAC7B,MAAM,uBAAuB;AAC7B;;CAEC,GACD,MAAM;IACF;;KAEC,GACD,YAAY,UAAU,CAAE;QACpB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,cAAc,CAAC;IAC1C;IACA;;;KAGC,GACD,UAAU;QACN,OAAO,IAAI,CAAC,UAAU,GAAG,KAAK,GAAG,KAAK;IAC1C;IACA;;KAEC,GACD,eAAe,gBAAgB,EAAE;QAC7B,OAAO,KAAK,GAAG,KAAK,mBAAmB;IAC3C;AACJ;AACA,QAAQ,kBAAkB,GAAG;AAC7B;;CAEC,GACD,MAAM;IACF;;KAEC,GACD,aAAc;QACV,IAAI,CAAC,OAAO,GAAG,IAAI;IACvB;IACA;;KAEC,GACD,QAAQ;QACJ,IAAI,CAAC,OAAO,CAAC,KAAK;IACtB;IACA;;KAEC,GACD,eAAe,OAAO,EAAE,QAAQ,EAAE,YAAY,EAAE;QAC5C,OAAO,KAAK,SAAS,CAAC;YAAC;YAAS;YAAU;SAAa;IAC3D;AACJ;AACA,QAAQ,KAAK,GAAG,OAChB,iCAAiC"}},
    {"offset": {"line": 8490, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8494, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/token_entry_cache.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TokenEntryCache = exports.TokenEntry = void 0;\nconst cache_1 = require(\"./cache\");\n/* Default expiration is now for when no expiration provided */\nconst DEFAULT_EXPIRATION_SECS = 0;\n/** @internal */\nclass TokenEntry extends cache_1.ExpiringCacheEntry {\n    /**\n     * Instantiate the entry.\n     */\n    constructor(tokenResult, serverInfo, expiration) {\n        super(expiration);\n        this.tokenResult = tokenResult;\n        this.serverInfo = serverInfo;\n    }\n}\nexports.TokenEntry = TokenEntry;\n/**\n * Cache of OIDC token entries.\n * @internal\n */\nclass TokenEntryCache extends cache_1.Cache {\n    /**\n     * Set an entry in the token cache.\n     */\n    addEntry(address, username, callbackHash, tokenResult, serverInfo) {\n        const entry = new TokenEntry(tokenResult, serverInfo, tokenResult.expiresInSeconds ?? DEFAULT_EXPIRATION_SECS);\n        this.entries.set(this.cacheKey(address, username, callbackHash), entry);\n        return entry;\n    }\n    /**\n     * Delete an entry from the cache.\n     */\n    deleteEntry(address, username, callbackHash) {\n        this.entries.delete(this.cacheKey(address, username, callbackHash));\n    }\n    /**\n     * Get an entry from the cache.\n     */\n    getEntry(address, username, callbackHash) {\n        return this.entries.get(this.cacheKey(address, username, callbackHash));\n    }\n    /**\n     * Delete all expired entries from the cache.\n     */\n    deleteExpiredEntries() {\n        for (const [key, entry] of this.entries) {\n            if (!entry.isValid()) {\n                this.entries.delete(key);\n            }\n        }\n    }\n    /**\n     * Create a cache key from the address and username.\n     */\n    cacheKey(address, username, callbackHash) {\n        return this.hashedCacheKey(address, username, callbackHash);\n    }\n}\nexports.TokenEntryCache = TokenEntryCache;\n//# sourceMappingURL=token_entry_cache.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,eAAe,GAAG,QAAQ,UAAU,GAAG,KAAK;AACpD,MAAM,UAAU;AAChB,6DAA6D,GAC7D,MAAM,0BAA0B;AAChC,cAAc,GACd,MAAM,mBAAmB,QAAQ,kBAAkB;IAC/C;;KAEC,GACD,YAAY,WAAW,EAAE,UAAU,EAAE,UAAU,CAAE;QAC7C,KAAK,CAAC;QACN,IAAI,CAAC,WAAW,GAAG;QACnB,IAAI,CAAC,UAAU,GAAG;IACtB;AACJ;AACA,QAAQ,UAAU,GAAG;AACrB;;;CAGC,GACD,MAAM,wBAAwB,QAAQ,KAAK;IACvC;;KAEC,GACD,SAAS,OAAO,EAAE,QAAQ,EAAE,YAAY,EAAE,WAAW,EAAE,UAAU,EAAE;QAC/D,MAAM,QAAQ,IAAI,WAAW,aAAa,YAAY,YAAY,gBAAgB,IAAI;QACtF,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,UAAU,eAAe;QACjE,OAAO;IACX;IACA;;KAEC,GACD,YAAY,OAAO,EAAE,QAAQ,EAAE,YAAY,EAAE;QACzC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,UAAU;IACzD;IACA;;KAEC,GACD,SAAS,OAAO,EAAE,QAAQ,EAAE,YAAY,EAAE;QACtC,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,UAAU;IAC7D;IACA;;KAEC,GACD,uBAAuB;QACnB,KAAK,MAAM,CAAC,KAAK,MAAM,IAAI,IAAI,CAAC,OAAO,CAAE;YACrC,IAAI,CAAC,MAAM,OAAO,IAAI;gBAClB,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;YACxB;QACJ;IACJ;IACA;;KAEC,GACD,SAAS,OAAO,EAAE,QAAQ,EAAE,YAAY,EAAE;QACtC,OAAO,IAAI,CAAC,cAAc,CAAC,SAAS,UAAU;IAClD;AACJ;AACA,QAAQ,eAAe,GAAG,iBAC1B,6CAA6C"}},
    {"offset": {"line": 8548, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8552, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/callback_lock_cache.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CallbackLockCache = void 0;\nconst error_1 = require(\"../../../error\");\nconst cache_1 = require(\"./cache\");\n/** Error message for when request callback is missing. */\nconst REQUEST_CALLBACK_REQUIRED_ERROR = 'Auth mechanism property REQUEST_TOKEN_CALLBACK is required.';\n/* Counter for function \"hashes\".*/\nlet FN_HASH_COUNTER = 0;\n/* No function present function */\nconst NO_FUNCTION = async () => ({ accessToken: 'test' });\n/* The map of function hashes */\nconst FN_HASHES = new WeakMap();\n/* Put the no function hash in the map. */\nFN_HASHES.set(NO_FUNCTION, FN_HASH_COUNTER);\n/**\n * A cache of request and refresh callbacks per server/user.\n */\nclass CallbackLockCache extends cache_1.Cache {\n    /**\n     * Get the callbacks for the connection and credentials. If an entry does not\n     * exist a new one will get set.\n     */\n    getEntry(connection, credentials) {\n        const requestCallback = credentials.mechanismProperties.REQUEST_TOKEN_CALLBACK;\n        const refreshCallback = credentials.mechanismProperties.REFRESH_TOKEN_CALLBACK;\n        if (!requestCallback) {\n            throw new error_1.MongoInvalidArgumentError(REQUEST_CALLBACK_REQUIRED_ERROR);\n        }\n        const callbackHash = hashFunctions(requestCallback, refreshCallback);\n        const key = this.cacheKey(connection.address, credentials.username, callbackHash);\n        const entry = this.entries.get(key);\n        if (entry) {\n            return entry;\n        }\n        return this.addEntry(key, callbackHash, requestCallback, refreshCallback);\n    }\n    /**\n     * Set locked callbacks on for connection and credentials.\n     */\n    addEntry(key, callbackHash, requestCallback, refreshCallback) {\n        const entry = {\n            requestCallback: withLock(requestCallback),\n            refreshCallback: refreshCallback ? withLock(refreshCallback) : undefined,\n            callbackHash: callbackHash\n        };\n        this.entries.set(key, entry);\n        return entry;\n    }\n    /**\n     * Create a cache key from the address and username.\n     */\n    cacheKey(address, username, callbackHash) {\n        return this.hashedCacheKey(address, username, callbackHash);\n    }\n}\nexports.CallbackLockCache = CallbackLockCache;\n/**\n * Ensure the callback is only executed one at a time.\n */\nfunction withLock(callback) {\n    let lock = Promise.resolve();\n    return async (info, context) => {\n        await lock;\n        lock = lock.then(() => callback(info, context));\n        return lock;\n    };\n}\n/**\n * Get the hash string for the request and refresh functions.\n */\nfunction hashFunctions(requestFn, refreshFn) {\n    let requestHash = FN_HASHES.get(requestFn);\n    let refreshHash = FN_HASHES.get(refreshFn ?? NO_FUNCTION);\n    if (requestHash == null) {\n        // Create a new one for the function and put it in the map.\n        FN_HASH_COUNTER++;\n        requestHash = FN_HASH_COUNTER;\n        FN_HASHES.set(requestFn, FN_HASH_COUNTER);\n    }\n    if (refreshHash == null && refreshFn) {\n        // Create a new one for the function and put it in the map.\n        FN_HASH_COUNTER++;\n        refreshHash = FN_HASH_COUNTER;\n        FN_HASHES.set(refreshFn, FN_HASH_COUNTER);\n    }\n    return `${requestHash}-${refreshHash}`;\n}\n//# sourceMappingURL=callback_lock_cache.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,iBAAiB,GAAG,KAAK;AACjC,MAAM,UAAU;AAChB,MAAM,UAAU;AAChB,wDAAwD,GACxD,MAAM,kCAAkC;AACxC,iCAAiC,GACjC,IAAI,kBAAkB;AACtB,gCAAgC,GAChC,MAAM,cAAc,UAAY,CAAC;QAAE,aAAa;IAAO,CAAC;AACxD,8BAA8B,GAC9B,MAAM,YAAY,IAAI;AACtB,wCAAwC,GACxC,UAAU,GAAG,CAAC,aAAa;AAC3B;;CAEC,GACD,MAAM,0BAA0B,QAAQ,KAAK;IACzC;;;KAGC,GACD,SAAS,UAAU,EAAE,WAAW,EAAE;QAC9B,MAAM,kBAAkB,YAAY,mBAAmB,CAAC,sBAAsB;QAC9E,MAAM,kBAAkB,YAAY,mBAAmB,CAAC,sBAAsB;QAC9E,IAAI,CAAC,iBAAiB;YAClB,MAAM,IAAI,QAAQ,yBAAyB,CAAC;QAChD;QACA,MAAM,eAAe,cAAc,iBAAiB;QACpD,MAAM,MAAM,IAAI,CAAC,QAAQ,CAAC,WAAW,OAAO,EAAE,YAAY,QAAQ,EAAE;QACpE,MAAM,QAAQ,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC;QAC/B,IAAI,OAAO;YACP,OAAO;QACX;QACA,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,cAAc,iBAAiB;IAC7D;IACA;;KAEC,GACD,SAAS,GAAG,EAAE,YAAY,EAAE,eAAe,EAAE,eAAe,EAAE;QAC1D,MAAM,QAAQ;YACV,iBAAiB,SAAS;YAC1B,iBAAiB,kBAAkB,SAAS,mBAAmB;YAC/D,cAAc;QAClB;QACA,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK;QACtB,OAAO;IACX;IACA;;KAEC,GACD,SAAS,OAAO,EAAE,QAAQ,EAAE,YAAY,EAAE;QACtC,OAAO,IAAI,CAAC,cAAc,CAAC,SAAS,UAAU;IAClD;AACJ;AACA,QAAQ,iBAAiB,GAAG;AAC5B;;CAEC,GACD,SAAS,SAAS,QAAQ;IACtB,IAAI,OAAO,QAAQ,OAAO;IAC1B,OAAO,OAAO,MAAM;QAChB,MAAM;QACN,OAAO,KAAK,IAAI,CAAC,IAAM,SAAS,MAAM;QACtC,OAAO;IACX;AACJ;AACA;;CAEC,GACD,SAAS,cAAc,SAAS,EAAE,SAAS;IACvC,IAAI,cAAc,UAAU,GAAG,CAAC;IAChC,IAAI,cAAc,UAAU,GAAG,CAAC,aAAa;IAC7C,IAAI,eAAe,MAAM;QACrB,2DAA2D;QAC3D;QACA,cAAc;QACd,UAAU,GAAG,CAAC,WAAW;IAC7B;IACA,IAAI,eAAe,QAAQ,WAAW;QAClC,2DAA2D;QAC3D;QACA,cAAc;QACd,UAAU,GAAG,CAAC,WAAW;IAC7B;IACA,OAAO,CAAC,EAAE,YAAY,CAAC,EAAE,YAAY,CAAC;AAC1C,EACA,+CAA+C"}},
    {"offset": {"line": 8633, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8637, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/callback_workflow.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CallbackWorkflow = void 0;\nconst bson_1 = require(\"bson\");\nconst error_1 = require(\"../../../error\");\nconst utils_1 = require(\"../../../utils\");\nconst providers_1 = require(\"../providers\");\nconst callback_lock_cache_1 = require(\"./callback_lock_cache\");\nconst token_entry_cache_1 = require(\"./token_entry_cache\");\n/** The current version of OIDC implementation. */\nconst OIDC_VERSION = 0;\n/** 5 minutes in seconds */\nconst TIMEOUT_S = 300;\n/** Properties allowed on results of callbacks. */\nconst RESULT_PROPERTIES = ['accessToken', 'expiresInSeconds', 'refreshToken'];\n/** Error message when the callback result is invalid. */\nconst CALLBACK_RESULT_ERROR = 'User provided OIDC callbacks must return a valid object with an accessToken.';\n/**\n * OIDC implementation of a callback based workflow.\n * @internal\n */\nclass CallbackWorkflow {\n    /**\n     * Instantiate the workflow\n     */\n    constructor() {\n        this.cache = new token_entry_cache_1.TokenEntryCache();\n        this.callbackCache = new callback_lock_cache_1.CallbackLockCache();\n    }\n    /**\n     * Get the document to add for speculative authentication. This also needs\n     * to add a db field from the credentials source.\n     */\n    async speculativeAuth(credentials) {\n        const document = startCommandDocument(credentials);\n        document.db = credentials.source;\n        return { speculativeAuthenticate: document };\n    }\n    /**\n     * Execute the OIDC callback workflow.\n     */\n    async execute(connection, credentials, reauthenticating, response) {\n        // Get the callbacks with locks from the callback lock cache.\n        const { requestCallback, refreshCallback, callbackHash } = this.callbackCache.getEntry(connection, credentials);\n        // Look for an existing entry in the cache.\n        const entry = this.cache.getEntry(connection.address, credentials.username, callbackHash);\n        let result;\n        if (entry) {\n            // Reauthentication cannot use a token from the cache since the server has\n            // stated it is invalid by the request for reauthentication.\n            if (entry.isValid() && !reauthenticating) {\n                // Presence of a valid cache entry means we can skip to the finishing step.\n                result = await this.finishAuthentication(connection, credentials, entry.tokenResult, response?.speculativeAuthenticate?.conversationId);\n            }\n            else {\n                // Presence of an expired cache entry means we must fetch a new one and\n                // then execute the final step.\n                const tokenResult = await this.fetchAccessToken(connection, credentials, entry.serverInfo, reauthenticating, callbackHash, requestCallback, refreshCallback);\n                try {\n                    result = await this.finishAuthentication(connection, credentials, tokenResult, reauthenticating ? undefined : response?.speculativeAuthenticate?.conversationId);\n                }\n                catch (error) {\n                    // If we are reauthenticating and this errors with reauthentication\n                    // required, we need to do the entire process over again and clear\n                    // the cache entry.\n                    if (reauthenticating &&\n                        error instanceof error_1.MongoError &&\n                        error.code === error_1.MONGODB_ERROR_CODES.Reauthenticate) {\n                        this.cache.deleteEntry(connection.address, credentials.username, callbackHash);\n                        result = await this.execute(connection, credentials, reauthenticating);\n                    }\n                    else {\n                        throw error;\n                    }\n                }\n            }\n        }\n        else {\n            // No entry in the cache requires us to do all authentication steps\n            // from start to finish, including getting a fresh token for the cache.\n            const startDocument = await this.startAuthentication(connection, credentials, reauthenticating, response);\n            const conversationId = startDocument.conversationId;\n            const serverResult = bson_1.BSON.deserialize(startDocument.payload.buffer);\n            const tokenResult = await this.fetchAccessToken(connection, credentials, serverResult, reauthenticating, callbackHash, requestCallback, refreshCallback);\n            result = await this.finishAuthentication(connection, credentials, tokenResult, conversationId);\n        }\n        return result;\n    }\n    /**\n     * Starts the callback authentication process. If there is a speculative\n     * authentication document from the initial handshake, then we will use that\n     * value to get the issuer, otherwise we will send the saslStart command.\n     */\n    async startAuthentication(connection, credentials, reauthenticating, response) {\n        let result;\n        if (!reauthenticating && response?.speculativeAuthenticate) {\n            result = response.speculativeAuthenticate;\n        }\n        else {\n            result = await connection.commandAsync((0, utils_1.ns)(credentials.source), startCommandDocument(credentials), undefined);\n        }\n        return result;\n    }\n    /**\n     * Finishes the callback authentication process.\n     */\n    async finishAuthentication(connection, credentials, tokenResult, conversationId) {\n        const result = await connection.commandAsync((0, utils_1.ns)(credentials.source), finishCommandDocument(tokenResult.accessToken, conversationId), undefined);\n        return result;\n    }\n    /**\n     * Fetches an access token using either the request or refresh callbacks and\n     * puts it in the cache.\n     */\n    async fetchAccessToken(connection, credentials, serverInfo, reauthenticating, callbackHash, requestCallback, refreshCallback) {\n        // Get the token from the cache.\n        const entry = this.cache.getEntry(connection.address, credentials.username, callbackHash);\n        let result;\n        const context = { timeoutSeconds: TIMEOUT_S, version: OIDC_VERSION };\n        // Check if there's a token in the cache.\n        if (entry) {\n            // If the cache entry is valid, return the token result.\n            if (entry.isValid() && !reauthenticating) {\n                return entry.tokenResult;\n            }\n            // If the cache entry is not valid, remove it from the cache and first attempt\n            // to use the refresh callback to get a new token. If no refresh callback\n            // exists, then fallback to the request callback.\n            if (refreshCallback) {\n                context.refreshToken = entry.tokenResult.refreshToken;\n                result = await refreshCallback(serverInfo, context);\n            }\n            else {\n                result = await requestCallback(serverInfo, context);\n            }\n        }\n        else {\n            // With no token in the cache we use the request callback.\n            result = await requestCallback(serverInfo, context);\n        }\n        // Validate that the result returned by the callback is acceptable. If it is not\n        // we must clear the token result from the cache.\n        if (isCallbackResultInvalid(result)) {\n            this.cache.deleteEntry(connection.address, credentials.username, callbackHash);\n            throw new error_1.MongoMissingCredentialsError(CALLBACK_RESULT_ERROR);\n        }\n        // Cleanup the cache.\n        this.cache.deleteExpiredEntries();\n        // Put the new entry into the cache.\n        this.cache.addEntry(connection.address, credentials.username || '', callbackHash, result, serverInfo);\n        return result;\n    }\n}\nexports.CallbackWorkflow = CallbackWorkflow;\n/**\n * Generate the finishing command document for authentication. Will be a\n * saslStart or saslContinue depending on the presence of a conversation id.\n */\nfunction finishCommandDocument(token, conversationId) {\n    if (conversationId != null && typeof conversationId === 'number') {\n        return {\n            saslContinue: 1,\n            conversationId: conversationId,\n            payload: new bson_1.Binary(bson_1.BSON.serialize({ jwt: token }))\n        };\n    }\n    // saslContinue requires a conversationId in the command to be valid so in this\n    // case the server allows \"step two\" to actually be a saslStart with the token\n    // as the jwt since the use of the cached value has no correlating conversating\n    // on the particular connection.\n    return {\n        saslStart: 1,\n        mechanism: providers_1.AuthMechanism.MONGODB_OIDC,\n        payload: new bson_1.Binary(bson_1.BSON.serialize({ jwt: token }))\n    };\n}\n/**\n * Determines if a result returned from a request or refresh callback\n * function is invalid. This means the result is nullish, doesn't contain\n * the accessToken required field, and does not contain extra fields.\n */\nfunction isCallbackResultInvalid(tokenResult) {\n    if (tokenResult == null || typeof tokenResult !== 'object')\n        return true;\n    if (!('accessToken' in tokenResult))\n        return true;\n    return !Object.getOwnPropertyNames(tokenResult).every(prop => RESULT_PROPERTIES.includes(prop));\n}\n/**\n * Generate the saslStart command document.\n */\nfunction startCommandDocument(credentials) {\n    const payload = {};\n    if (credentials.username) {\n        payload.n = credentials.username;\n    }\n    return {\n        saslStart: 1,\n        autoAuthorize: 1,\n        mechanism: providers_1.AuthMechanism.MONGODB_OIDC,\n        payload: new bson_1.Binary(bson_1.BSON.serialize(payload))\n    };\n}\n//# sourceMappingURL=callback_workflow.js.map"],"names":[],"mappings":"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"}},
    {"offset": {"line": 8830, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8834, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/service_workflow.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.commandDocument = exports.ServiceWorkflow = void 0;\nconst bson_1 = require(\"bson\");\nconst utils_1 = require(\"../../../utils\");\nconst providers_1 = require(\"../providers\");\n/**\n * Common behaviour for OIDC device workflows.\n * @internal\n */\nclass ServiceWorkflow {\n    /**\n     * Execute the workflow. Looks for AWS_WEB_IDENTITY_TOKEN_FILE in the environment\n     * and then attempts to read the token from that path.\n     */\n    async execute(connection, credentials) {\n        const token = await this.getToken(credentials);\n        const command = commandDocument(token);\n        return connection.commandAsync((0, utils_1.ns)(credentials.source), command, undefined);\n    }\n    /**\n     * Get the document to add for speculative authentication.\n     */\n    async speculativeAuth(credentials) {\n        const token = await this.getToken(credentials);\n        const document = commandDocument(token);\n        document.db = credentials.source;\n        return { speculativeAuthenticate: document };\n    }\n}\nexports.ServiceWorkflow = ServiceWorkflow;\n/**\n * Create the saslStart command document.\n */\nfunction commandDocument(token) {\n    return {\n        saslStart: 1,\n        mechanism: providers_1.AuthMechanism.MONGODB_OIDC,\n        payload: bson_1.BSON.serialize({ jwt: token })\n    };\n}\nexports.commandDocument = commandDocument;\n//# sourceMappingURL=service_workflow.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,eAAe,GAAG,QAAQ,eAAe,GAAG,KAAK;AACzD,MAAM,SAAS;AACf,MAAM,UAAU;AAChB,MAAM,cAAc;AACpB;;;CAGC,GACD,MAAM;IACF;;;KAGC,GACD,MAAM,QAAQ,UAAU,EAAE,WAAW,EAAE;QACnC,MAAM,QAAQ,MAAM,IAAI,CAAC,QAAQ,CAAC;QAClC,MAAM,UAAU,gBAAgB;QAChC,OAAO,WAAW,YAAY,CAAC,AAAC,CAAA,GAAG,QAAQ,EAAE,AAAD,EAAG,YAAY,MAAM,GAAG,SAAS;IACjF;IACA;;KAEC,GACD,MAAM,gBAAgB,WAAW,EAAE;QAC/B,MAAM,QAAQ,MAAM,IAAI,CAAC,QAAQ,CAAC;QAClC,MAAM,WAAW,gBAAgB;QACjC,SAAS,EAAE,GAAG,YAAY,MAAM;QAChC,OAAO;YAAE,yBAAyB;QAAS;IAC/C;AACJ;AACA,QAAQ,eAAe,GAAG;AAC1B;;CAEC,GACD,SAAS,gBAAgB,KAAK;IAC1B,OAAO;QACH,WAAW;QACX,WAAW,YAAY,aAAa,CAAC,YAAY;QACjD,SAAS,OAAO,IAAI,CAAC,SAAS,CAAC;YAAE,KAAK;QAAM;IAChD;AACJ;AACA,QAAQ,eAAe,GAAG,iBAC1B,4CAA4C"}},
    {"offset": {"line": 8878, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8882, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/azure_token_cache.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AzureTokenCache = exports.AzureTokenEntry = void 0;\nconst cache_1 = require(\"./cache\");\n/** @internal */\nclass AzureTokenEntry extends cache_1.ExpiringCacheEntry {\n    /**\n     * Instantiate the entry.\n     */\n    constructor(token, expiration) {\n        super(expiration);\n        this.token = token;\n    }\n}\nexports.AzureTokenEntry = AzureTokenEntry;\n/**\n * A cache of access tokens from Azure.\n * @internal\n */\nclass AzureTokenCache extends cache_1.Cache {\n    /**\n     * Add an entry to the cache.\n     */\n    addEntry(tokenAudience, token) {\n        const entry = new AzureTokenEntry(token.access_token, token.expires_in);\n        this.entries.set(tokenAudience, entry);\n        return entry;\n    }\n    /**\n     * Create a cache key.\n     */\n    cacheKey(tokenAudience) {\n        return tokenAudience;\n    }\n    /**\n     * Delete an entry from the cache.\n     */\n    deleteEntry(tokenAudience) {\n        this.entries.delete(tokenAudience);\n    }\n    /**\n     * Get an Azure token entry from the cache.\n     */\n    getEntry(tokenAudience) {\n        return this.entries.get(tokenAudience);\n    }\n}\nexports.AzureTokenCache = AzureTokenCache;\n//# sourceMappingURL=azure_token_cache.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,eAAe,GAAG,QAAQ,eAAe,GAAG,KAAK;AACzD,MAAM,UAAU;AAChB,cAAc,GACd,MAAM,wBAAwB,QAAQ,kBAAkB;IACpD;;KAEC,GACD,YAAY,KAAK,EAAE,UAAU,CAAE;QAC3B,KAAK,CAAC;QACN,IAAI,CAAC,KAAK,GAAG;IACjB;AACJ;AACA,QAAQ,eAAe,GAAG;AAC1B;;;CAGC,GACD,MAAM,wBAAwB,QAAQ,KAAK;IACvC;;KAEC,GACD,SAAS,aAAa,EAAE,KAAK,EAAE;QAC3B,MAAM,QAAQ,IAAI,gBAAgB,MAAM,YAAY,EAAE,MAAM,UAAU;QACtE,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe;QAChC,OAAO;IACX;IACA;;KAEC,GACD,SAAS,aAAa,EAAE;QACpB,OAAO;IACX;IACA;;KAEC,GACD,YAAY,aAAa,EAAE;QACvB,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;IACxB;IACA;;KAEC,GACD,SAAS,aAAa,EAAE;QACpB,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC;IAC5B;AACJ;AACA,QAAQ,eAAe,GAAG,iBAC1B,6CAA6C"}},
    {"offset": {"line": 8925, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8929, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/azure_service_workflow.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AzureServiceWorkflow = void 0;\nconst error_1 = require(\"../../../error\");\nconst utils_1 = require(\"../../../utils\");\nconst azure_token_cache_1 = require(\"./azure_token_cache\");\nconst service_workflow_1 = require(\"./service_workflow\");\n/** Base URL for getting Azure tokens. */\nconst AZURE_BASE_URL = 'http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01';\n/** Azure request headers. */\nconst AZURE_HEADERS = Object.freeze({ Metadata: 'true', Accept: 'application/json' });\n/** Invalid endpoint result error. */\nconst ENDPOINT_RESULT_ERROR = 'Azure endpoint did not return a value with only access_token and expires_in properties';\n/** Error for when the token audience is missing in the environment. */\nconst TOKEN_AUDIENCE_MISSING_ERROR = 'TOKEN_AUDIENCE must be set in the auth mechanism properties when PROVIDER_NAME is azure.';\n/**\n * Device workflow implementation for Azure.\n *\n * @internal\n */\nclass AzureServiceWorkflow extends service_workflow_1.ServiceWorkflow {\n    constructor() {\n        super(...arguments);\n        this.cache = new azure_token_cache_1.AzureTokenCache();\n    }\n    /**\n     * Get the token from the environment.\n     */\n    async getToken(credentials) {\n        const tokenAudience = credentials?.mechanismProperties.TOKEN_AUDIENCE;\n        if (!tokenAudience) {\n            throw new error_1.MongoAzureError(TOKEN_AUDIENCE_MISSING_ERROR);\n        }\n        let token;\n        const entry = this.cache.getEntry(tokenAudience);\n        if (entry?.isValid()) {\n            token = entry.token;\n        }\n        else {\n            this.cache.deleteEntry(tokenAudience);\n            const response = await getAzureTokenData(tokenAudience);\n            if (!isEndpointResultValid(response)) {\n                throw new error_1.MongoAzureError(ENDPOINT_RESULT_ERROR);\n            }\n            this.cache.addEntry(tokenAudience, response);\n            token = response.access_token;\n        }\n        return token;\n    }\n}\nexports.AzureServiceWorkflow = AzureServiceWorkflow;\n/**\n * Hit the Azure endpoint to get the token data.\n */\nasync function getAzureTokenData(tokenAudience) {\n    const url = `${AZURE_BASE_URL}&resource=${tokenAudience}`;\n    const data = await (0, utils_1.request)(url, {\n        json: true,\n        headers: AZURE_HEADERS\n    });\n    return data;\n}\n/**\n * Determines if a result returned from the endpoint is valid.\n * This means the result is not nullish, contains the access_token required field\n * and the expires_in required field.\n */\nfunction isEndpointResultValid(token) {\n    if (token == null || typeof token !== 'object')\n        return false;\n    return 'access_token' in token && 'expires_in' in token;\n}\n//# sourceMappingURL=azure_service_workflow.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,oBAAoB,GAAG,KAAK;AACpC,MAAM,UAAU;AAChB,MAAM,UAAU;AAChB,MAAM,sBAAsB;AAC5B,MAAM,qBAAqB;AAC3B,uCAAuC,GACvC,MAAM,iBAAiB;AACvB,2BAA2B,GAC3B,MAAM,gBAAgB,OAAO,MAAM,CAAC;IAAE,UAAU;IAAQ,QAAQ;AAAmB;AACnF,mCAAmC,GACnC,MAAM,wBAAwB;AAC9B,qEAAqE,GACrE,MAAM,+BAA+B;AACrC;;;;CAIC,GACD,MAAM,6BAA6B,mBAAmB,eAAe;IACjE,aAAc;QACV,KAAK,IAAI;QACT,IAAI,CAAC,KAAK,GAAG,IAAI,oBAAoB,eAAe;IACxD;IACA;;KAEC,GACD,MAAM,SAAS,WAAW,EAAE;QACxB,MAAM,gBAAgB,aAAa,oBAAoB;QACvD,IAAI,CAAC,eAAe;YAChB,MAAM,IAAI,QAAQ,eAAe,CAAC;QACtC;QACA,IAAI;QACJ,MAAM,QAAQ,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;QAClC,IAAI,OAAO,WAAW;YAClB,QAAQ,MAAM,KAAK;QACvB,OACK;YACD,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC;YACvB,MAAM,WAAW,MAAM,kBAAkB;YACzC,IAAI,CAAC,sBAAsB,WAAW;gBAClC,MAAM,IAAI,QAAQ,eAAe,CAAC;YACtC;YACA,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,eAAe;YACnC,QAAQ,SAAS,YAAY;QACjC;QACA,OAAO;IACX;AACJ;AACA,QAAQ,oBAAoB,GAAG;AAC/B;;CAEC,GACD,eAAe,kBAAkB,aAAa;IAC1C,MAAM,MAAM,CAAC,EAAE,eAAe,UAAU,EAAE,cAAc,CAAC;IACzD,MAAM,OAAO,MAAM,AAAC,CAAA,GAAG,QAAQ,OAAO,AAAD,EAAG,KAAK;QACzC,MAAM;QACN,SAAS;IACb;IACA,OAAO;AACX;AACA;;;;CAIC,GACD,SAAS,sBAAsB,KAAK;IAChC,IAAI,SAAS,QAAQ,OAAO,UAAU,UAClC,OAAO;IACX,OAAO,kBAAkB,SAAS,gBAAgB;AACtD,EACA,kDAAkD"}},
    {"offset": {"line": 8996, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9000, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/aws_service_workflow.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AwsServiceWorkflow = void 0;\nconst fs = require(\"fs\");\nconst error_1 = require(\"../../../error\");\nconst service_workflow_1 = require(\"./service_workflow\");\n/** Error for when the token is missing in the environment. */\nconst TOKEN_MISSING_ERROR = 'AWS_WEB_IDENTITY_TOKEN_FILE must be set in the environment.';\n/**\n * Device workflow implementation for AWS.\n *\n * @internal\n */\nclass AwsServiceWorkflow extends service_workflow_1.ServiceWorkflow {\n    constructor() {\n        super();\n    }\n    /**\n     * Get the token from the environment.\n     */\n    async getToken() {\n        const tokenFile = process.env.AWS_WEB_IDENTITY_TOKEN_FILE;\n        if (!tokenFile) {\n            throw new error_1.MongoAWSError(TOKEN_MISSING_ERROR);\n        }\n        return fs.promises.readFile(tokenFile, 'utf8');\n    }\n}\nexports.AwsServiceWorkflow = AwsServiceWorkflow;\n//# sourceMappingURL=aws_service_workflow.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,kBAAkB,GAAG,KAAK;AAClC,MAAM,KAAK;AACX,MAAM,UAAU;AAChB,MAAM,qBAAqB;AAC3B,4DAA4D,GAC5D,MAAM,sBAAsB;AAC5B;;;;CAIC,GACD,MAAM,2BAA2B,mBAAmB,eAAe;IAC/D,aAAc;QACV,KAAK;IACT;IACA;;KAEC,GACD,MAAM,WAAW;QACb,MAAM,YAAY,QAAQ,GAAG,CAAC,2BAA2B;QACzD,IAAI,CAAC,WAAW;YACZ,MAAM,IAAI,QAAQ,aAAa,CAAC;QACpC;QACA,OAAO,GAAG,QAAQ,CAAC,QAAQ,CAAC,WAAW;IAC3C;AACJ;AACA,QAAQ,kBAAkB,GAAG,oBAC7B,gDAAgD"}},
    {"offset": {"line": 9028, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9032, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/cmap/auth/mongodb_oidc.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MongoDBOIDC = exports.OIDC_WORKFLOWS = void 0;\nconst error_1 = require(\"../../error\");\nconst auth_provider_1 = require(\"./auth_provider\");\nconst aws_service_workflow_1 = require(\"./mongodb_oidc/aws_service_workflow\");\nconst azure_service_workflow_1 = require(\"./mongodb_oidc/azure_service_workflow\");\nconst callback_workflow_1 = require(\"./mongodb_oidc/callback_workflow\");\n/** Error when credentials are missing. */\nconst MISSING_CREDENTIALS_ERROR = 'AuthContext must provide credentials.';\n/** @internal */\nexports.OIDC_WORKFLOWS = new Map();\nexports.OIDC_WORKFLOWS.set('callback', new callback_workflow_1.CallbackWorkflow());\nexports.OIDC_WORKFLOWS.set('aws', new aws_service_workflow_1.AwsServiceWorkflow());\nexports.OIDC_WORKFLOWS.set('azure', new azure_service_workflow_1.AzureServiceWorkflow());\n/**\n * OIDC auth provider.\n * @experimental\n */\nclass MongoDBOIDC extends auth_provider_1.AuthProvider {\n    /**\n     * Instantiate the auth provider.\n     */\n    constructor() {\n        super();\n    }\n    /**\n     * Authenticate using OIDC\n     */\n    async auth(authContext) {\n        const { connection, reauthenticating, response } = authContext;\n        const credentials = getCredentials(authContext);\n        const workflow = getWorkflow(credentials);\n        await workflow.execute(connection, credentials, reauthenticating, response);\n    }\n    /**\n     * Add the speculative auth for the initial handshake.\n     */\n    async prepare(handshakeDoc, authContext) {\n        const credentials = getCredentials(authContext);\n        const workflow = getWorkflow(credentials);\n        const result = await workflow.speculativeAuth(credentials);\n        return { ...handshakeDoc, ...result };\n    }\n}\nexports.MongoDBOIDC = MongoDBOIDC;\n/**\n * Get credentials from the auth context, throwing if they do not exist.\n */\nfunction getCredentials(authContext) {\n    const { credentials } = authContext;\n    if (!credentials) {\n        throw new error_1.MongoMissingCredentialsError(MISSING_CREDENTIALS_ERROR);\n    }\n    return credentials;\n}\n/**\n * Gets either a device workflow or callback workflow.\n */\nfunction getWorkflow(credentials) {\n    const providerName = credentials.mechanismProperties.PROVIDER_NAME;\n    const workflow = exports.OIDC_WORKFLOWS.get(providerName || 'callback');\n    if (!workflow) {\n        throw new error_1.MongoInvalidArgumentError(`Could not load workflow for provider ${credentials.mechanismProperties.PROVIDER_NAME}`);\n    }\n    return workflow;\n}\n//# sourceMappingURL=mongodb_oidc.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,WAAW,GAAG,QAAQ,cAAc,GAAG,KAAK;AACpD,MAAM,UAAU;AAChB,MAAM,kBAAkB;AACxB,MAAM,yBAAyB;AAC/B,MAAM,2BAA2B;AACjC,MAAM,sBAAsB;AAC5B,wCAAwC,GACxC,MAAM,4BAA4B;AAClC,cAAc,GACd,QAAQ,cAAc,GAAG,IAAI;AAC7B,QAAQ,cAAc,CAAC,GAAG,CAAC,YAAY,IAAI,oBAAoB,gBAAgB;AAC/E,QAAQ,cAAc,CAAC,GAAG,CAAC,OAAO,IAAI,uBAAuB,kBAAkB;AAC/E,QAAQ,cAAc,CAAC,GAAG,CAAC,SAAS,IAAI,yBAAyB,oBAAoB;AACrF;;;CAGC,GACD,MAAM,oBAAoB,gBAAgB,YAAY;IAClD;;KAEC,GACD,aAAc;QACV,KAAK;IACT;IACA;;KAEC,GACD,MAAM,KAAK,WAAW,EAAE;QACpB,MAAM,EAAE,UAAU,EAAE,gBAAgB,EAAE,QAAQ,EAAE,GAAG;QACnD,MAAM,cAAc,eAAe;QACnC,MAAM,WAAW,YAAY;QAC7B,MAAM,SAAS,OAAO,CAAC,YAAY,aAAa,kBAAkB;IACtE;IACA;;KAEC,GACD,MAAM,QAAQ,YAAY,EAAE,WAAW,EAAE;QACrC,MAAM,cAAc,eAAe;QACnC,MAAM,WAAW,YAAY;QAC7B,MAAM,SAAS,MAAM,SAAS,eAAe,CAAC;QAC9C,OAAO;YAAE,GAAG,YAAY;YAAE,GAAG,MAAM;QAAC;IACxC;AACJ;AACA,QAAQ,WAAW,GAAG;AACtB;;CAEC,GACD,SAAS,eAAe,WAAW;IAC/B,MAAM,EAAE,WAAW,EAAE,GAAG;IACxB,IAAI,CAAC,aAAa;QACd,MAAM,IAAI,QAAQ,4BAA4B,CAAC;IACnD;IACA,OAAO;AACX;AACA;;CAEC,GACD,SAAS,YAAY,WAAW;IAC5B,MAAM,eAAe,YAAY,mBAAmB,CAAC,aAAa;IAClE,MAAM,WAAW,QAAQ,cAAc,CAAC,GAAG,CAAC,gBAAgB;IAC5D,IAAI,CAAC,UAAU;QACX,MAAM,IAAI,QAAQ,yBAAyB,CAAC,CAAC,qCAAqC,EAAE,YAAY,mBAAmB,CAAC,aAAa,CAAC,CAAC;IACvI;IACA,OAAO;AACX,EACA,wCAAwC"}},
    {"offset": {"line": 9096, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9100, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/cmap/auth/gssapi.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.resolveCname = exports.performGSSAPICanonicalizeHostName = exports.GSSAPI = exports.GSSAPICanonicalizationValue = void 0;\nconst dns = require(\"dns\");\nconst deps_1 = require(\"../../deps\");\nconst error_1 = require(\"../../error\");\nconst utils_1 = require(\"../../utils\");\nconst auth_provider_1 = require(\"./auth_provider\");\n/** @public */\nexports.GSSAPICanonicalizationValue = Object.freeze({\n    on: true,\n    off: false,\n    none: 'none',\n    forward: 'forward',\n    forwardAndReverse: 'forwardAndReverse'\n});\nasync function externalCommand(connection, command) {\n    return connection.commandAsync((0, utils_1.ns)('$external.$cmd'), command, undefined);\n}\nlet krb;\nclass GSSAPI extends auth_provider_1.AuthProvider {\n    async auth(authContext) {\n        const { connection, credentials } = authContext;\n        if (credentials == null) {\n            throw new error_1.MongoMissingCredentialsError('Credentials required for GSSAPI authentication');\n        }\n        const { username } = credentials;\n        const client = await makeKerberosClient(authContext);\n        const payload = await client.step('');\n        const saslStartResponse = await externalCommand(connection, saslStart(payload));\n        const negotiatedPayload = await negotiate(client, 10, saslStartResponse.payload);\n        const saslContinueResponse = await externalCommand(connection, saslContinue(negotiatedPayload, saslStartResponse.conversationId));\n        const finalizePayload = await finalize(client, username, saslContinueResponse.payload);\n        await externalCommand(connection, {\n            saslContinue: 1,\n            conversationId: saslContinueResponse.conversationId,\n            payload: finalizePayload\n        });\n    }\n}\nexports.GSSAPI = GSSAPI;\nasync function makeKerberosClient(authContext) {\n    const { hostAddress } = authContext.options;\n    const { credentials } = authContext;\n    if (!hostAddress || typeof hostAddress.host !== 'string' || !credentials) {\n        throw new error_1.MongoInvalidArgumentError('Connection must have host and port and credentials defined.');\n    }\n    loadKrb();\n    if ('kModuleError' in krb) {\n        throw krb['kModuleError'];\n    }\n    const { initializeClient } = krb;\n    const { username, password } = credentials;\n    const mechanismProperties = credentials.mechanismProperties;\n    const serviceName = mechanismProperties.SERVICE_NAME ?? 'mongodb';\n    const host = await performGSSAPICanonicalizeHostName(hostAddress.host, mechanismProperties);\n    const initOptions = {};\n    if (password != null) {\n        // TODO(NODE-5139): These do not match the typescript options in initializeClient\n        Object.assign(initOptions, { user: username, password: password });\n    }\n    const spnHost = mechanismProperties.SERVICE_HOST ?? host;\n    let spn = `${serviceName}${process.platform === 'win32' ? '/' : '@'}${spnHost}`;\n    if ('SERVICE_REALM' in mechanismProperties) {\n        spn = `${spn}@${mechanismProperties.SERVICE_REALM}`;\n    }\n    return initializeClient(spn, initOptions);\n}\nfunction saslStart(payload) {\n    return {\n        saslStart: 1,\n        mechanism: 'GSSAPI',\n        payload,\n        autoAuthorize: 1\n    };\n}\nfunction saslContinue(payload, conversationId) {\n    return {\n        saslContinue: 1,\n        conversationId,\n        payload\n    };\n}\nasync function negotiate(client, retries, payload) {\n    try {\n        const response = await client.step(payload);\n        return response || '';\n    }\n    catch (error) {\n        if (retries === 0) {\n            // Retries exhausted, raise error\n            throw error;\n        }\n        // Adjust number of retries and call step again\n        return negotiate(client, retries - 1, payload);\n    }\n}\nasync function finalize(client, user, payload) {\n    // GSS Client Unwrap\n    const response = await client.unwrap(payload);\n    return client.wrap(response || '', { user });\n}\nasync function performGSSAPICanonicalizeHostName(host, mechanismProperties) {\n    const mode = mechanismProperties.CANONICALIZE_HOST_NAME;\n    if (!mode || mode === exports.GSSAPICanonicalizationValue.none) {\n        return host;\n    }\n    // If forward and reverse or true\n    if (mode === exports.GSSAPICanonicalizationValue.on ||\n        mode === exports.GSSAPICanonicalizationValue.forwardAndReverse) {\n        // Perform the lookup of the ip address.\n        const { address } = await dns.promises.lookup(host);\n        try {\n            // Perform a reverse ptr lookup on the ip address.\n            const results = await dns.promises.resolvePtr(address);\n            // If the ptr did not error but had no results, return the host.\n            return results.length > 0 ? results[0] : host;\n        }\n        catch (error) {\n            // This can error as ptr records may not exist for all ips. In this case\n            // fallback to a cname lookup as dns.lookup() does not return the\n            // cname.\n            return resolveCname(host);\n        }\n    }\n    else {\n        // The case for forward is just to resolve the cname as dns.lookup()\n        // will not return it.\n        return resolveCname(host);\n    }\n}\nexports.performGSSAPICanonicalizeHostName = performGSSAPICanonicalizeHostName;\nasync function resolveCname(host) {\n    // Attempt to resolve the host name\n    try {\n        const results = await dns.promises.resolveCname(host);\n        // Get the first resolved host id\n        return results.length > 0 ? results[0] : host;\n    }\n    catch {\n        return host;\n    }\n}\nexports.resolveCname = resolveCname;\n/**\n * Load the Kerberos library.\n */\nfunction loadKrb() {\n    if (!krb) {\n        krb = (0, deps_1.getKerberos)();\n    }\n}\n//# sourceMappingURL=gssapi.js.map"],"names":[],"mappings":"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"}},
    {"offset": {"line": 9252, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9256, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/cmap/auth/mongo_credentials.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MongoCredentials = exports.DEFAULT_ALLOWED_HOSTS = void 0;\nconst error_1 = require(\"../../error\");\nconst gssapi_1 = require(\"./gssapi\");\nconst providers_1 = require(\"./providers\");\n// https://github.com/mongodb/specifications/blob/master/source/auth/auth.rst\nfunction getDefaultAuthMechanism(hello) {\n    if (hello) {\n        // If hello contains saslSupportedMechs, use scram-sha-256\n        // if it is available, else scram-sha-1\n        if (Array.isArray(hello.saslSupportedMechs)) {\n            return hello.saslSupportedMechs.includes(providers_1.AuthMechanism.MONGODB_SCRAM_SHA256)\n                ? providers_1.AuthMechanism.MONGODB_SCRAM_SHA256\n                : providers_1.AuthMechanism.MONGODB_SCRAM_SHA1;\n        }\n        // Fallback to legacy selection method. If wire version >= 3, use scram-sha-1\n        if (hello.maxWireVersion >= 3) {\n            return providers_1.AuthMechanism.MONGODB_SCRAM_SHA1;\n        }\n    }\n    // Default for wireprotocol < 3\n    return providers_1.AuthMechanism.MONGODB_CR;\n}\nconst ALLOWED_PROVIDER_NAMES = ['aws', 'azure'];\nconst ALLOWED_HOSTS_ERROR = 'Auth mechanism property ALLOWED_HOSTS must be an array of strings.';\n/** @internal */\nexports.DEFAULT_ALLOWED_HOSTS = [\n    '*.mongodb.net',\n    '*.mongodb-dev.net',\n    '*.mongodbgov.net',\n    'localhost',\n    '127.0.0.1',\n    '::1'\n];\n/** Error for when the token audience is missing in the environment. */\nconst TOKEN_AUDIENCE_MISSING_ERROR = 'TOKEN_AUDIENCE must be set in the auth mechanism properties when PROVIDER_NAME is azure.';\n/**\n * A representation of the credentials used by MongoDB\n * @public\n */\nclass MongoCredentials {\n    constructor(options) {\n        this.username = options.username ?? '';\n        this.password = options.password;\n        this.source = options.source;\n        if (!this.source && options.db) {\n            this.source = options.db;\n        }\n        this.mechanism = options.mechanism || providers_1.AuthMechanism.MONGODB_DEFAULT;\n        this.mechanismProperties = options.mechanismProperties || {};\n        if (this.mechanism.match(/MONGODB-AWS/i)) {\n            if (!this.username && process.env.AWS_ACCESS_KEY_ID) {\n                this.username = process.env.AWS_ACCESS_KEY_ID;\n            }\n            if (!this.password && process.env.AWS_SECRET_ACCESS_KEY) {\n                this.password = process.env.AWS_SECRET_ACCESS_KEY;\n            }\n            if (this.mechanismProperties.AWS_SESSION_TOKEN == null &&\n                process.env.AWS_SESSION_TOKEN != null) {\n                this.mechanismProperties = {\n                    ...this.mechanismProperties,\n                    AWS_SESSION_TOKEN: process.env.AWS_SESSION_TOKEN\n                };\n            }\n        }\n        if (this.mechanism === providers_1.AuthMechanism.MONGODB_OIDC && !this.mechanismProperties.ALLOWED_HOSTS) {\n            this.mechanismProperties = {\n                ...this.mechanismProperties,\n                ALLOWED_HOSTS: exports.DEFAULT_ALLOWED_HOSTS\n            };\n        }\n        Object.freeze(this.mechanismProperties);\n        Object.freeze(this);\n    }\n    /** Determines if two MongoCredentials objects are equivalent */\n    equals(other) {\n        return (this.mechanism === other.mechanism &&\n            this.username === other.username &&\n            this.password === other.password &&\n            this.source === other.source);\n    }\n    /**\n     * If the authentication mechanism is set to \"default\", resolves the authMechanism\n     * based on the server version and server supported sasl mechanisms.\n     *\n     * @param hello - A hello response from the server\n     */\n    resolveAuthMechanism(hello) {\n        // If the mechanism is not \"default\", then it does not need to be resolved\n        if (this.mechanism.match(/DEFAULT/i)) {\n            return new MongoCredentials({\n                username: this.username,\n                password: this.password,\n                source: this.source,\n                mechanism: getDefaultAuthMechanism(hello),\n                mechanismProperties: this.mechanismProperties\n            });\n        }\n        return this;\n    }\n    validate() {\n        if ((this.mechanism === providers_1.AuthMechanism.MONGODB_GSSAPI ||\n            this.mechanism === providers_1.AuthMechanism.MONGODB_CR ||\n            this.mechanism === providers_1.AuthMechanism.MONGODB_PLAIN ||\n            this.mechanism === providers_1.AuthMechanism.MONGODB_SCRAM_SHA1 ||\n            this.mechanism === providers_1.AuthMechanism.MONGODB_SCRAM_SHA256) &&\n            !this.username) {\n            throw new error_1.MongoMissingCredentialsError(`Username required for mechanism '${this.mechanism}'`);\n        }\n        if (this.mechanism === providers_1.AuthMechanism.MONGODB_OIDC) {\n            if (this.username && this.mechanismProperties.PROVIDER_NAME) {\n                throw new error_1.MongoInvalidArgumentError(`username and PROVIDER_NAME may not be used together for mechanism '${this.mechanism}'.`);\n            }\n            if (this.mechanismProperties.PROVIDER_NAME === 'azure' &&\n                !this.mechanismProperties.TOKEN_AUDIENCE) {\n                throw new error_1.MongoAzureError(TOKEN_AUDIENCE_MISSING_ERROR);\n            }\n            if (this.mechanismProperties.PROVIDER_NAME &&\n                !ALLOWED_PROVIDER_NAMES.includes(this.mechanismProperties.PROVIDER_NAME)) {\n                throw new error_1.MongoInvalidArgumentError(`Currently only a PROVIDER_NAME in ${ALLOWED_PROVIDER_NAMES.join(',')} is supported for mechanism '${this.mechanism}'.`);\n            }\n            if (this.mechanismProperties.REFRESH_TOKEN_CALLBACK &&\n                !this.mechanismProperties.REQUEST_TOKEN_CALLBACK) {\n                throw new error_1.MongoInvalidArgumentError(`A REQUEST_TOKEN_CALLBACK must be provided when using a REFRESH_TOKEN_CALLBACK for mechanism '${this.mechanism}'`);\n            }\n            if (!this.mechanismProperties.PROVIDER_NAME &&\n                !this.mechanismProperties.REQUEST_TOKEN_CALLBACK) {\n                throw new error_1.MongoInvalidArgumentError(`Either a PROVIDER_NAME or a REQUEST_TOKEN_CALLBACK must be specified for mechanism '${this.mechanism}'.`);\n            }\n            if (this.mechanismProperties.ALLOWED_HOSTS) {\n                const hosts = this.mechanismProperties.ALLOWED_HOSTS;\n                if (!Array.isArray(hosts)) {\n                    throw new error_1.MongoInvalidArgumentError(ALLOWED_HOSTS_ERROR);\n                }\n                for (const host of hosts) {\n                    if (typeof host !== 'string') {\n                        throw new error_1.MongoInvalidArgumentError(ALLOWED_HOSTS_ERROR);\n                    }\n                }\n            }\n        }\n        if (providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(this.mechanism)) {\n            if (this.source != null && this.source !== '$external') {\n                // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n                throw new error_1.MongoAPIError(`Invalid source '${this.source}' for mechanism '${this.mechanism}' specified.`);\n            }\n        }\n        if (this.mechanism === providers_1.AuthMechanism.MONGODB_PLAIN && this.source == null) {\n            // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n            throw new error_1.MongoAPIError('PLAIN Authentication Mechanism needs an auth source');\n        }\n        if (this.mechanism === providers_1.AuthMechanism.MONGODB_X509 && this.password != null) {\n            if (this.password === '') {\n                Reflect.set(this, 'password', undefined);\n                return;\n            }\n            // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n            throw new error_1.MongoAPIError(`Password not allowed for mechanism MONGODB-X509`);\n        }\n        const canonicalization = this.mechanismProperties.CANONICALIZE_HOST_NAME ?? false;\n        if (!Object.values(gssapi_1.GSSAPICanonicalizationValue).includes(canonicalization)) {\n            throw new error_1.MongoAPIError(`Invalid CANONICALIZE_HOST_NAME value: ${canonicalization}`);\n        }\n    }\n    static merge(creds, options) {\n        return new MongoCredentials({\n            username: options.username ?? creds?.username ?? '',\n            password: options.password ?? creds?.password ?? '',\n            mechanism: options.mechanism ?? creds?.mechanism ?? providers_1.AuthMechanism.MONGODB_DEFAULT,\n            mechanismProperties: options.mechanismProperties ?? creds?.mechanismProperties ?? {},\n            source: options.source ?? options.db ?? creds?.source ?? 'admin'\n        });\n    }\n}\nexports.MongoCredentials = MongoCredentials;\n//# sourceMappingURL=mongo_credentials.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,gBAAgB,GAAG,QAAQ,qBAAqB,GAAG,KAAK;AAChE,MAAM,UAAU;AAChB,MAAM,WAAW;AACjB,MAAM,cAAc;AACpB,6EAA6E;AAC7E,SAAS,wBAAwB,KAAK;IAClC,IAAI,OAAO;QACP,0DAA0D;QAC1D,uCAAuC;QACvC,IAAI,MAAM,OAAO,CAAC,MAAM,kBAAkB,GAAG;YACzC,OAAO,MAAM,kBAAkB,CAAC,QAAQ,CAAC,YAAY,aAAa,CAAC,oBAAoB,IACjF,YAAY,aAAa,CAAC,oBAAoB,GAC9C,YAAY,aAAa,CAAC,kBAAkB;QACtD;QACA,6EAA6E;QAC7E,IAAI,MAAM,cAAc,IAAI,GAAG;YAC3B,OAAO,YAAY,aAAa,CAAC,kBAAkB;QACvD;IACJ;IACA,+BAA+B;IAC/B,OAAO,YAAY,aAAa,CAAC,UAAU;AAC/C;AACA,MAAM,yBAAyB;IAAC;IAAO;CAAQ;AAC/C,MAAM,sBAAsB;AAC5B,cAAc,GACd,QAAQ,qBAAqB,GAAG;IAC5B;IACA;IACA;IACA;IACA;IACA;CACH;AACD,qEAAqE,GACrE,MAAM,+BAA+B;AACrC;;;CAGC,GACD,MAAM;IACF,YAAY,OAAO,CAAE;QACjB,IAAI,CAAC,QAAQ,GAAG,QAAQ,QAAQ,IAAI;QACpC,IAAI,CAAC,QAAQ,GAAG,QAAQ,QAAQ;QAChC,IAAI,CAAC,MAAM,GAAG,QAAQ,MAAM;QAC5B,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,QAAQ,EAAE,EAAE;YAC5B,IAAI,CAAC,MAAM,GAAG,QAAQ,EAAE;QAC5B;QACA,IAAI,CAAC,SAAS,GAAG,QAAQ,SAAS,IAAI,YAAY,aAAa,CAAC,eAAe;QAC/E,IAAI,CAAC,mBAAmB,GAAG,QAAQ,mBAAmB,IAAI,CAAC;QAC3D,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,iBAAiB;YACtC,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,QAAQ,GAAG,CAAC,iBAAiB,EAAE;gBACjD,IAAI,CAAC,QAAQ,GAAG,QAAQ,GAAG,CAAC,iBAAiB;YACjD;YACA,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,QAAQ,GAAG,CAAC,qBAAqB,EAAE;gBACrD,IAAI,CAAC,QAAQ,GAAG,QAAQ,GAAG,CAAC,qBAAqB;YACrD;YACA,IAAI,IAAI,CAAC,mBAAmB,CAAC,iBAAiB,IAAI,QAC9C,QAAQ,GAAG,CAAC,iBAAiB,IAAI,MAAM;gBACvC,IAAI,CAAC,mBAAmB,GAAG;oBACvB,GAAG,IAAI,CAAC,mBAAmB;oBAC3B,mBAAmB,QAAQ,GAAG,CAAC,iBAAiB;gBACpD;YACJ;QACJ;QACA,IAAI,IAAI,CAAC,SAAS,KAAK,YAAY,aAAa,CAAC,YAAY,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,aAAa,EAAE;YACtG,IAAI,CAAC,mBAAmB,GAAG;gBACvB,GAAG,IAAI,CAAC,mBAAmB;gBAC3B,eAAe,QAAQ,qBAAqB;YAChD;QACJ;QACA,OAAO,MAAM,CAAC,IAAI,CAAC,mBAAmB;QACtC,OAAO,MAAM,CAAC,IAAI;IACtB;IACA,8DAA8D,GAC9D,OAAO,KAAK,EAAE;QACV,OAAQ,IAAI,CAAC,SAAS,KAAK,MAAM,SAAS,IACtC,IAAI,CAAC,QAAQ,KAAK,MAAM,QAAQ,IAChC,IAAI,CAAC,QAAQ,KAAK,MAAM,QAAQ,IAChC,IAAI,CAAC,MAAM,KAAK,MAAM,MAAM;IACpC;IACA;;;;;KAKC,GACD,qBAAqB,KAAK,EAAE;QACxB,0EAA0E;QAC1E,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,aAAa;YAClC,OAAO,IAAI,iBAAiB;gBACxB,UAAU,IAAI,CAAC,QAAQ;gBACvB,UAAU,IAAI,CAAC,QAAQ;gBACvB,QAAQ,IAAI,CAAC,MAAM;gBACnB,WAAW,wBAAwB;gBACnC,qBAAqB,IAAI,CAAC,mBAAmB;YACjD;QACJ;QACA,OAAO,IAAI;IACf;IACA,WAAW;QACP,IAAI,CAAC,IAAI,CAAC,SAAS,KAAK,YAAY,aAAa,CAAC,cAAc,IAC5D,IAAI,CAAC,SAAS,KAAK,YAAY,aAAa,CAAC,UAAU,IACvD,IAAI,CAAC,SAAS,KAAK,YAAY,aAAa,CAAC,aAAa,IAC1D,IAAI,CAAC,SAAS,KAAK,YAAY,aAAa,CAAC,kBAAkB,IAC/D,IAAI,CAAC,SAAS,KAAK,YAAY,aAAa,CAAC,oBAAoB,KACjE,CAAC,IAAI,CAAC,QAAQ,EAAE;YAChB,MAAM,IAAI,QAAQ,4BAA4B,CAAC,CAAC,iCAAiC,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;QACxG;QACA,IAAI,IAAI,CAAC,SAAS,KAAK,YAAY,aAAa,CAAC,YAAY,EAAE;YAC3D,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,mBAAmB,CAAC,aAAa,EAAE;gBACzD,MAAM,IAAI,QAAQ,yBAAyB,CAAC,CAAC,mEAAmE,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC;YACxI;YACA,IAAI,IAAI,CAAC,mBAAmB,CAAC,aAAa,KAAK,WAC3C,CAAC,IAAI,CAAC,mBAAmB,CAAC,cAAc,EAAE;gBAC1C,MAAM,IAAI,QAAQ,eAAe,CAAC;YACtC;YACA,IAAI,IAAI,CAAC,mBAAmB,CAAC,aAAa,IACtC,CAAC,uBAAuB,QAAQ,CAAC,IAAI,CAAC,mBAAmB,CAAC,aAAa,GAAG;gBAC1E,MAAM,IAAI,QAAQ,yBAAyB,CAAC,CAAC,kCAAkC,EAAE,uBAAuB,IAAI,CAAC,KAAK,6BAA6B,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC;YACvK;YACA,IAAI,IAAI,CAAC,mBAAmB,CAAC,sBAAsB,IAC/C,CAAC,IAAI,CAAC,mBAAmB,CAAC,sBAAsB,EAAE;gBAClD,MAAM,IAAI,QAAQ,yBAAyB,CAAC,CAAC,6FAA6F,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YACjK;YACA,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,aAAa,IACvC,CAAC,IAAI,CAAC,mBAAmB,CAAC,sBAAsB,EAAE;gBAClD,MAAM,IAAI,QAAQ,yBAAyB,CAAC,CAAC,oFAAoF,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC;YACzJ;YACA,IAAI,IAAI,CAAC,mBAAmB,CAAC,aAAa,EAAE;gBACxC,MAAM,QAAQ,IAAI,CAAC,mBAAmB,CAAC,aAAa;gBACpD,IAAI,CAAC,MAAM,OAAO,CAAC,QAAQ;oBACvB,MAAM,IAAI,QAAQ,yBAAyB,CAAC;gBAChD;gBACA,KAAK,MAAM,QAAQ,MAAO;oBACtB,IAAI,OAAO,SAAS,UAAU;wBAC1B,MAAM,IAAI,QAAQ,yBAAyB,CAAC;oBAChD;gBACJ;YACJ;QACJ;QACA,IAAI,YAAY,4BAA4B,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,GAAG;YAC9D,IAAI,IAAI,CAAC,MAAM,IAAI,QAAQ,IAAI,CAAC,MAAM,KAAK,aAAa;gBACpD,gEAAgE;gBAChE,MAAM,IAAI,QAAQ,aAAa,CAAC,CAAC,gBAAgB,EAAE,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAAE,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC;YAClH;QACJ;QACA,IAAI,IAAI,CAAC,SAAS,KAAK,YAAY,aAAa,CAAC,aAAa,IAAI,IAAI,CAAC,MAAM,IAAI,MAAM;YACnF,gEAAgE;YAChE,MAAM,IAAI,QAAQ,aAAa,CAAC;QACpC;QACA,IAAI,IAAI,CAAC,SAAS,KAAK,YAAY,aAAa,CAAC,YAAY,IAAI,IAAI,CAAC,QAAQ,IAAI,MAAM;YACpF,IAAI,IAAI,CAAC,QAAQ,KAAK,IAAI;gBACtB,QAAQ,GAAG,CAAC,IAAI,EAAE,YAAY;gBAC9B;YACJ;YACA,gEAAgE;YAChE,MAAM,IAAI,QAAQ,aAAa,CAAC,CAAC,+CAA+C,CAAC;QACrF;QACA,MAAM,mBAAmB,IAAI,CAAC,mBAAmB,CAAC,sBAAsB,IAAI;QAC5E,IAAI,CAAC,OAAO,MAAM,CAAC,SAAS,2BAA2B,EAAE,QAAQ,CAAC,mBAAmB;YACjF,MAAM,IAAI,QAAQ,aAAa,CAAC,CAAC,sCAAsC,EAAE,iBAAiB,CAAC;QAC/F;IACJ;IACA,OAAO,MAAM,KAAK,EAAE,OAAO,EAAE;QACzB,OAAO,IAAI,iBAAiB;YACxB,UAAU,QAAQ,QAAQ,IAAI,OAAO,YAAY;YACjD,UAAU,QAAQ,QAAQ,IAAI,OAAO,YAAY;YACjD,WAAW,QAAQ,SAAS,IAAI,OAAO,aAAa,YAAY,aAAa,CAAC,eAAe;YAC7F,qBAAqB,QAAQ,mBAAmB,IAAI,OAAO,uBAAuB,CAAC;YACnF,QAAQ,QAAQ,MAAM,IAAI,QAAQ,EAAE,IAAI,OAAO,UAAU;QAC7D;IACJ;AACJ;AACA,QAAQ,gBAAgB,GAAG,kBAC3B,6CAA6C"}},
    {"offset": {"line": 9417, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9421, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/cmap/auth/mongodb_aws.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MongoDBAWS = void 0;\nconst crypto = require(\"crypto\");\nconst process = require(\"process\");\nconst util_1 = require(\"util\");\nconst BSON = require(\"../../bson\");\nconst deps_1 = require(\"../../deps\");\nconst error_1 = require(\"../../error\");\nconst utils_1 = require(\"../../utils\");\nconst auth_provider_1 = require(\"./auth_provider\");\nconst mongo_credentials_1 = require(\"./mongo_credentials\");\nconst providers_1 = require(\"./providers\");\n/**\n * The following regions use the global AWS STS endpoint, sts.amazonaws.com, by default\n * https://docs.aws.amazon.com/sdkref/latest/guide/feature-sts-regionalized-endpoints.html\n */\nconst LEGACY_REGIONS = new Set([\n    'ap-northeast-1',\n    'ap-south-1',\n    'ap-southeast-1',\n    'ap-southeast-2',\n    'aws-global',\n    'ca-central-1',\n    'eu-central-1',\n    'eu-north-1',\n    'eu-west-1',\n    'eu-west-2',\n    'eu-west-3',\n    'sa-east-1',\n    'us-east-1',\n    'us-east-2',\n    'us-west-1',\n    'us-west-2'\n]);\nconst ASCII_N = 110;\nconst AWS_RELATIVE_URI = 'http://169.254.170.2';\nconst AWS_EC2_URI = 'http://169.254.169.254';\nconst AWS_EC2_PATH = '/latest/meta-data/iam/security-credentials';\nconst bsonOptions = {\n    useBigInt64: false,\n    promoteLongs: true,\n    promoteValues: true,\n    promoteBuffers: false,\n    bsonRegExp: false\n};\nclass MongoDBAWS extends auth_provider_1.AuthProvider {\n    constructor() {\n        super();\n        this.randomBytesAsync = (0, util_1.promisify)(crypto.randomBytes);\n    }\n    async auth(authContext) {\n        const { connection } = authContext;\n        if (!authContext.credentials) {\n            throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n        }\n        if ('kModuleError' in deps_1.aws4) {\n            throw deps_1.aws4['kModuleError'];\n        }\n        const { sign } = deps_1.aws4;\n        if ((0, utils_1.maxWireVersion)(connection) < 9) {\n            throw new error_1.MongoCompatibilityError('MONGODB-AWS authentication requires MongoDB version 4.4 or later');\n        }\n        if (!authContext.credentials.username) {\n            authContext.credentials = await makeTempCredentials(authContext.credentials);\n        }\n        const { credentials } = authContext;\n        const accessKeyId = credentials.username;\n        const secretAccessKey = credentials.password;\n        const sessionToken = credentials.mechanismProperties.AWS_SESSION_TOKEN;\n        // If all three defined, include sessionToken, else include username and pass, else no credentials\n        const awsCredentials = accessKeyId && secretAccessKey && sessionToken\n            ? { accessKeyId, secretAccessKey, sessionToken }\n            : accessKeyId && secretAccessKey\n                ? { accessKeyId, secretAccessKey }\n                : undefined;\n        const db = credentials.source;\n        const nonce = await this.randomBytesAsync(32);\n        const saslStart = {\n            saslStart: 1,\n            mechanism: 'MONGODB-AWS',\n            payload: BSON.serialize({ r: nonce, p: ASCII_N }, bsonOptions)\n        };\n        const saslStartResponse = await connection.commandAsync((0, utils_1.ns)(`${db}.$cmd`), saslStart, undefined);\n        const serverResponse = BSON.deserialize(saslStartResponse.payload.buffer, bsonOptions);\n        const host = serverResponse.h;\n        const serverNonce = serverResponse.s.buffer;\n        if (serverNonce.length !== 64) {\n            // TODO(NODE-3483)\n            throw new error_1.MongoRuntimeError(`Invalid server nonce length ${serverNonce.length}, expected 64`);\n        }\n        if (!utils_1.ByteUtils.equals(serverNonce.subarray(0, nonce.byteLength), nonce)) {\n            // throw because the serverNonce's leading 32 bytes must equal the client nonce's 32 bytes\n            // https://github.com/mongodb/specifications/blob/875446db44aade414011731840831f38a6c668df/source/auth/auth.rst#id11\n            // TODO(NODE-3483)\n            throw new error_1.MongoRuntimeError('Server nonce does not begin with client nonce');\n        }\n        if (host.length < 1 || host.length > 255 || host.indexOf('..') !== -1) {\n            // TODO(NODE-3483)\n            throw new error_1.MongoRuntimeError(`Server returned an invalid host: \"${host}\"`);\n        }\n        const body = 'Action=GetCallerIdentity&Version=2011-06-15';\n        const options = sign({\n            method: 'POST',\n            host,\n            region: deriveRegion(serverResponse.h),\n            service: 'sts',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Content-Length': body.length,\n                'X-MongoDB-Server-Nonce': utils_1.ByteUtils.toBase64(serverNonce),\n                'X-MongoDB-GS2-CB-Flag': 'n'\n            },\n            path: '/',\n            body\n        }, awsCredentials);\n        const payload = {\n            a: options.headers.Authorization,\n            d: options.headers['X-Amz-Date']\n        };\n        if (sessionToken) {\n            payload.t = sessionToken;\n        }\n        const saslContinue = {\n            saslContinue: 1,\n            conversationId: 1,\n            payload: BSON.serialize(payload, bsonOptions)\n        };\n        await connection.commandAsync((0, utils_1.ns)(`${db}.$cmd`), saslContinue, undefined);\n    }\n}\nMongoDBAWS.credentialProvider = null;\nexports.MongoDBAWS = MongoDBAWS;\nasync function makeTempCredentials(credentials) {\n    function makeMongoCredentialsFromAWSTemp(creds) {\n        if (!creds.AccessKeyId || !creds.SecretAccessKey || !creds.Token) {\n            throw new error_1.MongoMissingCredentialsError('Could not obtain temporary MONGODB-AWS credentials');\n        }\n        return new mongo_credentials_1.MongoCredentials({\n            username: creds.AccessKeyId,\n            password: creds.SecretAccessKey,\n            source: credentials.source,\n            mechanism: providers_1.AuthMechanism.MONGODB_AWS,\n            mechanismProperties: {\n                AWS_SESSION_TOKEN: creds.Token\n            }\n        });\n    }\n    MongoDBAWS.credentialProvider ??= (0, deps_1.getAwsCredentialProvider)();\n    // Check if the AWS credential provider from the SDK is present. If not,\n    // use the old method.\n    if ('kModuleError' in MongoDBAWS.credentialProvider) {\n        // If the environment variable AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\n        // is set then drivers MUST assume that it was set by an AWS ECS agent\n        if (process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI) {\n            return makeMongoCredentialsFromAWSTemp(await (0, utils_1.request)(`${AWS_RELATIVE_URI}${process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI}`));\n        }\n        // Otherwise assume we are on an EC2 instance\n        // get a token\n        const token = await (0, utils_1.request)(`${AWS_EC2_URI}/latest/api/token`, {\n            method: 'PUT',\n            json: false,\n            headers: { 'X-aws-ec2-metadata-token-ttl-seconds': 30 }\n        });\n        // get role name\n        const roleName = await (0, utils_1.request)(`${AWS_EC2_URI}/${AWS_EC2_PATH}`, {\n            json: false,\n            headers: { 'X-aws-ec2-metadata-token': token }\n        });\n        // get temp credentials\n        const creds = await (0, utils_1.request)(`${AWS_EC2_URI}/${AWS_EC2_PATH}/${roleName}`, {\n            headers: { 'X-aws-ec2-metadata-token': token }\n        });\n        return makeMongoCredentialsFromAWSTemp(creds);\n    }\n    else {\n        let { AWS_STS_REGIONAL_ENDPOINTS = '', AWS_REGION = '' } = process.env;\n        AWS_STS_REGIONAL_ENDPOINTS = AWS_STS_REGIONAL_ENDPOINTS.toLowerCase();\n        AWS_REGION = AWS_REGION.toLowerCase();\n        /** The option setting should work only for users who have explicit settings in their environment, the driver should not encode \"defaults\" */\n        const awsRegionSettingsExist = AWS_REGION.length !== 0 && AWS_STS_REGIONAL_ENDPOINTS.length !== 0;\n        /**\n         * If AWS_STS_REGIONAL_ENDPOINTS is set to regional, users are opting into the new behavior of respecting the region settings\n         *\n         * If AWS_STS_REGIONAL_ENDPOINTS is set to legacy, then \"old\" regions need to keep using the global setting.\n         * Technically the SDK gets this wrong, it reaches out to 'sts.us-east-1.amazonaws.com' when it should be 'sts.amazonaws.com'.\n         * That is not our bug to fix here. We leave that up to the SDK.\n         */\n        const useRegionalSts = AWS_STS_REGIONAL_ENDPOINTS === 'regional' ||\n            (AWS_STS_REGIONAL_ENDPOINTS === 'legacy' && !LEGACY_REGIONS.has(AWS_REGION));\n        const provider = awsRegionSettingsExist && useRegionalSts\n            ? MongoDBAWS.credentialProvider.fromNodeProviderChain({\n                clientConfig: { region: AWS_REGION }\n            })\n            : MongoDBAWS.credentialProvider.fromNodeProviderChain();\n        /*\n         * Creates a credential provider that will attempt to find credentials from the\n         * following sources (listed in order of precedence):\n         *\n         * - Environment variables exposed via process.env\n         * - SSO credentials from token cache\n         * - Web identity token credentials\n         * - Shared credentials and config ini files\n         * - The EC2/ECS Instance Metadata Service\n         */\n        try {\n            const creds = await provider();\n            return makeMongoCredentialsFromAWSTemp({\n                AccessKeyId: creds.accessKeyId,\n                SecretAccessKey: creds.secretAccessKey,\n                Token: creds.sessionToken,\n                Expiration: creds.expiration\n            });\n        }\n        catch (error) {\n            throw new error_1.MongoAWSError(error.message);\n        }\n    }\n}\nfunction deriveRegion(host) {\n    const parts = host.split('.');\n    if (parts.length === 1 || parts[1] === 'amazonaws') {\n        return 'us-east-1';\n    }\n    return parts[1];\n}\n//# sourceMappingURL=mongodb_aws.js.map"],"names":[],"mappings":"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"}},
    {"offset": {"line": 9654, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9658, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/cmap/auth/mongocr.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MongoCR = void 0;\nconst crypto = require(\"crypto\");\nconst error_1 = require(\"../../error\");\nconst utils_1 = require(\"../../utils\");\nconst auth_provider_1 = require(\"./auth_provider\");\nclass MongoCR extends auth_provider_1.AuthProvider {\n    async auth(authContext) {\n        const { connection, credentials } = authContext;\n        if (!credentials) {\n            throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n        }\n        const { username, password, source } = credentials;\n        const { nonce } = await connection.commandAsync((0, utils_1.ns)(`${source}.$cmd`), { getnonce: 1 }, undefined);\n        const hashPassword = crypto\n            .createHash('md5')\n            .update(`${username}:mongo:${password}`, 'utf8')\n            .digest('hex');\n        // Final key\n        const key = crypto\n            .createHash('md5')\n            .update(`${nonce}${username}${hashPassword}`, 'utf8')\n            .digest('hex');\n        const authenticateCommand = {\n            authenticate: 1,\n            user: username,\n            nonce,\n            key\n        };\n        await connection.commandAsync((0, utils_1.ns)(`${source}.$cmd`), authenticateCommand, undefined);\n    }\n}\nexports.MongoCR = MongoCR;\n//# sourceMappingURL=mongocr.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,OAAO,GAAG,KAAK;AACvB,MAAM,SAAS;AACf,MAAM,UAAU;AAChB,MAAM,UAAU;AAChB,MAAM,kBAAkB;AACxB,MAAM,gBAAgB,gBAAgB,YAAY;IAC9C,MAAM,KAAK,WAAW,EAAE;QACpB,MAAM,EAAE,UAAU,EAAE,WAAW,EAAE,GAAG;QACpC,IAAI,CAAC,aAAa;YACd,MAAM,IAAI,QAAQ,4BAA4B,CAAC;QACnD;QACA,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,GAAG;QACvC,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,WAAW,YAAY,CAAC,AAAC,CAAA,GAAG,QAAQ,EAAE,AAAD,EAAG,CAAC,EAAE,OAAO,KAAK,CAAC,GAAG;YAAE,UAAU;QAAE,GAAG;QACpG,MAAM,eAAe,OAChB,UAAU,CAAC,OACX,MAAM,CAAC,CAAC,EAAE,SAAS,OAAO,EAAE,SAAS,CAAC,EAAE,QACxC,MAAM,CAAC;QACZ,YAAY;QACZ,MAAM,MAAM,OACP,UAAU,CAAC,OACX,MAAM,CAAC,CAAC,EAAE,MAAM,EAAE,SAAS,EAAE,aAAa,CAAC,EAAE,QAC7C,MAAM,CAAC;QACZ,MAAM,sBAAsB;YACxB,cAAc;YACd,MAAM;YACN;YACA;QACJ;QACA,MAAM,WAAW,YAAY,CAAC,AAAC,CAAA,GAAG,QAAQ,EAAE,AAAD,EAAG,CAAC,EAAE,OAAO,KAAK,CAAC,GAAG,qBAAqB;IAC1F;AACJ;AACA,QAAQ,OAAO,GAAG,SAClB,mCAAmC"}},
    {"offset": {"line": 9690, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9694, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/cmap/connect.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LEGAL_TCP_SOCKET_OPTIONS = exports.LEGAL_TLS_SOCKET_OPTIONS = exports.prepareHandshakeDocument = exports.connect = exports.AUTH_PROVIDERS = void 0;\nconst net = require(\"net\");\nconst tls = require(\"tls\");\nconst constants_1 = require(\"../constants\");\nconst deps_1 = require(\"../deps\");\nconst error_1 = require(\"../error\");\nconst utils_1 = require(\"../utils\");\nconst auth_provider_1 = require(\"./auth/auth_provider\");\nconst gssapi_1 = require(\"./auth/gssapi\");\nconst mongocr_1 = require(\"./auth/mongocr\");\nconst mongodb_aws_1 = require(\"./auth/mongodb_aws\");\nconst mongodb_oidc_1 = require(\"./auth/mongodb_oidc\");\nconst plain_1 = require(\"./auth/plain\");\nconst providers_1 = require(\"./auth/providers\");\nconst scram_1 = require(\"./auth/scram\");\nconst x509_1 = require(\"./auth/x509\");\nconst connection_1 = require(\"./connection\");\nconst constants_2 = require(\"./wire_protocol/constants\");\n/** @internal */\nexports.AUTH_PROVIDERS = new Map([\n    [providers_1.AuthMechanism.MONGODB_AWS, new mongodb_aws_1.MongoDBAWS()],\n    [providers_1.AuthMechanism.MONGODB_CR, new mongocr_1.MongoCR()],\n    [providers_1.AuthMechanism.MONGODB_GSSAPI, new gssapi_1.GSSAPI()],\n    [providers_1.AuthMechanism.MONGODB_OIDC, new mongodb_oidc_1.MongoDBOIDC()],\n    [providers_1.AuthMechanism.MONGODB_PLAIN, new plain_1.Plain()],\n    [providers_1.AuthMechanism.MONGODB_SCRAM_SHA1, new scram_1.ScramSHA1()],\n    [providers_1.AuthMechanism.MONGODB_SCRAM_SHA256, new scram_1.ScramSHA256()],\n    [providers_1.AuthMechanism.MONGODB_X509, new x509_1.X509()]\n]);\nfunction connect(options, callback) {\n    makeConnection({ ...options, existingSocket: undefined }, (err, socket) => {\n        if (err || !socket) {\n            return callback(err);\n        }\n        let ConnectionType = options.connectionType ?? connection_1.Connection;\n        if (options.autoEncrypter) {\n            ConnectionType = connection_1.CryptoConnection;\n        }\n        const connection = new ConnectionType(socket, options);\n        performInitialHandshake(connection, options).then(() => callback(undefined, connection), error => {\n            connection.destroy({ force: false });\n            callback(error);\n        });\n    });\n}\nexports.connect = connect;\nfunction checkSupportedServer(hello, options) {\n    const maxWireVersion = Number(hello.maxWireVersion);\n    const minWireVersion = Number(hello.minWireVersion);\n    const serverVersionHighEnough = !Number.isNaN(maxWireVersion) && maxWireVersion >= constants_2.MIN_SUPPORTED_WIRE_VERSION;\n    const serverVersionLowEnough = !Number.isNaN(minWireVersion) && minWireVersion <= constants_2.MAX_SUPPORTED_WIRE_VERSION;\n    if (serverVersionHighEnough) {\n        if (serverVersionLowEnough) {\n            return null;\n        }\n        const message = `Server at ${options.hostAddress} reports minimum wire version ${JSON.stringify(hello.minWireVersion)}, but this version of the Node.js Driver requires at most ${constants_2.MAX_SUPPORTED_WIRE_VERSION} (MongoDB ${constants_2.MAX_SUPPORTED_SERVER_VERSION})`;\n        return new error_1.MongoCompatibilityError(message);\n    }\n    const message = `Server at ${options.hostAddress} reports maximum wire version ${JSON.stringify(hello.maxWireVersion) ?? 0}, but this version of the Node.js Driver requires at least ${constants_2.MIN_SUPPORTED_WIRE_VERSION} (MongoDB ${constants_2.MIN_SUPPORTED_SERVER_VERSION})`;\n    return new error_1.MongoCompatibilityError(message);\n}\nasync function performInitialHandshake(conn, options) {\n    const credentials = options.credentials;\n    if (credentials) {\n        if (!(credentials.mechanism === providers_1.AuthMechanism.MONGODB_DEFAULT) &&\n            !exports.AUTH_PROVIDERS.get(credentials.mechanism)) {\n            throw new error_1.MongoInvalidArgumentError(`AuthMechanism '${credentials.mechanism}' not supported`);\n        }\n    }\n    const authContext = new auth_provider_1.AuthContext(conn, credentials, options);\n    conn.authContext = authContext;\n    const handshakeDoc = await prepareHandshakeDocument(authContext);\n    // @ts-expect-error: TODO(NODE-5141): The options need to be filtered properly, Connection options differ from Command options\n    const handshakeOptions = { ...options };\n    if (typeof options.connectTimeoutMS === 'number') {\n        // The handshake technically is a monitoring check, so its socket timeout should be connectTimeoutMS\n        handshakeOptions.socketTimeoutMS = options.connectTimeoutMS;\n    }\n    const start = new Date().getTime();\n    const response = await conn.commandAsync((0, utils_1.ns)('admin.$cmd'), handshakeDoc, handshakeOptions);\n    if (!('isWritablePrimary' in response)) {\n        // Provide hello-style response document.\n        response.isWritablePrimary = response[constants_1.LEGACY_HELLO_COMMAND];\n    }\n    if (response.helloOk) {\n        conn.helloOk = true;\n    }\n    const supportedServerErr = checkSupportedServer(response, options);\n    if (supportedServerErr) {\n        throw supportedServerErr;\n    }\n    if (options.loadBalanced) {\n        if (!response.serviceId) {\n            throw new error_1.MongoCompatibilityError('Driver attempted to initialize in load balancing mode, ' +\n                'but the server does not support this mode.');\n        }\n    }\n    // NOTE: This is metadata attached to the connection while porting away from\n    //       handshake being done in the `Server` class. Likely, it should be\n    //       relocated, or at very least restructured.\n    conn.hello = response;\n    conn.lastHelloMS = new Date().getTime() - start;\n    if (!response.arbiterOnly && credentials) {\n        // store the response on auth context\n        authContext.response = response;\n        const resolvedCredentials = credentials.resolveAuthMechanism(response);\n        const provider = exports.AUTH_PROVIDERS.get(resolvedCredentials.mechanism);\n        if (!provider) {\n            throw new error_1.MongoInvalidArgumentError(`No AuthProvider for ${resolvedCredentials.mechanism} defined.`);\n        }\n        try {\n            await provider.auth(authContext);\n        }\n        catch (error) {\n            if (error instanceof error_1.MongoError) {\n                error.addErrorLabel(error_1.MongoErrorLabel.HandshakeError);\n                if ((0, error_1.needsRetryableWriteLabel)(error, response.maxWireVersion)) {\n                    error.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);\n                }\n            }\n            throw error;\n        }\n    }\n}\n/**\n * @internal\n *\n * This function is only exposed for testing purposes.\n */\nasync function prepareHandshakeDocument(authContext) {\n    const options = authContext.options;\n    const compressors = options.compressors ? options.compressors : [];\n    const { serverApi } = authContext.connection;\n    const handshakeDoc = {\n        [serverApi?.version || options.loadBalanced === true ? 'hello' : constants_1.LEGACY_HELLO_COMMAND]: 1,\n        helloOk: true,\n        client: options.metadata,\n        compression: compressors\n    };\n    if (options.loadBalanced === true) {\n        handshakeDoc.loadBalanced = true;\n    }\n    const credentials = authContext.credentials;\n    if (credentials) {\n        if (credentials.mechanism === providers_1.AuthMechanism.MONGODB_DEFAULT && credentials.username) {\n            handshakeDoc.saslSupportedMechs = `${credentials.source}.${credentials.username}`;\n            const provider = exports.AUTH_PROVIDERS.get(providers_1.AuthMechanism.MONGODB_SCRAM_SHA256);\n            if (!provider) {\n                // This auth mechanism is always present.\n                throw new error_1.MongoInvalidArgumentError(`No AuthProvider for ${providers_1.AuthMechanism.MONGODB_SCRAM_SHA256} defined.`);\n            }\n            return provider.prepare(handshakeDoc, authContext);\n        }\n        const provider = exports.AUTH_PROVIDERS.get(credentials.mechanism);\n        if (!provider) {\n            throw new error_1.MongoInvalidArgumentError(`No AuthProvider for ${credentials.mechanism} defined.`);\n        }\n        return provider.prepare(handshakeDoc, authContext);\n    }\n    return handshakeDoc;\n}\nexports.prepareHandshakeDocument = prepareHandshakeDocument;\n/** @public */\nexports.LEGAL_TLS_SOCKET_OPTIONS = [\n    'ALPNProtocols',\n    'ca',\n    'cert',\n    'checkServerIdentity',\n    'ciphers',\n    'crl',\n    'ecdhCurve',\n    'key',\n    'minDHSize',\n    'passphrase',\n    'pfx',\n    'rejectUnauthorized',\n    'secureContext',\n    'secureProtocol',\n    'servername',\n    'session'\n];\n/** @public */\nexports.LEGAL_TCP_SOCKET_OPTIONS = [\n    'family',\n    'hints',\n    'localAddress',\n    'localPort',\n    'lookup'\n];\nfunction parseConnectOptions(options) {\n    const hostAddress = options.hostAddress;\n    if (!hostAddress)\n        throw new error_1.MongoInvalidArgumentError('Option \"hostAddress\" is required');\n    const result = {};\n    for (const name of exports.LEGAL_TCP_SOCKET_OPTIONS) {\n        if (options[name] != null) {\n            result[name] = options[name];\n        }\n    }\n    if (typeof hostAddress.socketPath === 'string') {\n        result.path = hostAddress.socketPath;\n        return result;\n    }\n    else if (typeof hostAddress.host === 'string') {\n        result.host = hostAddress.host;\n        result.port = hostAddress.port;\n        return result;\n    }\n    else {\n        // This should never happen since we set up HostAddresses\n        // But if we don't throw here the socket could hang until timeout\n        // TODO(NODE-3483)\n        throw new error_1.MongoRuntimeError(`Unexpected HostAddress ${JSON.stringify(hostAddress)}`);\n    }\n}\nfunction parseSslOptions(options) {\n    const result = parseConnectOptions(options);\n    // Merge in valid SSL options\n    for (const name of exports.LEGAL_TLS_SOCKET_OPTIONS) {\n        if (options[name] != null) {\n            result[name] = options[name];\n        }\n    }\n    if (options.existingSocket) {\n        result.socket = options.existingSocket;\n    }\n    // Set default sni servername to be the same as host\n    if (result.servername == null && result.host && !net.isIP(result.host)) {\n        result.servername = result.host;\n    }\n    return result;\n}\nconst SOCKET_ERROR_EVENT_LIST = ['error', 'close', 'timeout', 'parseError'];\nconst SOCKET_ERROR_EVENTS = new Set(SOCKET_ERROR_EVENT_LIST);\nfunction makeConnection(options, _callback) {\n    const useTLS = options.tls ?? false;\n    const noDelay = options.noDelay ?? true;\n    const connectTimeoutMS = options.connectTimeoutMS ?? 30000;\n    const rejectUnauthorized = options.rejectUnauthorized ?? true;\n    const existingSocket = options.existingSocket;\n    let socket;\n    const callback = function (err, ret) {\n        if (err && socket) {\n            socket.destroy();\n        }\n        _callback(err, ret);\n    };\n    if (options.proxyHost != null) {\n        // Currently, only Socks5 is supported.\n        return makeSocks5Connection({\n            ...options,\n            connectTimeoutMS // Should always be present for Socks5\n        }, callback);\n    }\n    if (useTLS) {\n        const tlsSocket = tls.connect(parseSslOptions(options));\n        if (typeof tlsSocket.disableRenegotiation === 'function') {\n            tlsSocket.disableRenegotiation();\n        }\n        socket = tlsSocket;\n    }\n    else if (existingSocket) {\n        // In the TLS case, parseSslOptions() sets options.socket to existingSocket,\n        // so we only need to handle the non-TLS case here (where existingSocket\n        // gives us all we need out of the box).\n        socket = existingSocket;\n    }\n    else {\n        socket = net.createConnection(parseConnectOptions(options));\n    }\n    socket.setKeepAlive(true, 300000);\n    socket.setTimeout(connectTimeoutMS);\n    socket.setNoDelay(noDelay);\n    const connectEvent = useTLS ? 'secureConnect' : 'connect';\n    let cancellationHandler;\n    function errorHandler(eventName) {\n        return (err) => {\n            SOCKET_ERROR_EVENTS.forEach(event => socket.removeAllListeners(event));\n            if (cancellationHandler && options.cancellationToken) {\n                options.cancellationToken.removeListener('cancel', cancellationHandler);\n            }\n            socket.removeListener(connectEvent, connectHandler);\n            callback(connectionFailureError(eventName, err));\n        };\n    }\n    function connectHandler() {\n        SOCKET_ERROR_EVENTS.forEach(event => socket.removeAllListeners(event));\n        if (cancellationHandler && options.cancellationToken) {\n            options.cancellationToken.removeListener('cancel', cancellationHandler);\n        }\n        if ('authorizationError' in socket) {\n            if (socket.authorizationError && rejectUnauthorized) {\n                // TODO(NODE-5192): wrap this with a MongoError subclass\n                return callback(socket.authorizationError);\n            }\n        }\n        socket.setTimeout(0);\n        callback(undefined, socket);\n    }\n    SOCKET_ERROR_EVENTS.forEach(event => socket.once(event, errorHandler(event)));\n    if (options.cancellationToken) {\n        cancellationHandler = errorHandler('cancel');\n        options.cancellationToken.once('cancel', cancellationHandler);\n    }\n    if (existingSocket) {\n        process.nextTick(connectHandler);\n    }\n    else {\n        socket.once(connectEvent, connectHandler);\n    }\n}\nlet socks = null;\nfunction loadSocks() {\n    if (socks == null) {\n        const socksImport = (0, deps_1.getSocks)();\n        if ('kModuleError' in socksImport) {\n            throw socksImport.kModuleError;\n        }\n        socks = socksImport;\n    }\n    return socks;\n}\nfunction makeSocks5Connection(options, callback) {\n    const hostAddress = utils_1.HostAddress.fromHostPort(options.proxyHost ?? '', // proxyHost is guaranteed to set here\n    options.proxyPort ?? 1080);\n    // First, connect to the proxy server itself:\n    makeConnection({\n        ...options,\n        hostAddress,\n        tls: false,\n        proxyHost: undefined\n    }, (err, rawSocket) => {\n        if (err || !rawSocket) {\n            return callback(err);\n        }\n        const destination = parseConnectOptions(options);\n        if (typeof destination.host !== 'string' || typeof destination.port !== 'number') {\n            return callback(new error_1.MongoInvalidArgumentError('Can only make Socks5 connections to TCP hosts'));\n        }\n        try {\n            socks ??= loadSocks();\n        }\n        catch (error) {\n            return callback(error);\n        }\n        // Then, establish the Socks5 proxy connection:\n        socks.SocksClient.createConnection({\n            existing_socket: rawSocket,\n            timeout: options.connectTimeoutMS,\n            command: 'connect',\n            destination: {\n                host: destination.host,\n                port: destination.port\n            },\n            proxy: {\n                // host and port are ignored because we pass existing_socket\n                host: 'iLoveJavaScript',\n                port: 0,\n                type: 5,\n                userId: options.proxyUsername || undefined,\n                password: options.proxyPassword || undefined\n            }\n        }).then(({ socket }) => {\n            // Finally, now treat the resulting duplex stream as the\n            // socket over which we send and receive wire protocol messages:\n            makeConnection({\n                ...options,\n                existingSocket: socket,\n                proxyHost: undefined\n            }, callback);\n        }, error => callback(connectionFailureError('error', error)));\n    });\n}\nfunction connectionFailureError(type, err) {\n    switch (type) {\n        case 'error':\n            return new error_1.MongoNetworkError(error_1.MongoError.buildErrorMessage(err), { cause: err });\n        case 'timeout':\n            return new error_1.MongoNetworkTimeoutError('connection timed out');\n        case 'close':\n            return new error_1.MongoNetworkError('connection closed');\n        case 'cancel':\n            return new error_1.MongoNetworkError('connection establishment was cancelled');\n        default:\n            return new error_1.MongoNetworkError('unknown network error');\n    }\n}\n//# sourceMappingURL=connect.js.map"],"names":[],"mappings":"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"}},
    {"offset": {"line": 10108, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 10112, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/sdam/monitor.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MonitorInterval = exports.RTTPinger = exports.Monitor = exports.ServerMonitoringMode = void 0;\nconst timers_1 = require(\"timers\");\nconst bson_1 = require(\"../bson\");\nconst connect_1 = require(\"../cmap/connect\");\nconst connection_1 = require(\"../cmap/connection\");\nconst client_metadata_1 = require(\"../cmap/handshake/client_metadata\");\nconst constants_1 = require(\"../constants\");\nconst error_1 = require(\"../error\");\nconst mongo_types_1 = require(\"../mongo_types\");\nconst utils_1 = require(\"../utils\");\nconst common_1 = require(\"./common\");\nconst events_1 = require(\"./events\");\nconst server_1 = require(\"./server\");\n/** @internal */\nconst kServer = Symbol('server');\n/** @internal */\nconst kMonitorId = Symbol('monitorId');\n/** @internal */\nconst kConnection = Symbol('connection');\n/** @internal */\nconst kCancellationToken = Symbol('cancellationToken');\n/** @internal */\nconst kRoundTripTime = Symbol('roundTripTime');\nconst STATE_IDLE = 'idle';\nconst STATE_MONITORING = 'monitoring';\nconst stateTransition = (0, utils_1.makeStateMachine)({\n    [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, STATE_IDLE, common_1.STATE_CLOSED],\n    [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, STATE_MONITORING],\n    [STATE_IDLE]: [STATE_IDLE, STATE_MONITORING, common_1.STATE_CLOSING],\n    [STATE_MONITORING]: [STATE_MONITORING, STATE_IDLE, common_1.STATE_CLOSING]\n});\nconst INVALID_REQUEST_CHECK_STATES = new Set([common_1.STATE_CLOSING, common_1.STATE_CLOSED, STATE_MONITORING]);\nfunction isInCloseState(monitor) {\n    return monitor.s.state === common_1.STATE_CLOSED || monitor.s.state === common_1.STATE_CLOSING;\n}\n/** @public */\nexports.ServerMonitoringMode = Object.freeze({\n    auto: 'auto',\n    poll: 'poll',\n    stream: 'stream'\n});\n/** @internal */\nclass Monitor extends mongo_types_1.TypedEventEmitter {\n    get connection() {\n        return this[kConnection];\n    }\n    constructor(server, options) {\n        super();\n        this[kServer] = server;\n        this[kConnection] = undefined;\n        this[kCancellationToken] = new mongo_types_1.CancellationToken();\n        this[kCancellationToken].setMaxListeners(Infinity);\n        this[kMonitorId] = undefined;\n        this.s = {\n            state: common_1.STATE_CLOSED\n        };\n        this.address = server.description.address;\n        this.options = Object.freeze({\n            connectTimeoutMS: options.connectTimeoutMS ?? 10000,\n            heartbeatFrequencyMS: options.heartbeatFrequencyMS ?? 10000,\n            minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS ?? 500,\n            serverMonitoringMode: options.serverMonitoringMode\n        });\n        this.isRunningInFaasEnv = (0, client_metadata_1.getFAASEnv)() != null;\n        const cancellationToken = this[kCancellationToken];\n        // TODO: refactor this to pull it directly from the pool, requires new ConnectionPool integration\n        const connectOptions = Object.assign({\n            id: '<monitor>',\n            generation: server.pool.generation,\n            connectionType: connection_1.Connection,\n            cancellationToken,\n            hostAddress: server.description.hostAddress\n        }, options, \n        // force BSON serialization options\n        {\n            raw: false,\n            useBigInt64: false,\n            promoteLongs: true,\n            promoteValues: true,\n            promoteBuffers: true\n        });\n        // ensure no authentication is used for monitoring\n        delete connectOptions.credentials;\n        if (connectOptions.autoEncrypter) {\n            delete connectOptions.autoEncrypter;\n        }\n        this.connectOptions = Object.freeze(connectOptions);\n    }\n    connect() {\n        if (this.s.state !== common_1.STATE_CLOSED) {\n            return;\n        }\n        // start\n        const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n        const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n        this[kMonitorId] = new MonitorInterval(monitorServer(this), {\n            heartbeatFrequencyMS: heartbeatFrequencyMS,\n            minHeartbeatFrequencyMS: minHeartbeatFrequencyMS,\n            immediate: true\n        });\n    }\n    requestCheck() {\n        if (INVALID_REQUEST_CHECK_STATES.has(this.s.state)) {\n            return;\n        }\n        this[kMonitorId]?.wake();\n    }\n    reset() {\n        const topologyVersion = this[kServer].description.topologyVersion;\n        if (isInCloseState(this) || topologyVersion == null) {\n            return;\n        }\n        stateTransition(this, common_1.STATE_CLOSING);\n        resetMonitorState(this);\n        // restart monitor\n        stateTransition(this, STATE_IDLE);\n        // restart monitoring\n        const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n        const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n        this[kMonitorId] = new MonitorInterval(monitorServer(this), {\n            heartbeatFrequencyMS: heartbeatFrequencyMS,\n            minHeartbeatFrequencyMS: minHeartbeatFrequencyMS\n        });\n    }\n    close() {\n        if (isInCloseState(this)) {\n            return;\n        }\n        stateTransition(this, common_1.STATE_CLOSING);\n        resetMonitorState(this);\n        // close monitor\n        this.emit('close');\n        stateTransition(this, common_1.STATE_CLOSED);\n    }\n}\nexports.Monitor = Monitor;\nfunction resetMonitorState(monitor) {\n    monitor[kMonitorId]?.stop();\n    monitor[kMonitorId] = undefined;\n    monitor.rttPinger?.close();\n    monitor.rttPinger = undefined;\n    monitor[kCancellationToken].emit('cancel');\n    monitor[kConnection]?.destroy({ force: true });\n    monitor[kConnection] = undefined;\n}\nfunction useStreamingProtocol(monitor, topologyVersion) {\n    // If we have no topology version we always poll no matter\n    // what the user provided, since the server does not support\n    // the streaming protocol.\n    if (topologyVersion == null)\n        return false;\n    const serverMonitoringMode = monitor.options.serverMonitoringMode;\n    if (serverMonitoringMode === exports.ServerMonitoringMode.poll)\n        return false;\n    if (serverMonitoringMode === exports.ServerMonitoringMode.stream)\n        return true;\n    // If we are in auto mode, we need to figure out if we're in a FaaS\n    // environment or not and choose the appropriate mode.\n    if (monitor.isRunningInFaasEnv)\n        return false;\n    return true;\n}\nfunction checkServer(monitor, callback) {\n    let start = (0, utils_1.now)();\n    const topologyVersion = monitor[kServer].description.topologyVersion;\n    const isAwaitable = useStreamingProtocol(monitor, topologyVersion);\n    monitor.emit(server_1.Server.SERVER_HEARTBEAT_STARTED, new events_1.ServerHeartbeatStartedEvent(monitor.address, isAwaitable));\n    function failureHandler(err, awaited) {\n        monitor[kConnection]?.destroy({ force: true });\n        monitor[kConnection] = undefined;\n        monitor.emit(server_1.Server.SERVER_HEARTBEAT_FAILED, new events_1.ServerHeartbeatFailedEvent(monitor.address, (0, utils_1.calculateDurationInMs)(start), err, awaited));\n        const error = !(err instanceof error_1.MongoError)\n            ? new error_1.MongoError(error_1.MongoError.buildErrorMessage(err), { cause: err })\n            : err;\n        error.addErrorLabel(error_1.MongoErrorLabel.ResetPool);\n        if (error instanceof error_1.MongoNetworkTimeoutError) {\n            error.addErrorLabel(error_1.MongoErrorLabel.InterruptInUseConnections);\n        }\n        monitor.emit('resetServer', error);\n        callback(err);\n    }\n    const connection = monitor[kConnection];\n    if (connection && !connection.closed) {\n        const { serverApi, helloOk } = connection;\n        const connectTimeoutMS = monitor.options.connectTimeoutMS;\n        const maxAwaitTimeMS = monitor.options.heartbeatFrequencyMS;\n        const cmd = {\n            [serverApi?.version || helloOk ? 'hello' : constants_1.LEGACY_HELLO_COMMAND]: 1,\n            ...(isAwaitable && topologyVersion\n                ? { maxAwaitTimeMS, topologyVersion: makeTopologyVersion(topologyVersion) }\n                : {})\n        };\n        const options = isAwaitable\n            ? {\n                socketTimeoutMS: connectTimeoutMS ? connectTimeoutMS + maxAwaitTimeMS : 0,\n                exhaustAllowed: true\n            }\n            : { socketTimeoutMS: connectTimeoutMS };\n        if (isAwaitable && monitor.rttPinger == null) {\n            monitor.rttPinger = new RTTPinger(monitor[kCancellationToken], Object.assign({ heartbeatFrequencyMS: monitor.options.heartbeatFrequencyMS }, monitor.connectOptions));\n        }\n        connection.command((0, utils_1.ns)('admin.$cmd'), cmd, options, (err, hello) => {\n            if (err) {\n                return failureHandler(err, isAwaitable);\n            }\n            if (!('isWritablePrimary' in hello)) {\n                // Provide hello-style response document.\n                hello.isWritablePrimary = hello[constants_1.LEGACY_HELLO_COMMAND];\n            }\n            const duration = isAwaitable && monitor.rttPinger\n                ? monitor.rttPinger.roundTripTime\n                : (0, utils_1.calculateDurationInMs)(start);\n            monitor.emit(server_1.Server.SERVER_HEARTBEAT_SUCCEEDED, new events_1.ServerHeartbeatSucceededEvent(monitor.address, duration, hello, isAwaitable));\n            // If we are using the streaming protocol then we immediately issue another 'started'\n            // event, otherwise the \"check\" is complete and return to the main monitor loop.\n            if (isAwaitable) {\n                monitor.emit(server_1.Server.SERVER_HEARTBEAT_STARTED, new events_1.ServerHeartbeatStartedEvent(monitor.address, true));\n                start = (0, utils_1.now)();\n            }\n            else {\n                monitor.rttPinger?.close();\n                monitor.rttPinger = undefined;\n                callback(undefined, hello);\n            }\n        });\n        return;\n    }\n    // connecting does an implicit `hello`\n    (0, connect_1.connect)(monitor.connectOptions, (err, conn) => {\n        if (err) {\n            monitor[kConnection] = undefined;\n            failureHandler(err, false);\n            return;\n        }\n        if (conn) {\n            // Tell the connection that we are using the streaming protocol so that the\n            // connection's message stream will only read the last hello on the buffer.\n            conn.isMonitoringConnection = true;\n            if (isInCloseState(monitor)) {\n                conn.destroy({ force: true });\n                return;\n            }\n            monitor[kConnection] = conn;\n            monitor.emit(server_1.Server.SERVER_HEARTBEAT_SUCCEEDED, new events_1.ServerHeartbeatSucceededEvent(monitor.address, (0, utils_1.calculateDurationInMs)(start), conn.hello, useStreamingProtocol(monitor, conn.hello?.topologyVersion)));\n            callback(undefined, conn.hello);\n        }\n    });\n}\nfunction monitorServer(monitor) {\n    return (callback) => {\n        if (monitor.s.state === STATE_MONITORING) {\n            process.nextTick(callback);\n            return;\n        }\n        stateTransition(monitor, STATE_MONITORING);\n        function done() {\n            if (!isInCloseState(monitor)) {\n                stateTransition(monitor, STATE_IDLE);\n            }\n            callback();\n        }\n        checkServer(monitor, (err, hello) => {\n            if (err) {\n                // otherwise an error occurred on initial discovery, also bail\n                if (monitor[kServer].description.type === common_1.ServerType.Unknown) {\n                    return done();\n                }\n            }\n            // if the check indicates streaming is supported, immediately reschedule monitoring\n            if (useStreamingProtocol(monitor, hello?.topologyVersion)) {\n                (0, timers_1.setTimeout)(() => {\n                    if (!isInCloseState(monitor)) {\n                        monitor[kMonitorId]?.wake();\n                    }\n                }, 0);\n            }\n            done();\n        });\n    };\n}\nfunction makeTopologyVersion(tv) {\n    return {\n        processId: tv.processId,\n        // tests mock counter as just number, but in a real situation counter should always be a Long\n        // TODO(NODE-2674): Preserve int64 sent from MongoDB\n        counter: bson_1.Long.isLong(tv.counter) ? tv.counter : bson_1.Long.fromNumber(tv.counter)\n    };\n}\n/** @internal */\nclass RTTPinger {\n    constructor(cancellationToken, options) {\n        this.connection = undefined;\n        this[kCancellationToken] = cancellationToken;\n        this[kRoundTripTime] = 0;\n        this.closed = false;\n        const heartbeatFrequencyMS = options.heartbeatFrequencyMS;\n        this[kMonitorId] = (0, timers_1.setTimeout)(() => measureRoundTripTime(this, options), heartbeatFrequencyMS);\n    }\n    get roundTripTime() {\n        return this[kRoundTripTime];\n    }\n    close() {\n        this.closed = true;\n        (0, timers_1.clearTimeout)(this[kMonitorId]);\n        this.connection?.destroy({ force: true });\n        this.connection = undefined;\n    }\n}\nexports.RTTPinger = RTTPinger;\nfunction measureRoundTripTime(rttPinger, options) {\n    const start = (0, utils_1.now)();\n    options.cancellationToken = rttPinger[kCancellationToken];\n    const heartbeatFrequencyMS = options.heartbeatFrequencyMS;\n    if (rttPinger.closed) {\n        return;\n    }\n    function measureAndReschedule(conn) {\n        if (rttPinger.closed) {\n            conn?.destroy({ force: true });\n            return;\n        }\n        if (rttPinger.connection == null) {\n            rttPinger.connection = conn;\n        }\n        rttPinger[kRoundTripTime] = (0, utils_1.calculateDurationInMs)(start);\n        rttPinger[kMonitorId] = (0, timers_1.setTimeout)(() => measureRoundTripTime(rttPinger, options), heartbeatFrequencyMS);\n    }\n    const connection = rttPinger.connection;\n    if (connection == null) {\n        (0, connect_1.connect)(options, (err, conn) => {\n            if (err) {\n                rttPinger.connection = undefined;\n                rttPinger[kRoundTripTime] = 0;\n                return;\n            }\n            measureAndReschedule(conn);\n        });\n        return;\n    }\n    const commandName = connection.serverApi?.version || connection.helloOk ? 'hello' : constants_1.LEGACY_HELLO_COMMAND;\n    connection.commandAsync((0, utils_1.ns)('admin.$cmd'), { [commandName]: 1 }, undefined).then(() => measureAndReschedule(), () => {\n        rttPinger.connection?.destroy({ force: true });\n        rttPinger.connection = undefined;\n        rttPinger[kRoundTripTime] = 0;\n        return;\n    });\n}\n/**\n * @internal\n */\nclass MonitorInterval {\n    constructor(fn, options = {}) {\n        this.isExpeditedCallToFnScheduled = false;\n        this.stopped = false;\n        this.isExecutionInProgress = false;\n        this.hasExecutedOnce = false;\n        this._executeAndReschedule = () => {\n            if (this.stopped)\n                return;\n            if (this.timerId) {\n                (0, timers_1.clearTimeout)(this.timerId);\n            }\n            this.isExpeditedCallToFnScheduled = false;\n            this.isExecutionInProgress = true;\n            this.fn(() => {\n                this.lastExecutionEnded = (0, utils_1.now)();\n                this.isExecutionInProgress = false;\n                this._reschedule(this.heartbeatFrequencyMS);\n            });\n        };\n        this.fn = fn;\n        this.lastExecutionEnded = -Infinity;\n        this.heartbeatFrequencyMS = options.heartbeatFrequencyMS ?? 1000;\n        this.minHeartbeatFrequencyMS = options.minHeartbeatFrequencyMS ?? 500;\n        if (options.immediate) {\n            this._executeAndReschedule();\n        }\n        else {\n            this._reschedule(undefined);\n        }\n    }\n    wake() {\n        const currentTime = (0, utils_1.now)();\n        const timeSinceLastCall = currentTime - this.lastExecutionEnded;\n        // TODO(NODE-4674): Add error handling and logging to the monitor\n        if (timeSinceLastCall < 0) {\n            return this._executeAndReschedule();\n        }\n        if (this.isExecutionInProgress) {\n            return;\n        }\n        // debounce multiple calls to wake within the `minInterval`\n        if (this.isExpeditedCallToFnScheduled) {\n            return;\n        }\n        // reschedule a call as soon as possible, ensuring the call never happens\n        // faster than the `minInterval`\n        if (timeSinceLastCall < this.minHeartbeatFrequencyMS) {\n            this.isExpeditedCallToFnScheduled = true;\n            this._reschedule(this.minHeartbeatFrequencyMS - timeSinceLastCall);\n            return;\n        }\n        this._executeAndReschedule();\n    }\n    stop() {\n        this.stopped = true;\n        if (this.timerId) {\n            (0, timers_1.clearTimeout)(this.timerId);\n            this.timerId = undefined;\n        }\n        this.lastExecutionEnded = -Infinity;\n        this.isExpeditedCallToFnScheduled = false;\n    }\n    toString() {\n        return JSON.stringify(this);\n    }\n    toJSON() {\n        const currentTime = (0, utils_1.now)();\n        const timeSinceLastCall = currentTime - this.lastExecutionEnded;\n        return {\n            timerId: this.timerId != null ? 'set' : 'cleared',\n            lastCallTime: this.lastExecutionEnded,\n            isExpeditedCheckScheduled: this.isExpeditedCallToFnScheduled,\n            stopped: this.stopped,\n            heartbeatFrequencyMS: this.heartbeatFrequencyMS,\n            minHeartbeatFrequencyMS: this.minHeartbeatFrequencyMS,\n            currentTime,\n            timeSinceLastCall\n        };\n    }\n    _reschedule(ms) {\n        if (this.stopped)\n            return;\n        if (this.timerId) {\n            (0, timers_1.clearTimeout)(this.timerId);\n        }\n        this.timerId = (0, timers_1.setTimeout)(this._executeAndReschedule, ms || this.heartbeatFrequencyMS);\n    }\n}\nexports.MonitorInterval = MonitorInterval;\n//# sourceMappingURL=monitor.js.map"],"names":[],"mappings":"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"}},
    {"offset": {"line": 10572, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 10576, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/cmap/errors.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WaitQueueTimeoutError = exports.PoolClearedOnNetworkError = exports.PoolClearedError = exports.PoolClosedError = void 0;\nconst error_1 = require(\"../error\");\n/**\n * An error indicating a connection pool is closed\n * @category Error\n */\nclass PoolClosedError extends error_1.MongoDriverError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(pool) {\n        super('Attempted to check out a connection from closed connection pool');\n        this.address = pool.address;\n    }\n    get name() {\n        return 'MongoPoolClosedError';\n    }\n}\nexports.PoolClosedError = PoolClosedError;\n/**\n * An error indicating a connection pool is currently paused\n * @category Error\n */\nclass PoolClearedError extends error_1.MongoNetworkError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(pool, message) {\n        const errorMessage = message\n            ? message\n            : `Connection pool for ${pool.address} was cleared because another operation failed with: \"${pool.serverError?.message}\"`;\n        super(errorMessage, pool.serverError ? { cause: pool.serverError } : undefined);\n        this.address = pool.address;\n        this.addErrorLabel(error_1.MongoErrorLabel.PoolRequstedRetry);\n    }\n    get name() {\n        return 'MongoPoolClearedError';\n    }\n}\nexports.PoolClearedError = PoolClearedError;\n/**\n * An error indicating that a connection pool has been cleared after the monitor for that server timed out.\n * @category Error\n */\nclass PoolClearedOnNetworkError extends PoolClearedError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(pool) {\n        super(pool, `Connection to ${pool.address} interrupted due to server monitor timeout`);\n    }\n    get name() {\n        return 'PoolClearedOnNetworkError';\n    }\n}\nexports.PoolClearedOnNetworkError = PoolClearedOnNetworkError;\n/**\n * An error thrown when a request to check out a connection times out\n * @category Error\n */\nclass WaitQueueTimeoutError extends error_1.MongoDriverError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, address) {\n        super(message);\n        this.address = address;\n    }\n    get name() {\n        return 'MongoWaitQueueTimeoutError';\n    }\n}\nexports.WaitQueueTimeoutError = WaitQueueTimeoutError;\n//# sourceMappingURL=errors.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,qBAAqB,GAAG,QAAQ,yBAAyB,GAAG,QAAQ,gBAAgB,GAAG,QAAQ,eAAe,GAAG,KAAK;AAC9H,MAAM,UAAU;AAChB;;;CAGC,GACD,MAAM,wBAAwB,QAAQ,gBAAgB;IAClD;;;;;;;;;;MAUE,GACF,YAAY,IAAI,CAAE;QACd,KAAK,CAAC;QACN,IAAI,CAAC,OAAO,GAAG,KAAK,OAAO;IAC/B;IACA,IAAI,OAAO;QACP,OAAO;IACX;AACJ;AACA,QAAQ,eAAe,GAAG;AAC1B;;;CAGC,GACD,MAAM,yBAAyB,QAAQ,iBAAiB;IACpD;;;;;;;;;;MAUE,GACF,YAAY,IAAI,EAAE,OAAO,CAAE;QACvB,MAAM,eAAe,UACf,UACA,CAAC,oBAAoB,EAAE,KAAK,OAAO,CAAC,qDAAqD,EAAE,KAAK,WAAW,EAAE,QAAQ,CAAC,CAAC;QAC7H,KAAK,CAAC,cAAc,KAAK,WAAW,GAAG;YAAE,OAAO,KAAK,WAAW;QAAC,IAAI;QACrE,IAAI,CAAC,OAAO,GAAG,KAAK,OAAO;QAC3B,IAAI,CAAC,aAAa,CAAC,QAAQ,eAAe,CAAC,iBAAiB;IAChE;IACA,IAAI,OAAO;QACP,OAAO;IACX;AACJ;AACA,QAAQ,gBAAgB,GAAG;AAC3B;;;CAGC,GACD,MAAM,kCAAkC;IACpC;;;;;;;;;;MAUE,GACF,YAAY,IAAI,CAAE;QACd,KAAK,CAAC,MAAM,CAAC,cAAc,EAAE,KAAK,OAAO,CAAC,0CAA0C,CAAC;IACzF;IACA,IAAI,OAAO;QACP,OAAO;IACX;AACJ;AACA,QAAQ,yBAAyB,GAAG;AACpC;;;CAGC,GACD,MAAM,8BAA8B,QAAQ,gBAAgB;IACxD;;;;;;;;;;MAUE,GACF,YAAY,OAAO,EAAE,OAAO,CAAE;QAC1B,KAAK,CAAC;QACN,IAAI,CAAC,OAAO,GAAG;IACnB;IACA,IAAI,OAAO;QACP,OAAO;IACX;AACJ;AACA,QAAQ,qBAAqB,GAAG,uBAChC,kCAAkC"}},
    {"offset": {"line": 10677, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 10681, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/cmap/connection_pool.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConnectionPool = exports.PoolState = void 0;\nconst timers_1 = require(\"timers\");\nconst constants_1 = require(\"../constants\");\nconst error_1 = require(\"../error\");\nconst mongo_types_1 = require(\"../mongo_types\");\nconst utils_1 = require(\"../utils\");\nconst connect_1 = require(\"./connect\");\nconst connection_1 = require(\"./connection\");\nconst connection_pool_events_1 = require(\"./connection_pool_events\");\nconst errors_1 = require(\"./errors\");\nconst metrics_1 = require(\"./metrics\");\n/** @internal */\nconst kServer = Symbol('server');\n/** @internal */\nconst kConnections = Symbol('connections');\n/** @internal */\nconst kPending = Symbol('pending');\n/** @internal */\nconst kCheckedOut = Symbol('checkedOut');\n/** @internal */\nconst kMinPoolSizeTimer = Symbol('minPoolSizeTimer');\n/** @internal */\nconst kGeneration = Symbol('generation');\n/** @internal */\nconst kServiceGenerations = Symbol('serviceGenerations');\n/** @internal */\nconst kConnectionCounter = Symbol('connectionCounter');\n/** @internal */\nconst kCancellationToken = Symbol('cancellationToken');\n/** @internal */\nconst kWaitQueue = Symbol('waitQueue');\n/** @internal */\nconst kCancelled = Symbol('cancelled');\n/** @internal */\nconst kMetrics = Symbol('metrics');\n/** @internal */\nconst kProcessingWaitQueue = Symbol('processingWaitQueue');\n/** @internal */\nconst kPoolState = Symbol('poolState');\n/** @internal */\nexports.PoolState = Object.freeze({\n    paused: 'paused',\n    ready: 'ready',\n    closed: 'closed'\n});\n/**\n * A pool of connections which dynamically resizes, and emit events related to pool activity\n * @internal\n */\nclass ConnectionPool extends mongo_types_1.TypedEventEmitter {\n    constructor(server, options) {\n        super();\n        this.options = Object.freeze({\n            ...options,\n            connectionType: connection_1.Connection,\n            maxPoolSize: options.maxPoolSize ?? 100,\n            minPoolSize: options.minPoolSize ?? 0,\n            maxConnecting: options.maxConnecting ?? 2,\n            maxIdleTimeMS: options.maxIdleTimeMS ?? 0,\n            waitQueueTimeoutMS: options.waitQueueTimeoutMS ?? 0,\n            minPoolSizeCheckFrequencyMS: options.minPoolSizeCheckFrequencyMS ?? 100,\n            autoEncrypter: options.autoEncrypter,\n            metadata: options.metadata\n        });\n        if (this.options.minPoolSize > this.options.maxPoolSize) {\n            throw new error_1.MongoInvalidArgumentError('Connection pool minimum size must not be greater than maximum pool size');\n        }\n        this[kPoolState] = exports.PoolState.paused;\n        this[kServer] = server;\n        this[kConnections] = new utils_1.List();\n        this[kPending] = 0;\n        this[kCheckedOut] = new Set();\n        this[kMinPoolSizeTimer] = undefined;\n        this[kGeneration] = 0;\n        this[kServiceGenerations] = new Map();\n        this[kConnectionCounter] = (0, utils_1.makeCounter)(1);\n        this[kCancellationToken] = new mongo_types_1.CancellationToken();\n        this[kCancellationToken].setMaxListeners(Infinity);\n        this[kWaitQueue] = new utils_1.List();\n        this[kMetrics] = new metrics_1.ConnectionPoolMetrics();\n        this[kProcessingWaitQueue] = false;\n        this.mongoLogger = this[kServer].topology.client.mongoLogger;\n        this.component = 'connection';\n        process.nextTick(() => {\n            this.emitAndLog(ConnectionPool.CONNECTION_POOL_CREATED, new connection_pool_events_1.ConnectionPoolCreatedEvent(this));\n        });\n    }\n    /** The address of the endpoint the pool is connected to */\n    get address() {\n        return this.options.hostAddress.toString();\n    }\n    /**\n     * Check if the pool has been closed\n     *\n     * TODO(NODE-3263): We can remove this property once shell no longer needs it\n     */\n    get closed() {\n        return this[kPoolState] === exports.PoolState.closed;\n    }\n    /** An integer representing the SDAM generation of the pool */\n    get generation() {\n        return this[kGeneration];\n    }\n    /** An integer expressing how many total connections (available + pending + in use) the pool currently has */\n    get totalConnectionCount() {\n        return (this.availableConnectionCount + this.pendingConnectionCount + this.currentCheckedOutCount);\n    }\n    /** An integer expressing how many connections are currently available in the pool. */\n    get availableConnectionCount() {\n        return this[kConnections].length;\n    }\n    get pendingConnectionCount() {\n        return this[kPending];\n    }\n    get currentCheckedOutCount() {\n        return this[kCheckedOut].size;\n    }\n    get waitQueueSize() {\n        return this[kWaitQueue].length;\n    }\n    get loadBalanced() {\n        return this.options.loadBalanced;\n    }\n    get serviceGenerations() {\n        return this[kServiceGenerations];\n    }\n    get serverError() {\n        return this[kServer].description.error;\n    }\n    /**\n     * This is exposed ONLY for use in mongosh, to enable\n     * killing all connections if a user quits the shell with\n     * operations in progress.\n     *\n     * This property may be removed as a part of NODE-3263.\n     */\n    get checkedOutConnections() {\n        return this[kCheckedOut];\n    }\n    /**\n     * Get the metrics information for the pool when a wait queue timeout occurs.\n     */\n    waitQueueErrorMetrics() {\n        return this[kMetrics].info(this.options.maxPoolSize);\n    }\n    /**\n     * Set the pool state to \"ready\"\n     */\n    ready() {\n        if (this[kPoolState] !== exports.PoolState.paused) {\n            return;\n        }\n        this[kPoolState] = exports.PoolState.ready;\n        this.emitAndLog(ConnectionPool.CONNECTION_POOL_READY, new connection_pool_events_1.ConnectionPoolReadyEvent(this));\n        (0, timers_1.clearTimeout)(this[kMinPoolSizeTimer]);\n        this.ensureMinPoolSize();\n    }\n    /**\n     * Check a connection out of this pool. The connection will continue to be tracked, but no reference to it\n     * will be held by the pool. This means that if a connection is checked out it MUST be checked back in or\n     * explicitly destroyed by the new owner.\n     */\n    checkOut(callback) {\n        this.emitAndLog(ConnectionPool.CONNECTION_CHECK_OUT_STARTED, new connection_pool_events_1.ConnectionCheckOutStartedEvent(this));\n        const waitQueueTimeoutMS = this.options.waitQueueTimeoutMS;\n        const waitQueueMember = {\n            callback,\n            timeoutController: new utils_1.TimeoutController(waitQueueTimeoutMS)\n        };\n        waitQueueMember.timeoutController.signal.addEventListener('abort', () => {\n            waitQueueMember[kCancelled] = true;\n            waitQueueMember.timeoutController.clear();\n            this.emitAndLog(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, 'timeout'));\n            waitQueueMember.callback(new errors_1.WaitQueueTimeoutError(this.loadBalanced\n                ? this.waitQueueErrorMetrics()\n                : 'Timed out while checking out a connection from connection pool', this.address));\n        });\n        this[kWaitQueue].push(waitQueueMember);\n        process.nextTick(() => this.processWaitQueue());\n    }\n    /**\n     * Check a connection into the pool.\n     *\n     * @param connection - The connection to check in\n     */\n    checkIn(connection) {\n        if (!this[kCheckedOut].has(connection)) {\n            return;\n        }\n        const poolClosed = this.closed;\n        const stale = this.connectionIsStale(connection);\n        const willDestroy = !!(poolClosed || stale || connection.closed);\n        if (!willDestroy) {\n            connection.markAvailable();\n            this[kConnections].unshift(connection);\n        }\n        this[kCheckedOut].delete(connection);\n        this.emitAndLog(ConnectionPool.CONNECTION_CHECKED_IN, new connection_pool_events_1.ConnectionCheckedInEvent(this, connection));\n        if (willDestroy) {\n            const reason = connection.closed ? 'error' : poolClosed ? 'poolClosed' : 'stale';\n            this.destroyConnection(connection, reason);\n        }\n        process.nextTick(() => this.processWaitQueue());\n    }\n    /**\n     * Clear the pool\n     *\n     * Pool reset is handled by incrementing the pool's generation count. Any existing connection of a\n     * previous generation will eventually be pruned during subsequent checkouts.\n     */\n    clear(options = {}) {\n        if (this.closed) {\n            return;\n        }\n        // handle load balanced case\n        if (this.loadBalanced) {\n            const { serviceId } = options;\n            if (!serviceId) {\n                throw new error_1.MongoRuntimeError('ConnectionPool.clear() called in load balanced mode with no serviceId.');\n            }\n            const sid = serviceId.toHexString();\n            const generation = this.serviceGenerations.get(sid);\n            // Only need to worry if the generation exists, since it should\n            // always be there but typescript needs the check.\n            if (generation == null) {\n                throw new error_1.MongoRuntimeError('Service generations are required in load balancer mode.');\n            }\n            else {\n                // Increment the generation for the service id.\n                this.serviceGenerations.set(sid, generation + 1);\n            }\n            this.emitAndLog(ConnectionPool.CONNECTION_POOL_CLEARED, new connection_pool_events_1.ConnectionPoolClearedEvent(this, { serviceId }));\n            return;\n        }\n        // handle non load-balanced case\n        const interruptInUseConnections = options.interruptInUseConnections ?? false;\n        const oldGeneration = this[kGeneration];\n        this[kGeneration] += 1;\n        const alreadyPaused = this[kPoolState] === exports.PoolState.paused;\n        this[kPoolState] = exports.PoolState.paused;\n        this.clearMinPoolSizeTimer();\n        if (!alreadyPaused) {\n            this.emitAndLog(ConnectionPool.CONNECTION_POOL_CLEARED, new connection_pool_events_1.ConnectionPoolClearedEvent(this, {\n                interruptInUseConnections\n            }));\n        }\n        if (interruptInUseConnections) {\n            process.nextTick(() => this.interruptInUseConnections(oldGeneration));\n        }\n        this.processWaitQueue();\n    }\n    /**\n     * Closes all stale in-use connections in the pool with a resumable PoolClearedOnNetworkError.\n     *\n     * Only connections where `connection.generation <= minGeneration` are killed.\n     */\n    interruptInUseConnections(minGeneration) {\n        for (const connection of this[kCheckedOut]) {\n            if (connection.generation <= minGeneration) {\n                this.checkIn(connection);\n                connection.onError(new errors_1.PoolClearedOnNetworkError(this));\n            }\n        }\n    }\n    close(_options, _cb) {\n        let options = _options;\n        const callback = (_cb ?? _options);\n        if (typeof options === 'function') {\n            options = {};\n        }\n        options = Object.assign({ force: false }, options);\n        if (this.closed) {\n            return callback();\n        }\n        // immediately cancel any in-flight connections\n        this[kCancellationToken].emit('cancel');\n        // end the connection counter\n        if (typeof this[kConnectionCounter].return === 'function') {\n            this[kConnectionCounter].return(undefined);\n        }\n        this[kPoolState] = exports.PoolState.closed;\n        this.clearMinPoolSizeTimer();\n        this.processWaitQueue();\n        (0, utils_1.eachAsync)(this[kConnections].toArray(), (conn, cb) => {\n            this.emitAndLog(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(this, conn, 'poolClosed'));\n            conn.destroy({ force: !!options.force }, cb);\n        }, err => {\n            this[kConnections].clear();\n            this.emitAndLog(ConnectionPool.CONNECTION_POOL_CLOSED, new connection_pool_events_1.ConnectionPoolClosedEvent(this));\n            callback(err);\n        });\n    }\n    /**\n     * Runs a lambda with an implicitly checked out connection, checking that connection back in when the lambda\n     * has completed by calling back.\n     *\n     * NOTE: please note the required signature of `fn`\n     *\n     * @remarks When in load balancer mode, connections can be pinned to cursors or transactions.\n     *   In these cases we pass the connection in to this method to ensure it is used and a new\n     *   connection is not checked out.\n     *\n     * @param conn - A pinned connection for use in load balancing mode.\n     * @param fn - A function which operates on a managed connection\n     * @param callback - The original callback\n     */\n    withConnection(conn, fn, callback) {\n        if (conn) {\n            // use the provided connection, and do _not_ check it in after execution\n            fn(undefined, conn, (fnErr, result) => {\n                if (fnErr) {\n                    return this.withReauthentication(fnErr, conn, fn, callback);\n                }\n                callback(undefined, result);\n            });\n            return;\n        }\n        this.checkOut((err, conn) => {\n            // don't callback with `err` here, we might want to act upon it inside `fn`\n            fn(err, conn, (fnErr, result) => {\n                if (fnErr) {\n                    if (conn) {\n                        this.withReauthentication(fnErr, conn, fn, callback);\n                    }\n                    else {\n                        callback(fnErr);\n                    }\n                }\n                else {\n                    callback(undefined, result);\n                }\n                if (conn) {\n                    this.checkIn(conn);\n                }\n            });\n        });\n    }\n    withReauthentication(fnErr, conn, fn, callback) {\n        if (fnErr instanceof error_1.MongoError && fnErr.code === error_1.MONGODB_ERROR_CODES.Reauthenticate) {\n            this.reauthenticate(conn, fn, (error, res) => {\n                if (error) {\n                    return callback(error);\n                }\n                callback(undefined, res);\n            });\n        }\n        else {\n            callback(fnErr);\n        }\n    }\n    /**\n     * Reauthenticate on the same connection and then retry the operation.\n     */\n    reauthenticate(connection, fn, callback) {\n        const authContext = connection.authContext;\n        if (!authContext) {\n            return callback(new error_1.MongoRuntimeError('No auth context found on connection.'));\n        }\n        const credentials = authContext.credentials;\n        if (!credentials) {\n            return callback(new error_1.MongoMissingCredentialsError('Connection is missing credentials when asked to reauthenticate'));\n        }\n        const resolvedCredentials = credentials.resolveAuthMechanism(connection.hello || undefined);\n        const provider = connect_1.AUTH_PROVIDERS.get(resolvedCredentials.mechanism);\n        if (!provider) {\n            return callback(new error_1.MongoMissingCredentialsError(`Reauthenticate failed due to no auth provider for ${credentials.mechanism}`));\n        }\n        provider.reauth(authContext).then(() => {\n            fn(undefined, connection, (fnErr, fnResult) => {\n                if (fnErr) {\n                    return callback(fnErr);\n                }\n                callback(undefined, fnResult);\n            });\n        }, error => callback(error));\n    }\n    /** Clear the min pool size timer */\n    clearMinPoolSizeTimer() {\n        const minPoolSizeTimer = this[kMinPoolSizeTimer];\n        if (minPoolSizeTimer) {\n            (0, timers_1.clearTimeout)(minPoolSizeTimer);\n        }\n    }\n    destroyConnection(connection, reason) {\n        this.emitAndLog(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(this, connection, reason));\n        // destroy the connection\n        process.nextTick(() => connection.destroy({ force: false }));\n    }\n    connectionIsStale(connection) {\n        const serviceId = connection.serviceId;\n        if (this.loadBalanced && serviceId) {\n            const sid = serviceId.toHexString();\n            const generation = this.serviceGenerations.get(sid);\n            return connection.generation !== generation;\n        }\n        return connection.generation !== this[kGeneration];\n    }\n    connectionIsIdle(connection) {\n        return !!(this.options.maxIdleTimeMS && connection.idleTime > this.options.maxIdleTimeMS);\n    }\n    /**\n     * Destroys a connection if the connection is perished.\n     *\n     * @returns `true` if the connection was destroyed, `false` otherwise.\n     */\n    destroyConnectionIfPerished(connection) {\n        const isStale = this.connectionIsStale(connection);\n        const isIdle = this.connectionIsIdle(connection);\n        if (!isStale && !isIdle && !connection.closed) {\n            return false;\n        }\n        const reason = connection.closed ? 'error' : isStale ? 'stale' : 'idle';\n        this.destroyConnection(connection, reason);\n        return true;\n    }\n    createConnection(callback) {\n        const connectOptions = {\n            ...this.options,\n            id: this[kConnectionCounter].next().value,\n            generation: this[kGeneration],\n            cancellationToken: this[kCancellationToken]\n        };\n        this[kPending]++;\n        // This is our version of a \"virtual\" no-I/O connection as the spec requires\n        this.emitAndLog(ConnectionPool.CONNECTION_CREATED, new connection_pool_events_1.ConnectionCreatedEvent(this, { id: connectOptions.id }));\n        (0, connect_1.connect)(connectOptions, (err, connection) => {\n            if (err || !connection) {\n                this[kPending]--;\n                this.emitAndLog(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(this, { id: connectOptions.id, serviceId: undefined }, 'error', \n                // TODO(NODE-5192): Remove this cast\n                err));\n                if (err instanceof error_1.MongoNetworkError || err instanceof error_1.MongoServerError) {\n                    err.connectionGeneration = connectOptions.generation;\n                }\n                callback(err ?? new error_1.MongoRuntimeError('Connection creation failed without error'));\n                return;\n            }\n            // The pool might have closed since we started trying to create a connection\n            if (this[kPoolState] !== exports.PoolState.ready) {\n                this[kPending]--;\n                connection.destroy({ force: true });\n                callback(this.closed ? new errors_1.PoolClosedError(this) : new errors_1.PoolClearedError(this));\n                return;\n            }\n            // forward all events from the connection to the pool\n            for (const event of [...constants_1.APM_EVENTS, connection_1.Connection.CLUSTER_TIME_RECEIVED]) {\n                connection.on(event, (e) => this.emit(event, e));\n            }\n            if (this.loadBalanced) {\n                connection.on(connection_1.Connection.PINNED, pinType => this[kMetrics].markPinned(pinType));\n                connection.on(connection_1.Connection.UNPINNED, pinType => this[kMetrics].markUnpinned(pinType));\n                const serviceId = connection.serviceId;\n                if (serviceId) {\n                    let generation;\n                    const sid = serviceId.toHexString();\n                    if ((generation = this.serviceGenerations.get(sid))) {\n                        connection.generation = generation;\n                    }\n                    else {\n                        this.serviceGenerations.set(sid, 0);\n                        connection.generation = 0;\n                    }\n                }\n            }\n            connection.markAvailable();\n            this.emitAndLog(ConnectionPool.CONNECTION_READY, new connection_pool_events_1.ConnectionReadyEvent(this, connection));\n            this[kPending]--;\n            callback(undefined, connection);\n            return;\n        });\n    }\n    ensureMinPoolSize() {\n        const minPoolSize = this.options.minPoolSize;\n        if (this[kPoolState] !== exports.PoolState.ready || minPoolSize === 0) {\n            return;\n        }\n        this[kConnections].prune(connection => this.destroyConnectionIfPerished(connection));\n        if (this.totalConnectionCount < minPoolSize &&\n            this.pendingConnectionCount < this.options.maxConnecting) {\n            // NOTE: ensureMinPoolSize should not try to get all the pending\n            // connection permits because that potentially delays the availability of\n            // the connection to a checkout request\n            this.createConnection((err, connection) => {\n                if (err) {\n                    this[kServer].handleError(err);\n                }\n                if (!err && connection) {\n                    this[kConnections].push(connection);\n                    process.nextTick(() => this.processWaitQueue());\n                }\n                if (this[kPoolState] === exports.PoolState.ready) {\n                    (0, timers_1.clearTimeout)(this[kMinPoolSizeTimer]);\n                    this[kMinPoolSizeTimer] = (0, timers_1.setTimeout)(() => this.ensureMinPoolSize(), this.options.minPoolSizeCheckFrequencyMS);\n                }\n            });\n        }\n        else {\n            (0, timers_1.clearTimeout)(this[kMinPoolSizeTimer]);\n            this[kMinPoolSizeTimer] = (0, timers_1.setTimeout)(() => this.ensureMinPoolSize(), this.options.minPoolSizeCheckFrequencyMS);\n        }\n    }\n    processWaitQueue() {\n        if (this[kProcessingWaitQueue]) {\n            return;\n        }\n        this[kProcessingWaitQueue] = true;\n        while (this.waitQueueSize) {\n            const waitQueueMember = this[kWaitQueue].first();\n            if (!waitQueueMember) {\n                this[kWaitQueue].shift();\n                continue;\n            }\n            if (waitQueueMember[kCancelled]) {\n                this[kWaitQueue].shift();\n                continue;\n            }\n            if (this[kPoolState] !== exports.PoolState.ready) {\n                const reason = this.closed ? 'poolClosed' : 'connectionError';\n                const error = this.closed ? new errors_1.PoolClosedError(this) : new errors_1.PoolClearedError(this);\n                this.emitAndLog(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, reason, error));\n                waitQueueMember.timeoutController.clear();\n                this[kWaitQueue].shift();\n                waitQueueMember.callback(error);\n                continue;\n            }\n            if (!this.availableConnectionCount) {\n                break;\n            }\n            const connection = this[kConnections].shift();\n            if (!connection) {\n                break;\n            }\n            if (!this.destroyConnectionIfPerished(connection)) {\n                this[kCheckedOut].add(connection);\n                this.emitAndLog(ConnectionPool.CONNECTION_CHECKED_OUT, new connection_pool_events_1.ConnectionCheckedOutEvent(this, connection));\n                waitQueueMember.timeoutController.clear();\n                this[kWaitQueue].shift();\n                waitQueueMember.callback(undefined, connection);\n            }\n        }\n        const { maxPoolSize, maxConnecting } = this.options;\n        while (this.waitQueueSize > 0 &&\n            this.pendingConnectionCount < maxConnecting &&\n            (maxPoolSize === 0 || this.totalConnectionCount < maxPoolSize)) {\n            const waitQueueMember = this[kWaitQueue].shift();\n            if (!waitQueueMember || waitQueueMember[kCancelled]) {\n                continue;\n            }\n            this.createConnection((err, connection) => {\n                if (waitQueueMember[kCancelled]) {\n                    if (!err && connection) {\n                        this[kConnections].push(connection);\n                    }\n                }\n                else {\n                    if (err) {\n                        this.emitAndLog(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, \n                        // TODO(NODE-5192): Remove this cast\n                        new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, 'connectionError', err));\n                    }\n                    else if (connection) {\n                        this[kCheckedOut].add(connection);\n                        this.emitAndLog(ConnectionPool.CONNECTION_CHECKED_OUT, new connection_pool_events_1.ConnectionCheckedOutEvent(this, connection));\n                    }\n                    waitQueueMember.timeoutController.clear();\n                    waitQueueMember.callback(err, connection);\n                }\n                process.nextTick(() => this.processWaitQueue());\n            });\n        }\n        this[kProcessingWaitQueue] = false;\n    }\n}\n/**\n * Emitted when the connection pool is created.\n * @event\n */\nConnectionPool.CONNECTION_POOL_CREATED = constants_1.CONNECTION_POOL_CREATED;\n/**\n * Emitted once when the connection pool is closed\n * @event\n */\nConnectionPool.CONNECTION_POOL_CLOSED = constants_1.CONNECTION_POOL_CLOSED;\n/**\n * Emitted each time the connection pool is cleared and it's generation incremented\n * @event\n */\nConnectionPool.CONNECTION_POOL_CLEARED = constants_1.CONNECTION_POOL_CLEARED;\n/**\n * Emitted each time the connection pool is marked ready\n * @event\n */\nConnectionPool.CONNECTION_POOL_READY = constants_1.CONNECTION_POOL_READY;\n/**\n * Emitted when a connection is created.\n * @event\n */\nConnectionPool.CONNECTION_CREATED = constants_1.CONNECTION_CREATED;\n/**\n * Emitted when a connection becomes established, and is ready to use\n * @event\n */\nConnectionPool.CONNECTION_READY = constants_1.CONNECTION_READY;\n/**\n * Emitted when a connection is closed\n * @event\n */\nConnectionPool.CONNECTION_CLOSED = constants_1.CONNECTION_CLOSED;\n/**\n * Emitted when an attempt to check out a connection begins\n * @event\n */\nConnectionPool.CONNECTION_CHECK_OUT_STARTED = constants_1.CONNECTION_CHECK_OUT_STARTED;\n/**\n * Emitted when an attempt to check out a connection fails\n * @event\n */\nConnectionPool.CONNECTION_CHECK_OUT_FAILED = constants_1.CONNECTION_CHECK_OUT_FAILED;\n/**\n * Emitted each time a connection is successfully checked out of the connection pool\n * @event\n */\nConnectionPool.CONNECTION_CHECKED_OUT = constants_1.CONNECTION_CHECKED_OUT;\n/**\n * Emitted each time a connection is successfully checked into the connection pool\n * @event\n */\nConnectionPool.CONNECTION_CHECKED_IN = constants_1.CONNECTION_CHECKED_IN;\nexports.ConnectionPool = ConnectionPool;\n//# sourceMappingURL=connection_pool.js.map"],"names":[],"mappings":"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"}},
    {"offset": {"line": 11274, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 11278, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/sdam/server.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Server = void 0;\nconst util_1 = require(\"util\");\nconst connection_1 = require(\"../cmap/connection\");\nconst connection_pool_1 = require(\"../cmap/connection_pool\");\nconst errors_1 = require(\"../cmap/errors\");\nconst constants_1 = require(\"../constants\");\nconst error_1 = require(\"../error\");\nconst mongo_types_1 = require(\"../mongo_types\");\nconst transactions_1 = require(\"../transactions\");\nconst utils_1 = require(\"../utils\");\nconst common_1 = require(\"./common\");\nconst monitor_1 = require(\"./monitor\");\nconst server_description_1 = require(\"./server_description\");\nconst stateTransition = (0, utils_1.makeStateMachine)({\n    [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, common_1.STATE_CONNECTING],\n    [common_1.STATE_CONNECTING]: [common_1.STATE_CONNECTING, common_1.STATE_CLOSING, common_1.STATE_CONNECTED, common_1.STATE_CLOSED],\n    [common_1.STATE_CONNECTED]: [common_1.STATE_CONNECTED, common_1.STATE_CLOSING, common_1.STATE_CLOSED],\n    [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, common_1.STATE_CLOSED]\n});\n/** @internal */\nclass Server extends mongo_types_1.TypedEventEmitter {\n    /**\n     * Create a server\n     */\n    constructor(topology, description, options) {\n        super();\n        this.commandAsync = (0, util_1.promisify)((ns, cmd, options, \n        // callback type defines Document result because result is never nullish when it succeeds, otherwise promise rejects\n        callback) => this.command(ns, cmd, options, callback));\n        this.serverApi = options.serverApi;\n        const poolOptions = { hostAddress: description.hostAddress, ...options };\n        this.topology = topology;\n        this.pool = new connection_pool_1.ConnectionPool(this, poolOptions);\n        this.s = {\n            description,\n            options,\n            state: common_1.STATE_CLOSED,\n            operationCount: 0\n        };\n        for (const event of [...constants_1.CMAP_EVENTS, ...constants_1.APM_EVENTS]) {\n            this.pool.on(event, (e) => this.emit(event, e));\n        }\n        this.pool.on(connection_1.Connection.CLUSTER_TIME_RECEIVED, (clusterTime) => {\n            this.clusterTime = clusterTime;\n        });\n        if (this.loadBalanced) {\n            this.monitor = null;\n            // monitoring is disabled in load balancing mode\n            return;\n        }\n        // create the monitor\n        this.monitor = new monitor_1.Monitor(this, this.s.options);\n        for (const event of constants_1.HEARTBEAT_EVENTS) {\n            this.monitor.on(event, (e) => this.emit(event, e));\n        }\n        this.monitor.on('resetServer', (error) => markServerUnknown(this, error));\n        this.monitor.on(Server.SERVER_HEARTBEAT_SUCCEEDED, (event) => {\n            this.emit(Server.DESCRIPTION_RECEIVED, new server_description_1.ServerDescription(this.description.hostAddress, event.reply, {\n                roundTripTime: calculateRoundTripTime(this.description.roundTripTime, event.duration)\n            }));\n            if (this.s.state === common_1.STATE_CONNECTING) {\n                stateTransition(this, common_1.STATE_CONNECTED);\n                this.emit(Server.CONNECT, this);\n            }\n        });\n    }\n    get clusterTime() {\n        return this.topology.clusterTime;\n    }\n    set clusterTime(clusterTime) {\n        this.topology.clusterTime = clusterTime;\n    }\n    get description() {\n        return this.s.description;\n    }\n    get name() {\n        return this.s.description.address;\n    }\n    get autoEncrypter() {\n        if (this.s.options && this.s.options.autoEncrypter) {\n            return this.s.options.autoEncrypter;\n        }\n        return;\n    }\n    get loadBalanced() {\n        return this.topology.description.type === common_1.TopologyType.LoadBalanced;\n    }\n    /**\n     * Initiate server connect\n     */\n    connect() {\n        if (this.s.state !== common_1.STATE_CLOSED) {\n            return;\n        }\n        stateTransition(this, common_1.STATE_CONNECTING);\n        // If in load balancer mode we automatically set the server to\n        // a load balancer. It never transitions out of this state and\n        // has no monitor.\n        if (!this.loadBalanced) {\n            this.monitor?.connect();\n        }\n        else {\n            stateTransition(this, common_1.STATE_CONNECTED);\n            this.emit(Server.CONNECT, this);\n        }\n    }\n    /** Destroy the server connection */\n    destroy(options, callback) {\n        if (typeof options === 'function') {\n            callback = options;\n            options = { force: false };\n        }\n        options = Object.assign({}, { force: false }, options);\n        if (this.s.state === common_1.STATE_CLOSED) {\n            if (typeof callback === 'function') {\n                callback();\n            }\n            return;\n        }\n        stateTransition(this, common_1.STATE_CLOSING);\n        if (!this.loadBalanced) {\n            this.monitor?.close();\n        }\n        this.pool.close(options, err => {\n            stateTransition(this, common_1.STATE_CLOSED);\n            this.emit('closed');\n            if (typeof callback === 'function') {\n                callback(err);\n            }\n        });\n    }\n    /**\n     * Immediately schedule monitoring of this server. If there already an attempt being made\n     * this will be a no-op.\n     */\n    requestCheck() {\n        if (!this.loadBalanced) {\n            this.monitor?.requestCheck();\n        }\n    }\n    /**\n     * Execute a command\n     * @internal\n     */\n    command(ns, cmd, options, callback) {\n        if (callback == null) {\n            throw new error_1.MongoInvalidArgumentError('Callback must be provided');\n        }\n        if (ns.db == null || typeof ns === 'string') {\n            throw new error_1.MongoInvalidArgumentError('Namespace must not be a string');\n        }\n        if (this.s.state === common_1.STATE_CLOSING || this.s.state === common_1.STATE_CLOSED) {\n            callback(new error_1.MongoServerClosedError());\n            return;\n        }\n        // Clone the options\n        const finalOptions = Object.assign({}, options, { wireProtocolCommand: false });\n        // There are cases where we need to flag the read preference not to get sent in\n        // the command, such as pre-5.0 servers attempting to perform an aggregate write\n        // with a non-primary read preference. In this case the effective read preference\n        // (primary) is not the same as the provided and must be removed completely.\n        if (finalOptions.omitReadPreference) {\n            delete finalOptions.readPreference;\n        }\n        const session = finalOptions.session;\n        const conn = session?.pinnedConnection;\n        // NOTE: This is a hack! We can't retrieve the connections used for executing an operation\n        //       (and prevent them from being checked back in) at the point of operation execution.\n        //       This should be considered as part of the work for NODE-2882\n        // NOTE:\n        //       When incrementing operation count, it's important that we increment it before we\n        //       attempt to check out a connection from the pool.  This ensures that operations that\n        //       are waiting for a connection are included in the operation count.  Load balanced\n        //       mode will only ever have a single server, so the operation count doesn't matter.\n        //       Incrementing the operation count above the logic to handle load balanced mode would\n        //       require special logic to decrement it again, or would double increment (the load\n        //       balanced code makes a recursive call).  Instead, we increment the count after this\n        //       check.\n        if (this.loadBalanced && session && conn == null && isPinnableCommand(cmd, session)) {\n            this.pool.checkOut((err, checkedOut) => {\n                if (err || checkedOut == null) {\n                    if (callback)\n                        return callback(err);\n                    return;\n                }\n                session.pin(checkedOut);\n                this.command(ns, cmd, finalOptions, callback);\n            });\n            return;\n        }\n        this.incrementOperationCount();\n        this.pool.withConnection(conn, (err, conn, cb) => {\n            if (err || !conn) {\n                this.decrementOperationCount();\n                if (!err) {\n                    return cb(new error_1.MongoRuntimeError('Failed to create connection without error'));\n                }\n                if (!(err instanceof errors_1.PoolClearedError)) {\n                    this.handleError(err);\n                }\n                return cb(err);\n            }\n            conn.command(ns, cmd, finalOptions, makeOperationHandler(this, conn, cmd, finalOptions, (error, response) => {\n                this.decrementOperationCount();\n                cb(error, response);\n            }));\n        }, callback);\n    }\n    /**\n     * Handle SDAM error\n     * @internal\n     */\n    handleError(error, connection) {\n        if (!(error instanceof error_1.MongoError)) {\n            return;\n        }\n        const isStaleError = error.connectionGeneration && error.connectionGeneration < this.pool.generation;\n        if (isStaleError) {\n            return;\n        }\n        const isNetworkNonTimeoutError = error instanceof error_1.MongoNetworkError && !(error instanceof error_1.MongoNetworkTimeoutError);\n        const isNetworkTimeoutBeforeHandshakeError = (0, error_1.isNetworkErrorBeforeHandshake)(error);\n        const isAuthHandshakeError = error.hasErrorLabel(error_1.MongoErrorLabel.HandshakeError);\n        if (isNetworkNonTimeoutError || isNetworkTimeoutBeforeHandshakeError || isAuthHandshakeError) {\n            // In load balanced mode we never mark the server as unknown and always\n            // clear for the specific service id.\n            if (!this.loadBalanced) {\n                error.addErrorLabel(error_1.MongoErrorLabel.ResetPool);\n                markServerUnknown(this, error);\n            }\n            else if (connection) {\n                this.pool.clear({ serviceId: connection.serviceId });\n            }\n        }\n        else {\n            if ((0, error_1.isSDAMUnrecoverableError)(error)) {\n                if (shouldHandleStateChangeError(this, error)) {\n                    const shouldClearPool = (0, utils_1.maxWireVersion)(this) <= 7 || (0, error_1.isNodeShuttingDownError)(error);\n                    if (this.loadBalanced && connection && shouldClearPool) {\n                        this.pool.clear({ serviceId: connection.serviceId });\n                    }\n                    if (!this.loadBalanced) {\n                        if (shouldClearPool) {\n                            error.addErrorLabel(error_1.MongoErrorLabel.ResetPool);\n                        }\n                        markServerUnknown(this, error);\n                        process.nextTick(() => this.requestCheck());\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Decrement the operation count, returning the new count.\n     */\n    decrementOperationCount() {\n        return (this.s.operationCount -= 1);\n    }\n    /**\n     * Increment the operation count, returning the new count.\n     */\n    incrementOperationCount() {\n        return (this.s.operationCount += 1);\n    }\n}\n/** @event */\nServer.SERVER_HEARTBEAT_STARTED = constants_1.SERVER_HEARTBEAT_STARTED;\n/** @event */\nServer.SERVER_HEARTBEAT_SUCCEEDED = constants_1.SERVER_HEARTBEAT_SUCCEEDED;\n/** @event */\nServer.SERVER_HEARTBEAT_FAILED = constants_1.SERVER_HEARTBEAT_FAILED;\n/** @event */\nServer.CONNECT = constants_1.CONNECT;\n/** @event */\nServer.DESCRIPTION_RECEIVED = constants_1.DESCRIPTION_RECEIVED;\n/** @event */\nServer.CLOSED = constants_1.CLOSED;\n/** @event */\nServer.ENDED = constants_1.ENDED;\nexports.Server = Server;\nfunction calculateRoundTripTime(oldRtt, duration) {\n    if (oldRtt === -1) {\n        return duration;\n    }\n    const alpha = 0.2;\n    return alpha * duration + (1 - alpha) * oldRtt;\n}\nfunction markServerUnknown(server, error) {\n    // Load balancer servers can never be marked unknown.\n    if (server.loadBalanced) {\n        return;\n    }\n    if (error instanceof error_1.MongoNetworkError && !(error instanceof error_1.MongoNetworkTimeoutError)) {\n        server.monitor?.reset();\n    }\n    server.emit(Server.DESCRIPTION_RECEIVED, new server_description_1.ServerDescription(server.description.hostAddress, undefined, { error }));\n}\nfunction isPinnableCommand(cmd, session) {\n    if (session) {\n        return (session.inTransaction() ||\n            'aggregate' in cmd ||\n            'find' in cmd ||\n            'getMore' in cmd ||\n            'listCollections' in cmd ||\n            'listIndexes' in cmd);\n    }\n    return false;\n}\nfunction connectionIsStale(pool, connection) {\n    if (connection.serviceId) {\n        return (connection.generation !== pool.serviceGenerations.get(connection.serviceId.toHexString()));\n    }\n    return connection.generation !== pool.generation;\n}\nfunction shouldHandleStateChangeError(server, err) {\n    const etv = err.topologyVersion;\n    const stv = server.description.topologyVersion;\n    return (0, server_description_1.compareTopologyVersion)(stv, etv) < 0;\n}\nfunction inActiveTransaction(session, cmd) {\n    return session && session.inTransaction() && !(0, transactions_1.isTransactionCommand)(cmd);\n}\n/** this checks the retryWrites option passed down from the client options, it\n * does not check if the server supports retryable writes */\nfunction isRetryableWritesEnabled(topology) {\n    return topology.s.options.retryWrites !== false;\n}\nfunction makeOperationHandler(server, connection, cmd, options, callback) {\n    const session = options?.session;\n    return function handleOperationResult(error, result) {\n        // We should not swallow an error if it is present.\n        if (error == null && result != null) {\n            return callback(undefined, result);\n        }\n        if (options != null && 'noResponse' in options && options.noResponse === true) {\n            return callback(undefined, null);\n        }\n        if (!error) {\n            return callback(new error_1.MongoUnexpectedServerResponseError('Empty response with no error'));\n        }\n        if (!(error instanceof error_1.MongoError)) {\n            // Node.js or some other error we have not special handling for\n            return callback(error);\n        }\n        if (connectionIsStale(server.pool, connection)) {\n            return callback(error);\n        }\n        if (error instanceof error_1.MongoNetworkError) {\n            if (session && !session.hasEnded && session.serverSession) {\n                session.serverSession.isDirty = true;\n            }\n            // inActiveTransaction check handles commit and abort.\n            if (inActiveTransaction(session, cmd) &&\n                !error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n                error.addErrorLabel(error_1.MongoErrorLabel.TransientTransactionError);\n            }\n            if ((isRetryableWritesEnabled(server.topology) || (0, transactions_1.isTransactionCommand)(cmd)) &&\n                (0, utils_1.supportsRetryableWrites)(server) &&\n                !inActiveTransaction(session, cmd)) {\n                error.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);\n            }\n        }\n        else {\n            if ((isRetryableWritesEnabled(server.topology) || (0, transactions_1.isTransactionCommand)(cmd)) &&\n                (0, error_1.needsRetryableWriteLabel)(error, (0, utils_1.maxWireVersion)(server)) &&\n                !inActiveTransaction(session, cmd)) {\n                error.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);\n            }\n        }\n        if (session &&\n            session.isPinned &&\n            error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n            session.unpin({ force: true });\n        }\n        server.handleError(error, connection);\n        return callback(error);\n    };\n}\n//# sourceMappingURL=server.js.map"],"names":[],"mappings":"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"}},
    {"offset": {"line": 11660, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 11664, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/mongo_logger.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MongoLogger = exports.stringifyWithMaxLen = exports.createStdioLogger = exports.MongoLoggableComponent = exports.SEVERITY_LEVEL_MAP = exports.DEFAULT_MAX_DOCUMENT_LENGTH = exports.SeverityLevel = void 0;\nconst bson_1 = require(\"bson\");\nconst util_1 = require(\"util\");\nconst constants_1 = require(\"./constants\");\nconst utils_1 = require(\"./utils\");\n/** @internal */\nexports.SeverityLevel = Object.freeze({\n    EMERGENCY: 'emergency',\n    ALERT: 'alert',\n    CRITICAL: 'critical',\n    ERROR: 'error',\n    WARNING: 'warn',\n    NOTICE: 'notice',\n    INFORMATIONAL: 'info',\n    DEBUG: 'debug',\n    TRACE: 'trace',\n    OFF: 'off'\n});\n/** @internal */\nexports.DEFAULT_MAX_DOCUMENT_LENGTH = 1000;\n/** @internal */\nclass SeverityLevelMap extends Map {\n    constructor(entries) {\n        const newEntries = [];\n        for (const [level, value] of entries) {\n            newEntries.push([value, level]);\n        }\n        newEntries.push(...entries);\n        super(newEntries);\n    }\n    getNumericSeverityLevel(severity) {\n        return this.get(severity);\n    }\n    getSeverityLevelName(level) {\n        return this.get(level);\n    }\n}\n/** @internal */\nexports.SEVERITY_LEVEL_MAP = new SeverityLevelMap([\n    [exports.SeverityLevel.OFF, -Infinity],\n    [exports.SeverityLevel.EMERGENCY, 0],\n    [exports.SeverityLevel.ALERT, 1],\n    [exports.SeverityLevel.CRITICAL, 2],\n    [exports.SeverityLevel.ERROR, 3],\n    [exports.SeverityLevel.WARNING, 4],\n    [exports.SeverityLevel.NOTICE, 5],\n    [exports.SeverityLevel.INFORMATIONAL, 6],\n    [exports.SeverityLevel.DEBUG, 7],\n    [exports.SeverityLevel.TRACE, 8]\n]);\n/** @internal */\nexports.MongoLoggableComponent = Object.freeze({\n    COMMAND: 'command',\n    TOPOLOGY: 'topology',\n    SERVER_SELECTION: 'serverSelection',\n    CONNECTION: 'connection',\n    CLIENT: 'client'\n});\n/**\n * Parses a string as one of SeverityLevel\n *\n * @param s - the value to be parsed\n * @returns one of SeverityLevel if value can be parsed as such, otherwise null\n */\nfunction parseSeverityFromString(s) {\n    const validSeverities = Object.values(exports.SeverityLevel);\n    const lowerSeverity = s?.toLowerCase();\n    if (lowerSeverity != null && validSeverities.includes(lowerSeverity)) {\n        return lowerSeverity;\n    }\n    return null;\n}\n/** @internal */\nfunction createStdioLogger(stream) {\n    return {\n        write: (log) => {\n            stream.write((0, util_1.inspect)(log, { compact: true, breakLength: Infinity }), 'utf-8');\n            return;\n        }\n    };\n}\nexports.createStdioLogger = createStdioLogger;\n/**\n * resolves the MONGODB_LOG_PATH and mongodbLogPath options from the environment and the\n * mongo client options respectively. The mongodbLogPath can be either 'stdout', 'stderr', a NodeJS\n * Writable or an object which has a `write` method with the signature:\n * ```ts\n * write(log: Log): void\n * ```\n *\n * @returns the MongoDBLogWritable object to write logs to\n */\nfunction resolveLogPath({ MONGODB_LOG_PATH }, { mongodbLogPath }) {\n    if (typeof mongodbLogPath === 'string' && /^stderr$/i.test(mongodbLogPath)) {\n        return createStdioLogger(process.stderr);\n    }\n    if (typeof mongodbLogPath === 'string' && /^stdout$/i.test(mongodbLogPath)) {\n        return createStdioLogger(process.stdout);\n    }\n    if (typeof mongodbLogPath === 'object' && typeof mongodbLogPath?.write === 'function') {\n        return mongodbLogPath;\n    }\n    if (MONGODB_LOG_PATH && /^stderr$/i.test(MONGODB_LOG_PATH)) {\n        return createStdioLogger(process.stderr);\n    }\n    if (MONGODB_LOG_PATH && /^stdout$/i.test(MONGODB_LOG_PATH)) {\n        return createStdioLogger(process.stdout);\n    }\n    return createStdioLogger(process.stderr);\n}\nfunction resolveSeverityConfiguration(clientOption, environmentOption, defaultSeverity) {\n    return (parseSeverityFromString(clientOption) ??\n        parseSeverityFromString(environmentOption) ??\n        defaultSeverity);\n}\nfunction compareSeverity(s0, s1) {\n    const s0Num = exports.SEVERITY_LEVEL_MAP.getNumericSeverityLevel(s0);\n    const s1Num = exports.SEVERITY_LEVEL_MAP.getNumericSeverityLevel(s1);\n    return s0Num < s1Num ? -1 : s0Num > s1Num ? 1 : 0;\n}\n/** @internal */\nfunction stringifyWithMaxLen(value, maxDocumentLength) {\n    const ejson = bson_1.EJSON.stringify(value);\n    return maxDocumentLength !== 0 && ejson.length > maxDocumentLength\n        ? `${ejson.slice(0, maxDocumentLength)}...`\n        : ejson;\n}\nexports.stringifyWithMaxLen = stringifyWithMaxLen;\nfunction isLogConvertible(obj) {\n    const objAsLogConvertible = obj;\n    // eslint-disable-next-line no-restricted-syntax\n    return objAsLogConvertible.toLog !== undefined && typeof objAsLogConvertible.toLog === 'function';\n}\nfunction attachCommandFields(log, commandEvent) {\n    log.commandName = commandEvent.commandName;\n    log.requestId = commandEvent.requestId;\n    log.driverConnectionId = commandEvent?.connectionId;\n    const { host, port } = utils_1.HostAddress.fromString(commandEvent.address).toHostPort();\n    log.serverHost = host;\n    log.serverPort = port;\n    if (commandEvent?.serviceId) {\n        log.serviceId = commandEvent.serviceId.toHexString();\n    }\n    return log;\n}\nfunction attachConnectionFields(log, connectionPoolEvent) {\n    const { host, port } = utils_1.HostAddress.fromString(connectionPoolEvent.address).toHostPort();\n    log.serverHost = host;\n    log.serverPort = port;\n    return log;\n}\nfunction defaultLogTransform(logObject, maxDocumentLength = exports.DEFAULT_MAX_DOCUMENT_LENGTH) {\n    let log = Object.create(null);\n    switch (logObject.name) {\n        case constants_1.COMMAND_STARTED:\n            log = attachCommandFields(log, logObject);\n            log.message = 'Command started';\n            log.command = stringifyWithMaxLen(logObject.command, maxDocumentLength);\n            log.databaseName = logObject.databaseName;\n            return log;\n        case constants_1.COMMAND_SUCCEEDED:\n            log = attachCommandFields(log, logObject);\n            log.message = 'Command succeeded';\n            log.durationMS = logObject.duration;\n            log.reply = stringifyWithMaxLen(logObject.reply, maxDocumentLength);\n            return log;\n        case constants_1.COMMAND_FAILED:\n            log = attachCommandFields(log, logObject);\n            log.message = 'Command failed';\n            log.durationMS = logObject.duration;\n            log.failure = logObject.failure;\n            return log;\n        case constants_1.CONNECTION_POOL_CREATED:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection pool created';\n            if (logObject.options) {\n                const { maxIdleTimeMS, minPoolSize, maxPoolSize, maxConnecting, waitQueueTimeoutMS } = logObject.options;\n                log = {\n                    ...log,\n                    maxIdleTimeMS,\n                    minPoolSize,\n                    maxPoolSize,\n                    maxConnecting,\n                    waitQueueTimeoutMS\n                };\n            }\n            return log;\n        case constants_1.CONNECTION_POOL_READY:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection pool ready';\n            return log;\n        case constants_1.CONNECTION_POOL_CLEARED:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection pool cleared';\n            if (logObject.serviceId?._bsontype === 'ObjectId') {\n                log.serviceId = logObject.serviceId.toHexString();\n            }\n            return log;\n        case constants_1.CONNECTION_POOL_CLOSED:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection pool closed';\n            return log;\n        case constants_1.CONNECTION_CREATED:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection created';\n            log.driverConnectionId = logObject.connectionId;\n            return log;\n        case constants_1.CONNECTION_READY:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection ready';\n            log.driverConnectionId = logObject.connectionId;\n            return log;\n        case constants_1.CONNECTION_CLOSED:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection closed';\n            log.driverConnectionId = logObject.connectionId;\n            switch (logObject.reason) {\n                case 'stale':\n                    log.reason = 'Connection became stale because the pool was cleared';\n                    break;\n                case 'idle':\n                    log.reason =\n                        'Connection has been available but unused for longer than the configured max idle time';\n                    break;\n                case 'error':\n                    log.reason = 'An error occurred while using the connection';\n                    if (logObject.error) {\n                        log.error = logObject.error;\n                    }\n                    break;\n                case 'poolClosed':\n                    log.reason = 'Connection pool was closed';\n                    break;\n                default:\n                    log.reason = `Unknown close reason: ${logObject.reason}`;\n            }\n            return log;\n        case constants_1.CONNECTION_CHECK_OUT_STARTED:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection checkout started';\n            return log;\n        case constants_1.CONNECTION_CHECK_OUT_FAILED:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection checkout failed';\n            switch (logObject.reason) {\n                case 'poolClosed':\n                    log.reason = 'Connection pool was closed';\n                    break;\n                case 'timeout':\n                    log.reason = 'Wait queue timeout elapsed without a connection becoming available';\n                    break;\n                case 'connectionError':\n                    log.reason = 'An error occurred while trying to establish a new connection';\n                    if (logObject.error) {\n                        log.error = logObject.error;\n                    }\n                    break;\n                default:\n                    log.reason = `Unknown close reason: ${logObject.reason}`;\n            }\n            return log;\n        case constants_1.CONNECTION_CHECKED_OUT:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection checked out';\n            log.driverConnectionId = logObject.connectionId;\n            return log;\n        case constants_1.CONNECTION_CHECKED_IN:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection checked in';\n            log.driverConnectionId = logObject.connectionId;\n            return log;\n        default:\n            for (const [key, value] of Object.entries(logObject)) {\n                if (value != null)\n                    log[key] = value;\n            }\n    }\n    return log;\n}\n/** @internal */\nclass MongoLogger {\n    constructor(options) {\n        /**\n         * This method should be used when logging errors that do not have a public driver API for\n         * reporting errors.\n         */\n        this.error = this.log.bind(this, 'error');\n        /**\n         * This method should be used to log situations where undesirable application behaviour might\n         * occur. For example, failing to end sessions on `MongoClient.close`.\n         */\n        this.warn = this.log.bind(this, 'warn');\n        /**\n         * This method should be used to report high-level information about normal driver behaviour.\n         * For example, the creation of a `MongoClient`.\n         */\n        this.info = this.log.bind(this, 'info');\n        /**\n         * This method should be used to report information that would be helpful when debugging an\n         * application. For example, a command starting, succeeding or failing.\n         */\n        this.debug = this.log.bind(this, 'debug');\n        /**\n         * This method should be used to report fine-grained details related to logic flow. For example,\n         * entering and exiting a function body.\n         */\n        this.trace = this.log.bind(this, 'trace');\n        this.componentSeverities = options.componentSeverities;\n        this.maxDocumentLength = options.maxDocumentLength;\n        this.logDestination = options.logDestination;\n    }\n    log(severity, component, message) {\n        if (compareSeverity(severity, this.componentSeverities[component]) > 0)\n            return;\n        let logMessage = { t: new Date(), c: component, s: severity };\n        if (typeof message === 'string') {\n            logMessage.message = message;\n        }\n        else if (typeof message === 'object') {\n            if (isLogConvertible(message)) {\n                logMessage = { ...logMessage, ...message.toLog() };\n            }\n            else {\n                logMessage = { ...logMessage, ...defaultLogTransform(message, this.maxDocumentLength) };\n            }\n        }\n        this.logDestination.write(logMessage);\n    }\n    /**\n     * Merges options set through environment variables and the MongoClient, preferring environment\n     * variables when both are set, and substituting defaults for values not set. Options set in\n     * constructor take precedence over both environment variables and MongoClient options.\n     *\n     * @remarks\n     * When parsing component severity levels, invalid values are treated as unset and replaced with\n     * the default severity.\n     *\n     * @param envOptions - options set for the logger from the environment\n     * @param clientOptions - options set for the logger in the MongoClient options\n     * @returns a MongoLoggerOptions object to be used when instantiating a new MongoLogger\n     */\n    static resolveOptions(envOptions, clientOptions) {\n        // client options take precedence over env options\n        const combinedOptions = {\n            ...envOptions,\n            ...clientOptions,\n            mongodbLogPath: resolveLogPath(envOptions, clientOptions)\n        };\n        const defaultSeverity = resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.default, combinedOptions.MONGODB_LOG_ALL, exports.SeverityLevel.OFF);\n        return {\n            componentSeverities: {\n                command: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.command, combinedOptions.MONGODB_LOG_COMMAND, defaultSeverity),\n                topology: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.topology, combinedOptions.MONGODB_LOG_TOPOLOGY, defaultSeverity),\n                serverSelection: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.serverSelection, combinedOptions.MONGODB_LOG_SERVER_SELECTION, defaultSeverity),\n                connection: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.connection, combinedOptions.MONGODB_LOG_CONNECTION, defaultSeverity),\n                client: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.client, combinedOptions.MONGODB_LOG_CLIENT, defaultSeverity),\n                default: defaultSeverity\n            },\n            maxDocumentLength: combinedOptions.mongodbLogMaxDocumentLength ??\n                (0, utils_1.parseUnsignedInteger)(combinedOptions.MONGODB_LOG_MAX_DOCUMENT_LENGTH) ??\n                1000,\n            logDestination: combinedOptions.mongodbLogPath\n        };\n    }\n}\nexports.MongoLogger = MongoLogger;\n//# sourceMappingURL=mongo_logger.js.map"],"names":[],"mappings":"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"}},
    {"offset": {"line": 12053, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 12057, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/client-side-encryption/state_machine.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StateMachine = void 0;\nconst fs = require(\"fs/promises\");\nconst net = require(\"net\");\nconst tls = require(\"tls\");\nconst bson_1 = require(\"../bson\");\nconst deps_1 = require(\"../deps\");\nconst utils_1 = require(\"../utils\");\nconst errors_1 = require(\"./errors\");\nlet socks = null;\nfunction loadSocks() {\n    if (socks == null) {\n        const socksImport = (0, deps_1.getSocks)();\n        if ('kModuleError' in socksImport) {\n            throw socksImport.kModuleError;\n        }\n        socks = socksImport;\n    }\n    return socks;\n}\n// libmongocrypt states\nconst MONGOCRYPT_CTX_ERROR = 0;\nconst MONGOCRYPT_CTX_NEED_MONGO_COLLINFO = 1;\nconst MONGOCRYPT_CTX_NEED_MONGO_MARKINGS = 2;\nconst MONGOCRYPT_CTX_NEED_MONGO_KEYS = 3;\nconst MONGOCRYPT_CTX_NEED_KMS_CREDENTIALS = 7;\nconst MONGOCRYPT_CTX_NEED_KMS = 4;\nconst MONGOCRYPT_CTX_READY = 5;\nconst MONGOCRYPT_CTX_DONE = 6;\nconst HTTPS_PORT = 443;\nconst stateToString = new Map([\n    [MONGOCRYPT_CTX_ERROR, 'MONGOCRYPT_CTX_ERROR'],\n    [MONGOCRYPT_CTX_NEED_MONGO_COLLINFO, 'MONGOCRYPT_CTX_NEED_MONGO_COLLINFO'],\n    [MONGOCRYPT_CTX_NEED_MONGO_MARKINGS, 'MONGOCRYPT_CTX_NEED_MONGO_MARKINGS'],\n    [MONGOCRYPT_CTX_NEED_MONGO_KEYS, 'MONGOCRYPT_CTX_NEED_MONGO_KEYS'],\n    [MONGOCRYPT_CTX_NEED_KMS_CREDENTIALS, 'MONGOCRYPT_CTX_NEED_KMS_CREDENTIALS'],\n    [MONGOCRYPT_CTX_NEED_KMS, 'MONGOCRYPT_CTX_NEED_KMS'],\n    [MONGOCRYPT_CTX_READY, 'MONGOCRYPT_CTX_READY'],\n    [MONGOCRYPT_CTX_DONE, 'MONGOCRYPT_CTX_DONE']\n]);\nconst INSECURE_TLS_OPTIONS = [\n    'tlsInsecure',\n    'tlsAllowInvalidCertificates',\n    'tlsAllowInvalidHostnames',\n    // These options are disallowed by the spec, so we explicitly filter them out if provided, even\n    // though the StateMachine does not declare support for these options.\n    'tlsDisableOCSPEndpointCheck',\n    'tlsDisableCertificateRevocationCheck'\n];\n/**\n * Helper function for logging. Enabled by setting the environment flag MONGODB_CRYPT_DEBUG.\n * @param msg - Anything you want to be logged.\n */\nfunction debug(msg) {\n    if (process.env.MONGODB_CRYPT_DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error(msg);\n    }\n}\n/**\n * @internal\n * An internal class that executes across a MongoCryptContext until either\n * a finishing state or an error is reached. Do not instantiate directly.\n */\nclass StateMachine {\n    constructor(options, bsonOptions = (0, bson_1.pluckBSONSerializeOptions)(options)) {\n        this.options = options;\n        this.bsonOptions = bsonOptions;\n    }\n    /**\n     * Executes the state machine according to the specification\n     */\n    async execute(executor, context) {\n        const keyVaultNamespace = executor._keyVaultNamespace;\n        const keyVaultClient = executor._keyVaultClient;\n        const metaDataClient = executor._metaDataClient;\n        const mongocryptdClient = executor._mongocryptdClient;\n        const mongocryptdManager = executor._mongocryptdManager;\n        let result = null;\n        while (context.state !== MONGOCRYPT_CTX_DONE && context.state !== MONGOCRYPT_CTX_ERROR) {\n            debug(`[context#${context.id}] ${stateToString.get(context.state) || context.state}`);\n            switch (context.state) {\n                case MONGOCRYPT_CTX_NEED_MONGO_COLLINFO: {\n                    const filter = (0, bson_1.deserialize)(context.nextMongoOperation());\n                    if (!metaDataClient) {\n                        throw new errors_1.MongoCryptError('unreachable state machine state: entered MONGOCRYPT_CTX_NEED_MONGO_COLLINFO but metadata client is undefined');\n                    }\n                    const collInfo = await this.fetchCollectionInfo(metaDataClient, context.ns, filter);\n                    if (collInfo) {\n                        context.addMongoOperationResponse(collInfo);\n                    }\n                    context.finishMongoOperation();\n                    break;\n                }\n                case MONGOCRYPT_CTX_NEED_MONGO_MARKINGS: {\n                    const command = context.nextMongoOperation();\n                    if (!mongocryptdClient) {\n                        throw new errors_1.MongoCryptError('unreachable state machine state: entered MONGOCRYPT_CTX_NEED_MONGO_MARKINGS but mongocryptdClient is undefined');\n                    }\n                    // When we are using the shared library, we don't have a mongocryptd manager.\n                    const markedCommand = mongocryptdManager\n                        ? await mongocryptdManager.withRespawn(this.markCommand.bind(this, mongocryptdClient, context.ns, command))\n                        : await this.markCommand(mongocryptdClient, context.ns, command);\n                    context.addMongoOperationResponse(markedCommand);\n                    context.finishMongoOperation();\n                    break;\n                }\n                case MONGOCRYPT_CTX_NEED_MONGO_KEYS: {\n                    const filter = context.nextMongoOperation();\n                    const keys = await this.fetchKeys(keyVaultClient, keyVaultNamespace, filter);\n                    if (keys.length === 0) {\n                        // This is kind of a hack.  For `rewrapManyDataKey`, we have tests that\n                        // guarantee that when there are no matching keys, `rewrapManyDataKey` returns\n                        // nothing.  We also have tests for auto encryption that guarantee for `encrypt`\n                        // we return an error when there are no matching keys.  This error is generated in\n                        // subsequent iterations of the state machine.\n                        // Some apis (`encrypt`) throw if there are no filter matches and others (`rewrapManyDataKey`)\n                        // do not.  We set the result manually here, and let the state machine continue.  `libmongocrypt`\n                        // will inform us if we need to error by setting the state to `MONGOCRYPT_CTX_ERROR` but\n                        // otherwise we'll return `{ v: [] }`.\n                        result = { v: [] };\n                    }\n                    for await (const key of keys) {\n                        context.addMongoOperationResponse((0, bson_1.serialize)(key));\n                    }\n                    context.finishMongoOperation();\n                    break;\n                }\n                case MONGOCRYPT_CTX_NEED_KMS_CREDENTIALS: {\n                    const kmsProviders = await executor.askForKMSCredentials();\n                    context.provideKMSProviders((0, bson_1.serialize)(kmsProviders));\n                    break;\n                }\n                case MONGOCRYPT_CTX_NEED_KMS: {\n                    const requests = Array.from(this.requests(context));\n                    await Promise.all(requests);\n                    context.finishKMSRequests();\n                    break;\n                }\n                case MONGOCRYPT_CTX_READY: {\n                    const finalizedContext = context.finalize();\n                    // @ts-expect-error finalize can change the state, check for error\n                    if (context.state === MONGOCRYPT_CTX_ERROR) {\n                        const message = context.status.message || 'Finalization error';\n                        throw new errors_1.MongoCryptError(message);\n                    }\n                    result = (0, bson_1.deserialize)(finalizedContext, this.options);\n                    break;\n                }\n                default:\n                    throw new errors_1.MongoCryptError(`Unknown state: ${context.state}`);\n            }\n        }\n        if (context.state === MONGOCRYPT_CTX_ERROR || result == null) {\n            const message = context.status.message;\n            if (!message) {\n                debug(`unidentifiable error in MongoCrypt - received an error status from \\`libmongocrypt\\` but received no error message.`);\n            }\n            throw new errors_1.MongoCryptError(message ??\n                'unidentifiable error in MongoCrypt - received an error status from `libmongocrypt` but received no error message.');\n        }\n        return result;\n    }\n    /**\n     * Handles the request to the KMS service. Exposed for testing purposes. Do not directly invoke.\n     * @param kmsContext - A C++ KMS context returned from the bindings\n     * @returns A promise that resolves when the KMS reply has be fully parsed\n     */\n    kmsRequest(request) {\n        const parsedUrl = request.endpoint.split(':');\n        const port = parsedUrl[1] != null ? Number.parseInt(parsedUrl[1], 10) : HTTPS_PORT;\n        const options = {\n            host: parsedUrl[0],\n            servername: parsedUrl[0],\n            port\n        };\n        const message = request.message;\n        // TODO(NODE-3959): We can adopt `for-await on(socket, 'data')` with logic to control abort\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises, no-async-promise-executor\n        return new Promise(async (resolve, reject) => {\n            const buffer = new utils_1.BufferPool();\n            // eslint-disable-next-line prefer-const\n            let socket;\n            let rawSocket;\n            function destroySockets() {\n                for (const sock of [socket, rawSocket]) {\n                    if (sock) {\n                        sock.removeAllListeners();\n                        sock.destroy();\n                    }\n                }\n            }\n            function ontimeout() {\n                destroySockets();\n                reject(new errors_1.MongoCryptError('KMS request timed out'));\n            }\n            function onerror(err) {\n                destroySockets();\n                const mcError = new errors_1.MongoCryptError('KMS request failed', { cause: err });\n                reject(mcError);\n            }\n            if (this.options.proxyOptions && this.options.proxyOptions.proxyHost) {\n                rawSocket = net.connect({\n                    host: this.options.proxyOptions.proxyHost,\n                    port: this.options.proxyOptions.proxyPort || 1080\n                });\n                rawSocket.on('timeout', ontimeout);\n                rawSocket.on('error', onerror);\n                try {\n                    // eslint-disable-next-line @typescript-eslint/no-var-requires\n                    const events = require('events');\n                    await events.once(rawSocket, 'connect');\n                    socks ??= loadSocks();\n                    options.socket = (await socks.SocksClient.createConnection({\n                        existing_socket: rawSocket,\n                        command: 'connect',\n                        destination: { host: options.host, port: options.port },\n                        proxy: {\n                            // host and port are ignored because we pass existing_socket\n                            host: 'iLoveJavaScript',\n                            port: 0,\n                            type: 5,\n                            userId: this.options.proxyOptions.proxyUsername,\n                            password: this.options.proxyOptions.proxyPassword\n                        }\n                    })).socket;\n                }\n                catch (err) {\n                    return onerror(err);\n                }\n            }\n            const tlsOptions = this.options.tlsOptions;\n            if (tlsOptions) {\n                const kmsProvider = request.kmsProvider;\n                const providerTlsOptions = tlsOptions[kmsProvider];\n                if (providerTlsOptions) {\n                    const error = this.validateTlsOptions(kmsProvider, providerTlsOptions);\n                    if (error)\n                        reject(error);\n                    try {\n                        await this.setTlsOptions(providerTlsOptions, options);\n                    }\n                    catch (error) {\n                        return onerror(error);\n                    }\n                }\n            }\n            socket = tls.connect(options, () => {\n                socket.write(message);\n            });\n            socket.once('timeout', ontimeout);\n            socket.once('error', onerror);\n            socket.on('data', data => {\n                buffer.append(data);\n                while (request.bytesNeeded > 0 && buffer.length) {\n                    const bytesNeeded = Math.min(request.bytesNeeded, buffer.length);\n                    request.addResponse(buffer.read(bytesNeeded));\n                }\n                if (request.bytesNeeded <= 0) {\n                    // There's no need for any more activity on this socket at this point.\n                    destroySockets();\n                    resolve();\n                }\n            });\n        });\n    }\n    *requests(context) {\n        for (let request = context.nextKMSRequest(); request != null; request = context.nextKMSRequest()) {\n            yield this.kmsRequest(request);\n        }\n    }\n    /**\n     * Validates the provided TLS options are secure.\n     *\n     * @param kmsProvider - The KMS provider name.\n     * @param tlsOptions - The client TLS options for the provider.\n     *\n     * @returns An error if any option is invalid.\n     */\n    validateTlsOptions(kmsProvider, tlsOptions) {\n        const tlsOptionNames = Object.keys(tlsOptions);\n        for (const option of INSECURE_TLS_OPTIONS) {\n            if (tlsOptionNames.includes(option)) {\n                return new errors_1.MongoCryptError(`Insecure TLS options prohibited for ${kmsProvider}: ${option}`);\n            }\n        }\n    }\n    /**\n     * Sets only the valid secure TLS options.\n     *\n     * @param tlsOptions - The client TLS options for the provider.\n     * @param options - The existing connection options.\n     */\n    async setTlsOptions(tlsOptions, options) {\n        if (tlsOptions.tlsCertificateKeyFile) {\n            const cert = await fs.readFile(tlsOptions.tlsCertificateKeyFile);\n            options.cert = options.key = cert;\n        }\n        if (tlsOptions.tlsCAFile) {\n            options.ca = await fs.readFile(tlsOptions.tlsCAFile);\n        }\n        if (tlsOptions.tlsCertificateKeyFilePassword) {\n            options.passphrase = tlsOptions.tlsCertificateKeyFilePassword;\n        }\n    }\n    /**\n     * Fetches collection info for a provided namespace, when libmongocrypt\n     * enters the `MONGOCRYPT_CTX_NEED_MONGO_COLLINFO` state. The result is\n     * used to inform libmongocrypt of the schema associated with this\n     * namespace. Exposed for testing purposes. Do not directly invoke.\n     *\n     * @param client - A MongoClient connected to the topology\n     * @param ns - The namespace to list collections from\n     * @param filter - A filter for the listCollections command\n     * @param callback - Invoked with the info of the requested collection, or with an error\n     */\n    async fetchCollectionInfo(client, ns, filter) {\n        const { db } = utils_1.MongoDBCollectionNamespace.fromString(ns);\n        const collections = await client\n            .db(db)\n            .listCollections(filter, {\n            promoteLongs: false,\n            promoteValues: false\n        })\n            .toArray();\n        const info = collections.length > 0 ? (0, bson_1.serialize)(collections[0]) : null;\n        return info;\n    }\n    /**\n     * Calls to the mongocryptd to provide markings for a command.\n     * Exposed for testing purposes. Do not directly invoke.\n     * @param client - A MongoClient connected to a mongocryptd\n     * @param ns - The namespace (database.collection) the command is being executed on\n     * @param command - The command to execute.\n     * @param callback - Invoked with the serialized and marked bson command, or with an error\n     */\n    async markCommand(client, ns, command) {\n        const options = { promoteLongs: false, promoteValues: false };\n        const { db } = utils_1.MongoDBCollectionNamespace.fromString(ns);\n        const rawCommand = (0, bson_1.deserialize)(command, options);\n        const response = await client.db(db).command(rawCommand, options);\n        return (0, bson_1.serialize)(response, this.bsonOptions);\n    }\n    /**\n     * Requests keys from the keyVault collection on the topology.\n     * Exposed for testing purposes. Do not directly invoke.\n     * @param client - A MongoClient connected to the topology\n     * @param keyVaultNamespace - The namespace (database.collection) of the keyVault Collection\n     * @param filter - The filter for the find query against the keyVault Collection\n     * @param callback - Invoked with the found keys, or with an error\n     */\n    fetchKeys(client, keyVaultNamespace, filter) {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(keyVaultNamespace);\n        return client\n            .db(dbName)\n            .collection(collectionName, { readConcern: { level: 'majority' } })\n            .find((0, bson_1.deserialize)(filter))\n            .toArray();\n    }\n}\nexports.StateMachine = StateMachine;\n//# sourceMappingURL=state_machine.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,YAAY,GAAG,KAAK;AAC5B,MAAM,KAAK;AACX,MAAM,MAAM;AACZ,MAAM,MAAM;AACZ,MAAM,SAAS;AACf,MAAM,SAAS;AACf,MAAM,UAAU;AAChB,MAAM,WAAW;AACjB,IAAI,QAAQ;AACZ,SAAS;IACL,IAAI,SAAS,MAAM;QACf,MAAM,cAAc,AAAC,CAAA,GAAG,OAAO,QAAQ,AAAD;QACtC,IAAI,kBAAkB,aAAa;YAC/B,MAAM,YAAY,YAAY;QAClC;QACA,QAAQ;IACZ;IACA,OAAO;AACX;AACA,uBAAuB;AACvB,MAAM,uBAAuB;AAC7B,MAAM,qCAAqC;AAC3C,MAAM,qCAAqC;AAC3C,MAAM,iCAAiC;AACvC,MAAM,sCAAsC;AAC5C,MAAM,0BAA0B;AAChC,MAAM,uBAAuB;AAC7B,MAAM,sBAAsB;AAC5B,MAAM,aAAa;AACnB,MAAM,gBAAgB,IAAI,IAAI;IAC1B;QAAC;QAAsB;KAAuB;IAC9C;QAAC;QAAoC;KAAqC;IAC1E;QAAC;QAAoC;KAAqC;IAC1E;QAAC;QAAgC;KAAiC;IAClE;QAAC;QAAqC;KAAsC;IAC5E;QAAC;QAAyB;KAA0B;IACpD;QAAC;QAAsB;KAAuB;IAC9C;QAAC;QAAqB;KAAsB;CAC/C;AACD,MAAM,uBAAuB;IACzB;IACA;IACA;IACA,+FAA+F;IAC/F,sEAAsE;IACtE;IACA;CACH;AACD;;;CAGC,GACD,SAAS,MAAM,GAAG;IACd,IAAI,QAAQ,GAAG,CAAC,mBAAmB,EAAE;QACjC,sCAAsC;QACtC,QAAQ,KAAK,CAAC;IAClB;AACJ;AACA;;;;CAIC,GACD,MAAM;IACF,YAAY,OAAO,EAAE,cAAc,AAAC,CAAA,GAAG,OAAO,yBAAyB,AAAD,EAAG,QAAQ,CAAE;QAC/E,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,WAAW,GAAG;IACvB;IACA;;KAEC,GACD,MAAM,QAAQ,QAAQ,EAAE,OAAO,EAAE;QAC7B,MAAM,oBAAoB,SAAS,kBAAkB;QACrD,MAAM,iBAAiB,SAAS,eAAe;QAC/C,MAAM,iBAAiB,SAAS,eAAe;QAC/C,MAAM,oBAAoB,SAAS,kBAAkB;QACrD,MAAM,qBAAqB,SAAS,mBAAmB;QACvD,IAAI,SAAS;QACb,MAAO,QAAQ,KAAK,KAAK,uBAAuB,QAAQ,KAAK,KAAK,qBAAsB;YACpF,MAAM,CAAC,SAAS,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE,cAAc,GAAG,CAAC,QAAQ,KAAK,KAAK,QAAQ,KAAK,CAAC,CAAC;YACpF,OAAQ,QAAQ,KAAK;gBACjB,KAAK;oBAAoC;wBACrC,MAAM,SAAS,AAAC,CAAA,GAAG,OAAO,WAAW,AAAD,EAAG,QAAQ,kBAAkB;wBACjE,IAAI,CAAC,gBAAgB;4BACjB,MAAM,IAAI,SAAS,eAAe,CAAC;wBACvC;wBACA,MAAM,WAAW,MAAM,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,QAAQ,EAAE,EAAE;wBAC5E,IAAI,UAAU;4BACV,QAAQ,yBAAyB,CAAC;wBACtC;wBACA,QAAQ,oBAAoB;wBAC5B;oBACJ;gBACA,KAAK;oBAAoC;wBACrC,MAAM,UAAU,QAAQ,kBAAkB;wBAC1C,IAAI,CAAC,mBAAmB;4BACpB,MAAM,IAAI,SAAS,eAAe,CAAC;wBACvC;wBACA,6EAA6E;wBAC7E,MAAM,gBAAgB,qBAChB,MAAM,mBAAmB,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,mBAAmB,QAAQ,EAAE,EAAE,YAChG,MAAM,IAAI,CAAC,WAAW,CAAC,mBAAmB,QAAQ,EAAE,EAAE;wBAC5D,QAAQ,yBAAyB,CAAC;wBAClC,QAAQ,oBAAoB;wBAC5B;oBACJ;gBACA,KAAK;oBAAgC;wBACjC,MAAM,SAAS,QAAQ,kBAAkB;wBACzC,MAAM,OAAO,MAAM,IAAI,CAAC,SAAS,CAAC,gBAAgB,mBAAmB;wBACrE,IAAI,KAAK,MAAM,KAAK,GAAG;4BACnB,uEAAuE;4BACvE,8EAA8E;4BAC9E,gFAAgF;4BAChF,kFAAkF;4BAClF,8CAA8C;4BAC9C,8FAA8F;4BAC9F,iGAAiG;4BACjG,wFAAwF;4BACxF,sCAAsC;4BACtC,SAAS;gCAAE,GAAG,EAAE;4BAAC;wBACrB;wBACA,WAAW,MAAM,OAAO,KAAM;4BAC1B,QAAQ,yBAAyB,CAAC,AAAC,CAAA,GAAG,OAAO,SAAS,AAAD,EAAG;wBAC5D;wBACA,QAAQ,oBAAoB;wBAC5B;oBACJ;gBACA,KAAK;oBAAqC;wBACtC,MAAM,eAAe,MAAM,SAAS,oBAAoB;wBACxD,QAAQ,mBAAmB,CAAC,AAAC,CAAA,GAAG,OAAO,SAAS,AAAD,EAAG;wBAClD;oBACJ;gBACA,KAAK;oBAAyB;wBAC1B,MAAM,WAAW,MAAM,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;wBAC1C,MAAM,QAAQ,GAAG,CAAC;wBAClB,QAAQ,iBAAiB;wBACzB;oBACJ;gBACA,KAAK;oBAAsB;wBACvB,MAAM,mBAAmB,QAAQ,QAAQ;wBACzC,kEAAkE;wBAClE,IAAI,QAAQ,KAAK,KAAK,sBAAsB;4BACxC,MAAM,UAAU,QAAQ,MAAM,CAAC,OAAO,IAAI;4BAC1C,MAAM,IAAI,SAAS,eAAe,CAAC;wBACvC;wBACA,SAAS,AAAC,CAAA,GAAG,OAAO,WAAW,AAAD,EAAG,kBAAkB,IAAI,CAAC,OAAO;wBAC/D;oBACJ;gBACA;oBACI,MAAM,IAAI,SAAS,eAAe,CAAC,CAAC,eAAe,EAAE,QAAQ,KAAK,CAAC,CAAC;YAC5E;QACJ;QACA,IAAI,QAAQ,KAAK,KAAK,wBAAwB,UAAU,MAAM;YAC1D,MAAM,UAAU,QAAQ,MAAM,CAAC,OAAO;YACtC,IAAI,CAAC,SAAS;gBACV,MAAM,CAAC,mHAAmH,CAAC;YAC/H;YACA,MAAM,IAAI,SAAS,eAAe,CAAC,WAC/B;QACR;QACA,OAAO;IACX;IACA;;;;KAIC,GACD,WAAW,OAAO,EAAE;QAChB,MAAM,YAAY,QAAQ,QAAQ,CAAC,KAAK,CAAC;QACzC,MAAM,OAAO,SAAS,CAAC,EAAE,IAAI,OAAO,OAAO,QAAQ,CAAC,SAAS,CAAC,EAAE,EAAE,MAAM;QACxE,MAAM,UAAU;YACZ,MAAM,SAAS,CAAC,EAAE;YAClB,YAAY,SAAS,CAAC,EAAE;YACxB;QACJ;QACA,MAAM,UAAU,QAAQ,OAAO;QAC/B,2FAA2F;QAC3F,6FAA6F;QAC7F,OAAO,IAAI,QAAQ,OAAO,SAAS;YAC/B,MAAM,SAAS,IAAI,QAAQ,UAAU;YACrC,wCAAwC;YACxC,IAAI;YACJ,IAAI;YACJ,SAAS;gBACL,KAAK,MAAM,QAAQ;oBAAC;oBAAQ;iBAAU,CAAE;oBACpC,IAAI,MAAM;wBACN,KAAK,kBAAkB;wBACvB,KAAK,OAAO;oBAChB;gBACJ;YACJ;YACA,SAAS;gBACL;gBACA,OAAO,IAAI,SAAS,eAAe,CAAC;YACxC;YACA,SAAS,QAAQ,GAAG;gBAChB;gBACA,MAAM,UAAU,IAAI,SAAS,eAAe,CAAC,sBAAsB;oBAAE,OAAO;gBAAI;gBAChF,OAAO;YACX;YACA,IAAI,IAAI,CAAC,OAAO,CAAC,YAAY,IAAI,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,SAAS,EAAE;gBAClE,YAAY,IAAI,OAAO,CAAC;oBACpB,MAAM,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,SAAS;oBACzC,MAAM,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,SAAS,IAAI;gBACjD;gBACA,UAAU,EAAE,CAAC,WAAW;gBACxB,UAAU,EAAE,CAAC,SAAS;gBACtB,IAAI;oBACA,8DAA8D;oBAC9D,MAAM,SAAS;oBACf,MAAM,OAAO,IAAI,CAAC,WAAW;oBAC7B,UAAU;oBACV,QAAQ,MAAM,GAAG,CAAC,MAAM,MAAM,WAAW,CAAC,gBAAgB,CAAC;wBACvD,iBAAiB;wBACjB,SAAS;wBACT,aAAa;4BAAE,MAAM,QAAQ,IAAI;4BAAE,MAAM,QAAQ,IAAI;wBAAC;wBACtD,OAAO;4BACH,4DAA4D;4BAC5D,MAAM;4BACN,MAAM;4BACN,MAAM;4BACN,QAAQ,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,aAAa;4BAC/C,UAAU,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,aAAa;wBACrD;oBACJ,EAAE,EAAE,MAAM;gBACd,EACA,OAAO,KAAK;oBACR,OAAO,QAAQ;gBACnB;YACJ;YACA,MAAM,aAAa,IAAI,CAAC,OAAO,CAAC,UAAU;YAC1C,IAAI,YAAY;gBACZ,MAAM,cAAc,QAAQ,WAAW;gBACvC,MAAM,qBAAqB,UAAU,CAAC,YAAY;gBAClD,IAAI,oBAAoB;oBACpB,MAAM,QAAQ,IAAI,CAAC,kBAAkB,CAAC,aAAa;oBACnD,IAAI,OACA,OAAO;oBACX,IAAI;wBACA,MAAM,IAAI,CAAC,aAAa,CAAC,oBAAoB;oBACjD,EACA,OAAO,OAAO;wBACV,OAAO,QAAQ;oBACnB;gBACJ;YACJ;YACA,SAAS,IAAI,OAAO,CAAC,SAAS;gBAC1B,OAAO,KAAK,CAAC;YACjB;YACA,OAAO,IAAI,CAAC,WAAW;YACvB,OAAO,IAAI,CAAC,SAAS;YACrB,OAAO,EAAE,CAAC,QAAQ,CAAA;gBACd,OAAO,MAAM,CAAC;gBACd,MAAO,QAAQ,WAAW,GAAG,KAAK,OAAO,MAAM,CAAE;oBAC7C,MAAM,cAAc,KAAK,GAAG,CAAC,QAAQ,WAAW,EAAE,OAAO,MAAM;oBAC/D,QAAQ,WAAW,CAAC,OAAO,IAAI,CAAC;gBACpC;gBACA,IAAI,QAAQ,WAAW,IAAI,GAAG;oBAC1B,sEAAsE;oBACtE;oBACA;gBACJ;YACJ;QACJ;IACJ;IACA,CAAC,SAAS,OAAO,EAAE;QACf,IAAK,IAAI,UAAU,QAAQ,cAAc,IAAI,WAAW,MAAM,UAAU,QAAQ,cAAc,GAAI;YAC9F,MAAM,IAAI,CAAC,UAAU,CAAC;QAC1B;IACJ;IACA;;;;;;;KAOC,GACD,mBAAmB,WAAW,EAAE,UAAU,EAAE;QACxC,MAAM,iBAAiB,OAAO,IAAI,CAAC;QACnC,KAAK,MAAM,UAAU,qBAAsB;YACvC,IAAI,eAAe,QAAQ,CAAC,SAAS;gBACjC,OAAO,IAAI,SAAS,eAAe,CAAC,CAAC,oCAAoC,EAAE,YAAY,EAAE,EAAE,OAAO,CAAC;YACvG;QACJ;IACJ;IACA;;;;;KAKC,GACD,MAAM,cAAc,UAAU,EAAE,OAAO,EAAE;QACrC,IAAI,WAAW,qBAAqB,EAAE;YAClC,MAAM,OAAO,MAAM,GAAG,QAAQ,CAAC,WAAW,qBAAqB;YAC/D,QAAQ,IAAI,GAAG,QAAQ,GAAG,GAAG;QACjC;QACA,IAAI,WAAW,SAAS,EAAE;YACtB,QAAQ,EAAE,GAAG,MAAM,GAAG,QAAQ,CAAC,WAAW,SAAS;QACvD;QACA,IAAI,WAAW,6BAA6B,EAAE;YAC1C,QAAQ,UAAU,GAAG,WAAW,6BAA6B;QACjE;IACJ;IACA;;;;;;;;;;KAUC,GACD,MAAM,oBAAoB,MAAM,EAAE,EAAE,EAAE,MAAM,EAAE;QAC1C,MAAM,EAAE,EAAE,EAAE,GAAG,QAAQ,0BAA0B,CAAC,UAAU,CAAC;QAC7D,MAAM,cAAc,MAAM,OACrB,EAAE,CAAC,IACH,eAAe,CAAC,QAAQ;YACzB,cAAc;YACd,eAAe;QACnB,GACK,OAAO;QACZ,MAAM,OAAO,YAAY,MAAM,GAAG,IAAI,AAAC,CAAA,GAAG,OAAO,SAAS,AAAD,EAAG,WAAW,CAAC,EAAE,IAAI;QAC9E,OAAO;IACX;IACA;;;;;;;KAOC,GACD,MAAM,YAAY,MAAM,EAAE,EAAE,EAAE,OAAO,EAAE;QACnC,MAAM,UAAU;YAAE,cAAc;YAAO,eAAe;QAAM;QAC5D,MAAM,EAAE,EAAE,EAAE,GAAG,QAAQ,0BAA0B,CAAC,UAAU,CAAC;QAC7D,MAAM,aAAa,AAAC,CAAA,GAAG,OAAO,WAAW,AAAD,EAAG,SAAS;QACpD,MAAM,WAAW,MAAM,OAAO,EAAE,CAAC,IAAI,OAAO,CAAC,YAAY;QACzD,OAAO,AAAC,CAAA,GAAG,OAAO,SAAS,AAAD,EAAG,UAAU,IAAI,CAAC,WAAW;IAC3D;IACA;;;;;;;KAOC,GACD,UAAU,MAAM,EAAE,iBAAiB,EAAE,MAAM,EAAE;QACzC,MAAM,EAAE,IAAI,MAAM,EAAE,YAAY,cAAc,EAAE,GAAG,QAAQ,0BAA0B,CAAC,UAAU,CAAC;QACjG,OAAO,OACF,EAAE,CAAC,QACH,UAAU,CAAC,gBAAgB;YAAE,aAAa;gBAAE,OAAO;YAAW;QAAE,GAChE,IAAI,CAAC,AAAC,CAAA,GAAG,OAAO,WAAW,AAAD,EAAG,SAC7B,OAAO;IAChB;AACJ;AACA,QAAQ,YAAY,GAAG,cACvB,yCAAyC"}},
    {"offset": {"line": 12446, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 12450, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/client-side-encryption/providers/gcp.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.loadGCPCredentials = void 0;\nconst deps_1 = require(\"../../deps\");\n/** @internal */\nasync function loadGCPCredentials(kmsProviders) {\n    const gcpMetadata = (0, deps_1.getGcpMetadata)();\n    if ('kModuleError' in gcpMetadata) {\n        return kmsProviders;\n    }\n    const { access_token: accessToken } = await gcpMetadata.instance({\n        property: 'service-accounts/default/token'\n    });\n    return { ...kmsProviders, gcp: { accessToken } };\n}\nexports.loadGCPCredentials = loadGCPCredentials;\n//# sourceMappingURL=gcp.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,kBAAkB,GAAG,KAAK;AAClC,MAAM,SAAS;AACf,cAAc,GACd,eAAe,mBAAmB,YAAY;IAC1C,MAAM,cAAc,AAAC,CAAA,GAAG,OAAO,cAAc,AAAD;IAC5C,IAAI,kBAAkB,aAAa;QAC/B,OAAO;IACX;IACA,MAAM,EAAE,cAAc,WAAW,EAAE,GAAG,MAAM,YAAY,QAAQ,CAAC;QAC7D,UAAU;IACd;IACA,OAAO;QAAE,GAAG,YAAY;QAAE,KAAK;YAAE;QAAY;IAAE;AACnD;AACA,QAAQ,kBAAkB,GAAG,oBAC7B,+BAA+B"}},
    {"offset": {"line": 12472, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 12476, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/client-side-encryption/providers/utils.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.get = void 0;\nconst http = require(\"http\");\nconst timers_1 = require(\"timers\");\nconst errors_1 = require(\"../errors\");\n/**\n * @internal\n */\nfunction get(url, options = {}) {\n    return new Promise((resolve, reject) => {\n        /* eslint-disable prefer-const */\n        let timeoutId;\n        const request = http\n            .get(url, options, response => {\n            response.setEncoding('utf8');\n            let body = '';\n            response.on('data', chunk => (body += chunk));\n            response.on('end', () => {\n                (0, timers_1.clearTimeout)(timeoutId);\n                resolve({ status: response.statusCode, body });\n            });\n        })\n            .on('error', error => {\n            (0, timers_1.clearTimeout)(timeoutId);\n            reject(error);\n        })\n            .end();\n        timeoutId = (0, timers_1.setTimeout)(() => {\n            request.destroy(new errors_1.MongoCryptKMSRequestNetworkTimeoutError(`request timed out after 10 seconds`));\n        }, 10000);\n    });\n}\nexports.get = get;\n//# sourceMappingURL=utils.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,GAAG,GAAG,KAAK;AACnB,MAAM,OAAO;AACb,MAAM,WAAW;AACjB,MAAM,WAAW;AACjB;;CAEC,GACD,SAAS,IAAI,GAAG,EAAE,UAAU,CAAC,CAAC;IAC1B,OAAO,IAAI,QAAQ,CAAC,SAAS;QACzB,+BAA+B,GAC/B,IAAI;QACJ,MAAM,UAAU,KACX,GAAG,CAAC,KAAK,SAAS,CAAA;YACnB,SAAS,WAAW,CAAC;YACrB,IAAI,OAAO;YACX,SAAS,EAAE,CAAC,QAAQ,CAAA,QAAU,QAAQ;YACtC,SAAS,EAAE,CAAC,OAAO;gBACd,CAAA,GAAG,SAAS,YAAY,AAAD,EAAG;gBAC3B,QAAQ;oBAAE,QAAQ,SAAS,UAAU;oBAAE;gBAAK;YAChD;QACJ,GACK,EAAE,CAAC,SAAS,CAAA;YACZ,CAAA,GAAG,SAAS,YAAY,AAAD,EAAG;YAC3B,OAAO;QACX,GACK,GAAG;QACR,YAAY,AAAC,CAAA,GAAG,SAAS,UAAU,AAAD,EAAG;YACjC,QAAQ,OAAO,CAAC,IAAI,SAAS,uCAAuC,CAAC,CAAC,kCAAkC,CAAC;QAC7G,GAAG;IACP;AACJ;AACA,QAAQ,GAAG,GAAG,KACd,iCAAiC"}},
    {"offset": {"line": 12510, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 12514, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/client-side-encryption/providers/azure.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.loadAzureCredentials = exports.fetchAzureKMSToken = exports.prepareRequest = exports.tokenCache = exports.AzureCredentialCache = void 0;\nconst errors_1 = require(\"../errors\");\nconst utils_1 = require(\"./utils\");\nconst MINIMUM_TOKEN_REFRESH_IN_MILLISECONDS = 6000;\n/**\n * @internal\n */\nclass AzureCredentialCache {\n    constructor() {\n        this.cachedToken = null;\n    }\n    async getToken() {\n        if (this.cachedToken == null || this.needsRefresh(this.cachedToken)) {\n            this.cachedToken = await this._getToken();\n        }\n        return { accessToken: this.cachedToken.accessToken };\n    }\n    needsRefresh(token) {\n        const timeUntilExpirationMS = token.expiresOnTimestamp - Date.now();\n        return timeUntilExpirationMS <= MINIMUM_TOKEN_REFRESH_IN_MILLISECONDS;\n    }\n    /**\n     * exposed for testing\n     */\n    resetCache() {\n        this.cachedToken = null;\n    }\n    /**\n     * exposed for testing\n     */\n    _getToken() {\n        return fetchAzureKMSToken();\n    }\n}\nexports.AzureCredentialCache = AzureCredentialCache;\n/** @internal */\nexports.tokenCache = new AzureCredentialCache();\n/** @internal */\nasync function parseResponse(response) {\n    const { status, body: rawBody } = response;\n    const body = (() => {\n        try {\n            return JSON.parse(rawBody);\n        }\n        catch {\n            throw new errors_1.MongoCryptAzureKMSRequestError('Malformed JSON body in GET request.');\n        }\n    })();\n    if (status !== 200) {\n        throw new errors_1.MongoCryptAzureKMSRequestError('Unable to complete request.', body);\n    }\n    if (!body.access_token) {\n        throw new errors_1.MongoCryptAzureKMSRequestError('Malformed response body - missing field `access_token`.');\n    }\n    if (!body.expires_in) {\n        throw new errors_1.MongoCryptAzureKMSRequestError('Malformed response body - missing field `expires_in`.');\n    }\n    const expiresInMS = Number(body.expires_in) * 1000;\n    if (Number.isNaN(expiresInMS)) {\n        throw new errors_1.MongoCryptAzureKMSRequestError('Malformed response body - unable to parse int from `expires_in` field.');\n    }\n    return {\n        accessToken: body.access_token,\n        expiresOnTimestamp: Date.now() + expiresInMS\n    };\n}\n/**\n * @internal\n *\n * parses any options provided by prose tests to `fetchAzureKMSToken` and merges them with\n * the default values for headers and the request url.\n */\nfunction prepareRequest(options) {\n    const url = new URL(options.url?.toString() ?? 'http://169.254.169.254/metadata/identity/oauth2/token');\n    url.searchParams.append('api-version', '2018-02-01');\n    url.searchParams.append('resource', 'https://vault.azure.net');\n    const headers = { ...options.headers, 'Content-Type': 'application/json', Metadata: true };\n    return { headers, url };\n}\nexports.prepareRequest = prepareRequest;\n/**\n * @internal\n *\n * `AzureKMSRequestOptions` allows prose tests to modify the http request sent to the idms\n * servers.  This is required to simulate different server conditions.  No options are expected to\n * be set outside of tests.\n *\n * exposed for CSFLE\n * [prose test 18](https://github.com/mongodb/specifications/tree/master/source/client-side-encryption/tests#azure-imds-credentials)\n */\nasync function fetchAzureKMSToken(options = {}) {\n    const { headers, url } = prepareRequest(options);\n    const response = await (0, utils_1.get)(url, { headers }).catch(error => {\n        if (error instanceof errors_1.MongoCryptKMSRequestNetworkTimeoutError) {\n            throw new errors_1.MongoCryptAzureKMSRequestError(`[Azure KMS] ${error.message}`);\n        }\n        throw error;\n    });\n    return parseResponse(response);\n}\nexports.fetchAzureKMSToken = fetchAzureKMSToken;\n/**\n * @internal\n *\n * @throws Will reject with a `MongoCryptError` if the http request fails or the http response is malformed.\n */\nasync function loadAzureCredentials(kmsProviders) {\n    const azure = await exports.tokenCache.getToken();\n    return { ...kmsProviders, azure };\n}\nexports.loadAzureCredentials = loadAzureCredentials;\n//# sourceMappingURL=azure.js.map"],"names":[],"mappings":"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"}},
    {"offset": {"line": 12634, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 12638, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/client-side-encryption/providers/aws.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.loadAWSCredentials = void 0;\nconst deps_1 = require(\"../../deps\");\n/**\n * @internal\n */\nasync function loadAWSCredentials(kmsProviders) {\n    const credentialProvider = (0, deps_1.getAwsCredentialProvider)();\n    if ('kModuleError' in credentialProvider) {\n        return kmsProviders;\n    }\n    const { fromNodeProviderChain } = credentialProvider;\n    const provider = fromNodeProviderChain();\n    // The state machine is the only place calling this so it will\n    // catch if there is a rejection here.\n    const aws = await provider();\n    return { ...kmsProviders, aws };\n}\nexports.loadAWSCredentials = loadAWSCredentials;\n//# sourceMappingURL=aws.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,kBAAkB,GAAG,KAAK;AAClC,MAAM,SAAS;AACf;;CAEC,GACD,eAAe,mBAAmB,YAAY;IAC1C,MAAM,qBAAqB,AAAC,CAAA,GAAG,OAAO,wBAAwB,AAAD;IAC7D,IAAI,kBAAkB,oBAAoB;QACtC,OAAO;IACX;IACA,MAAM,EAAE,qBAAqB,EAAE,GAAG;IAClC,MAAM,WAAW;IACjB,8DAA8D;IAC9D,sCAAsC;IACtC,MAAM,MAAM,MAAM;IAClB,OAAO;QAAE,GAAG,YAAY;QAAE;IAAI;AAClC;AACA,QAAQ,kBAAkB,GAAG,oBAC7B,+BAA+B"}},
    {"offset": {"line": 12662, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 12666, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/client-side-encryption/providers/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.refreshKMSCredentials = exports.isEmptyCredentials = void 0;\nconst aws_1 = require(\"./aws\");\nconst azure_1 = require(\"./azure\");\nconst gcp_1 = require(\"./gcp\");\n/**\n * Auto credential fetching should only occur when the provider is defined on the kmsProviders map\n * and the settings are an empty object.\n *\n * This is distinct from a nullish provider key.\n *\n * @internal - exposed for testing purposes only\n */\nfunction isEmptyCredentials(providerName, kmsProviders) {\n    const provider = kmsProviders[providerName];\n    if (provider == null) {\n        return false;\n    }\n    return typeof provider === 'object' && Object.keys(provider).length === 0;\n}\nexports.isEmptyCredentials = isEmptyCredentials;\n/**\n * Load cloud provider credentials for the user provided KMS providers.\n * Credentials will only attempt to get loaded if they do not exist\n * and no existing credentials will get overwritten.\n *\n * @internal\n */\nasync function refreshKMSCredentials(kmsProviders) {\n    let finalKMSProviders = kmsProviders;\n    if (isEmptyCredentials('aws', kmsProviders)) {\n        finalKMSProviders = await (0, aws_1.loadAWSCredentials)(finalKMSProviders);\n    }\n    if (isEmptyCredentials('gcp', kmsProviders)) {\n        finalKMSProviders = await (0, gcp_1.loadGCPCredentials)(finalKMSProviders);\n    }\n    if (isEmptyCredentials('azure', kmsProviders)) {\n        finalKMSProviders = await (0, azure_1.loadAzureCredentials)(finalKMSProviders);\n    }\n    return finalKMSProviders;\n}\nexports.refreshKMSCredentials = refreshKMSCredentials;\n//# sourceMappingURL=index.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,qBAAqB,GAAG,QAAQ,kBAAkB,GAAG,KAAK;AAClE,MAAM,QAAQ;AACd,MAAM,UAAU;AAChB,MAAM,QAAQ;AACd;;;;;;;CAOC,GACD,SAAS,mBAAmB,YAAY,EAAE,YAAY;IAClD,MAAM,WAAW,YAAY,CAAC,aAAa;IAC3C,IAAI,YAAY,MAAM;QAClB,OAAO;IACX;IACA,OAAO,OAAO,aAAa,YAAY,OAAO,IAAI,CAAC,UAAU,MAAM,KAAK;AAC5E;AACA,QAAQ,kBAAkB,GAAG;AAC7B;;;;;;CAMC,GACD,eAAe,sBAAsB,YAAY;IAC7C,IAAI,oBAAoB;IACxB,IAAI,mBAAmB,OAAO,eAAe;QACzC,oBAAoB,MAAM,AAAC,CAAA,GAAG,MAAM,kBAAkB,AAAD,EAAG;IAC5D;IACA,IAAI,mBAAmB,OAAO,eAAe;QACzC,oBAAoB,MAAM,AAAC,CAAA,GAAG,MAAM,kBAAkB,AAAD,EAAG;IAC5D;IACA,IAAI,mBAAmB,SAAS,eAAe;QAC3C,oBAAoB,MAAM,AAAC,CAAA,GAAG,QAAQ,oBAAoB,AAAD,EAAG;IAChE;IACA,OAAO;AACX;AACA,QAAQ,qBAAqB,GAAG,uBAChC,iCAAiC"}},
    {"offset": {"line": 12709, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 12713, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/client-side-encryption/mongocryptd_manager.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MongocryptdManager = void 0;\nconst error_1 = require(\"../error\");\n/**\n * @internal\n * An internal class that handles spawning a mongocryptd.\n */\nclass MongocryptdManager {\n    constructor(extraOptions = {}) {\n        this.uri =\n            typeof extraOptions.mongocryptdURI === 'string' && extraOptions.mongocryptdURI.length > 0\n                ? extraOptions.mongocryptdURI\n                : MongocryptdManager.DEFAULT_MONGOCRYPTD_URI;\n        this.bypassSpawn = !!extraOptions.mongocryptdBypassSpawn;\n        this.spawnPath = extraOptions.mongocryptdSpawnPath || '';\n        this.spawnArgs = [];\n        if (Array.isArray(extraOptions.mongocryptdSpawnArgs)) {\n            this.spawnArgs = this.spawnArgs.concat(extraOptions.mongocryptdSpawnArgs);\n        }\n        if (this.spawnArgs\n            .filter(arg => typeof arg === 'string')\n            .every(arg => arg.indexOf('--idleShutdownTimeoutSecs') < 0)) {\n            this.spawnArgs.push('--idleShutdownTimeoutSecs', '60');\n        }\n    }\n    /**\n     * Will check to see if a mongocryptd is up. If it is not up, it will attempt\n     * to spawn a mongocryptd in a detached process, and then wait for it to be up.\n     */\n    async spawn() {\n        const cmdName = this.spawnPath || 'mongocryptd';\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        const { spawn } = require('child_process');\n        // Spawned with stdio: ignore and detached: true\n        // to ensure child can outlive parent.\n        this._child = spawn(cmdName, this.spawnArgs, {\n            stdio: 'ignore',\n            detached: true\n        });\n        this._child.on('error', () => {\n            // From the FLE spec:\n            // \"The stdout and stderr of the spawned process MUST not be exposed in the driver\n            // (e.g. redirect to /dev/null). Users can pass the argument --logpath to\n            // extraOptions.mongocryptdSpawnArgs if they need to inspect mongocryptd logs.\n            // If spawning is necessary, the driver MUST spawn mongocryptd whenever server\n            // selection on the MongoClient to mongocryptd fails. If the MongoClient fails to\n            // connect after spawning, the server selection error is propagated to the user.\"\n            // The AutoEncrypter and MongoCryptdManager should work together to spawn\n            // mongocryptd whenever necessary.  Additionally, the `mongocryptd` intentionally\n            // shuts down after 60s and gets respawned when necessary.  We rely on server\n            // selection timeouts when connecting to the `mongocryptd` to inform users that something\n            // has been configured incorrectly.  For those reasons, we suppress stderr from\n            // the `mongocryptd` process and immediately unref the process.\n        });\n        // unref child to remove handle from event loop\n        this._child.unref();\n    }\n    /**\n     * @returns the result of `fn` or rejects with an error.\n     */\n    async withRespawn(fn) {\n        try {\n            const result = await fn();\n            return result;\n        }\n        catch (err) {\n            // If we are not bypassing spawning, then we should retry once on a MongoTimeoutError (server selection error)\n            const shouldSpawn = err instanceof error_1.MongoNetworkTimeoutError && !this.bypassSpawn;\n            if (!shouldSpawn) {\n                throw err;\n            }\n        }\n        await this.spawn();\n        const result = await fn();\n        return result;\n    }\n}\nMongocryptdManager.DEFAULT_MONGOCRYPTD_URI = 'mongodb://localhost:27020';\nexports.MongocryptdManager = MongocryptdManager;\n//# sourceMappingURL=mongocryptd_manager.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,kBAAkB,GAAG,KAAK;AAClC,MAAM,UAAU;AAChB;;;CAGC,GACD,MAAM;IACF,YAAY,eAAe,CAAC,CAAC,CAAE;QAC3B,IAAI,CAAC,GAAG,GACJ,OAAO,aAAa,cAAc,KAAK,YAAY,aAAa,cAAc,CAAC,MAAM,GAAG,IAClF,aAAa,cAAc,GAC3B,mBAAmB,uBAAuB;QACpD,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC,aAAa,sBAAsB;QACxD,IAAI,CAAC,SAAS,GAAG,aAAa,oBAAoB,IAAI;QACtD,IAAI,CAAC,SAAS,GAAG,EAAE;QACnB,IAAI,MAAM,OAAO,CAAC,aAAa,oBAAoB,GAAG;YAClD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,aAAa,oBAAoB;QAC5E;QACA,IAAI,IAAI,CAAC,SAAS,CACb,MAAM,CAAC,CAAA,MAAO,OAAO,QAAQ,UAC7B,KAAK,CAAC,CAAA,MAAO,IAAI,OAAO,CAAC,+BAA+B,IAAI;YAC7D,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,6BAA6B;QACrD;IACJ;IACA;;;KAGC,GACD,MAAM,QAAQ;QACV,MAAM,UAAU,IAAI,CAAC,SAAS,IAAI;QAClC,8DAA8D;QAC9D,MAAM,EAAE,KAAK,EAAE,GAAG;QAClB,gDAAgD;QAChD,sCAAsC;QACtC,IAAI,CAAC,MAAM,GAAG,MAAM,SAAS,IAAI,CAAC,SAAS,EAAE;YACzC,OAAO;YACP,UAAU;QACd;QACA,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,SAAS;QACpB,qBAAqB;QACrB,kFAAkF;QAClF,yEAAyE;QACzE,8EAA8E;QAC9E,8EAA8E;QAC9E,iFAAiF;QACjF,iFAAiF;QACjF,yEAAyE;QACzE,iFAAiF;QACjF,6EAA6E;QAC7E,yFAAyF;QACzF,+EAA+E;QAC/E,+DAA+D;QACnE;QACA,+CAA+C;QAC/C,IAAI,CAAC,MAAM,CAAC,KAAK;IACrB;IACA;;KAEC,GACD,MAAM,YAAY,EAAE,EAAE;QAClB,IAAI;YACA,MAAM,SAAS,MAAM;YACrB,OAAO;QACX,EACA,OAAO,KAAK;YACR,8GAA8G;YAC9G,MAAM,cAAc,eAAe,QAAQ,wBAAwB,IAAI,CAAC,IAAI,CAAC,WAAW;YACxF,IAAI,CAAC,aAAa;gBACd,MAAM;YACV;QACJ;QACA,MAAM,IAAI,CAAC,KAAK;QAChB,MAAM,SAAS,MAAM;QACrB,OAAO;IACX;AACJ;AACA,mBAAmB,uBAAuB,GAAG;AAC7C,QAAQ,kBAAkB,GAAG,oBAC7B,+CAA+C"}},
    {"offset": {"line": 12786, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 12790, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/client-side-encryption/crypto_callbacks.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hmacSha256Hook = exports.hmacSha512Hook = exports.aes256CtrDecryptHook = exports.aes256CtrEncryptHook = exports.aes256CbcDecryptHook = exports.aes256CbcEncryptHook = exports.signRsaSha256Hook = exports.makeHmacHook = exports.sha256Hook = exports.randomHook = exports.makeAES256Hook = void 0;\nconst crypto = require(\"crypto\");\nfunction makeAES256Hook(method, mode) {\n    return function (key, iv, input, output) {\n        let result;\n        try {\n            const cipher = crypto[method](mode, key, iv);\n            cipher.setAutoPadding(false);\n            result = cipher.update(input);\n            const final = cipher.final();\n            if (final.length > 0) {\n                result = Buffer.concat([result, final]);\n            }\n        }\n        catch (e) {\n            return e;\n        }\n        result.copy(output);\n        return result.length;\n    };\n}\nexports.makeAES256Hook = makeAES256Hook;\nfunction randomHook(buffer, count) {\n    try {\n        crypto.randomFillSync(buffer, 0, count);\n    }\n    catch (e) {\n        return e;\n    }\n    return count;\n}\nexports.randomHook = randomHook;\nfunction sha256Hook(input, output) {\n    let result;\n    try {\n        result = crypto.createHash('sha256').update(input).digest();\n    }\n    catch (e) {\n        return e;\n    }\n    result.copy(output);\n    return result.length;\n}\nexports.sha256Hook = sha256Hook;\nfunction makeHmacHook(algorithm) {\n    return (key, input, output) => {\n        let result;\n        try {\n            result = crypto.createHmac(algorithm, key).update(input).digest();\n        }\n        catch (e) {\n            return e;\n        }\n        result.copy(output);\n        return result.length;\n    };\n}\nexports.makeHmacHook = makeHmacHook;\nfunction signRsaSha256Hook(key, input, output) {\n    let result;\n    try {\n        const signer = crypto.createSign('sha256WithRSAEncryption');\n        const privateKey = Buffer.from(`-----BEGIN PRIVATE KEY-----\\n${key.toString('base64')}\\n-----END PRIVATE KEY-----\\n`);\n        result = signer.update(input).end().sign(privateKey);\n    }\n    catch (e) {\n        return e;\n    }\n    result.copy(output);\n    return result.length;\n}\nexports.signRsaSha256Hook = signRsaSha256Hook;\nexports.aes256CbcEncryptHook = makeAES256Hook('createCipheriv', 'aes-256-cbc');\nexports.aes256CbcDecryptHook = makeAES256Hook('createDecipheriv', 'aes-256-cbc');\nexports.aes256CtrEncryptHook = makeAES256Hook('createCipheriv', 'aes-256-ctr');\nexports.aes256CtrDecryptHook = makeAES256Hook('createDecipheriv', 'aes-256-ctr');\nexports.hmacSha512Hook = makeHmacHook('sha512');\nexports.hmacSha256Hook = makeHmacHook('sha256');\n//# sourceMappingURL=crypto_callbacks.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,cAAc,GAAG,QAAQ,cAAc,GAAG,QAAQ,oBAAoB,GAAG,QAAQ,oBAAoB,GAAG,QAAQ,oBAAoB,GAAG,QAAQ,oBAAoB,GAAG,QAAQ,iBAAiB,GAAG,QAAQ,YAAY,GAAG,QAAQ,UAAU,GAAG,QAAQ,UAAU,GAAG,QAAQ,cAAc,GAAG,KAAK;AACzS,MAAM,SAAS;AACf,SAAS,eAAe,MAAM,EAAE,IAAI;IAChC,OAAO,SAAU,GAAG,EAAE,EAAE,EAAE,KAAK,EAAE,MAAM;QACnC,IAAI;QACJ,IAAI;YACA,MAAM,SAAS,MAAM,CAAC,OAAO,CAAC,MAAM,KAAK;YACzC,OAAO,cAAc,CAAC;YACtB,SAAS,OAAO,MAAM,CAAC;YACvB,MAAM,QAAQ,OAAO,KAAK;YAC1B,IAAI,MAAM,MAAM,GAAG,GAAG;gBAClB,SAAS,OAAO,MAAM,CAAC;oBAAC;oBAAQ;iBAAM;YAC1C;QACJ,EACA,OAAO,GAAG;YACN,OAAO;QACX;QACA,OAAO,IAAI,CAAC;QACZ,OAAO,OAAO,MAAM;IACxB;AACJ;AACA,QAAQ,cAAc,GAAG;AACzB,SAAS,WAAW,MAAM,EAAE,KAAK;IAC7B,IAAI;QACA,OAAO,cAAc,CAAC,QAAQ,GAAG;IACrC,EACA,OAAO,GAAG;QACN,OAAO;IACX;IACA,OAAO;AACX;AACA,QAAQ,UAAU,GAAG;AACrB,SAAS,WAAW,KAAK,EAAE,MAAM;IAC7B,IAAI;IACJ,IAAI;QACA,SAAS,OAAO,UAAU,CAAC,UAAU,MAAM,CAAC,OAAO,MAAM;IAC7D,EACA,OAAO,GAAG;QACN,OAAO;IACX;IACA,OAAO,IAAI,CAAC;IACZ,OAAO,OAAO,MAAM;AACxB;AACA,QAAQ,UAAU,GAAG;AACrB,SAAS,aAAa,SAAS;IAC3B,OAAO,CAAC,KAAK,OAAO;QAChB,IAAI;QACJ,IAAI;YACA,SAAS,OAAO,UAAU,CAAC,WAAW,KAAK,MAAM,CAAC,OAAO,MAAM;QACnE,EACA,OAAO,GAAG;YACN,OAAO;QACX;QACA,OAAO,IAAI,CAAC;QACZ,OAAO,OAAO,MAAM;IACxB;AACJ;AACA,QAAQ,YAAY,GAAG;AACvB,SAAS,kBAAkB,GAAG,EAAE,KAAK,EAAE,MAAM;IACzC,IAAI;IACJ,IAAI;QACA,MAAM,SAAS,OAAO,UAAU,CAAC;QACjC,MAAM,aAAa,OAAO,IAAI,CAAC,CAAC,6BAA6B,EAAE,IAAI,QAAQ,CAAC,UAAU,6BAA6B,CAAC;QACpH,SAAS,OAAO,MAAM,CAAC,OAAO,GAAG,GAAG,IAAI,CAAC;IAC7C,EACA,OAAO,GAAG;QACN,OAAO;IACX;IACA,OAAO,IAAI,CAAC;IACZ,OAAO,OAAO,MAAM;AACxB;AACA,QAAQ,iBAAiB,GAAG;AAC5B,QAAQ,oBAAoB,GAAG,eAAe,kBAAkB;AAChE,QAAQ,oBAAoB,GAAG,eAAe,oBAAoB;AAClE,QAAQ,oBAAoB,GAAG,eAAe,kBAAkB;AAChE,QAAQ,oBAAoB,GAAG,eAAe,oBAAoB;AAClE,QAAQ,cAAc,GAAG,aAAa;AACtC,QAAQ,cAAc,GAAG,aAAa,WACtC,4CAA4C"}},
    {"offset": {"line": 12870, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 12874, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/client-side-encryption/auto_encrypter.js"],"sourcesContent":["\"use strict\";\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AutoEncrypter = exports.AutoEncryptionLoggerLevel = void 0;\nconst bson_1 = require(\"../bson\");\nconst deps_1 = require(\"../deps\");\nconst error_1 = require(\"../error\");\nconst mongo_client_1 = require(\"../mongo_client\");\nconst utils_1 = require(\"../utils\");\nconst cryptoCallbacks = require(\"./crypto_callbacks\");\nconst errors_1 = require(\"./errors\");\nconst mongocryptd_manager_1 = require(\"./mongocryptd_manager\");\nconst providers_1 = require(\"./providers\");\nconst state_machine_1 = require(\"./state_machine\");\n/** @public */\nexports.AutoEncryptionLoggerLevel = Object.freeze({\n    FatalError: 0,\n    Error: 1,\n    Warning: 2,\n    Info: 3,\n    Trace: 4\n});\n// Typescript errors if we index objects with `Symbol.for(...)`, so\n// to avoid TS errors we pull them out into variables.  Then we can type\n// the objects (and class) that we expect to see them on and prevent TS\n// errors.\n/** @internal */\nconst kDecorateResult = Symbol.for('@@mdb.decorateDecryptionResult');\n/** @internal */\nconst kDecoratedKeys = Symbol.for('@@mdb.decryptedKeys');\n/**\n * @internal An internal class to be used by the driver for auto encryption\n * **NOTE**: Not meant to be instantiated directly, this is for internal use only.\n */\nclass AutoEncrypter {\n    /** @internal */\n    static getMongoCrypt() {\n        const encryption = (0, deps_1.getMongoDBClientEncryption)();\n        if ('kModuleError' in encryption) {\n            throw encryption.kModuleError;\n        }\n        return encryption.MongoCrypt;\n    }\n    /**\n     * Create an AutoEncrypter\n     *\n     * **Note**: Do not instantiate this class directly. Rather, supply the relevant options to a MongoClient\n     *\n     * **Note**: Supplying `options.schemaMap` provides more security than relying on JSON Schemas obtained from the server.\n     * It protects against a malicious server advertising a false JSON Schema, which could trick the client into sending unencrypted data that should be encrypted.\n     * Schemas supplied in the schemaMap only apply to configuring automatic encryption for Client-Side Field Level Encryption.\n     * Other validation rules in the JSON schema will not be enforced by the driver and will result in an error.\n     *\n     * @example <caption>Create an AutoEncrypter that makes use of mongocryptd</caption>\n     * ```ts\n     * // Enabling autoEncryption via a MongoClient using mongocryptd\n     * const { MongoClient } = require('mongodb');\n     * const client = new MongoClient(URL, {\n     *   autoEncryption: {\n     *     kmsProviders: {\n     *       aws: {\n     *         accessKeyId: AWS_ACCESS_KEY,\n     *         secretAccessKey: AWS_SECRET_KEY\n     *       }\n     *     }\n     *   }\n     * });\n     * ```\n     *\n     * await client.connect();\n     * // From here on, the client will be encrypting / decrypting automatically\n     * @example <caption>Create an AutoEncrypter that makes use of libmongocrypt's CSFLE shared library</caption>\n     * ```ts\n     * // Enabling autoEncryption via a MongoClient using CSFLE shared library\n     * const { MongoClient } = require('mongodb');\n     * const client = new MongoClient(URL, {\n     *   autoEncryption: {\n     *     kmsProviders: {\n     *       aws: {}\n     *     },\n     *     extraOptions: {\n     *       cryptSharedLibPath: '/path/to/local/crypt/shared/lib',\n     *       cryptSharedLibRequired: true\n     *     }\n     *   }\n     * });\n     * ```\n     *\n     * await client.connect();\n     * // From here on, the client will be encrypting / decrypting automatically\n     */\n    constructor(client, options) {\n        /**\n         * Used by devtools to enable decorating decryption results.\n         *\n         * When set and enabled, `decrypt` will automatically recursively\n         * traverse a decrypted document and if a field has been decrypted,\n         * it will mark it as decrypted.  Compass uses this to determine which\n         * fields were decrypted.\n         */\n        this[_a] = false;\n        this._client = client;\n        this._bypassEncryption = options.bypassAutoEncryption === true;\n        this._keyVaultNamespace = options.keyVaultNamespace || 'admin.datakeys';\n        this._keyVaultClient = options.keyVaultClient || client;\n        this._metaDataClient = options.metadataClient || client;\n        this._proxyOptions = options.proxyOptions || {};\n        this._tlsOptions = options.tlsOptions || {};\n        this._kmsProviders = options.kmsProviders || {};\n        const mongoCryptOptions = {\n            cryptoCallbacks\n        };\n        if (options.schemaMap) {\n            mongoCryptOptions.schemaMap = Buffer.isBuffer(options.schemaMap)\n                ? options.schemaMap\n                : (0, bson_1.serialize)(options.schemaMap);\n        }\n        if (options.encryptedFieldsMap) {\n            mongoCryptOptions.encryptedFieldsMap = Buffer.isBuffer(options.encryptedFieldsMap)\n                ? options.encryptedFieldsMap\n                : (0, bson_1.serialize)(options.encryptedFieldsMap);\n        }\n        mongoCryptOptions.kmsProviders = !Buffer.isBuffer(this._kmsProviders)\n            ? (0, bson_1.serialize)(this._kmsProviders)\n            : this._kmsProviders;\n        if (options.options?.logger) {\n            mongoCryptOptions.logger = options.options.logger;\n        }\n        if (options.extraOptions && options.extraOptions.cryptSharedLibPath) {\n            mongoCryptOptions.cryptSharedLibPath = options.extraOptions.cryptSharedLibPath;\n        }\n        if (options.bypassQueryAnalysis) {\n            mongoCryptOptions.bypassQueryAnalysis = options.bypassQueryAnalysis;\n        }\n        this._bypassMongocryptdAndCryptShared = this._bypassEncryption || !!options.bypassQueryAnalysis;\n        if (options.extraOptions && options.extraOptions.cryptSharedLibSearchPaths) {\n            // Only for driver testing\n            mongoCryptOptions.cryptSharedLibSearchPaths = options.extraOptions.cryptSharedLibSearchPaths;\n        }\n        else if (!this._bypassMongocryptdAndCryptShared) {\n            mongoCryptOptions.cryptSharedLibSearchPaths = ['$SYSTEM'];\n        }\n        const MongoCrypt = AutoEncrypter.getMongoCrypt();\n        this._mongocrypt = new MongoCrypt(mongoCryptOptions);\n        this._contextCounter = 0;\n        if (options.extraOptions &&\n            options.extraOptions.cryptSharedLibRequired &&\n            !this.cryptSharedLibVersionInfo) {\n            throw new errors_1.MongoCryptInvalidArgumentError('`cryptSharedLibRequired` set but no crypt_shared library loaded');\n        }\n        // Only instantiate mongocryptd manager/client once we know for sure\n        // that we are not using the CSFLE shared library.\n        if (!this._bypassMongocryptdAndCryptShared && !this.cryptSharedLibVersionInfo) {\n            this._mongocryptdManager = new mongocryptd_manager_1.MongocryptdManager(options.extraOptions);\n            const clientOptions = {\n                serverSelectionTimeoutMS: 10000\n            };\n            if (options.extraOptions == null || typeof options.extraOptions.mongocryptdURI !== 'string') {\n                clientOptions.family = 4;\n            }\n            this._mongocryptdClient = new mongo_client_1.MongoClient(this._mongocryptdManager.uri, clientOptions);\n        }\n    }\n    /**\n     * Initializes the auto encrypter by spawning a mongocryptd and connecting to it.\n     *\n     * This function is a no-op when bypassSpawn is set or the crypt shared library is used.\n     */\n    async init() {\n        if (this._bypassMongocryptdAndCryptShared || this.cryptSharedLibVersionInfo) {\n            return;\n        }\n        if (!this._mongocryptdManager) {\n            throw new error_1.MongoRuntimeError('Reached impossible state: mongocryptdManager is undefined when neither bypassSpawn nor the shared lib are specified.');\n        }\n        if (!this._mongocryptdClient) {\n            throw new error_1.MongoRuntimeError('Reached impossible state: mongocryptdClient is undefined when neither bypassSpawn nor the shared lib are specified.');\n        }\n        if (!this._mongocryptdManager.bypassSpawn) {\n            await this._mongocryptdManager.spawn();\n        }\n        try {\n            const client = await this._mongocryptdClient.connect();\n            return client;\n        }\n        catch (error) {\n            const { message } = error;\n            if (message && (message.match(/timed out after/) || message.match(/ENOTFOUND/))) {\n                throw new error_1.MongoRuntimeError('Unable to connect to `mongocryptd`, please make sure it is running or in your PATH for auto-spawn', { cause: error });\n            }\n            throw error;\n        }\n    }\n    /**\n     * Cleans up the `_mongocryptdClient`, if present.\n     */\n    async teardown(force) {\n        await this._mongocryptdClient?.close(force);\n    }\n    /**\n     * Encrypt a command for a given namespace.\n     */\n    async encrypt(ns, cmd, options = {}) {\n        if (this._bypassEncryption) {\n            // If `bypassAutoEncryption` has been specified, don't encrypt\n            return cmd;\n        }\n        const commandBuffer = Buffer.isBuffer(cmd) ? cmd : (0, bson_1.serialize)(cmd, options);\n        const context = this._mongocrypt.makeEncryptionContext(utils_1.MongoDBCollectionNamespace.fromString(ns).db, commandBuffer);\n        context.id = this._contextCounter++;\n        context.ns = ns;\n        context.document = cmd;\n        const stateMachine = new state_machine_1.StateMachine({\n            promoteValues: false,\n            promoteLongs: false,\n            proxyOptions: this._proxyOptions,\n            tlsOptions: this._tlsOptions\n        });\n        return stateMachine.execute(this, context);\n    }\n    /**\n     * Decrypt a command response\n     */\n    async decrypt(response, options = {}) {\n        const buffer = Buffer.isBuffer(response) ? response : (0, bson_1.serialize)(response, options);\n        const context = this._mongocrypt.makeDecryptionContext(buffer);\n        context.id = this._contextCounter++;\n        const stateMachine = new state_machine_1.StateMachine({\n            ...options,\n            proxyOptions: this._proxyOptions,\n            tlsOptions: this._tlsOptions\n        });\n        const decorateResult = this[kDecorateResult];\n        const result = await stateMachine.execute(this, context);\n        if (decorateResult) {\n            decorateDecryptionResult(result, response);\n        }\n        return result;\n    }\n    /**\n     * Ask the user for KMS credentials.\n     *\n     * This returns anything that looks like the kmsProviders original input\n     * option. It can be empty, and any provider specified here will override\n     * the original ones.\n     */\n    async askForKMSCredentials() {\n        return (0, providers_1.refreshKMSCredentials)(this._kmsProviders);\n    }\n    /**\n     * Return the current libmongocrypt's CSFLE shared library version\n     * as `{ version: bigint, versionStr: string }`, or `null` if no CSFLE\n     * shared library was loaded.\n     */\n    get cryptSharedLibVersionInfo() {\n        return this._mongocrypt.cryptSharedLibVersionInfo;\n    }\n    static get libmongocryptVersion() {\n        return AutoEncrypter.getMongoCrypt().libmongocryptVersion;\n    }\n}\nexports.AutoEncrypter = AutoEncrypter;\n_a = kDecorateResult;\n/**\n * Recurse through the (identically-shaped) `decrypted` and `original`\n * objects and attach a `decryptedKeys` property on each sub-object that\n * contained encrypted fields. Because we only call this on BSON responses,\n * we do not need to worry about circular references.\n *\n * @internal\n */\nfunction decorateDecryptionResult(decrypted, original, isTopLevelDecorateCall = true) {\n    if (isTopLevelDecorateCall) {\n        // The original value could have been either a JS object or a BSON buffer\n        if (Buffer.isBuffer(original)) {\n            original = (0, bson_1.deserialize)(original);\n        }\n        if (Buffer.isBuffer(decrypted)) {\n            throw new error_1.MongoRuntimeError('Expected result of decryption to be deserialized BSON object');\n        }\n    }\n    if (!decrypted || typeof decrypted !== 'object')\n        return;\n    for (const k of Object.keys(decrypted)) {\n        const originalValue = original[k];\n        // An object was decrypted by libmongocrypt if and only if it was\n        // a BSON Binary object with subtype 6.\n        if (originalValue && originalValue._bsontype === 'Binary' && originalValue.sub_type === 6) {\n            if (!decrypted[kDecoratedKeys]) {\n                Object.defineProperty(decrypted, kDecoratedKeys, {\n                    value: [],\n                    configurable: true,\n                    enumerable: false,\n                    writable: false\n                });\n            }\n            // this is defined in the preceding if-statement\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            decrypted[kDecoratedKeys].push(k);\n            // Do not recurse into this decrypted value. It could be a sub-document/array,\n            // in which case there is no original value associated with its subfields.\n            continue;\n        }\n        decorateDecryptionResult(decrypted[k], originalValue, false);\n    }\n}\n//# sourceMappingURL=auto_encrypter.js.map"],"names":[],"mappings":"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"}},
    {"offset": {"line": 13159, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 13163, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/encrypter.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Encrypter = void 0;\nconst util_1 = require(\"util\");\nconst auto_encrypter_1 = require(\"./client-side-encryption/auto_encrypter\");\nconst constants_1 = require(\"./constants\");\nconst deps_1 = require(\"./deps\");\nconst error_1 = require(\"./error\");\nconst mongo_client_1 = require(\"./mongo_client\");\n/** @internal */\nconst kInternalClient = Symbol('internalClient');\n/** @internal */\nclass Encrypter {\n    constructor(client, uri, options) {\n        if (typeof options.autoEncryption !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Option \"autoEncryption\" must be specified');\n        }\n        // initialize to null, if we call getInternalClient, we may set this it is important to not overwrite those function calls.\n        this[kInternalClient] = null;\n        this.bypassAutoEncryption = !!options.autoEncryption.bypassAutoEncryption;\n        this.needsConnecting = false;\n        if (options.maxPoolSize === 0 && options.autoEncryption.keyVaultClient == null) {\n            options.autoEncryption.keyVaultClient = client;\n        }\n        else if (options.autoEncryption.keyVaultClient == null) {\n            options.autoEncryption.keyVaultClient = this.getInternalClient(client, uri, options);\n        }\n        if (this.bypassAutoEncryption) {\n            options.autoEncryption.metadataClient = undefined;\n        }\n        else if (options.maxPoolSize === 0) {\n            options.autoEncryption.metadataClient = client;\n        }\n        else {\n            options.autoEncryption.metadataClient = this.getInternalClient(client, uri, options);\n        }\n        if (options.proxyHost) {\n            options.autoEncryption.proxyOptions = {\n                proxyHost: options.proxyHost,\n                proxyPort: options.proxyPort,\n                proxyUsername: options.proxyUsername,\n                proxyPassword: options.proxyPassword\n            };\n        }\n        this.autoEncrypter = new auto_encrypter_1.AutoEncrypter(client, options.autoEncryption);\n    }\n    getInternalClient(client, uri, options) {\n        // TODO(NODE-4144): Remove new variable for type narrowing\n        let internalClient = this[kInternalClient];\n        if (internalClient == null) {\n            const clonedOptions = {};\n            for (const key of [\n                ...Object.getOwnPropertyNames(options),\n                ...Object.getOwnPropertySymbols(options)\n            ]) {\n                if (['autoEncryption', 'minPoolSize', 'servers', 'caseTranslate', 'dbName'].includes(key))\n                    continue;\n                Reflect.set(clonedOptions, key, Reflect.get(options, key));\n            }\n            clonedOptions.minPoolSize = 0;\n            internalClient = new mongo_client_1.MongoClient(uri, clonedOptions);\n            this[kInternalClient] = internalClient;\n            for (const eventName of constants_1.MONGO_CLIENT_EVENTS) {\n                for (const listener of client.listeners(eventName)) {\n                    internalClient.on(eventName, listener);\n                }\n            }\n            client.on('newListener', (eventName, listener) => {\n                internalClient?.on(eventName, listener);\n            });\n            this.needsConnecting = true;\n        }\n        return internalClient;\n    }\n    async connectInternalClient() {\n        // TODO(NODE-4144): Remove new variable for type narrowing\n        const internalClient = this[kInternalClient];\n        if (this.needsConnecting && internalClient != null) {\n            this.needsConnecting = false;\n            await internalClient.connect();\n        }\n    }\n    closeCallback(client, force, callback) {\n        (0, util_1.callbackify)(this.close.bind(this))(client, force, callback);\n    }\n    async close(client, force) {\n        const maybeError = await this.autoEncrypter.teardown(!!force).catch(e => e);\n        const internalClient = this[kInternalClient];\n        if (internalClient != null && client !== internalClient) {\n            return internalClient.close(force);\n        }\n        if (maybeError) {\n            throw maybeError;\n        }\n    }\n    static checkForMongoCrypt() {\n        const mongodbClientEncryption = (0, deps_1.getMongoDBClientEncryption)();\n        if ('kModuleError' in mongodbClientEncryption) {\n            throw new error_1.MongoMissingDependencyError('Auto-encryption requested, but the module is not installed. ' +\n                'Please add `mongodb-client-encryption` as a dependency of your project');\n        }\n    }\n}\nexports.Encrypter = Encrypter;\n//# sourceMappingURL=encrypter.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,SAAS,GAAG,KAAK;AACzB,MAAM,SAAS;AACf,MAAM,mBAAmB;AACzB,MAAM,cAAc;AACpB,MAAM,SAAS;AACf,MAAM,UAAU;AAChB,MAAM,iBAAiB;AACvB,cAAc,GACd,MAAM,kBAAkB,OAAO;AAC/B,cAAc,GACd,MAAM;IACF,YAAY,MAAM,EAAE,GAAG,EAAE,OAAO,CAAE;QAC9B,IAAI,OAAO,QAAQ,cAAc,KAAK,UAAU;YAC5C,MAAM,IAAI,QAAQ,yBAAyB,CAAC;QAChD;QACA,2HAA2H;QAC3H,IAAI,CAAC,gBAAgB,GAAG;QACxB,IAAI,CAAC,oBAAoB,GAAG,CAAC,CAAC,QAAQ,cAAc,CAAC,oBAAoB;QACzE,IAAI,CAAC,eAAe,GAAG;QACvB,IAAI,QAAQ,WAAW,KAAK,KAAK,QAAQ,cAAc,CAAC,cAAc,IAAI,MAAM;YAC5E,QAAQ,cAAc,CAAC,cAAc,GAAG;QAC5C,OACK,IAAI,QAAQ,cAAc,CAAC,cAAc,IAAI,MAAM;YACpD,QAAQ,cAAc,CAAC,cAAc,GAAG,IAAI,CAAC,iBAAiB,CAAC,QAAQ,KAAK;QAChF;QACA,IAAI,IAAI,CAAC,oBAAoB,EAAE;YAC3B,QAAQ,cAAc,CAAC,cAAc,GAAG;QAC5C,OACK,IAAI,QAAQ,WAAW,KAAK,GAAG;YAChC,QAAQ,cAAc,CAAC,cAAc,GAAG;QAC5C,OACK;YACD,QAAQ,cAAc,CAAC,cAAc,GAAG,IAAI,CAAC,iBAAiB,CAAC,QAAQ,KAAK;QAChF;QACA,IAAI,QAAQ,SAAS,EAAE;YACnB,QAAQ,cAAc,CAAC,YAAY,GAAG;gBAClC,WAAW,QAAQ,SAAS;gBAC5B,WAAW,QAAQ,SAAS;gBAC5B,eAAe,QAAQ,aAAa;gBACpC,eAAe,QAAQ,aAAa;YACxC;QACJ;QACA,IAAI,CAAC,aAAa,GAAG,IAAI,iBAAiB,aAAa,CAAC,QAAQ,QAAQ,cAAc;IAC1F;IACA,kBAAkB,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE;QACpC,0DAA0D;QAC1D,IAAI,iBAAiB,IAAI,CAAC,gBAAgB;QAC1C,IAAI,kBAAkB,MAAM;YACxB,MAAM,gBAAgB,CAAC;YACvB,KAAK,MAAM,OAAO;mBACX,OAAO,mBAAmB,CAAC;mBAC3B,OAAO,qBAAqB,CAAC;aACnC,CAAE;gBACC,IAAI;oBAAC;oBAAkB;oBAAe;oBAAW;oBAAiB;iBAAS,CAAC,QAAQ,CAAC,MACjF;gBACJ,QAAQ,GAAG,CAAC,eAAe,KAAK,QAAQ,GAAG,CAAC,SAAS;YACzD;YACA,cAAc,WAAW,GAAG;YAC5B,iBAAiB,IAAI,eAAe,WAAW,CAAC,KAAK;YACrD,IAAI,CAAC,gBAAgB,GAAG;YACxB,KAAK,MAAM,aAAa,YAAY,mBAAmB,CAAE;gBACrD,KAAK,MAAM,YAAY,OAAO,SAAS,CAAC,WAAY;oBAChD,eAAe,EAAE,CAAC,WAAW;gBACjC;YACJ;YACA,OAAO,EAAE,CAAC,eAAe,CAAC,WAAW;gBACjC,gBAAgB,GAAG,WAAW;YAClC;YACA,IAAI,CAAC,eAAe,GAAG;QAC3B;QACA,OAAO;IACX;IACA,MAAM,wBAAwB;QAC1B,0DAA0D;QAC1D,MAAM,iBAAiB,IAAI,CAAC,gBAAgB;QAC5C,IAAI,IAAI,CAAC,eAAe,IAAI,kBAAkB,MAAM;YAChD,IAAI,CAAC,eAAe,GAAG;YACvB,MAAM,eAAe,OAAO;QAChC;IACJ;IACA,cAAc,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE;QAClC,CAAA,GAAG,OAAO,WAAW,AAAD,EAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,QAAQ,OAAO;IAClE;IACA,MAAM,MAAM,MAAM,EAAE,KAAK,EAAE;QACvB,MAAM,aAAa,MAAM,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,KAAK,CAAC,CAAA,IAAK;QACzE,MAAM,iBAAiB,IAAI,CAAC,gBAAgB;QAC5C,IAAI,kBAAkB,QAAQ,WAAW,gBAAgB;YACrD,OAAO,eAAe,KAAK,CAAC;QAChC;QACA,IAAI,YAAY;YACZ,MAAM;QACV;IACJ;IACA,OAAO,qBAAqB;QACxB,MAAM,0BAA0B,AAAC,CAAA,GAAG,OAAO,0BAA0B,AAAD;QACpE,IAAI,kBAAkB,yBAAyB;YAC3C,MAAM,IAAI,QAAQ,2BAA2B,CAAC,iEAC1C;QACR;IACJ;AACJ;AACA,QAAQ,SAAS,GAAG,WACpB,qCAAqC"}},
    {"offset": {"line": 13268, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 13272, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/connection_string.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FEATURE_FLAGS = exports.DEFAULT_OPTIONS = exports.OPTIONS = exports.parseOptions = exports.resolveSRVRecord = void 0;\nconst dns = require(\"dns\");\nconst mongodb_connection_string_url_1 = require(\"mongodb-connection-string-url\");\nconst url_1 = require(\"url\");\nconst mongo_credentials_1 = require(\"./cmap/auth/mongo_credentials\");\nconst providers_1 = require(\"./cmap/auth/providers\");\nconst client_metadata_1 = require(\"./cmap/handshake/client_metadata\");\nconst compression_1 = require(\"./cmap/wire_protocol/compression\");\nconst encrypter_1 = require(\"./encrypter\");\nconst error_1 = require(\"./error\");\nconst mongo_client_1 = require(\"./mongo_client\");\nconst mongo_logger_1 = require(\"./mongo_logger\");\nconst read_concern_1 = require(\"./read_concern\");\nconst read_preference_1 = require(\"./read_preference\");\nconst monitor_1 = require(\"./sdam/monitor\");\nconst utils_1 = require(\"./utils\");\nconst write_concern_1 = require(\"./write_concern\");\nconst VALID_TXT_RECORDS = ['authSource', 'replicaSet', 'loadBalanced'];\nconst LB_SINGLE_HOST_ERROR = 'loadBalanced option only supported with a single host in the URI';\nconst LB_REPLICA_SET_ERROR = 'loadBalanced option not supported with a replicaSet option';\nconst LB_DIRECT_CONNECTION_ERROR = 'loadBalanced option not supported when directConnection is provided';\n/**\n * Lookup a `mongodb+srv` connection string, combine the parts and reparse it as a normal\n * connection string.\n *\n * @param uri - The connection string to parse\n * @param options - Optional user provided connection string options\n */\nasync function resolveSRVRecord(options) {\n    if (typeof options.srvHost !== 'string') {\n        throw new error_1.MongoAPIError('Option \"srvHost\" must not be empty');\n    }\n    if (options.srvHost.split('.').length < 3) {\n        // TODO(NODE-3484): Replace with MongoConnectionStringError\n        throw new error_1.MongoAPIError('URI must include hostname, domain name, and tld');\n    }\n    // Resolve the SRV record and use the result as the list of hosts to connect to.\n    const lookupAddress = options.srvHost;\n    const addresses = await dns.promises.resolveSrv(`_${options.srvServiceName}._tcp.${lookupAddress}`);\n    if (addresses.length === 0) {\n        throw new error_1.MongoAPIError('No addresses found at host');\n    }\n    for (const { name } of addresses) {\n        if (!(0, utils_1.matchesParentDomain)(name, lookupAddress)) {\n            throw new error_1.MongoAPIError('Server record does not share hostname with parent URI');\n        }\n    }\n    const hostAddresses = addresses.map(r => utils_1.HostAddress.fromString(`${r.name}:${r.port ?? 27017}`));\n    validateLoadBalancedOptions(hostAddresses, options, true);\n    // Resolve TXT record and add options from there if they exist.\n    let record;\n    try {\n        record = await dns.promises.resolveTxt(lookupAddress);\n    }\n    catch (error) {\n        if (error.code !== 'ENODATA' && error.code !== 'ENOTFOUND') {\n            throw error;\n        }\n        return hostAddresses;\n    }\n    if (record.length > 1) {\n        throw new error_1.MongoParseError('Multiple text records not allowed');\n    }\n    const txtRecordOptions = new url_1.URLSearchParams(record[0].join(''));\n    const txtRecordOptionKeys = [...txtRecordOptions.keys()];\n    if (txtRecordOptionKeys.some(key => !VALID_TXT_RECORDS.includes(key))) {\n        throw new error_1.MongoParseError(`Text record may only set any of: ${VALID_TXT_RECORDS.join(', ')}`);\n    }\n    if (VALID_TXT_RECORDS.some(option => txtRecordOptions.get(option) === '')) {\n        throw new error_1.MongoParseError('Cannot have empty URI params in DNS TXT Record');\n    }\n    const source = txtRecordOptions.get('authSource') ?? undefined;\n    const replicaSet = txtRecordOptions.get('replicaSet') ?? undefined;\n    const loadBalanced = txtRecordOptions.get('loadBalanced') ?? undefined;\n    if (!options.userSpecifiedAuthSource &&\n        source &&\n        options.credentials &&\n        !providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(options.credentials.mechanism)) {\n        options.credentials = mongo_credentials_1.MongoCredentials.merge(options.credentials, { source });\n    }\n    if (!options.userSpecifiedReplicaSet && replicaSet) {\n        options.replicaSet = replicaSet;\n    }\n    if (loadBalanced === 'true') {\n        options.loadBalanced = true;\n    }\n    if (options.replicaSet && options.srvMaxHosts > 0) {\n        throw new error_1.MongoParseError('Cannot combine replicaSet option with srvMaxHosts');\n    }\n    validateLoadBalancedOptions(hostAddresses, options, true);\n    return hostAddresses;\n}\nexports.resolveSRVRecord = resolveSRVRecord;\n/**\n * Checks if TLS options are valid\n *\n * @param allOptions - All options provided by user or included in default options map\n * @throws MongoAPIError if TLS options are invalid\n */\nfunction checkTLSOptions(allOptions) {\n    if (!allOptions)\n        return;\n    const check = (a, b) => {\n        if (allOptions.has(a) && allOptions.has(b)) {\n            throw new error_1.MongoAPIError(`The '${a}' option cannot be used with the '${b}' option`);\n        }\n    };\n    check('tlsInsecure', 'tlsAllowInvalidCertificates');\n    check('tlsInsecure', 'tlsAllowInvalidHostnames');\n    check('tlsInsecure', 'tlsDisableCertificateRevocationCheck');\n    check('tlsInsecure', 'tlsDisableOCSPEndpointCheck');\n    check('tlsAllowInvalidCertificates', 'tlsDisableCertificateRevocationCheck');\n    check('tlsAllowInvalidCertificates', 'tlsDisableOCSPEndpointCheck');\n    check('tlsDisableCertificateRevocationCheck', 'tlsDisableOCSPEndpointCheck');\n}\nfunction getBoolean(name, value) {\n    if (typeof value === 'boolean')\n        return value;\n    switch (value) {\n        case 'true':\n            return true;\n        case 'false':\n            return false;\n        default:\n            throw new error_1.MongoParseError(`${name} must be either \"true\" or \"false\"`);\n    }\n}\nfunction getIntFromOptions(name, value) {\n    const parsedInt = (0, utils_1.parseInteger)(value);\n    if (parsedInt != null) {\n        return parsedInt;\n    }\n    throw new error_1.MongoParseError(`Expected ${name} to be stringified int value, got: ${value}`);\n}\nfunction getUIntFromOptions(name, value) {\n    const parsedValue = getIntFromOptions(name, value);\n    if (parsedValue < 0) {\n        throw new error_1.MongoParseError(`${name} can only be a positive int value, got: ${value}`);\n    }\n    return parsedValue;\n}\nfunction* entriesFromString(value) {\n    if (value === '') {\n        return;\n    }\n    const keyValuePairs = value.split(',');\n    for (const keyValue of keyValuePairs) {\n        const [key, value] = keyValue.split(/:(.*)/);\n        if (value == null) {\n            throw new error_1.MongoParseError('Cannot have undefined values in key value pairs');\n        }\n        yield [key, value];\n    }\n}\nclass CaseInsensitiveMap extends Map {\n    constructor(entries = []) {\n        super(entries.map(([k, v]) => [k.toLowerCase(), v]));\n    }\n    has(k) {\n        return super.has(k.toLowerCase());\n    }\n    get(k) {\n        return super.get(k.toLowerCase());\n    }\n    set(k, v) {\n        return super.set(k.toLowerCase(), v);\n    }\n    delete(k) {\n        return super.delete(k.toLowerCase());\n    }\n}\nfunction parseOptions(uri, mongoClient = undefined, options = {}) {\n    if (mongoClient != null && !(mongoClient instanceof mongo_client_1.MongoClient)) {\n        options = mongoClient;\n        mongoClient = undefined;\n    }\n    // validate BSONOptions\n    if (options.useBigInt64 && typeof options.promoteLongs === 'boolean' && !options.promoteLongs) {\n        throw new error_1.MongoAPIError('Must request either bigint or Long for int64 deserialization');\n    }\n    if (options.useBigInt64 && typeof options.promoteValues === 'boolean' && !options.promoteValues) {\n        throw new error_1.MongoAPIError('Must request either bigint or Long for int64 deserialization');\n    }\n    const url = new mongodb_connection_string_url_1.default(uri);\n    const { hosts, isSRV } = url;\n    const mongoOptions = Object.create(null);\n    // Feature flags\n    for (const flag of Object.getOwnPropertySymbols(options)) {\n        if (exports.FEATURE_FLAGS.has(flag)) {\n            mongoOptions[flag] = options[flag];\n        }\n    }\n    mongoOptions.hosts = isSRV ? [] : hosts.map(utils_1.HostAddress.fromString);\n    const urlOptions = new CaseInsensitiveMap();\n    if (url.pathname !== '/' && url.pathname !== '') {\n        const dbName = decodeURIComponent(url.pathname[0] === '/' ? url.pathname.slice(1) : url.pathname);\n        if (dbName) {\n            urlOptions.set('dbName', [dbName]);\n        }\n    }\n    if (url.username !== '') {\n        const auth = {\n            username: decodeURIComponent(url.username)\n        };\n        if (typeof url.password === 'string') {\n            auth.password = decodeURIComponent(url.password);\n        }\n        urlOptions.set('auth', [auth]);\n    }\n    for (const key of url.searchParams.keys()) {\n        const values = url.searchParams.getAll(key);\n        const isReadPreferenceTags = /readPreferenceTags/i.test(key);\n        if (!isReadPreferenceTags && values.length > 1) {\n            throw new error_1.MongoInvalidArgumentError(`URI option \"${key}\" cannot appear more than once in the connection string`);\n        }\n        if (!isReadPreferenceTags && values.includes('')) {\n            throw new error_1.MongoAPIError(`URI option \"${key}\" cannot be specified with no value`);\n        }\n        if (!urlOptions.has(key)) {\n            urlOptions.set(key, values);\n        }\n    }\n    const objectOptions = new CaseInsensitiveMap(Object.entries(options).filter(([, v]) => v != null));\n    // Validate options that can only be provided by one of uri or object\n    if (urlOptions.has('serverApi')) {\n        throw new error_1.MongoParseError('URI cannot contain `serverApi`, it can only be passed to the client');\n    }\n    const uriMechanismProperties = urlOptions.get('authMechanismProperties');\n    if (uriMechanismProperties) {\n        for (const property of uriMechanismProperties) {\n            if (/(^|,)ALLOWED_HOSTS:/.test(property)) {\n                throw new error_1.MongoParseError('Auth mechanism property ALLOWED_HOSTS is not allowed in the connection string.');\n            }\n        }\n    }\n    if (objectOptions.has('loadBalanced')) {\n        throw new error_1.MongoParseError('loadBalanced is only a valid option in the URI');\n    }\n    // All option collection\n    const allProvidedOptions = new CaseInsensitiveMap();\n    const allProvidedKeys = new Set([...urlOptions.keys(), ...objectOptions.keys()]);\n    for (const key of allProvidedKeys) {\n        const values = [];\n        const objectOptionValue = objectOptions.get(key);\n        if (objectOptionValue != null) {\n            values.push(objectOptionValue);\n        }\n        const urlValues = urlOptions.get(key) ?? [];\n        values.push(...urlValues);\n        allProvidedOptions.set(key, values);\n    }\n    if (allProvidedOptions.has('tls') || allProvidedOptions.has('ssl')) {\n        const tlsAndSslOpts = (allProvidedOptions.get('tls') || [])\n            .concat(allProvidedOptions.get('ssl') || [])\n            .map(getBoolean.bind(null, 'tls/ssl'));\n        if (new Set(tlsAndSslOpts).size !== 1) {\n            throw new error_1.MongoParseError('All values of tls/ssl must be the same.');\n        }\n    }\n    checkTLSOptions(allProvidedOptions);\n    const unsupportedOptions = (0, utils_1.setDifference)(allProvidedKeys, Array.from(Object.keys(exports.OPTIONS)).map(s => s.toLowerCase()));\n    if (unsupportedOptions.size !== 0) {\n        const optionWord = unsupportedOptions.size > 1 ? 'options' : 'option';\n        const isOrAre = unsupportedOptions.size > 1 ? 'are' : 'is';\n        throw new error_1.MongoParseError(`${optionWord} ${Array.from(unsupportedOptions).join(', ')} ${isOrAre} not supported`);\n    }\n    // Option parsing and setting\n    for (const [key, descriptor] of Object.entries(exports.OPTIONS)) {\n        const values = allProvidedOptions.get(key);\n        if (!values || values.length === 0) {\n            if (exports.DEFAULT_OPTIONS.has(key)) {\n                setOption(mongoOptions, key, descriptor, [exports.DEFAULT_OPTIONS.get(key)]);\n            }\n        }\n        else {\n            const { deprecated } = descriptor;\n            if (deprecated) {\n                const deprecatedMsg = typeof deprecated === 'string' ? `: ${deprecated}` : '';\n                (0, utils_1.emitWarning)(`${key} is a deprecated option${deprecatedMsg}`);\n            }\n            setOption(mongoOptions, key, descriptor, values);\n        }\n    }\n    if (mongoOptions.credentials) {\n        const isGssapi = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_GSSAPI;\n        const isX509 = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_X509;\n        const isAws = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_AWS;\n        const isOidc = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_OIDC;\n        if ((isGssapi || isX509) &&\n            allProvidedOptions.has('authSource') &&\n            mongoOptions.credentials.source !== '$external') {\n            // If authSource was explicitly given and its incorrect, we error\n            throw new error_1.MongoParseError(`authMechanism ${mongoOptions.credentials.mechanism} requires an authSource of '$external'`);\n        }\n        if (!(isGssapi || isX509 || isAws || isOidc) &&\n            mongoOptions.dbName &&\n            !allProvidedOptions.has('authSource')) {\n            // inherit the dbName unless GSSAPI or X509, then silently ignore dbName\n            // and there was no specific authSource given\n            mongoOptions.credentials = mongo_credentials_1.MongoCredentials.merge(mongoOptions.credentials, {\n                source: mongoOptions.dbName\n            });\n        }\n        if (isAws && mongoOptions.credentials.username && !mongoOptions.credentials.password) {\n            throw new error_1.MongoMissingCredentialsError(`When using ${mongoOptions.credentials.mechanism} password must be set when a username is specified`);\n        }\n        mongoOptions.credentials.validate();\n        // Check if the only auth related option provided was authSource, if so we can remove credentials\n        if (mongoOptions.credentials.password === '' &&\n            mongoOptions.credentials.username === '' &&\n            mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_DEFAULT &&\n            Object.keys(mongoOptions.credentials.mechanismProperties).length === 0) {\n            delete mongoOptions.credentials;\n        }\n    }\n    if (!mongoOptions.dbName) {\n        // dbName default is applied here because of the credential validation above\n        mongoOptions.dbName = 'test';\n    }\n    validateLoadBalancedOptions(hosts, mongoOptions, isSRV);\n    if (mongoClient && mongoOptions.autoEncryption) {\n        encrypter_1.Encrypter.checkForMongoCrypt();\n        mongoOptions.encrypter = new encrypter_1.Encrypter(mongoClient, uri, options);\n        mongoOptions.autoEncrypter = mongoOptions.encrypter.autoEncrypter;\n    }\n    // Potential SRV Overrides and SRV connection string validations\n    mongoOptions.userSpecifiedAuthSource =\n        objectOptions.has('authSource') || urlOptions.has('authSource');\n    mongoOptions.userSpecifiedReplicaSet =\n        objectOptions.has('replicaSet') || urlOptions.has('replicaSet');\n    if (isSRV) {\n        // SRV Record is resolved upon connecting\n        mongoOptions.srvHost = hosts[0];\n        if (mongoOptions.directConnection) {\n            throw new error_1.MongoAPIError('SRV URI does not support directConnection');\n        }\n        if (mongoOptions.srvMaxHosts > 0 && typeof mongoOptions.replicaSet === 'string') {\n            throw new error_1.MongoParseError('Cannot use srvMaxHosts option with replicaSet');\n        }\n        // SRV turns on TLS by default, but users can override and turn it off\n        const noUserSpecifiedTLS = !objectOptions.has('tls') && !urlOptions.has('tls');\n        const noUserSpecifiedSSL = !objectOptions.has('ssl') && !urlOptions.has('ssl');\n        if (noUserSpecifiedTLS && noUserSpecifiedSSL) {\n            mongoOptions.tls = true;\n        }\n    }\n    else {\n        const userSpecifiedSrvOptions = urlOptions.has('srvMaxHosts') ||\n            objectOptions.has('srvMaxHosts') ||\n            urlOptions.has('srvServiceName') ||\n            objectOptions.has('srvServiceName');\n        if (userSpecifiedSrvOptions) {\n            throw new error_1.MongoParseError('Cannot use srvMaxHosts or srvServiceName with a non-srv connection string');\n        }\n    }\n    if (mongoOptions.directConnection && mongoOptions.hosts.length !== 1) {\n        throw new error_1.MongoParseError('directConnection option requires exactly one host');\n    }\n    if (!mongoOptions.proxyHost &&\n        (mongoOptions.proxyPort || mongoOptions.proxyUsername || mongoOptions.proxyPassword)) {\n        throw new error_1.MongoParseError('Must specify proxyHost if other proxy options are passed');\n    }\n    if ((mongoOptions.proxyUsername && !mongoOptions.proxyPassword) ||\n        (!mongoOptions.proxyUsername && mongoOptions.proxyPassword)) {\n        throw new error_1.MongoParseError('Can only specify both of proxy username/password or neither');\n    }\n    const proxyOptions = ['proxyHost', 'proxyPort', 'proxyUsername', 'proxyPassword'].map(key => urlOptions.get(key) ?? []);\n    if (proxyOptions.some(options => options.length > 1)) {\n        throw new error_1.MongoParseError('Proxy options cannot be specified multiple times in the connection string');\n    }\n    const loggerFeatureFlag = Symbol.for('@@mdb.enableMongoLogger');\n    mongoOptions[loggerFeatureFlag] = mongoOptions[loggerFeatureFlag] ?? false;\n    let loggerEnvOptions = {};\n    let loggerClientOptions = {};\n    if (mongoOptions[loggerFeatureFlag]) {\n        loggerEnvOptions = {\n            MONGODB_LOG_COMMAND: process.env.MONGODB_LOG_COMMAND,\n            MONGODB_LOG_TOPOLOGY: process.env.MONGODB_LOG_TOPOLOGY,\n            MONGODB_LOG_SERVER_SELECTION: process.env.MONGODB_LOG_SERVER_SELECTION,\n            MONGODB_LOG_CONNECTION: process.env.MONGODB_LOG_CONNECTION,\n            MONGODB_LOG_CLIENT: process.env.MONGODB_LOG_CLIENT,\n            MONGODB_LOG_ALL: process.env.MONGODB_LOG_ALL,\n            MONGODB_LOG_MAX_DOCUMENT_LENGTH: process.env.MONGODB_LOG_MAX_DOCUMENT_LENGTH,\n            MONGODB_LOG_PATH: process.env.MONGODB_LOG_PATH,\n            ...mongoOptions[Symbol.for('@@mdb.internalLoggerConfig')]\n        };\n        loggerClientOptions = {\n            mongodbLogPath: mongoOptions.mongodbLogPath,\n            mongodbLogComponentSeverities: mongoOptions.mongodbLogComponentSeverities,\n            mongodbLogMaxDocumentLength: mongoOptions.mongodbLogMaxDocumentLength\n        };\n    }\n    mongoOptions.mongoLoggerOptions = mongo_logger_1.MongoLogger.resolveOptions(loggerEnvOptions, loggerClientOptions);\n    mongoOptions.metadata = (0, client_metadata_1.makeClientMetadata)(mongoOptions);\n    return mongoOptions;\n}\nexports.parseOptions = parseOptions;\n/**\n * #### Throws if LB mode is true:\n * - hosts contains more than one host\n * - there is a replicaSet name set\n * - directConnection is set\n * - if srvMaxHosts is used when an srv connection string is passed in\n *\n * @throws MongoParseError\n */\nfunction validateLoadBalancedOptions(hosts, mongoOptions, isSrv) {\n    if (mongoOptions.loadBalanced) {\n        if (hosts.length > 1) {\n            throw new error_1.MongoParseError(LB_SINGLE_HOST_ERROR);\n        }\n        if (mongoOptions.replicaSet) {\n            throw new error_1.MongoParseError(LB_REPLICA_SET_ERROR);\n        }\n        if (mongoOptions.directConnection) {\n            throw new error_1.MongoParseError(LB_DIRECT_CONNECTION_ERROR);\n        }\n        if (isSrv && mongoOptions.srvMaxHosts > 0) {\n            throw new error_1.MongoParseError('Cannot limit srv hosts with loadBalanced enabled');\n        }\n    }\n    return;\n}\nfunction setOption(mongoOptions, key, descriptor, values) {\n    const { target, type, transform } = descriptor;\n    const name = target ?? key;\n    switch (type) {\n        case 'boolean':\n            mongoOptions[name] = getBoolean(name, values[0]);\n            break;\n        case 'int':\n            mongoOptions[name] = getIntFromOptions(name, values[0]);\n            break;\n        case 'uint':\n            mongoOptions[name] = getUIntFromOptions(name, values[0]);\n            break;\n        case 'string':\n            if (values[0] == null) {\n                break;\n            }\n            mongoOptions[name] = String(values[0]);\n            break;\n        case 'record':\n            if (!(0, utils_1.isRecord)(values[0])) {\n                throw new error_1.MongoParseError(`${name} must be an object`);\n            }\n            mongoOptions[name] = values[0];\n            break;\n        case 'any':\n            mongoOptions[name] = values[0];\n            break;\n        default: {\n            if (!transform) {\n                throw new error_1.MongoParseError('Descriptors missing a type must define a transform');\n            }\n            const transformValue = transform({ name, options: mongoOptions, values });\n            mongoOptions[name] = transformValue;\n            break;\n        }\n    }\n}\nexports.OPTIONS = {\n    appName: {\n        type: 'string'\n    },\n    auth: {\n        target: 'credentials',\n        transform({ name, options, values: [value] }) {\n            if (!(0, utils_1.isRecord)(value, ['username', 'password'])) {\n                throw new error_1.MongoParseError(`${name} must be an object with 'username' and 'password' properties`);\n            }\n            return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n                username: value.username,\n                password: value.password\n            });\n        }\n    },\n    authMechanism: {\n        target: 'credentials',\n        transform({ options, values: [value] }) {\n            const mechanisms = Object.values(providers_1.AuthMechanism);\n            const [mechanism] = mechanisms.filter(m => m.match(RegExp(String.raw `\\b${value}\\b`, 'i')));\n            if (!mechanism) {\n                throw new error_1.MongoParseError(`authMechanism one of ${mechanisms}, got ${value}`);\n            }\n            let source = options.credentials?.source;\n            if (mechanism === providers_1.AuthMechanism.MONGODB_PLAIN ||\n                providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(mechanism)) {\n                // some mechanisms have '$external' as the Auth Source\n                source = '$external';\n            }\n            let password = options.credentials?.password;\n            if (mechanism === providers_1.AuthMechanism.MONGODB_X509 && password === '') {\n                password = undefined;\n            }\n            return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n                mechanism,\n                source,\n                password\n            });\n        }\n    },\n    authMechanismProperties: {\n        target: 'credentials',\n        transform({ options, values }) {\n            // We can have a combination of options passed in the URI and options passed\n            // as an object to the MongoClient. So we must transform the string options\n            // as well as merge them together with a potentially provided object.\n            let mechanismProperties = Object.create(null);\n            for (const optionValue of values) {\n                if (typeof optionValue === 'string') {\n                    for (const [key, value] of entriesFromString(optionValue)) {\n                        try {\n                            mechanismProperties[key] = getBoolean(key, value);\n                        }\n                        catch {\n                            mechanismProperties[key] = value;\n                        }\n                    }\n                }\n                else {\n                    if (!(0, utils_1.isRecord)(optionValue)) {\n                        throw new error_1.MongoParseError('AuthMechanismProperties must be an object');\n                    }\n                    mechanismProperties = { ...optionValue };\n                }\n            }\n            return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n                mechanismProperties\n            });\n        }\n    },\n    authSource: {\n        target: 'credentials',\n        transform({ options, values: [value] }) {\n            const source = String(value);\n            return mongo_credentials_1.MongoCredentials.merge(options.credentials, { source });\n        }\n    },\n    autoEncryption: {\n        type: 'record'\n    },\n    bsonRegExp: {\n        type: 'boolean'\n    },\n    serverApi: {\n        target: 'serverApi',\n        transform({ values: [version] }) {\n            const serverApiToValidate = typeof version === 'string' ? { version } : version;\n            const versionToValidate = serverApiToValidate && serverApiToValidate.version;\n            if (!versionToValidate) {\n                throw new error_1.MongoParseError(`Invalid \\`serverApi\\` property; must specify a version from the following enum: [\"${Object.values(mongo_client_1.ServerApiVersion).join('\", \"')}\"]`);\n            }\n            if (!Object.values(mongo_client_1.ServerApiVersion).some(v => v === versionToValidate)) {\n                throw new error_1.MongoParseError(`Invalid server API version=${versionToValidate}; must be in the following enum: [\"${Object.values(mongo_client_1.ServerApiVersion).join('\", \"')}\"]`);\n            }\n            return serverApiToValidate;\n        }\n    },\n    checkKeys: {\n        type: 'boolean'\n    },\n    compressors: {\n        default: 'none',\n        target: 'compressors',\n        transform({ values }) {\n            const compressionList = new Set();\n            for (const compVal of values) {\n                const compValArray = typeof compVal === 'string' ? compVal.split(',') : compVal;\n                if (!Array.isArray(compValArray)) {\n                    throw new error_1.MongoInvalidArgumentError('compressors must be an array or a comma-delimited list of strings');\n                }\n                for (const c of compValArray) {\n                    if (Object.keys(compression_1.Compressor).includes(String(c))) {\n                        compressionList.add(String(c));\n                    }\n                    else {\n                        throw new error_1.MongoInvalidArgumentError(`${c} is not a valid compression mechanism. Must be one of: ${Object.keys(compression_1.Compressor)}.`);\n                    }\n                }\n            }\n            return [...compressionList];\n        }\n    },\n    connectTimeoutMS: {\n        default: 30000,\n        type: 'uint'\n    },\n    dbName: {\n        type: 'string'\n    },\n    directConnection: {\n        default: false,\n        type: 'boolean'\n    },\n    driverInfo: {\n        default: {},\n        type: 'record'\n    },\n    enableUtf8Validation: { type: 'boolean', default: true },\n    family: {\n        transform({ name, values: [value] }) {\n            const transformValue = getIntFromOptions(name, value);\n            if (transformValue === 4 || transformValue === 6) {\n                return transformValue;\n            }\n            throw new error_1.MongoParseError(`Option 'family' must be 4 or 6 got ${transformValue}.`);\n        }\n    },\n    fieldsAsRaw: {\n        type: 'record'\n    },\n    forceServerObjectId: {\n        default: false,\n        type: 'boolean'\n    },\n    fsync: {\n        deprecated: 'Please use journal instead',\n        target: 'writeConcern',\n        transform({ name, options, values: [value] }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    fsync: getBoolean(name, value)\n                }\n            });\n            if (!wc)\n                throw new error_1.MongoParseError(`Unable to make a writeConcern from fsync=${value}`);\n            return wc;\n        }\n    },\n    heartbeatFrequencyMS: {\n        default: 10000,\n        type: 'uint'\n    },\n    ignoreUndefined: {\n        type: 'boolean'\n    },\n    j: {\n        deprecated: 'Please use journal instead',\n        target: 'writeConcern',\n        transform({ name, options, values: [value] }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    journal: getBoolean(name, value)\n                }\n            });\n            if (!wc)\n                throw new error_1.MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n            return wc;\n        }\n    },\n    journal: {\n        target: 'writeConcern',\n        transform({ name, options, values: [value] }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    journal: getBoolean(name, value)\n                }\n            });\n            if (!wc)\n                throw new error_1.MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n            return wc;\n        }\n    },\n    loadBalanced: {\n        default: false,\n        type: 'boolean'\n    },\n    localThresholdMS: {\n        default: 15,\n        type: 'uint'\n    },\n    maxConnecting: {\n        default: 2,\n        transform({ name, values: [value] }) {\n            const maxConnecting = getUIntFromOptions(name, value);\n            if (maxConnecting === 0) {\n                throw new error_1.MongoInvalidArgumentError('maxConnecting must be > 0 if specified');\n            }\n            return maxConnecting;\n        }\n    },\n    maxIdleTimeMS: {\n        default: 0,\n        type: 'uint'\n    },\n    maxPoolSize: {\n        default: 100,\n        type: 'uint'\n    },\n    maxStalenessSeconds: {\n        target: 'readPreference',\n        transform({ name, options, values: [value] }) {\n            const maxStalenessSeconds = getUIntFromOptions(name, value);\n            if (options.readPreference) {\n                return read_preference_1.ReadPreference.fromOptions({\n                    readPreference: { ...options.readPreference, maxStalenessSeconds }\n                });\n            }\n            else {\n                return new read_preference_1.ReadPreference('secondary', undefined, { maxStalenessSeconds });\n            }\n        }\n    },\n    minInternalBufferSize: {\n        type: 'uint'\n    },\n    minPoolSize: {\n        default: 0,\n        type: 'uint'\n    },\n    minHeartbeatFrequencyMS: {\n        default: 500,\n        type: 'uint'\n    },\n    monitorCommands: {\n        default: false,\n        type: 'boolean'\n    },\n    name: {\n        target: 'driverInfo',\n        transform({ values: [value], options }) {\n            return { ...options.driverInfo, name: String(value) };\n        }\n    },\n    noDelay: {\n        default: true,\n        type: 'boolean'\n    },\n    pkFactory: {\n        default: utils_1.DEFAULT_PK_FACTORY,\n        transform({ values: [value] }) {\n            if ((0, utils_1.isRecord)(value, ['createPk']) && typeof value.createPk === 'function') {\n                return value;\n            }\n            throw new error_1.MongoParseError(`Option pkFactory must be an object with a createPk function, got ${value}`);\n        }\n    },\n    promoteBuffers: {\n        type: 'boolean'\n    },\n    promoteLongs: {\n        type: 'boolean'\n    },\n    promoteValues: {\n        type: 'boolean'\n    },\n    useBigInt64: {\n        type: 'boolean'\n    },\n    proxyHost: {\n        type: 'string'\n    },\n    proxyPassword: {\n        type: 'string'\n    },\n    proxyPort: {\n        type: 'uint'\n    },\n    proxyUsername: {\n        type: 'string'\n    },\n    raw: {\n        default: false,\n        type: 'boolean'\n    },\n    readConcern: {\n        transform({ values: [value], options }) {\n            if (value instanceof read_concern_1.ReadConcern || (0, utils_1.isRecord)(value, ['level'])) {\n                return read_concern_1.ReadConcern.fromOptions({ ...options.readConcern, ...value });\n            }\n            throw new error_1.MongoParseError(`ReadConcern must be an object, got ${JSON.stringify(value)}`);\n        }\n    },\n    readConcernLevel: {\n        target: 'readConcern',\n        transform({ values: [level], options }) {\n            return read_concern_1.ReadConcern.fromOptions({\n                ...options.readConcern,\n                level: level\n            });\n        }\n    },\n    readPreference: {\n        default: read_preference_1.ReadPreference.primary,\n        transform({ values: [value], options }) {\n            if (value instanceof read_preference_1.ReadPreference) {\n                return read_preference_1.ReadPreference.fromOptions({\n                    readPreference: { ...options.readPreference, ...value },\n                    ...value\n                });\n            }\n            if ((0, utils_1.isRecord)(value, ['mode'])) {\n                const rp = read_preference_1.ReadPreference.fromOptions({\n                    readPreference: { ...options.readPreference, ...value },\n                    ...value\n                });\n                if (rp)\n                    return rp;\n                else\n                    throw new error_1.MongoParseError(`Cannot make read preference from ${JSON.stringify(value)}`);\n            }\n            if (typeof value === 'string') {\n                const rpOpts = {\n                    hedge: options.readPreference?.hedge,\n                    maxStalenessSeconds: options.readPreference?.maxStalenessSeconds\n                };\n                return new read_preference_1.ReadPreference(value, options.readPreference?.tags, rpOpts);\n            }\n            throw new error_1.MongoParseError(`Unknown ReadPreference value: ${value}`);\n        }\n    },\n    readPreferenceTags: {\n        target: 'readPreference',\n        transform({ values, options }) {\n            const tags = Array.isArray(values[0])\n                ? values[0]\n                : values;\n            const readPreferenceTags = [];\n            for (const tag of tags) {\n                const readPreferenceTag = Object.create(null);\n                if (typeof tag === 'string') {\n                    for (const [k, v] of entriesFromString(tag)) {\n                        readPreferenceTag[k] = v;\n                    }\n                }\n                if ((0, utils_1.isRecord)(tag)) {\n                    for (const [k, v] of Object.entries(tag)) {\n                        readPreferenceTag[k] = v;\n                    }\n                }\n                readPreferenceTags.push(readPreferenceTag);\n            }\n            return read_preference_1.ReadPreference.fromOptions({\n                readPreference: options.readPreference,\n                readPreferenceTags\n            });\n        }\n    },\n    replicaSet: {\n        type: 'string'\n    },\n    retryReads: {\n        default: true,\n        type: 'boolean'\n    },\n    retryWrites: {\n        default: true,\n        type: 'boolean'\n    },\n    serializeFunctions: {\n        type: 'boolean'\n    },\n    serverMonitoringMode: {\n        default: 'auto',\n        transform({ values: [value] }) {\n            if (!Object.values(monitor_1.ServerMonitoringMode).includes(value)) {\n                throw new error_1.MongoParseError('serverMonitoringMode must be one of `auto`, `poll`, or `stream`');\n            }\n            return value;\n        }\n    },\n    serverSelectionTimeoutMS: {\n        default: 30000,\n        type: 'uint'\n    },\n    servername: {\n        type: 'string'\n    },\n    socketTimeoutMS: {\n        default: 0,\n        type: 'uint'\n    },\n    srvMaxHosts: {\n        type: 'uint',\n        default: 0\n    },\n    srvServiceName: {\n        type: 'string',\n        default: 'mongodb'\n    },\n    ssl: {\n        target: 'tls',\n        type: 'boolean'\n    },\n    tls: {\n        type: 'boolean'\n    },\n    tlsAllowInvalidCertificates: {\n        target: 'rejectUnauthorized',\n        transform({ name, values: [value] }) {\n            // allowInvalidCertificates is the inverse of rejectUnauthorized\n            return !getBoolean(name, value);\n        }\n    },\n    tlsAllowInvalidHostnames: {\n        target: 'checkServerIdentity',\n        transform({ name, values: [value] }) {\n            // tlsAllowInvalidHostnames means setting the checkServerIdentity function to a noop\n            return getBoolean(name, value) ? () => undefined : undefined;\n        }\n    },\n    tlsCAFile: {\n        type: 'string'\n    },\n    tlsCRLFile: {\n        type: 'string'\n    },\n    tlsCertificateKeyFile: {\n        type: 'string'\n    },\n    tlsCertificateKeyFilePassword: {\n        target: 'passphrase',\n        type: 'any'\n    },\n    tlsInsecure: {\n        transform({ name, options, values: [value] }) {\n            const tlsInsecure = getBoolean(name, value);\n            if (tlsInsecure) {\n                options.checkServerIdentity = () => undefined;\n                options.rejectUnauthorized = false;\n            }\n            else {\n                options.checkServerIdentity = options.tlsAllowInvalidHostnames\n                    ? () => undefined\n                    : undefined;\n                options.rejectUnauthorized = options.tlsAllowInvalidCertificates ? false : true;\n            }\n            return tlsInsecure;\n        }\n    },\n    w: {\n        target: 'writeConcern',\n        transform({ values: [value], options }) {\n            return write_concern_1.WriteConcern.fromOptions({ writeConcern: { ...options.writeConcern, w: value } });\n        }\n    },\n    waitQueueTimeoutMS: {\n        default: 0,\n        type: 'uint'\n    },\n    writeConcern: {\n        target: 'writeConcern',\n        transform({ values: [value], options }) {\n            if ((0, utils_1.isRecord)(value) || value instanceof write_concern_1.WriteConcern) {\n                return write_concern_1.WriteConcern.fromOptions({\n                    writeConcern: {\n                        ...options.writeConcern,\n                        ...value\n                    }\n                });\n            }\n            else if (value === 'majority' || typeof value === 'number') {\n                return write_concern_1.WriteConcern.fromOptions({\n                    writeConcern: {\n                        ...options.writeConcern,\n                        w: value\n                    }\n                });\n            }\n            throw new error_1.MongoParseError(`Invalid WriteConcern cannot parse: ${JSON.stringify(value)}`);\n        }\n    },\n    wtimeout: {\n        deprecated: 'Please use wtimeoutMS instead',\n        target: 'writeConcern',\n        transform({ values: [value], options }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    wtimeout: getUIntFromOptions('wtimeout', value)\n                }\n            });\n            if (wc)\n                return wc;\n            throw new error_1.MongoParseError(`Cannot make WriteConcern from wtimeout`);\n        }\n    },\n    wtimeoutMS: {\n        target: 'writeConcern',\n        transform({ values: [value], options }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    wtimeoutMS: getUIntFromOptions('wtimeoutMS', value)\n                }\n            });\n            if (wc)\n                return wc;\n            throw new error_1.MongoParseError(`Cannot make WriteConcern from wtimeout`);\n        }\n    },\n    zlibCompressionLevel: {\n        default: 0,\n        type: 'int'\n    },\n    // Custom types for modifying core behavior\n    connectionType: { type: 'any' },\n    srvPoller: { type: 'any' },\n    // Accepted NodeJS Options\n    minDHSize: { type: 'any' },\n    pskCallback: { type: 'any' },\n    secureContext: { type: 'any' },\n    enableTrace: { type: 'any' },\n    requestCert: { type: 'any' },\n    rejectUnauthorized: { type: 'any' },\n    checkServerIdentity: { type: 'any' },\n    ALPNProtocols: { type: 'any' },\n    SNICallback: { type: 'any' },\n    session: { type: 'any' },\n    requestOCSP: { type: 'any' },\n    localAddress: { type: 'any' },\n    localPort: { type: 'any' },\n    hints: { type: 'any' },\n    lookup: { type: 'any' },\n    ca: { type: 'any' },\n    cert: { type: 'any' },\n    ciphers: { type: 'any' },\n    crl: { type: 'any' },\n    ecdhCurve: { type: 'any' },\n    key: { type: 'any' },\n    passphrase: { type: 'any' },\n    pfx: { type: 'any' },\n    secureProtocol: { type: 'any' },\n    index: { type: 'any' },\n    // Legacy options from v3 era\n    useNewUrlParser: {\n        type: 'boolean',\n        deprecated: 'useNewUrlParser has no effect since Node.js Driver version 4.0.0 and will be removed in the next major version'\n    },\n    useUnifiedTopology: {\n        type: 'boolean',\n        deprecated: 'useUnifiedTopology has no effect since Node.js Driver version 4.0.0 and will be removed in the next major version'\n    },\n    // MongoLogger\n    /**\n     * @internal\n     * TODO: NODE-5671 - remove internal flag\n     */\n    mongodbLogPath: { type: 'any' },\n    /**\n     * @internal\n     * TODO: NODE-5671 - remove internal flag\n     */\n    mongodbLogComponentSeverities: { type: 'any' },\n    /**\n     * @internal\n     * TODO: NODE-5671 - remove internal flag\n     */\n    mongodbLogMaxDocumentLength: { type: 'uint' }\n};\nexports.DEFAULT_OPTIONS = new CaseInsensitiveMap(Object.entries(exports.OPTIONS)\n    .filter(([, descriptor]) => descriptor.default != null)\n    .map(([k, d]) => [k, d.default]));\n/**\n * Set of permitted feature flags\n * @internal\n */\nexports.FEATURE_FLAGS = new Set([\n    Symbol.for('@@mdb.skipPingOnConnect'),\n    Symbol.for('@@mdb.enableMongoLogger'),\n    Symbol.for('@@mdb.internalLoggerConfig')\n]);\n//# sourceMappingURL=connection_string.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,aAAa,GAAG,QAAQ,eAAe,GAAG,QAAQ,OAAO,GAAG,QAAQ,YAAY,GAAG,QAAQ,gBAAgB,GAAG,KAAK;AAC3H,MAAM,MAAM;AACZ,MAAM,kCAAkC;AACxC,MAAM,QAAQ;AACd,MAAM,sBAAsB;AAC5B,MAAM,cAAc;AACpB,MAAM,oBAAoB;AAC1B,MAAM,gBAAgB;AACtB,MAAM,cAAc;AACpB,MAAM,UAAU;AAChB,MAAM,iBAAiB;AACvB,MAAM,iBAAiB;AACvB,MAAM,iBAAiB;AACvB,MAAM,oBAAoB;AAC1B,MAAM,YAAY;AAClB,MAAM,UAAU;AAChB,MAAM,kBAAkB;AACxB,MAAM,oBAAoB;IAAC;IAAc;IAAc;CAAe;AACtE,MAAM,uBAAuB;AAC7B,MAAM,uBAAuB;AAC7B,MAAM,6BAA6B;AACnC;;;;;;CAMC,GACD,eAAe,iBAAiB,OAAO;IACnC,IAAI,OAAO,QAAQ,OAAO,KAAK,UAAU;QACrC,MAAM,IAAI,QAAQ,aAAa,CAAC;IACpC;IACA,IAAI,QAAQ,OAAO,CAAC,KAAK,CAAC,KAAK,MAAM,GAAG,GAAG;QACvC,2DAA2D;QAC3D,MAAM,IAAI,QAAQ,aAAa,CAAC;IACpC;IACA,gFAAgF;IAChF,MAAM,gBAAgB,QAAQ,OAAO;IACrC,MAAM,YAAY,MAAM,IAAI,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,QAAQ,cAAc,CAAC,MAAM,EAAE,cAAc,CAAC;IAClG,IAAI,UAAU,MAAM,KAAK,GAAG;QACxB,MAAM,IAAI,QAAQ,aAAa,CAAC;IACpC;IACA,KAAK,MAAM,EAAE,IAAI,EAAE,IAAI,UAAW;QAC9B,IAAI,CAAC,AAAC,CAAA,GAAG,QAAQ,mBAAmB,AAAD,EAAG,MAAM,gBAAgB;YACxD,MAAM,IAAI,QAAQ,aAAa,CAAC;QACpC;IACJ;IACA,MAAM,gBAAgB,UAAU,GAAG,CAAC,CAAA,IAAK,QAAQ,WAAW,CAAC,UAAU,CAAC,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,EAAE,EAAE,IAAI,IAAI,MAAM,CAAC;IACtG,4BAA4B,eAAe,SAAS;IACpD,+DAA+D;IAC/D,IAAI;IACJ,IAAI;QACA,SAAS,MAAM,IAAI,QAAQ,CAAC,UAAU,CAAC;IAC3C,EACA,OAAO,OAAO;QACV,IAAI,MAAM,IAAI,KAAK,aAAa,MAAM,IAAI,KAAK,aAAa;YACxD,MAAM;QACV;QACA,OAAO;IACX;IACA,IAAI,OAAO,MAAM,GAAG,GAAG;QACnB,MAAM,IAAI,QAAQ,eAAe,CAAC;IACtC;IACA,MAAM,mBAAmB,IAAI,MAAM,eAAe,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC;IAClE,MAAM,sBAAsB;WAAI,iBAAiB,IAAI;KAAG;IACxD,IAAI,oBAAoB,IAAI,CAAC,CAAA,MAAO,CAAC,kBAAkB,QAAQ,CAAC,OAAO;QACnE,MAAM,IAAI,QAAQ,eAAe,CAAC,CAAC,iCAAiC,EAAE,kBAAkB,IAAI,CAAC,MAAM,CAAC;IACxG;IACA,IAAI,kBAAkB,IAAI,CAAC,CAAA,SAAU,iBAAiB,GAAG,CAAC,YAAY,KAAK;QACvE,MAAM,IAAI,QAAQ,eAAe,CAAC;IACtC;IACA,MAAM,SAAS,iBAAiB,GAAG,CAAC,iBAAiB;IACrD,MAAM,aAAa,iBAAiB,GAAG,CAAC,iBAAiB;IACzD,MAAM,eAAe,iBAAiB,GAAG,CAAC,mBAAmB;IAC7D,IAAI,CAAC,QAAQ,uBAAuB,IAChC,UACA,QAAQ,WAAW,IACnB,CAAC,YAAY,4BAA4B,CAAC,GAAG,CAAC,QAAQ,WAAW,CAAC,SAAS,GAAG;QAC9E,QAAQ,WAAW,GAAG,oBAAoB,gBAAgB,CAAC,KAAK,CAAC,QAAQ,WAAW,EAAE;YAAE;QAAO;IACnG;IACA,IAAI,CAAC,QAAQ,uBAAuB,IAAI,YAAY;QAChD,QAAQ,UAAU,GAAG;IACzB;IACA,IAAI,iBAAiB,QAAQ;QACzB,QAAQ,YAAY,GAAG;IAC3B;IACA,IAAI,QAAQ,UAAU,IAAI,QAAQ,WAAW,GAAG,GAAG;QAC/C,MAAM,IAAI,QAAQ,eAAe,CAAC;IACtC;IACA,4BAA4B,eAAe,SAAS;IACpD,OAAO;AACX;AACA,QAAQ,gBAAgB,GAAG;AAC3B;;;;;CAKC,GACD,SAAS,gBAAgB,UAAU;IAC/B,IAAI,CAAC,YACD;IACJ,MAAM,QAAQ,CAAC,GAAG;QACd,IAAI,WAAW,GAAG,CAAC,MAAM,WAAW,GAAG,CAAC,IAAI;YACxC,MAAM,IAAI,QAAQ,aAAa,CAAC,CAAC,KAAK,EAAE,EAAE,kCAAkC,EAAE,EAAE,QAAQ,CAAC;QAC7F;IACJ;IACA,MAAM,eAAe;IACrB,MAAM,eAAe;IACrB,MAAM,eAAe;IACrB,MAAM,eAAe;IACrB,MAAM,+BAA+B;IACrC,MAAM,+BAA+B;IACrC,MAAM,wCAAwC;AAClD;AACA,SAAS,WAAW,IAAI,EAAE,KAAK;IAC3B,IAAI,OAAO,UAAU,WACjB,OAAO;IACX,OAAQ;QACJ,KAAK;YACD,OAAO;QACX,KAAK;YACD,OAAO;QACX;YACI,MAAM,IAAI,QAAQ,eAAe,CAAC,CAAC,EAAE,KAAK,iCAAiC,CAAC;IACpF;AACJ;AACA,SAAS,kBAAkB,IAAI,EAAE,KAAK;IAClC,MAAM,YAAY,AAAC,CAAA,GAAG,QAAQ,YAAY,AAAD,EAAG;IAC5C,IAAI,aAAa,MAAM;QACnB,OAAO;IACX;IACA,MAAM,IAAI,QAAQ,eAAe,CAAC,CAAC,SAAS,EAAE,KAAK,mCAAmC,EAAE,MAAM,CAAC;AACnG;AACA,SAAS,mBAAmB,IAAI,EAAE,KAAK;IACnC,MAAM,cAAc,kBAAkB,MAAM;IAC5C,IAAI,cAAc,GAAG;QACjB,MAAM,IAAI,QAAQ,eAAe,CAAC,CAAC,EAAE,KAAK,wCAAwC,EAAE,MAAM,CAAC;IAC/F;IACA,OAAO;AACX;AACA,UAAU,kBAAkB,KAAK;IAC7B,IAAI,UAAU,IAAI;QACd;IACJ;IACA,MAAM,gBAAgB,MAAM,KAAK,CAAC;IAClC,KAAK,MAAM,YAAY,cAAe;QAClC,MAAM,CAAC,KAAK,MAAM,GAAG,SAAS,KAAK,CAAC;QACpC,IAAI,SAAS,MAAM;YACf,MAAM,IAAI,QAAQ,eAAe,CAAC;QACtC;QACA,MAAM;YAAC;YAAK;SAAM;IACtB;AACJ;AACA,MAAM,2BAA2B;IAC7B,YAAY,UAAU,EAAE,CAAE;QACtB,KAAK,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAK;gBAAC,EAAE,WAAW;gBAAI;aAAE;IACtD;IACA,IAAI,CAAC,EAAE;QACH,OAAO,KAAK,CAAC,IAAI,EAAE,WAAW;IAClC;IACA,IAAI,CAAC,EAAE;QACH,OAAO,KAAK,CAAC,IAAI,EAAE,WAAW;IAClC;IACA,IAAI,CAAC,EAAE,CAAC,EAAE;QACN,OAAO,KAAK,CAAC,IAAI,EAAE,WAAW,IAAI;IACtC;IACA,OAAO,CAAC,EAAE;QACN,OAAO,KAAK,CAAC,OAAO,EAAE,WAAW;IACrC;AACJ;AACA,SAAS,aAAa,GAAG,EAAE,cAAc,SAAS,EAAE,UAAU,CAAC,CAAC;IAC5D,IAAI,eAAe,QAAQ,CAAC,CAAC,uBAAuB,eAAe,WAAW,GAAG;QAC7E,UAAU;QACV,cAAc;IAClB;IACA,uBAAuB;IACvB,IAAI,QAAQ,WAAW,IAAI,OAAO,QAAQ,YAAY,KAAK,aAAa,CAAC,QAAQ,YAAY,EAAE;QAC3F,MAAM,IAAI,QAAQ,aAAa,CAAC;IACpC;IACA,IAAI,QAAQ,WAAW,IAAI,OAAO,QAAQ,aAAa,KAAK,aAAa,CAAC,QAAQ,aAAa,EAAE;QAC7F,MAAM,IAAI,QAAQ,aAAa,CAAC;IACpC;IACA,MAAM,MAAM,IAAI,gCAAgC,OAAO,CAAC;IACxD,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG;IACzB,MAAM,eAAe,OAAO,MAAM,CAAC;IACnC,gBAAgB;IAChB,KAAK,MAAM,QAAQ,OAAO,qBAAqB,CAAC,SAAU;QACtD,IAAI,QAAQ,aAAa,CAAC,GAAG,CAAC,OAAO;YACjC,YAAY,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK;QACtC;IACJ;IACA,aAAa,KAAK,GAAG,QAAQ,EAAE,GAAG,MAAM,GAAG,CAAC,QAAQ,WAAW,CAAC,UAAU;IAC1E,MAAM,aAAa,IAAI;IACvB,IAAI,IAAI,QAAQ,KAAK,OAAO,IAAI,QAAQ,KAAK,IAAI;QAC7C,MAAM,SAAS,mBAAmB,IAAI,QAAQ,CAAC,EAAE,KAAK,MAAM,IAAI,QAAQ,CAAC,KAAK,CAAC,KAAK,IAAI,QAAQ;QAChG,IAAI,QAAQ;YACR,WAAW,GAAG,CAAC,UAAU;gBAAC;aAAO;QACrC;IACJ;IACA,IAAI,IAAI,QAAQ,KAAK,IAAI;QACrB,MAAM,OAAO;YACT,UAAU,mBAAmB,IAAI,QAAQ;QAC7C;QACA,IAAI,OAAO,IAAI,QAAQ,KAAK,UAAU;YAClC,KAAK,QAAQ,GAAG,mBAAmB,IAAI,QAAQ;QACnD;QACA,WAAW,GAAG,CAAC,QAAQ;YAAC;SAAK;IACjC;IACA,KAAK,MAAM,OAAO,IAAI,YAAY,CAAC,IAAI,GAAI;QACvC,MAAM,SAAS,IAAI,YAAY,CAAC,MAAM,CAAC;QACvC,MAAM,uBAAuB,sBAAsB,IAAI,CAAC;QACxD,IAAI,CAAC,wBAAwB,OAAO,MAAM,GAAG,GAAG;YAC5C,MAAM,IAAI,QAAQ,yBAAyB,CAAC,CAAC,YAAY,EAAE,IAAI,uDAAuD,CAAC;QAC3H;QACA,IAAI,CAAC,wBAAwB,OAAO,QAAQ,CAAC,KAAK;YAC9C,MAAM,IAAI,QAAQ,aAAa,CAAC,CAAC,YAAY,EAAE,IAAI,mCAAmC,CAAC;QAC3F;QACA,IAAI,CAAC,WAAW,GAAG,CAAC,MAAM;YACtB,WAAW,GAAG,CAAC,KAAK;QACxB;IACJ;IACA,MAAM,gBAAgB,IAAI,mBAAmB,OAAO,OAAO,CAAC,SAAS,MAAM,CAAC,CAAC,GAAG,EAAE,GAAK,KAAK;IAC5F,qEAAqE;IACrE,IAAI,WAAW,GAAG,CAAC,cAAc;QAC7B,MAAM,IAAI,QAAQ,eAAe,CAAC;IACtC;IACA,MAAM,yBAAyB,WAAW,GAAG,CAAC;IAC9C,IAAI,wBAAwB;QACxB,KAAK,MAAM,YAAY,uBAAwB;YAC3C,IAAI,sBAAsB,IAAI,CAAC,WAAW;gBACtC,MAAM,IAAI,QAAQ,eAAe,CAAC;YACtC;QACJ;IACJ;IACA,IAAI,cAAc,GAAG,CAAC,iBAAiB;QACnC,MAAM,IAAI,QAAQ,eAAe,CAAC;IACtC;IACA,wBAAwB;IACxB,MAAM,qBAAqB,IAAI;IAC/B,MAAM,kBAAkB,IAAI,IAAI;WAAI,WAAW,IAAI;WAAO,cAAc,IAAI;KAAG;IAC/E,KAAK,MAAM,OAAO,gBAAiB;QAC/B,MAAM,SAAS,EAAE;QACjB,MAAM,oBAAoB,cAAc,GAAG,CAAC;QAC5C,IAAI,qBAAqB,MAAM;YAC3B,OAAO,IAAI,CAAC;QAChB;QACA,MAAM,YAAY,WAAW,GAAG,CAAC,QAAQ,EAAE;QAC3C,OAAO,IAAI,IAAI;QACf,mBAAmB,GAAG,CAAC,KAAK;IAChC;IACA,IAAI,mBAAmB,GAAG,CAAC,UAAU,mBAAmB,GAAG,CAAC,QAAQ;QAChE,MAAM,gBAAgB,CAAC,mBAAmB,GAAG,CAAC,UAAU,EAAE,EACrD,MAAM,CAAC,mBAAmB,GAAG,CAAC,UAAU,EAAE,EAC1C,GAAG,CAAC,WAAW,IAAI,CAAC,MAAM;QAC/B,IAAI,IAAI,IAAI,eAAe,IAAI,KAAK,GAAG;YACnC,MAAM,IAAI,QAAQ,eAAe,CAAC;QACtC;IACJ;IACA,gBAAgB;IAChB,MAAM,qBAAqB,AAAC,CAAA,GAAG,QAAQ,aAAa,AAAD,EAAG,iBAAiB,MAAM,IAAI,CAAC,OAAO,IAAI,CAAC,QAAQ,OAAO,GAAG,GAAG,CAAC,CAAA,IAAK,EAAE,WAAW;IACtI,IAAI,mBAAmB,IAAI,KAAK,GAAG;QAC/B,MAAM,aAAa,mBAAmB,IAAI,GAAG,IAAI,YAAY;QAC7D,MAAM,UAAU,mBAAmB,IAAI,GAAG,IAAI,QAAQ;QACtD,MAAM,IAAI,QAAQ,eAAe,CAAC,CAAC,EAAE,WAAW,CAAC,EAAE,MAAM,IAAI,CAAC,oBAAoB,IAAI,CAAC,MAAM,CAAC,EAAE,QAAQ,cAAc,CAAC;IAC3H;IACA,6BAA6B;IAC7B,KAAK,MAAM,CAAC,KAAK,WAAW,IAAI,OAAO,OAAO,CAAC,QAAQ,OAAO,EAAG;QAC7D,MAAM,SAAS,mBAAmB,GAAG,CAAC;QACtC,IAAI,CAAC,UAAU,OAAO,MAAM,KAAK,GAAG;YAChC,IAAI,QAAQ,eAAe,CAAC,GAAG,CAAC,MAAM;gBAClC,UAAU,cAAc,KAAK,YAAY;oBAAC,QAAQ,eAAe,CAAC,GAAG,CAAC;iBAAK;YAC/E;QACJ,OACK;YACD,MAAM,EAAE,UAAU,EAAE,GAAG;YACvB,IAAI,YAAY;gBACZ,MAAM,gBAAgB,OAAO,eAAe,WAAW,CAAC,EAAE,EAAE,WAAW,CAAC,GAAG;gBAC1E,CAAA,GAAG,QAAQ,WAAW,AAAD,EAAG,CAAC,EAAE,IAAI,uBAAuB,EAAE,cAAc,CAAC;YAC5E;YACA,UAAU,cAAc,KAAK,YAAY;QAC7C;IACJ;IACA,IAAI,aAAa,WAAW,EAAE;QAC1B,MAAM,WAAW,aAAa,WAAW,CAAC,SAAS,KAAK,YAAY,aAAa,CAAC,cAAc;QAChG,MAAM,SAAS,aAAa,WAAW,CAAC,SAAS,KAAK,YAAY,aAAa,CAAC,YAAY;QAC5F,MAAM,QAAQ,aAAa,WAAW,CAAC,SAAS,KAAK,YAAY,aAAa,CAAC,WAAW;QAC1F,MAAM,SAAS,aAAa,WAAW,CAAC,SAAS,KAAK,YAAY,aAAa,CAAC,YAAY;QAC5F,IAAI,CAAC,YAAY,MAAM,KACnB,mBAAmB,GAAG,CAAC,iBACvB,aAAa,WAAW,CAAC,MAAM,KAAK,aAAa;YACjD,iEAAiE;YACjE,MAAM,IAAI,QAAQ,eAAe,CAAC,CAAC,cAAc,EAAE,aAAa,WAAW,CAAC,SAAS,CAAC,sCAAsC,CAAC;QACjI;QACA,IAAI,CAAC,CAAC,YAAY,UAAU,SAAS,MAAM,KACvC,aAAa,MAAM,IACnB,CAAC,mBAAmB,GAAG,CAAC,eAAe;YACvC,wEAAwE;YACxE,6CAA6C;YAC7C,aAAa,WAAW,GAAG,oBAAoB,gBAAgB,CAAC,KAAK,CAAC,aAAa,WAAW,EAAE;gBAC5F,QAAQ,aAAa,MAAM;YAC/B;QACJ;QACA,IAAI,SAAS,aAAa,WAAW,CAAC,QAAQ,IAAI,CAAC,aAAa,WAAW,CAAC,QAAQ,EAAE;YAClF,MAAM,IAAI,QAAQ,4BAA4B,CAAC,CAAC,WAAW,EAAE,aAAa,WAAW,CAAC,SAAS,CAAC,kDAAkD,CAAC;QACvJ;QACA,aAAa,WAAW,CAAC,QAAQ;QACjC,iGAAiG;QACjG,IAAI,aAAa,WAAW,CAAC,QAAQ,KAAK,MACtC,aAAa,WAAW,CAAC,QAAQ,KAAK,MACtC,aAAa,WAAW,CAAC,SAAS,KAAK,YAAY,aAAa,CAAC,eAAe,IAChF,OAAO,IAAI,CAAC,aAAa,WAAW,CAAC,mBAAmB,EAAE,MAAM,KAAK,GAAG;YACxE,OAAO,aAAa,WAAW;QACnC;IACJ;IACA,IAAI,CAAC,aAAa,MAAM,EAAE;QACtB,4EAA4E;QAC5E,aAAa,MAAM,GAAG;IAC1B;IACA,4BAA4B,OAAO,cAAc;IACjD,IAAI,eAAe,aAAa,cAAc,EAAE;QAC5C,YAAY,SAAS,CAAC,kBAAkB;QACxC,aAAa,SAAS,GAAG,IAAI,YAAY,SAAS,CAAC,aAAa,KAAK;QACrE,aAAa,aAAa,GAAG,aAAa,SAAS,CAAC,aAAa;IACrE;IACA,gEAAgE;IAChE,aAAa,uBAAuB,GAChC,cAAc,GAAG,CAAC,iBAAiB,WAAW,GAAG,CAAC;IACtD,aAAa,uBAAuB,GAChC,cAAc,GAAG,CAAC,iBAAiB,WAAW,GAAG,CAAC;IACtD,IAAI,OAAO;QACP,yCAAyC;QACzC,aAAa,OAAO,GAAG,KAAK,CAAC,EAAE;QAC/B,IAAI,aAAa,gBAAgB,EAAE;YAC/B,MAAM,IAAI,QAAQ,aAAa,CAAC;QACpC;QACA,IAAI,aAAa,WAAW,GAAG,KAAK,OAAO,aAAa,UAAU,KAAK,UAAU;YAC7E,MAAM,IAAI,QAAQ,eAAe,CAAC;QACtC;QACA,sEAAsE;QACtE,MAAM,qBAAqB,CAAC,cAAc,GAAG,CAAC,UAAU,CAAC,WAAW,GAAG,CAAC;QACxE,MAAM,qBAAqB,CAAC,cAAc,GAAG,CAAC,UAAU,CAAC,WAAW,GAAG,CAAC;QACxE,IAAI,sBAAsB,oBAAoB;YAC1C,aAAa,GAAG,GAAG;QACvB;IACJ,OACK;QACD,MAAM,0BAA0B,WAAW,GAAG,CAAC,kBAC3C,cAAc,GAAG,CAAC,kBAClB,WAAW,GAAG,CAAC,qBACf,cAAc,GAAG,CAAC;QACtB,IAAI,yBAAyB;YACzB,MAAM,IAAI,QAAQ,eAAe,CAAC;QACtC;IACJ;IACA,IAAI,aAAa,gBAAgB,IAAI,aAAa,KAAK,CAAC,MAAM,KAAK,GAAG;QAClE,MAAM,IAAI,QAAQ,eAAe,CAAC;IACtC;IACA,IAAI,CAAC,aAAa,SAAS,IACvB,CAAC,aAAa,SAAS,IAAI,aAAa,aAAa,IAAI,aAAa,aAAa,GAAG;QACtF,MAAM,IAAI,QAAQ,eAAe,CAAC;IACtC;IACA,IAAI,AAAC,aAAa,aAAa,IAAI,CAAC,aAAa,aAAa,IACzD,CAAC,aAAa,aAAa,IAAI,aAAa,aAAa,EAAG;QAC7D,MAAM,IAAI,QAAQ,eAAe,CAAC;IACtC;IACA,MAAM,eAAe;QAAC;QAAa;QAAa;QAAiB;KAAgB,CAAC,GAAG,CAAC,CAAA,MAAO,WAAW,GAAG,CAAC,QAAQ,EAAE;IACtH,IAAI,aAAa,IAAI,CAAC,CAAA,UAAW,QAAQ,MAAM,GAAG,IAAI;QAClD,MAAM,IAAI,QAAQ,eAAe,CAAC;IACtC;IACA,MAAM,oBAAoB,OAAO,GAAG,CAAC;IACrC,YAAY,CAAC,kBAAkB,GAAG,YAAY,CAAC,kBAAkB,IAAI;IACrE,IAAI,mBAAmB,CAAC;IACxB,IAAI,sBAAsB,CAAC;IAC3B,IAAI,YAAY,CAAC,kBAAkB,EAAE;QACjC,mBAAmB;YACf,qBAAqB,QAAQ,GAAG,CAAC,mBAAmB;YACpD,sBAAsB,QAAQ,GAAG,CAAC,oBAAoB;YACtD,8BAA8B,QAAQ,GAAG,CAAC,4BAA4B;YACtE,wBAAwB,QAAQ,GAAG,CAAC,sBAAsB;YAC1D,oBAAoB,QAAQ,GAAG,CAAC,kBAAkB;YAClD,iBAAiB,QAAQ,GAAG,CAAC,eAAe;YAC5C,iCAAiC,QAAQ,GAAG,CAAC,+BAA+B;YAC5E,kBAAkB,QAAQ,GAAG,CAAC,gBAAgB;YAC9C,GAAG,YAAY,CAAC,OAAO,GAAG,CAAC,8BAA8B;QAC7D;QACA,sBAAsB;YAClB,gBAAgB,aAAa,cAAc;YAC3C,+BAA+B,aAAa,6BAA6B;YACzE,6BAA6B,aAAa,2BAA2B;QACzE;IACJ;IACA,aAAa,kBAAkB,GAAG,eAAe,WAAW,CAAC,cAAc,CAAC,kBAAkB;IAC9F,aAAa,QAAQ,GAAG,AAAC,CAAA,GAAG,kBAAkB,kBAAkB,AAAD,EAAG;IAClE,OAAO;AACX;AACA,QAAQ,YAAY,GAAG;AACvB;;;;;;;;CAQC,GACD,SAAS,4BAA4B,KAAK,EAAE,YAAY,EAAE,KAAK;IAC3D,IAAI,aAAa,YAAY,EAAE;QAC3B,IAAI,MAAM,MAAM,GAAG,GAAG;YAClB,MAAM,IAAI,QAAQ,eAAe,CAAC;QACtC;QACA,IAAI,aAAa,UAAU,EAAE;YACzB,MAAM,IAAI,QAAQ,eAAe,CAAC;QACtC;QACA,IAAI,aAAa,gBAAgB,EAAE;YAC/B,MAAM,IAAI,QAAQ,eAAe,CAAC;QACtC;QACA,IAAI,SAAS,aAAa,WAAW,GAAG,GAAG;YACvC,MAAM,IAAI,QAAQ,eAAe,CAAC;QACtC;IACJ;IACA;AACJ;AACA,SAAS,UAAU,YAAY,EAAE,GAAG,EAAE,UAAU,EAAE,MAAM;IACpD,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,GAAG;IACpC,MAAM,OAAO,UAAU;IACvB,OAAQ;QACJ,KAAK;YACD,YAAY,CAAC,KAAK,GAAG,WAAW,MAAM,MAAM,CAAC,EAAE;YAC/C;QACJ,KAAK;YACD,YAAY,CAAC,KAAK,GAAG,kBAAkB,MAAM,MAAM,CAAC,EAAE;YACtD;QACJ,KAAK;YACD,YAAY,CAAC,KAAK,GAAG,mBAAmB,MAAM,MAAM,CAAC,EAAE;YACvD;QACJ,KAAK;YACD,IAAI,MAAM,CAAC,EAAE,IAAI,MAAM;gBACnB;YACJ;YACA,YAAY,CAAC,KAAK,GAAG,OAAO,MAAM,CAAC,EAAE;YACrC;QACJ,KAAK;YACD,IAAI,CAAC,AAAC,CAAA,GAAG,QAAQ,QAAQ,AAAD,EAAG,MAAM,CAAC,EAAE,GAAG;gBACnC,MAAM,IAAI,QAAQ,eAAe,CAAC,CAAC,EAAE,KAAK,kBAAkB,CAAC;YACjE;YACA,YAAY,CAAC,KAAK,GAAG,MAAM,CAAC,EAAE;YAC9B;QACJ,KAAK;YACD,YAAY,CAAC,KAAK,GAAG,MAAM,CAAC,EAAE;YAC9B;QACJ;YAAS;gBACL,IAAI,CAAC,WAAW;oBACZ,MAAM,IAAI,QAAQ,eAAe,CAAC;gBACtC;gBACA,MAAM,iBAAiB,UAAU;oBAAE;oBAAM,SAAS;oBAAc;gBAAO;gBACvE,YAAY,CAAC,KAAK,GAAG;gBACrB;YACJ;IACJ;AACJ;AACA,QAAQ,OAAO,GAAG;IACd,SAAS;QACL,MAAM;IACV;IACA,MAAM;QACF,QAAQ;QACR,WAAU,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,CAAC,MAAM,EAAE;YACxC,IAAI,CAAC,AAAC,CAAA,GAAG,QAAQ,QAAQ,AAAD,EAAG,OAAO;gBAAC;gBAAY;aAAW,GAAG;gBACzD,MAAM,IAAI,QAAQ,eAAe,CAAC,CAAC,EAAE,KAAK,4DAA4D,CAAC;YAC3G;YACA,OAAO,oBAAoB,gBAAgB,CAAC,KAAK,CAAC,QAAQ,WAAW,EAAE;gBACnE,UAAU,MAAM,QAAQ;gBACxB,UAAU,MAAM,QAAQ;YAC5B;QACJ;IACJ;IACA,eAAe;QACX,QAAQ;QACR,WAAU,EAAE,OAAO,EAAE,QAAQ,CAAC,MAAM,EAAE;YAClC,MAAM,aAAa,OAAO,MAAM,CAAC,YAAY,aAAa;YAC1D,MAAM,CAAC,UAAU,GAAG,WAAW,MAAM,CAAC,CAAA,IAAK,EAAE,KAAK,CAAC,OAAO,OAAO,GAAG,AAAC,CAAC,EAAE,EAAE,MAAM,EAAE,CAAC,EAAE;YACrF,IAAI,CAAC,WAAW;gBACZ,MAAM,IAAI,QAAQ,eAAe,CAAC,CAAC,qBAAqB,EAAE,WAAW,MAAM,EAAE,MAAM,CAAC;YACxF;YACA,IAAI,SAAS,QAAQ,WAAW,EAAE;YAClC,IAAI,cAAc,YAAY,aAAa,CAAC,aAAa,IACrD,YAAY,4BAA4B,CAAC,GAAG,CAAC,YAAY;gBACzD,sDAAsD;gBACtD,SAAS;YACb;YACA,IAAI,WAAW,QAAQ,WAAW,EAAE;YACpC,IAAI,cAAc,YAAY,aAAa,CAAC,YAAY,IAAI,aAAa,IAAI;gBACzE,WAAW;YACf;YACA,OAAO,oBAAoB,gBAAgB,CAAC,KAAK,CAAC,QAAQ,WAAW,EAAE;gBACnE;gBACA;gBACA;YACJ;QACJ;IACJ;IACA,yBAAyB;QACrB,QAAQ;QACR,WAAU,EAAE,OAAO,EAAE,MAAM,EAAE;YACzB,4EAA4E;YAC5E,2EAA2E;YAC3E,qEAAqE;YACrE,IAAI,sBAAsB,OAAO,MAAM,CAAC;YACxC,KAAK,MAAM,eAAe,OAAQ;gBAC9B,IAAI,OAAO,gBAAgB,UAAU;oBACjC,KAAK,MAAM,CAAC,KAAK,MAAM,IAAI,kBAAkB,aAAc;wBACvD,IAAI;4BACA,mBAAmB,CAAC,IAAI,GAAG,WAAW,KAAK;wBAC/C,EACA,OAAM;4BACF,mBAAmB,CAAC,IAAI,GAAG;wBAC/B;oBACJ;gBACJ,OACK;oBACD,IAAI,CAAC,AAAC,CAAA,GAAG,QAAQ,QAAQ,AAAD,EAAG,cAAc;wBACrC,MAAM,IAAI,QAAQ,eAAe,CAAC;oBACtC;oBACA,sBAAsB;wBAAE,GAAG,WAAW;oBAAC;gBAC3C;YACJ;YACA,OAAO,oBAAoB,gBAAgB,CAAC,KAAK,CAAC,QAAQ,WAAW,EAAE;gBACnE;YACJ;QACJ;IACJ;IACA,YAAY;QACR,QAAQ;QACR,WAAU,EAAE,OAAO,EAAE,QAAQ,CAAC,MAAM,EAAE;YAClC,MAAM,SAAS,OAAO;YACtB,OAAO,oBAAoB,gBAAgB,CAAC,KAAK,CAAC,QAAQ,WAAW,EAAE;gBAAE;YAAO;QACpF;IACJ;IACA,gBAAgB;QACZ,MAAM;IACV;IACA,YAAY;QACR,MAAM;IACV;IACA,WAAW;QACP,QAAQ;QACR,WAAU,EAAE,QAAQ,CAAC,QAAQ,EAAE;YAC3B,MAAM,sBAAsB,OAAO,YAAY,WAAW;gBAAE;YAAQ,IAAI;YACxE,MAAM,oBAAoB,uBAAuB,oBAAoB,OAAO;YAC5E,IAAI,CAAC,mBAAmB;gBACpB,MAAM,IAAI,QAAQ,eAAe,CAAC,CAAC,kFAAkF,EAAE,OAAO,MAAM,CAAC,eAAe,gBAAgB,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC;YAC1L;YACA,IAAI,CAAC,OAAO,MAAM,CAAC,eAAe,gBAAgB,EAAE,IAAI,CAAC,CAAA,IAAK,MAAM,oBAAoB;gBACpF,MAAM,IAAI,QAAQ,eAAe,CAAC,CAAC,2BAA2B,EAAE,kBAAkB,mCAAmC,EAAE,OAAO,MAAM,CAAC,eAAe,gBAAgB,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC;YAC1L;YACA,OAAO;QACX;IACJ;IACA,WAAW;QACP,MAAM;IACV;IACA,aAAa;QACT,SAAS;QACT,QAAQ;QACR,WAAU,EAAE,MAAM,EAAE;YAChB,MAAM,kBAAkB,IAAI;YAC5B,KAAK,MAAM,WAAW,OAAQ;gBAC1B,MAAM,eAAe,OAAO,YAAY,WAAW,QAAQ,KAAK,CAAC,OAAO;gBACxE,IAAI,CAAC,MAAM,OAAO,CAAC,eAAe;oBAC9B,MAAM,IAAI,QAAQ,yBAAyB,CAAC;gBAChD;gBACA,KAAK,MAAM,KAAK,aAAc;oBAC1B,IAAI,OAAO,IAAI,CAAC,cAAc,UAAU,EAAE,QAAQ,CAAC,OAAO,KAAK;wBAC3D,gBAAgB,GAAG,CAAC,OAAO;oBAC/B,OACK;wBACD,MAAM,IAAI,QAAQ,yBAAyB,CAAC,CAAC,EAAE,EAAE,uDAAuD,EAAE,OAAO,IAAI,CAAC,cAAc,UAAU,EAAE,CAAC,CAAC;oBACtJ;gBACJ;YACJ;YACA,OAAO;mBAAI;aAAgB;QAC/B;IACJ;IACA,kBAAkB;QACd,SAAS;QACT,MAAM;IACV;IACA,QAAQ;QACJ,MAAM;IACV;IACA,kBAAkB;QACd,SAAS;QACT,MAAM;IACV;IACA,YAAY;QACR,SAAS,CAAC;QACV,MAAM;IACV;IACA,sBAAsB;QAAE,MAAM;QAAW,SAAS;IAAK;IACvD,QAAQ;QACJ,WAAU,EAAE,IAAI,EAAE,QAAQ,CAAC,MAAM,EAAE;YAC/B,MAAM,iBAAiB,kBAAkB,MAAM;YAC/C,IAAI,mBAAmB,KAAK,mBAAmB,GAAG;gBAC9C,OAAO;YACX;YACA,MAAM,IAAI,QAAQ,eAAe,CAAC,CAAC,mCAAmC,EAAE,eAAe,CAAC,CAAC;QAC7F;IACJ;IACA,aAAa;QACT,MAAM;IACV;IACA,qBAAqB;QACjB,SAAS;QACT,MAAM;IACV;IACA,OAAO;QACH,YAAY;QACZ,QAAQ;QACR,WAAU,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,CAAC,MAAM,EAAE;YACxC,MAAM,KAAK,gBAAgB,YAAY,CAAC,WAAW,CAAC;gBAChD,cAAc;oBACV,GAAG,QAAQ,YAAY;oBACvB,OAAO,WAAW,MAAM;gBAC5B;YACJ;YACA,IAAI,CAAC,IACD,MAAM,IAAI,QAAQ,eAAe,CAAC,CAAC,yCAAyC,EAAE,MAAM,CAAC;YACzF,OAAO;QACX;IACJ;IACA,sBAAsB;QAClB,SAAS;QACT,MAAM;IACV;IACA,iBAAiB;QACb,MAAM;IACV;IACA,GAAG;QACC,YAAY;QACZ,QAAQ;QACR,WAAU,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,CAAC,MAAM,EAAE;YACxC,MAAM,KAAK,gBAAgB,YAAY,CAAC,WAAW,CAAC;gBAChD,cAAc;oBACV,GAAG,QAAQ,YAAY;oBACvB,SAAS,WAAW,MAAM;gBAC9B;YACJ;YACA,IAAI,CAAC,IACD,MAAM,IAAI,QAAQ,eAAe,CAAC,CAAC,2CAA2C,EAAE,MAAM,CAAC;YAC3F,OAAO;QACX;IACJ;IACA,SAAS;QACL,QAAQ;QACR,WAAU,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,CAAC,MAAM,EAAE;YACxC,MAAM,KAAK,gBAAgB,YAAY,CAAC,WAAW,CAAC;gBAChD,cAAc;oBACV,GAAG,QAAQ,YAAY;oBACvB,SAAS,WAAW,MAAM;gBAC9B;YACJ;YACA,IAAI,CAAC,IACD,MAAM,IAAI,QAAQ,eAAe,CAAC,CAAC,2CAA2C,EAAE,MAAM,CAAC;YAC3F,OAAO;QACX;IACJ;IACA,cAAc;QACV,SAAS;QACT,MAAM;IACV;IACA,kBAAkB;QACd,SAAS;QACT,MAAM;IACV;IACA,eAAe;QACX,SAAS;QACT,WAAU,EAAE,IAAI,EAAE,QAAQ,CAAC,MAAM,EAAE;YAC/B,MAAM,gBAAgB,mBAAmB,MAAM;YAC/C,IAAI,kBAAkB,GAAG;gBACrB,MAAM,IAAI,QAAQ,yBAAyB,CAAC;YAChD;YACA,OAAO;QACX;IACJ;IACA,eAAe;QACX,SAAS;QACT,MAAM;IACV;IACA,aAAa;QACT,SAAS;QACT,MAAM;IACV;IACA,qBAAqB;QACjB,QAAQ;QACR,WAAU,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,CAAC,MAAM,EAAE;YACxC,MAAM,sBAAsB,mBAAmB,MAAM;YACrD,IAAI,QAAQ,cAAc,EAAE;gBACxB,OAAO,kBAAkB,cAAc,CAAC,WAAW,CAAC;oBAChD,gBAAgB;wBAAE,GAAG,QAAQ,cAAc;wBAAE;oBAAoB;gBACrE;YACJ,OACK;gBACD,OAAO,IAAI,kBAAkB,cAAc,CAAC,aAAa,WAAW;oBAAE;gBAAoB;YAC9F;QACJ;IACJ;IACA,uBAAuB;QACnB,MAAM;IACV;IACA,aAAa;QACT,SAAS;QACT,MAAM;IACV;IACA,yBAAyB;QACrB,SAAS;QACT,MAAM;IACV;IACA,iBAAiB;QACb,SAAS;QACT,MAAM;IACV;IACA,MAAM;QACF,QAAQ;QACR,WAAU,EAAE,QAAQ,CAAC,MAAM,EAAE,OAAO,EAAE;YAClC,OAAO;gBAAE,GAAG,QAAQ,UAAU;gBAAE,MAAM,OAAO;YAAO;QACxD;IACJ;IACA,SAAS;QACL,SAAS;QACT,MAAM;IACV;IACA,WAAW;QACP,SAAS,QAAQ,kBAAkB;QACnC,WAAU,EAAE,QAAQ,CAAC,MAAM,EAAE;YACzB,IAAI,AAAC,CAAA,GAAG,QAAQ,QAAQ,AAAD,EAAG,OAAO;gBAAC;aAAW,KAAK,OAAO,MAAM,QAAQ,KAAK,YAAY;gBACpF,OAAO;YACX;YACA,MAAM,IAAI,QAAQ,eAAe,CAAC,CAAC,iEAAiE,EAAE,MAAM,CAAC;QACjH;IACJ;IACA,gBAAgB;QACZ,MAAM;IACV;IACA,cAAc;QACV,MAAM;IACV;IACA,eAAe;QACX,MAAM;IACV;IACA,aAAa;QACT,MAAM;IACV;IACA,WAAW;QACP,MAAM;IACV;IACA,eAAe;QACX,MAAM;IACV;IACA,WAAW;QACP,MAAM;IACV;IACA,eAAe;QACX,MAAM;IACV;IACA,KAAK;QACD,SAAS;QACT,MAAM;IACV;IACA,aAAa;QACT,WAAU,EAAE,QAAQ,CAAC,MAAM,EAAE,OAAO,EAAE;YAClC,IAAI,iBAAiB,eAAe,WAAW,IAAI,AAAC,CAAA,GAAG,QAAQ,QAAQ,AAAD,EAAG,OAAO;gBAAC;aAAQ,GAAG;gBACxF,OAAO,eAAe,WAAW,CAAC,WAAW,CAAC;oBAAE,GAAG,QAAQ,WAAW;oBAAE,GAAG,KAAK;gBAAC;YACrF;YACA,MAAM,IAAI,QAAQ,eAAe,CAAC,CAAC,mCAAmC,EAAE,KAAK,SAAS,CAAC,OAAO,CAAC;QACnG;IACJ;IACA,kBAAkB;QACd,QAAQ;QACR,WAAU,EAAE,QAAQ,CAAC,MAAM,EAAE,OAAO,EAAE;YAClC,OAAO,eAAe,WAAW,CAAC,WAAW,CAAC;gBAC1C,GAAG,QAAQ,WAAW;gBACtB,OAAO;YACX;QACJ;IACJ;IACA,gBAAgB;QACZ,SAAS,kBAAkB,cAAc,CAAC,OAAO;QACjD,WAAU,EAAE,QAAQ,CAAC,MAAM,EAAE,OAAO,EAAE;YAClC,IAAI,iBAAiB,kBAAkB,cAAc,EAAE;gBACnD,OAAO,kBAAkB,cAAc,CAAC,WAAW,CAAC;oBAChD,gBAAgB;wBAAE,GAAG,QAAQ,cAAc;wBAAE,GAAG,KAAK;oBAAC;oBACtD,GAAG,KAAK;gBACZ;YACJ;YACA,IAAI,AAAC,CAAA,GAAG,QAAQ,QAAQ,AAAD,EAAG,OAAO;gBAAC;aAAO,GAAG;gBACxC,MAAM,KAAK,kBAAkB,cAAc,CAAC,WAAW,CAAC;oBACpD,gBAAgB;wBAAE,GAAG,QAAQ,cAAc;wBAAE,GAAG,KAAK;oBAAC;oBACtD,GAAG,KAAK;gBACZ;gBACA,IAAI,IACA,OAAO;qBAEP,MAAM,IAAI,QAAQ,eAAe,CAAC,CAAC,iCAAiC,EAAE,KAAK,SAAS,CAAC,OAAO,CAAC;YACrG;YACA,IAAI,OAAO,UAAU,UAAU;gBAC3B,MAAM,SAAS;oBACX,OAAO,QAAQ,cAAc,EAAE;oBAC/B,qBAAqB,QAAQ,cAAc,EAAE;gBACjD;gBACA,OAAO,IAAI,kBAAkB,cAAc,CAAC,OAAO,QAAQ,cAAc,EAAE,MAAM;YACrF;YACA,MAAM,IAAI,QAAQ,eAAe,CAAC,CAAC,8BAA8B,EAAE,MAAM,CAAC;QAC9E;IACJ;IACA,oBAAoB;QAChB,QAAQ;QACR,WAAU,EAAE,MAAM,EAAE,OAAO,EAAE;YACzB,MAAM,OAAO,MAAM,OAAO,CAAC,MAAM,CAAC,EAAE,IAC9B,MAAM,CAAC,EAAE,GACT;YACN,MAAM,qBAAqB,EAAE;YAC7B,KAAK,MAAM,OAAO,KAAM;gBACpB,MAAM,oBAAoB,OAAO,MAAM,CAAC;gBACxC,IAAI,OAAO,QAAQ,UAAU;oBACzB,KAAK,MAAM,CAAC,GAAG,EAAE,IAAI,kBAAkB,KAAM;wBACzC,iBAAiB,CAAC,EAAE,GAAG;oBAC3B;gBACJ;gBACA,IAAI,AAAC,CAAA,GAAG,QAAQ,QAAQ,AAAD,EAAG,MAAM;oBAC5B,KAAK,MAAM,CAAC,GAAG,EAAE,IAAI,OAAO,OAAO,CAAC,KAAM;wBACtC,iBAAiB,CAAC,EAAE,GAAG;oBAC3B;gBACJ;gBACA,mBAAmB,IAAI,CAAC;YAC5B;YACA,OAAO,kBAAkB,cAAc,CAAC,WAAW,CAAC;gBAChD,gBAAgB,QAAQ,cAAc;gBACtC;YACJ;QACJ;IACJ;IACA,YAAY;QACR,MAAM;IACV;IACA,YAAY;QACR,SAAS;QACT,MAAM;IACV;IACA,aAAa;QACT,SAAS;QACT,MAAM;IACV;IACA,oBAAoB;QAChB,MAAM;IACV;IACA,sBAAsB;QAClB,SAAS;QACT,WAAU,EAAE,QAAQ,CAAC,MAAM,EAAE;YACzB,IAAI,CAAC,OAAO,MAAM,CAAC,UAAU,oBAAoB,EAAE,QAAQ,CAAC,QAAQ;gBAChE,MAAM,IAAI,QAAQ,eAAe,CAAC;YACtC;YACA,OAAO;QACX;IACJ;IACA,0BAA0B;QACtB,SAAS;QACT,MAAM;IACV;IACA,YAAY;QACR,MAAM;IACV;IACA,iBAAiB;QACb,SAAS;QACT,MAAM;IACV;IACA,aAAa;QACT,MAAM;QACN,SAAS;IACb;IACA,gBAAgB;QACZ,MAAM;QACN,SAAS;IACb;IACA,KAAK;QACD,QAAQ;QACR,MAAM;IACV;IACA,KAAK;QACD,MAAM;IACV;IACA,6BAA6B;QACzB,QAAQ;QACR,WAAU,EAAE,IAAI,EAAE,QAAQ,CAAC,MAAM,EAAE;YAC/B,gEAAgE;YAChE,OAAO,CAAC,WAAW,MAAM;QAC7B;IACJ;IACA,0BAA0B;QACtB,QAAQ;QACR,WAAU,EAAE,IAAI,EAAE,QAAQ,CAAC,MAAM,EAAE;YAC/B,oFAAoF;YACpF,OAAO,WAAW,MAAM,SAAS,IAAM,YAAY;QACvD;IACJ;IACA,WAAW;QACP,MAAM;IACV;IACA,YAAY;QACR,MAAM;IACV;IACA,uBAAuB;QACnB,MAAM;IACV;IACA,+BAA+B;QAC3B,QAAQ;QACR,MAAM;IACV;IACA,aAAa;QACT,WAAU,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,CAAC,MAAM,EAAE;YACxC,MAAM,cAAc,WAAW,MAAM;YACrC,IAAI,aAAa;gBACb,QAAQ,mBAAmB,GAAG,IAAM;gBACpC,QAAQ,kBAAkB,GAAG;YACjC,OACK;gBACD,QAAQ,mBAAmB,GAAG,QAAQ,wBAAwB,GACxD,IAAM,YACN;gBACN,QAAQ,kBAAkB,GAAG,QAAQ,2BAA2B,GAAG,QAAQ;YAC/E;YACA,OAAO;QACX;IACJ;IACA,GAAG;QACC,QAAQ;QACR,WAAU,EAAE,QAAQ,CAAC,MAAM,EAAE,OAAO,EAAE;YAClC,OAAO,gBAAgB,YAAY,CAAC,WAAW,CAAC;gBAAE,cAAc;oBAAE,GAAG,QAAQ,YAAY;oBAAE,GAAG;gBAAM;YAAE;QAC1G;IACJ;IACA,oBAAoB;QAChB,SAAS;QACT,MAAM;IACV;IACA,cAAc;QACV,QAAQ;QACR,WAAU,EAAE,QAAQ,CAAC,MAAM,EAAE,OAAO,EAAE;YAClC,IAAI,AAAC,CAAA,GAAG,QAAQ,QAAQ,AAAD,EAAG,UAAU,iBAAiB,gBAAgB,YAAY,EAAE;gBAC/E,OAAO,gBAAgB,YAAY,CAAC,WAAW,CAAC;oBAC5C,cAAc;wBACV,GAAG,QAAQ,YAAY;wBACvB,GAAG,KAAK;oBACZ;gBACJ;YACJ,OACK,IAAI,UAAU,cAAc,OAAO,UAAU,UAAU;gBACxD,OAAO,gBAAgB,YAAY,CAAC,WAAW,CAAC;oBAC5C,cAAc;wBACV,GAAG,QAAQ,YAAY;wBACvB,GAAG;oBACP;gBACJ;YACJ;YACA,MAAM,IAAI,QAAQ,eAAe,CAAC,CAAC,mCAAmC,EAAE,KAAK,SAAS,CAAC,OAAO,CAAC;QACnG;IACJ;IACA,UAAU;QACN,YAAY;QACZ,QAAQ;QACR,WAAU,EAAE,QAAQ,CAAC,MAAM,EAAE,OAAO,EAAE;YAClC,MAAM,KAAK,gBAAgB,YAAY,CAAC,WAAW,CAAC;gBAChD,cAAc;oBACV,GAAG,QAAQ,YAAY;oBACvB,UAAU,mBAAmB,YAAY;gBAC7C;YACJ;YACA,IAAI,IACA,OAAO;YACX,MAAM,IAAI,QAAQ,eAAe,CAAC,CAAC,sCAAsC,CAAC;QAC9E;IACJ;IACA,YAAY;QACR,QAAQ;QACR,WAAU,EAAE,QAAQ,CAAC,MAAM,EAAE,OAAO,EAAE;YAClC,MAAM,KAAK,gBAAgB,YAAY,CAAC,WAAW,CAAC;gBAChD,cAAc;oBACV,GAAG,QAAQ,YAAY;oBACvB,YAAY,mBAAmB,cAAc;gBACjD;YACJ;YACA,IAAI,IACA,OAAO;YACX,MAAM,IAAI,QAAQ,eAAe,CAAC,CAAC,sCAAsC,CAAC;QAC9E;IACJ;IACA,sBAAsB;QAClB,SAAS;QACT,MAAM;IACV;IACA,2CAA2C;IAC3C,gBAAgB;QAAE,MAAM;IAAM;IAC9B,WAAW;QAAE,MAAM;IAAM;IACzB,0BAA0B;IAC1B,WAAW;QAAE,MAAM;IAAM;IACzB,aAAa;QAAE,MAAM;IAAM;IAC3B,eAAe;QAAE,MAAM;IAAM;IAC7B,aAAa;QAAE,MAAM;IAAM;IAC3B,aAAa;QAAE,MAAM;IAAM;IAC3B,oBAAoB;QAAE,MAAM;IAAM;IAClC,qBAAqB;QAAE,MAAM;IAAM;IACnC,eAAe;QAAE,MAAM;IAAM;IAC7B,aAAa;QAAE,MAAM;IAAM;IAC3B,SAAS;QAAE,MAAM;IAAM;IACvB,aAAa;QAAE,MAAM;IAAM;IAC3B,cAAc;QAAE,MAAM;IAAM;IAC5B,WAAW;QAAE,MAAM;IAAM;IACzB,OAAO;QAAE,MAAM;IAAM;IACrB,QAAQ;QAAE,MAAM;IAAM;IACtB,IAAI;QAAE,MAAM;IAAM;IAClB,MAAM;QAAE,MAAM;IAAM;IACpB,SAAS;QAAE,MAAM;IAAM;IACvB,KAAK;QAAE,MAAM;IAAM;IACnB,WAAW;QAAE,MAAM;IAAM;IACzB,KAAK;QAAE,MAAM;IAAM;IACnB,YAAY;QAAE,MAAM;IAAM;IAC1B,KAAK;QAAE,MAAM;IAAM;IACnB,gBAAgB;QAAE,MAAM;IAAM;IAC9B,OAAO;QAAE,MAAM;IAAM;IACrB,6BAA6B;IAC7B,iBAAiB;QACb,MAAM;QACN,YAAY;IAChB;IACA,oBAAoB;QAChB,MAAM;QACN,YAAY;IAChB;IACA,cAAc;IACd;;;KAGC,GACD,gBAAgB;QAAE,MAAM;IAAM;IAC9B;;;KAGC,GACD,+BAA+B;QAAE,MAAM;IAAM;IAC7C;;;KAGC,GACD,6BAA6B;QAAE,MAAM;IAAO;AAChD;AACA,QAAQ,eAAe,GAAG,IAAI,mBAAmB,OAAO,OAAO,CAAC,QAAQ,OAAO,EAC1E,MAAM,CAAC,CAAC,GAAG,WAAW,GAAK,WAAW,OAAO,IAAI,MACjD,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAK;QAAC;QAAG,EAAE,OAAO;KAAC;AACnC;;;CAGC,GACD,QAAQ,aAAa,GAAG,IAAI,IAAI;IAC5B,OAAO,GAAG,CAAC;IACX,OAAO,GAAG,CAAC;IACX,OAAO,GAAG,CAAC;CACd,GACD,6CAA6C"}},
    {"offset": {"line": 14429, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 14433, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/sdam/topology.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ServerCapabilities = exports.Topology = void 0;\nconst util_1 = require(\"util\");\nconst connection_string_1 = require(\"../connection_string\");\nconst constants_1 = require(\"../constants\");\nconst error_1 = require(\"../error\");\nconst mongo_types_1 = require(\"../mongo_types\");\nconst read_preference_1 = require(\"../read_preference\");\nconst utils_1 = require(\"../utils\");\nconst common_1 = require(\"./common\");\nconst events_1 = require(\"./events\");\nconst server_1 = require(\"./server\");\nconst server_description_1 = require(\"./server_description\");\nconst server_selection_1 = require(\"./server_selection\");\nconst srv_polling_1 = require(\"./srv_polling\");\nconst topology_description_1 = require(\"./topology_description\");\n// Global state\nlet globalTopologyCounter = 0;\nconst stateTransition = (0, utils_1.makeStateMachine)({\n    [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, common_1.STATE_CONNECTING],\n    [common_1.STATE_CONNECTING]: [common_1.STATE_CONNECTING, common_1.STATE_CLOSING, common_1.STATE_CONNECTED, common_1.STATE_CLOSED],\n    [common_1.STATE_CONNECTED]: [common_1.STATE_CONNECTED, common_1.STATE_CLOSING, common_1.STATE_CLOSED],\n    [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, common_1.STATE_CLOSED]\n});\n/** @internal */\nconst kCancelled = Symbol('cancelled');\n/** @internal */\nconst kWaitQueue = Symbol('waitQueue');\n/**\n * A container of server instances representing a connection to a MongoDB topology.\n * @internal\n */\nclass Topology extends mongo_types_1.TypedEventEmitter {\n    /**\n     * @param seedlist - a list of HostAddress instances to connect to\n     */\n    constructor(client, seeds, options) {\n        super();\n        this.client = client;\n        this.selectServerAsync = (0, util_1.promisify)((selector, options, callback) => this.selectServer(selector, options, callback));\n        // Options should only be undefined in tests, MongoClient will always have defined options\n        options = options ?? {\n            hosts: [utils_1.HostAddress.fromString('localhost:27017')],\n            ...Object.fromEntries(connection_string_1.DEFAULT_OPTIONS.entries()),\n            ...Object.fromEntries(connection_string_1.FEATURE_FLAGS.entries())\n        };\n        if (typeof seeds === 'string') {\n            seeds = [utils_1.HostAddress.fromString(seeds)];\n        }\n        else if (!Array.isArray(seeds)) {\n            seeds = [seeds];\n        }\n        const seedlist = [];\n        for (const seed of seeds) {\n            if (typeof seed === 'string') {\n                seedlist.push(utils_1.HostAddress.fromString(seed));\n            }\n            else if (seed instanceof utils_1.HostAddress) {\n                seedlist.push(seed);\n            }\n            else {\n                // FIXME(NODE-3483): May need to be a MongoParseError\n                throw new error_1.MongoRuntimeError(`Topology cannot be constructed from ${JSON.stringify(seed)}`);\n            }\n        }\n        const topologyType = topologyTypeFromOptions(options);\n        const topologyId = globalTopologyCounter++;\n        const selectedHosts = options.srvMaxHosts == null ||\n            options.srvMaxHosts === 0 ||\n            options.srvMaxHosts >= seedlist.length\n            ? seedlist\n            : (0, utils_1.shuffle)(seedlist, options.srvMaxHosts);\n        const serverDescriptions = new Map();\n        for (const hostAddress of selectedHosts) {\n            serverDescriptions.set(hostAddress.toString(), new server_description_1.ServerDescription(hostAddress));\n        }\n        this[kWaitQueue] = new utils_1.List();\n        this.s = {\n            // the id of this topology\n            id: topologyId,\n            // passed in options\n            options,\n            // initial seedlist of servers to connect to\n            seedlist,\n            // initial state\n            state: common_1.STATE_CLOSED,\n            // the topology description\n            description: new topology_description_1.TopologyDescription(topologyType, serverDescriptions, options.replicaSet, undefined, undefined, undefined, options),\n            serverSelectionTimeoutMS: options.serverSelectionTimeoutMS,\n            heartbeatFrequencyMS: options.heartbeatFrequencyMS,\n            minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS,\n            // a map of server instances to normalized addresses\n            servers: new Map(),\n            credentials: options?.credentials,\n            clusterTime: undefined,\n            // timer management\n            connectionTimers: new Set(),\n            detectShardedTopology: ev => this.detectShardedTopology(ev),\n            detectSrvRecords: ev => this.detectSrvRecords(ev)\n        };\n        if (options.srvHost && !options.loadBalanced) {\n            this.s.srvPoller =\n                options.srvPoller ??\n                    new srv_polling_1.SrvPoller({\n                        heartbeatFrequencyMS: this.s.heartbeatFrequencyMS,\n                        srvHost: options.srvHost,\n                        srvMaxHosts: options.srvMaxHosts,\n                        srvServiceName: options.srvServiceName\n                    });\n            this.on(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n        }\n    }\n    detectShardedTopology(event) {\n        const previousType = event.previousDescription.type;\n        const newType = event.newDescription.type;\n        const transitionToSharded = previousType !== common_1.TopologyType.Sharded && newType === common_1.TopologyType.Sharded;\n        const srvListeners = this.s.srvPoller?.listeners(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY);\n        const listeningToSrvPolling = !!srvListeners?.includes(this.s.detectSrvRecords);\n        if (transitionToSharded && !listeningToSrvPolling) {\n            this.s.srvPoller?.on(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n            this.s.srvPoller?.start();\n        }\n    }\n    detectSrvRecords(ev) {\n        const previousTopologyDescription = this.s.description;\n        this.s.description = this.s.description.updateFromSrvPollingEvent(ev, this.s.options.srvMaxHosts);\n        if (this.s.description === previousTopologyDescription) {\n            // Nothing changed, so return\n            return;\n        }\n        updateServers(this);\n        this.emit(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));\n    }\n    /**\n     * @returns A `TopologyDescription` for this topology\n     */\n    get description() {\n        return this.s.description;\n    }\n    get loadBalanced() {\n        return this.s.options.loadBalanced;\n    }\n    get capabilities() {\n        return new ServerCapabilities(this.lastHello());\n    }\n    connect(options, callback) {\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        options = options ?? {};\n        if (this.s.state === common_1.STATE_CONNECTED) {\n            if (typeof callback === 'function') {\n                callback();\n            }\n            return;\n        }\n        stateTransition(this, common_1.STATE_CONNECTING);\n        // emit SDAM monitoring events\n        this.emit(Topology.TOPOLOGY_OPENING, new events_1.TopologyOpeningEvent(this.s.id));\n        // emit an event for the topology change\n        this.emit(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, new topology_description_1.TopologyDescription(common_1.TopologyType.Unknown), // initial is always Unknown\n        this.s.description));\n        // connect all known servers, then attempt server selection to connect\n        const serverDescriptions = Array.from(this.s.description.servers.values());\n        this.s.servers = new Map(serverDescriptions.map(serverDescription => [\n            serverDescription.address,\n            createAndConnectServer(this, serverDescription)\n        ]));\n        // In load balancer mode we need to fake a server description getting\n        // emitted from the monitor, since the monitor doesn't exist.\n        if (this.s.options.loadBalanced) {\n            for (const description of serverDescriptions) {\n                const newDescription = new server_description_1.ServerDescription(description.hostAddress, undefined, {\n                    loadBalanced: this.s.options.loadBalanced\n                });\n                this.serverUpdateHandler(newDescription);\n            }\n        }\n        const exitWithError = (error) => callback ? callback(error) : this.emit(Topology.ERROR, error);\n        const readPreference = options.readPreference ?? read_preference_1.ReadPreference.primary;\n        this.selectServer((0, server_selection_1.readPreferenceServerSelector)(readPreference), options, (err, server) => {\n            if (err) {\n                return this.close({ force: false }, () => exitWithError(err));\n            }\n            // TODO: NODE-2471\n            const skipPingOnConnect = this.s.options[Symbol.for('@@mdb.skipPingOnConnect')] === true;\n            if (!skipPingOnConnect && server && this.s.credentials) {\n                server.command((0, utils_1.ns)('admin.$cmd'), { ping: 1 }, {}, err => {\n                    if (err) {\n                        return exitWithError(err);\n                    }\n                    stateTransition(this, common_1.STATE_CONNECTED);\n                    this.emit(Topology.OPEN, this);\n                    this.emit(Topology.CONNECT, this);\n                    callback?.(undefined, this);\n                });\n                return;\n            }\n            stateTransition(this, common_1.STATE_CONNECTED);\n            this.emit(Topology.OPEN, this);\n            this.emit(Topology.CONNECT, this);\n            callback?.(undefined, this);\n        });\n    }\n    close(options, callback) {\n        options = options ?? { force: false };\n        if (this.s.state === common_1.STATE_CLOSED || this.s.state === common_1.STATE_CLOSING) {\n            return callback?.();\n        }\n        const destroyedServers = Array.from(this.s.servers.values(), server => {\n            return (0, util_1.promisify)(destroyServer)(server, this, { force: !!options?.force });\n        });\n        Promise.all(destroyedServers)\n            .then(() => {\n            this.s.servers.clear();\n            stateTransition(this, common_1.STATE_CLOSING);\n            drainWaitQueue(this[kWaitQueue], new error_1.MongoTopologyClosedError());\n            (0, common_1.drainTimerQueue)(this.s.connectionTimers);\n            if (this.s.srvPoller) {\n                this.s.srvPoller.stop();\n                this.s.srvPoller.removeListener(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n            }\n            this.removeListener(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n            stateTransition(this, common_1.STATE_CLOSED);\n            // emit an event for close\n            this.emit(Topology.TOPOLOGY_CLOSED, new events_1.TopologyClosedEvent(this.s.id));\n        })\n            .finally(() => callback?.());\n    }\n    /**\n     * Selects a server according to the selection predicate provided\n     *\n     * @param selector - An optional selector to select servers by, defaults to a random selection within a latency window\n     * @param options - Optional settings related to server selection\n     * @param callback - The callback used to indicate success or failure\n     * @returns An instance of a `Server` meeting the criteria of the predicate provided\n     */\n    selectServer(selector, options, callback) {\n        let serverSelector;\n        if (typeof selector !== 'function') {\n            if (typeof selector === 'string') {\n                serverSelector = (0, server_selection_1.readPreferenceServerSelector)(read_preference_1.ReadPreference.fromString(selector));\n            }\n            else {\n                let readPreference;\n                if (selector instanceof read_preference_1.ReadPreference) {\n                    readPreference = selector;\n                }\n                else {\n                    read_preference_1.ReadPreference.translate(options);\n                    readPreference = options.readPreference || read_preference_1.ReadPreference.primary;\n                }\n                serverSelector = (0, server_selection_1.readPreferenceServerSelector)(readPreference);\n            }\n        }\n        else {\n            serverSelector = selector;\n        }\n        options = Object.assign({}, { serverSelectionTimeoutMS: this.s.serverSelectionTimeoutMS }, options);\n        const isSharded = this.description.type === common_1.TopologyType.Sharded;\n        const session = options.session;\n        const transaction = session && session.transaction;\n        if (isSharded && transaction && transaction.server) {\n            callback(undefined, transaction.server);\n            return;\n        }\n        const waitQueueMember = {\n            serverSelector,\n            transaction,\n            callback,\n            timeoutController: new utils_1.TimeoutController(options.serverSelectionTimeoutMS)\n        };\n        waitQueueMember.timeoutController.signal.addEventListener('abort', () => {\n            waitQueueMember[kCancelled] = true;\n            waitQueueMember.timeoutController.clear();\n            const timeoutError = new error_1.MongoServerSelectionError(`Server selection timed out after ${options.serverSelectionTimeoutMS} ms`, this.description);\n            waitQueueMember.callback(timeoutError);\n        });\n        this[kWaitQueue].push(waitQueueMember);\n        processWaitQueue(this);\n    }\n    /**\n     * Update the internal TopologyDescription with a ServerDescription\n     *\n     * @param serverDescription - The server to update in the internal list of server descriptions\n     */\n    serverUpdateHandler(serverDescription) {\n        if (!this.s.description.hasServer(serverDescription.address)) {\n            return;\n        }\n        // ignore this server update if its from an outdated topologyVersion\n        if (isStaleServerDescription(this.s.description, serverDescription)) {\n            return;\n        }\n        // these will be used for monitoring events later\n        const previousTopologyDescription = this.s.description;\n        const previousServerDescription = this.s.description.servers.get(serverDescription.address);\n        if (!previousServerDescription) {\n            return;\n        }\n        // Driver Sessions Spec: \"Whenever a driver receives a cluster time from\n        // a server it MUST compare it to the current highest seen cluster time\n        // for the deployment. If the new cluster time is higher than the\n        // highest seen cluster time it MUST become the new highest seen cluster\n        // time. Two cluster times are compared using only the BsonTimestamp\n        // value of the clusterTime embedded field.\"\n        const clusterTime = serverDescription.$clusterTime;\n        if (clusterTime) {\n            (0, common_1._advanceClusterTime)(this, clusterTime);\n        }\n        // If we already know all the information contained in this updated description, then\n        // we don't need to emit SDAM events, but still need to update the description, in order\n        // to keep client-tracked attributes like last update time and round trip time up to date\n        const equalDescriptions = previousServerDescription && previousServerDescription.equals(serverDescription);\n        // first update the TopologyDescription\n        this.s.description = this.s.description.update(serverDescription);\n        if (this.s.description.compatibilityError) {\n            this.emit(Topology.ERROR, new error_1.MongoCompatibilityError(this.s.description.compatibilityError));\n            return;\n        }\n        // emit monitoring events for this change\n        if (!equalDescriptions) {\n            const newDescription = this.s.description.servers.get(serverDescription.address);\n            if (newDescription) {\n                this.emit(Topology.SERVER_DESCRIPTION_CHANGED, new events_1.ServerDescriptionChangedEvent(this.s.id, serverDescription.address, previousServerDescription, newDescription));\n            }\n        }\n        // update server list from updated descriptions\n        updateServers(this, serverDescription);\n        // attempt to resolve any outstanding server selection attempts\n        if (this[kWaitQueue].length > 0) {\n            processWaitQueue(this);\n        }\n        if (!equalDescriptions) {\n            this.emit(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));\n        }\n    }\n    auth(credentials, callback) {\n        if (typeof credentials === 'function')\n            (callback = credentials), (credentials = undefined);\n        if (typeof callback === 'function')\n            callback(undefined, true);\n    }\n    get clientMetadata() {\n        return this.s.options.metadata;\n    }\n    isConnected() {\n        return this.s.state === common_1.STATE_CONNECTED;\n    }\n    isDestroyed() {\n        return this.s.state === common_1.STATE_CLOSED;\n    }\n    // NOTE: There are many places in code where we explicitly check the last hello\n    //       to do feature support detection. This should be done any other way, but for\n    //       now we will just return the first hello seen, which should suffice.\n    lastHello() {\n        const serverDescriptions = Array.from(this.description.servers.values());\n        if (serverDescriptions.length === 0)\n            return {};\n        const sd = serverDescriptions.filter((sd) => sd.type !== common_1.ServerType.Unknown)[0];\n        const result = sd || { maxWireVersion: this.description.commonWireVersion };\n        return result;\n    }\n    get commonWireVersion() {\n        return this.description.commonWireVersion;\n    }\n    get logicalSessionTimeoutMinutes() {\n        return this.description.logicalSessionTimeoutMinutes;\n    }\n    get clusterTime() {\n        return this.s.clusterTime;\n    }\n    set clusterTime(clusterTime) {\n        this.s.clusterTime = clusterTime;\n    }\n}\n/** @event */\nTopology.SERVER_OPENING = constants_1.SERVER_OPENING;\n/** @event */\nTopology.SERVER_CLOSED = constants_1.SERVER_CLOSED;\n/** @event */\nTopology.SERVER_DESCRIPTION_CHANGED = constants_1.SERVER_DESCRIPTION_CHANGED;\n/** @event */\nTopology.TOPOLOGY_OPENING = constants_1.TOPOLOGY_OPENING;\n/** @event */\nTopology.TOPOLOGY_CLOSED = constants_1.TOPOLOGY_CLOSED;\n/** @event */\nTopology.TOPOLOGY_DESCRIPTION_CHANGED = constants_1.TOPOLOGY_DESCRIPTION_CHANGED;\n/** @event */\nTopology.ERROR = constants_1.ERROR;\n/** @event */\nTopology.OPEN = constants_1.OPEN;\n/** @event */\nTopology.CONNECT = constants_1.CONNECT;\n/** @event */\nTopology.CLOSE = constants_1.CLOSE;\n/** @event */\nTopology.TIMEOUT = constants_1.TIMEOUT;\nexports.Topology = Topology;\n/** Destroys a server, and removes all event listeners from the instance */\nfunction destroyServer(server, topology, options, callback) {\n    options = options ?? { force: false };\n    for (const event of constants_1.LOCAL_SERVER_EVENTS) {\n        server.removeAllListeners(event);\n    }\n    server.destroy(options, () => {\n        topology.emit(Topology.SERVER_CLOSED, new events_1.ServerClosedEvent(topology.s.id, server.description.address));\n        for (const event of constants_1.SERVER_RELAY_EVENTS) {\n            server.removeAllListeners(event);\n        }\n        if (typeof callback === 'function') {\n            callback();\n        }\n    });\n}\n/** Predicts the TopologyType from options */\nfunction topologyTypeFromOptions(options) {\n    if (options?.directConnection) {\n        return common_1.TopologyType.Single;\n    }\n    if (options?.replicaSet) {\n        return common_1.TopologyType.ReplicaSetNoPrimary;\n    }\n    if (options?.loadBalanced) {\n        return common_1.TopologyType.LoadBalanced;\n    }\n    return common_1.TopologyType.Unknown;\n}\n/**\n * Creates new server instances and attempts to connect them\n *\n * @param topology - The topology that this server belongs to\n * @param serverDescription - The description for the server to initialize and connect to\n */\nfunction createAndConnectServer(topology, serverDescription) {\n    topology.emit(Topology.SERVER_OPENING, new events_1.ServerOpeningEvent(topology.s.id, serverDescription.address));\n    const server = new server_1.Server(topology, serverDescription, topology.s.options);\n    for (const event of constants_1.SERVER_RELAY_EVENTS) {\n        server.on(event, (e) => topology.emit(event, e));\n    }\n    server.on(server_1.Server.DESCRIPTION_RECEIVED, description => topology.serverUpdateHandler(description));\n    server.connect();\n    return server;\n}\n/**\n * @param topology - Topology to update.\n * @param incomingServerDescription - New server description.\n */\nfunction updateServers(topology, incomingServerDescription) {\n    // update the internal server's description\n    if (incomingServerDescription && topology.s.servers.has(incomingServerDescription.address)) {\n        const server = topology.s.servers.get(incomingServerDescription.address);\n        if (server) {\n            server.s.description = incomingServerDescription;\n            if (incomingServerDescription.error instanceof error_1.MongoError &&\n                incomingServerDescription.error.hasErrorLabel(error_1.MongoErrorLabel.ResetPool)) {\n                const interruptInUseConnections = incomingServerDescription.error.hasErrorLabel(error_1.MongoErrorLabel.InterruptInUseConnections);\n                server.pool.clear({ interruptInUseConnections });\n            }\n            else if (incomingServerDescription.error == null) {\n                const newTopologyType = topology.s.description.type;\n                const shouldMarkPoolReady = incomingServerDescription.isDataBearing ||\n                    (incomingServerDescription.type !== common_1.ServerType.Unknown &&\n                        newTopologyType === common_1.TopologyType.Single);\n                if (shouldMarkPoolReady) {\n                    server.pool.ready();\n                }\n            }\n        }\n    }\n    // add new servers for all descriptions we currently don't know about locally\n    for (const serverDescription of topology.description.servers.values()) {\n        if (!topology.s.servers.has(serverDescription.address)) {\n            const server = createAndConnectServer(topology, serverDescription);\n            topology.s.servers.set(serverDescription.address, server);\n        }\n    }\n    // for all servers no longer known, remove their descriptions and destroy their instances\n    for (const entry of topology.s.servers) {\n        const serverAddress = entry[0];\n        if (topology.description.hasServer(serverAddress)) {\n            continue;\n        }\n        if (!topology.s.servers.has(serverAddress)) {\n            continue;\n        }\n        const server = topology.s.servers.get(serverAddress);\n        topology.s.servers.delete(serverAddress);\n        // prepare server for garbage collection\n        if (server) {\n            destroyServer(server, topology);\n        }\n    }\n}\nfunction drainWaitQueue(queue, err) {\n    while (queue.length) {\n        const waitQueueMember = queue.shift();\n        if (!waitQueueMember) {\n            continue;\n        }\n        waitQueueMember.timeoutController.clear();\n        if (!waitQueueMember[kCancelled]) {\n            waitQueueMember.callback(err);\n        }\n    }\n}\nfunction processWaitQueue(topology) {\n    if (topology.s.state === common_1.STATE_CLOSED) {\n        drainWaitQueue(topology[kWaitQueue], new error_1.MongoTopologyClosedError());\n        return;\n    }\n    const isSharded = topology.description.type === common_1.TopologyType.Sharded;\n    const serverDescriptions = Array.from(topology.description.servers.values());\n    const membersToProcess = topology[kWaitQueue].length;\n    for (let i = 0; i < membersToProcess; ++i) {\n        const waitQueueMember = topology[kWaitQueue].shift();\n        if (!waitQueueMember) {\n            continue;\n        }\n        if (waitQueueMember[kCancelled]) {\n            continue;\n        }\n        let selectedDescriptions;\n        try {\n            const serverSelector = waitQueueMember.serverSelector;\n            selectedDescriptions = serverSelector\n                ? serverSelector(topology.description, serverDescriptions)\n                : serverDescriptions;\n        }\n        catch (e) {\n            waitQueueMember.timeoutController.clear();\n            waitQueueMember.callback(e);\n            continue;\n        }\n        let selectedServer;\n        if (selectedDescriptions.length === 0) {\n            topology[kWaitQueue].push(waitQueueMember);\n            continue;\n        }\n        else if (selectedDescriptions.length === 1) {\n            selectedServer = topology.s.servers.get(selectedDescriptions[0].address);\n        }\n        else {\n            const descriptions = (0, utils_1.shuffle)(selectedDescriptions, 2);\n            const server1 = topology.s.servers.get(descriptions[0].address);\n            const server2 = topology.s.servers.get(descriptions[1].address);\n            selectedServer =\n                server1 && server2 && server1.s.operationCount < server2.s.operationCount\n                    ? server1\n                    : server2;\n        }\n        if (!selectedServer) {\n            waitQueueMember.callback(new error_1.MongoServerSelectionError('server selection returned a server description but the server was not found in the topology', topology.description));\n            return;\n        }\n        const transaction = waitQueueMember.transaction;\n        if (isSharded && transaction && transaction.isActive && selectedServer) {\n            transaction.pinServer(selectedServer);\n        }\n        waitQueueMember.timeoutController.clear();\n        waitQueueMember.callback(undefined, selectedServer);\n    }\n    if (topology[kWaitQueue].length > 0) {\n        // ensure all server monitors attempt monitoring soon\n        for (const [, server] of topology.s.servers) {\n            process.nextTick(function scheduleServerCheck() {\n                return server.requestCheck();\n            });\n        }\n    }\n}\nfunction isStaleServerDescription(topologyDescription, incomingServerDescription) {\n    const currentServerDescription = topologyDescription.servers.get(incomingServerDescription.address);\n    const currentTopologyVersion = currentServerDescription?.topologyVersion;\n    return ((0, server_description_1.compareTopologyVersion)(currentTopologyVersion, incomingServerDescription.topologyVersion) > 0);\n}\n/** @public */\nclass ServerCapabilities {\n    constructor(hello) {\n        this.minWireVersion = hello.minWireVersion || 0;\n        this.maxWireVersion = hello.maxWireVersion || 0;\n    }\n    get hasAggregationCursor() {\n        return this.maxWireVersion >= 1;\n    }\n    get hasWriteCommands() {\n        return this.maxWireVersion >= 2;\n    }\n    get hasTextSearch() {\n        return this.minWireVersion >= 0;\n    }\n    get hasAuthCommands() {\n        return this.maxWireVersion >= 1;\n    }\n    get hasListCollectionsCommand() {\n        return this.maxWireVersion >= 3;\n    }\n    get hasListIndexesCommand() {\n        return this.maxWireVersion >= 3;\n    }\n    get supportsSnapshotReads() {\n        return this.maxWireVersion >= 13;\n    }\n    get commandsTakeWriteConcern() {\n        return this.maxWireVersion >= 5;\n    }\n    get commandsTakeCollation() {\n        return this.maxWireVersion >= 5;\n    }\n}\nexports.ServerCapabilities = ServerCapabilities;\n//# sourceMappingURL=topology.js.map"],"names":[],"mappings":"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"}},
    {"offset": {"line": 15029, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 15033, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/operations/stats.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DbStatsOperation = void 0;\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass DbStatsOperation extends command_1.CommandOperation {\n    constructor(db, options) {\n        super(db, options);\n        this.options = options;\n    }\n    async execute(server, session) {\n        const command = { dbStats: true };\n        if (this.options.scale != null) {\n            command.scale = this.options.scale;\n        }\n        return super.executeCommand(server, session, command);\n    }\n}\nexports.DbStatsOperation = DbStatsOperation;\n(0, operation_1.defineAspects)(DbStatsOperation, [operation_1.Aspect.READ_OPERATION]);\n//# sourceMappingURL=stats.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,gBAAgB,GAAG,KAAK;AAChC,MAAM,YAAY;AAClB,MAAM,cAAc;AACpB,cAAc,GACd,MAAM,yBAAyB,UAAU,gBAAgB;IACrD,YAAY,EAAE,EAAE,OAAO,CAAE;QACrB,KAAK,CAAC,IAAI;QACV,IAAI,CAAC,OAAO,GAAG;IACnB;IACA,MAAM,QAAQ,MAAM,EAAE,OAAO,EAAE;QAC3B,MAAM,UAAU;YAAE,SAAS;QAAK;QAChC,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,MAAM;YAC5B,QAAQ,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK;QACtC;QACA,OAAO,KAAK,CAAC,eAAe,QAAQ,SAAS;IACjD;AACJ;AACA,QAAQ,gBAAgB,GAAG;AAC1B,CAAA,GAAG,YAAY,aAAa,AAAD,EAAG,kBAAkB;IAAC,YAAY,MAAM,CAAC,cAAc;CAAC,GACpF,iCAAiC"}},
    {"offset": {"line": 15059, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 15063, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/operations/update.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.makeUpdateStatement = exports.ReplaceOneOperation = exports.UpdateManyOperation = exports.UpdateOneOperation = exports.UpdateOperation = void 0;\nconst error_1 = require(\"../error\");\nconst utils_1 = require(\"../utils\");\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\n/**\n * @internal\n * UpdateOperation is used in bulk write, while UpdateOneOperation and UpdateManyOperation are only used in the collections API\n */\nclass UpdateOperation extends command_1.CommandOperation {\n    constructor(ns, statements, options) {\n        super(undefined, options);\n        this.options = options;\n        this.ns = ns;\n        this.statements = statements;\n    }\n    get canRetryWrite() {\n        if (super.canRetryWrite === false) {\n            return false;\n        }\n        return this.statements.every(op => op.multi == null || op.multi === false);\n    }\n    async execute(server, session) {\n        const options = this.options ?? {};\n        const ordered = typeof options.ordered === 'boolean' ? options.ordered : true;\n        const command = {\n            update: this.ns.collection,\n            updates: this.statements,\n            ordered\n        };\n        if (typeof options.bypassDocumentValidation === 'boolean') {\n            command.bypassDocumentValidation = options.bypassDocumentValidation;\n        }\n        if (options.let) {\n            command.let = options.let;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (options.comment !== undefined) {\n            command.comment = options.comment;\n        }\n        const unacknowledgedWrite = this.writeConcern && this.writeConcern.w === 0;\n        if (unacknowledgedWrite) {\n            if (this.statements.find((o) => o.hint)) {\n                // TODO(NODE-3541): fix error for hint with unacknowledged writes\n                throw new error_1.MongoCompatibilityError(`hint is not supported with unacknowledged writes`);\n            }\n        }\n        return super.executeCommand(server, session, command);\n    }\n}\nexports.UpdateOperation = UpdateOperation;\n/** @internal */\nclass UpdateOneOperation extends UpdateOperation {\n    constructor(collection, filter, update, options) {\n        super(collection.s.namespace, [makeUpdateStatement(filter, update, { ...options, multi: false })], options);\n        if (!(0, utils_1.hasAtomicOperators)(update)) {\n            throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n    }\n    async execute(server, session) {\n        const res = await super.execute(server, session);\n        if (this.explain != null)\n            return res;\n        if (res.code)\n            throw new error_1.MongoServerError(res);\n        if (res.writeErrors)\n            throw new error_1.MongoServerError(res.writeErrors[0]);\n        return {\n            acknowledged: this.writeConcern?.w !== 0,\n            modifiedCount: res.nModified ?? res.n,\n            upsertedId: Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n            upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n            matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n        };\n    }\n}\nexports.UpdateOneOperation = UpdateOneOperation;\n/** @internal */\nclass UpdateManyOperation extends UpdateOperation {\n    constructor(collection, filter, update, options) {\n        super(collection.s.namespace, [makeUpdateStatement(filter, update, { ...options, multi: true })], options);\n        if (!(0, utils_1.hasAtomicOperators)(update)) {\n            throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n    }\n    async execute(server, session) {\n        const res = await super.execute(server, session);\n        if (this.explain != null)\n            return res;\n        if (res.code)\n            throw new error_1.MongoServerError(res);\n        if (res.writeErrors)\n            throw new error_1.MongoServerError(res.writeErrors[0]);\n        return {\n            acknowledged: this.writeConcern?.w !== 0,\n            modifiedCount: res.nModified ?? res.n,\n            upsertedId: Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n            upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n            matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n        };\n    }\n}\nexports.UpdateManyOperation = UpdateManyOperation;\n/** @internal */\nclass ReplaceOneOperation extends UpdateOperation {\n    constructor(collection, filter, replacement, options) {\n        super(collection.s.namespace, [makeUpdateStatement(filter, replacement, { ...options, multi: false })], options);\n        if ((0, utils_1.hasAtomicOperators)(replacement)) {\n            throw new error_1.MongoInvalidArgumentError('Replacement document must not contain atomic operators');\n        }\n    }\n    async execute(server, session) {\n        const res = await super.execute(server, session);\n        if (this.explain != null)\n            return res;\n        if (res.code)\n            throw new error_1.MongoServerError(res);\n        if (res.writeErrors)\n            throw new error_1.MongoServerError(res.writeErrors[0]);\n        return {\n            acknowledged: this.writeConcern?.w !== 0,\n            modifiedCount: res.nModified ?? res.n,\n            upsertedId: Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n            upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n            matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n        };\n    }\n}\nexports.ReplaceOneOperation = ReplaceOneOperation;\nfunction makeUpdateStatement(filter, update, options) {\n    if (filter == null || typeof filter !== 'object') {\n        throw new error_1.MongoInvalidArgumentError('Selector must be a valid JavaScript object');\n    }\n    if (update == null || typeof update !== 'object') {\n        throw new error_1.MongoInvalidArgumentError('Document must be a valid JavaScript object');\n    }\n    const op = { q: filter, u: update };\n    if (typeof options.upsert === 'boolean') {\n        op.upsert = options.upsert;\n    }\n    if (options.multi) {\n        op.multi = options.multi;\n    }\n    if (options.hint) {\n        op.hint = options.hint;\n    }\n    if (options.arrayFilters) {\n        op.arrayFilters = options.arrayFilters;\n    }\n    if (options.collation) {\n        op.collation = options.collation;\n    }\n    return op;\n}\nexports.makeUpdateStatement = makeUpdateStatement;\n(0, operation_1.defineAspects)(UpdateOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION, operation_1.Aspect.SKIP_COLLATION]);\n(0, operation_1.defineAspects)(UpdateOneOperation, [\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.EXPLAINABLE,\n    operation_1.Aspect.SKIP_COLLATION\n]);\n(0, operation_1.defineAspects)(UpdateManyOperation, [\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.EXPLAINABLE,\n    operation_1.Aspect.SKIP_COLLATION\n]);\n(0, operation_1.defineAspects)(ReplaceOneOperation, [\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.SKIP_COLLATION\n]);\n//# sourceMappingURL=update.js.map"],"names":[],"mappings":"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"}},
    {"offset": {"line": 15249, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 15253, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/operations/search_indexes/update.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UpdateSearchIndexOperation = void 0;\nconst operation_1 = require(\"../operation\");\n/** @internal */\nclass UpdateSearchIndexOperation extends operation_1.AbstractOperation {\n    constructor(collection, name, definition) {\n        super();\n        this.collection = collection;\n        this.name = name;\n        this.definition = definition;\n    }\n    async execute(server, session) {\n        const namespace = this.collection.fullNamespace;\n        const command = {\n            updateSearchIndex: namespace.collection,\n            name: this.name,\n            definition: this.definition\n        };\n        await server.commandAsync(namespace, command, { session });\n        return;\n    }\n}\nexports.UpdateSearchIndexOperation = UpdateSearchIndexOperation;\n//# sourceMappingURL=update.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,0BAA0B,GAAG,KAAK;AAC1C,MAAM,cAAc;AACpB,cAAc,GACd,MAAM,mCAAmC,YAAY,iBAAiB;IAClE,YAAY,UAAU,EAAE,IAAI,EAAE,UAAU,CAAE;QACtC,KAAK;QACL,IAAI,CAAC,UAAU,GAAG;QAClB,IAAI,CAAC,IAAI,GAAG;QACZ,IAAI,CAAC,UAAU,GAAG;IACtB;IACA,MAAM,QAAQ,MAAM,EAAE,OAAO,EAAE;QAC3B,MAAM,YAAY,IAAI,CAAC,UAAU,CAAC,aAAa;QAC/C,MAAM,UAAU;YACZ,mBAAmB,UAAU,UAAU;YACvC,MAAM,IAAI,CAAC,IAAI;YACf,YAAY,IAAI,CAAC,UAAU;QAC/B;QACA,MAAM,OAAO,YAAY,CAAC,WAAW,SAAS;YAAE;QAAQ;QACxD;IACJ;AACJ;AACA,QAAQ,0BAA0B,GAAG,4BACrC,kCAAkC"}},
    {"offset": {"line": 15280, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 15284, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/operations/search_indexes/drop.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DropSearchIndexOperation = void 0;\nconst error_1 = require(\"../../error\");\nconst operation_1 = require(\"../operation\");\n/** @internal */\nclass DropSearchIndexOperation extends operation_1.AbstractOperation {\n    constructor(collection, name) {\n        super();\n        this.collection = collection;\n        this.name = name;\n    }\n    async execute(server, session) {\n        const namespace = this.collection.fullNamespace;\n        const command = {\n            dropSearchIndex: namespace.collection\n        };\n        if (typeof this.name === 'string') {\n            command.name = this.name;\n        }\n        try {\n            await server.commandAsync(namespace, command, { session });\n        }\n        catch (error) {\n            const isNamespaceNotFoundError = error instanceof error_1.MongoServerError && error.code === error_1.MONGODB_ERROR_CODES.NamespaceNotFound;\n            if (!isNamespaceNotFoundError) {\n                throw error;\n            }\n        }\n    }\n}\nexports.DropSearchIndexOperation = DropSearchIndexOperation;\n//# sourceMappingURL=drop.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,wBAAwB,GAAG,KAAK;AACxC,MAAM,UAAU;AAChB,MAAM,cAAc;AACpB,cAAc,GACd,MAAM,iCAAiC,YAAY,iBAAiB;IAChE,YAAY,UAAU,EAAE,IAAI,CAAE;QAC1B,KAAK;QACL,IAAI,CAAC,UAAU,GAAG;QAClB,IAAI,CAAC,IAAI,GAAG;IAChB;IACA,MAAM,QAAQ,MAAM,EAAE,OAAO,EAAE;QAC3B,MAAM,YAAY,IAAI,CAAC,UAAU,CAAC,aAAa;QAC/C,MAAM,UAAU;YACZ,iBAAiB,UAAU,UAAU;QACzC;QACA,IAAI,OAAO,IAAI,CAAC,IAAI,KAAK,UAAU;YAC/B,QAAQ,IAAI,GAAG,IAAI,CAAC,IAAI;QAC5B;QACA,IAAI;YACA,MAAM,OAAO,YAAY,CAAC,WAAW,SAAS;gBAAE;YAAQ;QAC5D,EACA,OAAO,OAAO;YACV,MAAM,2BAA2B,iBAAiB,QAAQ,gBAAgB,IAAI,MAAM,IAAI,KAAK,QAAQ,mBAAmB,CAAC,iBAAiB;YAC1I,IAAI,CAAC,0BAA0B;gBAC3B,MAAM;YACV;QACJ;IACJ;AACJ;AACA,QAAQ,wBAAwB,GAAG,0BACnC,gCAAgC"}},
    {"offset": {"line": 15318, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 15322, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/operations/search_indexes/create.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CreateSearchIndexesOperation = void 0;\nconst operation_1 = require(\"../operation\");\n/** @internal */\nclass CreateSearchIndexesOperation extends operation_1.AbstractOperation {\n    constructor(collection, descriptions) {\n        super();\n        this.collection = collection;\n        this.descriptions = descriptions;\n    }\n    async execute(server, session) {\n        const namespace = this.collection.fullNamespace;\n        const command = {\n            createSearchIndexes: namespace.collection,\n            indexes: this.descriptions\n        };\n        const res = await server.commandAsync(namespace, command, { session });\n        const indexesCreated = res?.indexesCreated ?? [];\n        return indexesCreated.map(({ name }) => name);\n    }\n}\nexports.CreateSearchIndexesOperation = CreateSearchIndexesOperation;\n//# sourceMappingURL=create.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,4BAA4B,GAAG,KAAK;AAC5C,MAAM,cAAc;AACpB,cAAc,GACd,MAAM,qCAAqC,YAAY,iBAAiB;IACpE,YAAY,UAAU,EAAE,YAAY,CAAE;QAClC,KAAK;QACL,IAAI,CAAC,UAAU,GAAG;QAClB,IAAI,CAAC,YAAY,GAAG;IACxB;IACA,MAAM,QAAQ,MAAM,EAAE,OAAO,EAAE;QAC3B,MAAM,YAAY,IAAI,CAAC,UAAU,CAAC,aAAa;QAC/C,MAAM,UAAU;YACZ,qBAAqB,UAAU,UAAU;YACzC,SAAS,IAAI,CAAC,YAAY;QAC9B;QACA,MAAM,MAAM,MAAM,OAAO,YAAY,CAAC,WAAW,SAAS;YAAE;QAAQ;QACpE,MAAM,iBAAiB,KAAK,kBAAkB,EAAE;QAChD,OAAO,eAAe,GAAG,CAAC,CAAC,EAAE,IAAI,EAAE,GAAK;IAC5C;AACJ;AACA,QAAQ,4BAA4B,GAAG,8BACvC,kCAAkC"}},
    {"offset": {"line": 15348, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 15352, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/operations/options_operation.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OptionsOperation = void 0;\nconst error_1 = require(\"../error\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass OptionsOperation extends operation_1.AbstractOperation {\n    constructor(collection, options) {\n        super(options);\n        this.options = options;\n        this.collection = collection;\n    }\n    async execute(server, session) {\n        const coll = this.collection;\n        const [collection] = await coll.s.db\n            .listCollections({ name: coll.collectionName }, { ...this.options, nameOnly: false, readPreference: this.readPreference, session })\n            .toArray();\n        if (collection == null || collection.options == null) {\n            throw new error_1.MongoAPIError(`collection ${coll.namespace} not found`);\n        }\n        return collection.options;\n    }\n}\nexports.OptionsOperation = OptionsOperation;\n//# sourceMappingURL=options_operation.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,gBAAgB,GAAG,KAAK;AAChC,MAAM,UAAU;AAChB,MAAM,cAAc;AACpB,cAAc,GACd,MAAM,yBAAyB,YAAY,iBAAiB;IACxD,YAAY,UAAU,EAAE,OAAO,CAAE;QAC7B,KAAK,CAAC;QACN,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,UAAU,GAAG;IACtB;IACA,MAAM,QAAQ,MAAM,EAAE,OAAO,EAAE;QAC3B,MAAM,OAAO,IAAI,CAAC,UAAU;QAC5B,MAAM,CAAC,WAAW,GAAG,MAAM,KAAK,CAAC,CAAC,EAAE,CAC/B,eAAe,CAAC;YAAE,MAAM,KAAK,cAAc;QAAC,GAAG;YAAE,GAAG,IAAI,CAAC,OAAO;YAAE,UAAU;YAAO,gBAAgB,IAAI,CAAC,cAAc;YAAE;QAAQ,GAChI,OAAO;QACZ,IAAI,cAAc,QAAQ,WAAW,OAAO,IAAI,MAAM;YAClD,MAAM,IAAI,QAAQ,aAAa,CAAC,CAAC,WAAW,EAAE,KAAK,SAAS,CAAC,UAAU,CAAC;QAC5E;QACA,OAAO,WAAW,OAAO;IAC7B;AACJ;AACA,QAAQ,gBAAgB,GAAG,kBAC3B,6CAA6C"}},
    {"offset": {"line": 15382, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 15386, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/operations/is_capped.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IsCappedOperation = void 0;\nconst error_1 = require(\"../error\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass IsCappedOperation extends operation_1.AbstractOperation {\n    constructor(collection, options) {\n        super(options);\n        this.options = options;\n        this.collection = collection;\n    }\n    async execute(server, session) {\n        const coll = this.collection;\n        const [collection] = await coll.s.db\n            .listCollections({ name: coll.collectionName }, { ...this.options, nameOnly: false, readPreference: this.readPreference, session })\n            .toArray();\n        if (collection == null || collection.options == null) {\n            throw new error_1.MongoAPIError(`collection ${coll.namespace} not found`);\n        }\n        return !!collection.options?.capped;\n    }\n}\nexports.IsCappedOperation = IsCappedOperation;\n//# sourceMappingURL=is_capped.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,iBAAiB,GAAG,KAAK;AACjC,MAAM,UAAU;AAChB,MAAM,cAAc;AACpB,cAAc,GACd,MAAM,0BAA0B,YAAY,iBAAiB;IACzD,YAAY,UAAU,EAAE,OAAO,CAAE;QAC7B,KAAK,CAAC;QACN,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,UAAU,GAAG;IACtB;IACA,MAAM,QAAQ,MAAM,EAAE,OAAO,EAAE;QAC3B,MAAM,OAAO,IAAI,CAAC,UAAU;QAC5B,MAAM,CAAC,WAAW,GAAG,MAAM,KAAK,CAAC,CAAC,EAAE,CAC/B,eAAe,CAAC;YAAE,MAAM,KAAK,cAAc;QAAC,GAAG;YAAE,GAAG,IAAI,CAAC,OAAO;YAAE,UAAU;YAAO,gBAAgB,IAAI,CAAC,cAAc;YAAE;QAAQ,GAChI,OAAO;QACZ,IAAI,cAAc,QAAQ,WAAW,OAAO,IAAI,MAAM;YAClD,MAAM,IAAI,QAAQ,aAAa,CAAC,CAAC,WAAW,EAAE,KAAK,SAAS,CAAC,UAAU,CAAC;QAC5E;QACA,OAAO,CAAC,CAAC,WAAW,OAAO,EAAE;IACjC;AACJ;AACA,QAAQ,iBAAiB,GAAG,mBAC5B,qCAAqC"}},
    {"offset": {"line": 15416, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 15420, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/operations/common_functions.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.prepareDocs = exports.indexInformation = void 0;\nasync function indexInformation(db, name, options) {\n    if (options == null) {\n        options = {};\n    }\n    // If we specified full information\n    const full = options.full == null ? false : options.full;\n    // Get the list of indexes of the specified collection\n    const indexes = await db.collection(name).listIndexes(options).toArray();\n    if (full)\n        return indexes;\n    const info = {};\n    for (const index of indexes) {\n        info[index.name] = Object.entries(index.key);\n    }\n    return info;\n}\nexports.indexInformation = indexInformation;\nfunction prepareDocs(coll, docs, options) {\n    const forceServerObjectId = typeof options.forceServerObjectId === 'boolean'\n        ? options.forceServerObjectId\n        : coll.s.db.options?.forceServerObjectId;\n    // no need to modify the docs if server sets the ObjectId\n    if (forceServerObjectId === true) {\n        return docs;\n    }\n    return docs.map(doc => {\n        if (doc._id == null) {\n            doc._id = coll.s.pkFactory.createPk();\n        }\n        return doc;\n    });\n}\nexports.prepareDocs = prepareDocs;\n//# sourceMappingURL=common_functions.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,WAAW,GAAG,QAAQ,gBAAgB,GAAG,KAAK;AACtD,eAAe,iBAAiB,EAAE,EAAE,IAAI,EAAE,OAAO;IAC7C,IAAI,WAAW,MAAM;QACjB,UAAU,CAAC;IACf;IACA,mCAAmC;IACnC,MAAM,OAAO,QAAQ,IAAI,IAAI,OAAO,QAAQ,QAAQ,IAAI;IACxD,sDAAsD;IACtD,MAAM,UAAU,MAAM,GAAG,UAAU,CAAC,MAAM,WAAW,CAAC,SAAS,OAAO;IACtE,IAAI,MACA,OAAO;IACX,MAAM,OAAO,CAAC;IACd,KAAK,MAAM,SAAS,QAAS;QACzB,IAAI,CAAC,MAAM,IAAI,CAAC,GAAG,OAAO,OAAO,CAAC,MAAM,GAAG;IAC/C;IACA,OAAO;AACX;AACA,QAAQ,gBAAgB,GAAG;AAC3B,SAAS,YAAY,IAAI,EAAE,IAAI,EAAE,OAAO;IACpC,MAAM,sBAAsB,OAAO,QAAQ,mBAAmB,KAAK,YAC7D,QAAQ,mBAAmB,GAC3B,KAAK,CAAC,CAAC,EAAE,CAAC,OAAO,EAAE;IACzB,yDAAyD;IACzD,IAAI,wBAAwB,MAAM;QAC9B,OAAO;IACX;IACA,OAAO,KAAK,GAAG,CAAC,CAAA;QACZ,IAAI,IAAI,GAAG,IAAI,MAAM;YACjB,IAAI,GAAG,GAAG,KAAK,CAAC,CAAC,SAAS,CAAC,QAAQ;QACvC;QACA,OAAO;IACX;AACJ;AACA,QAAQ,WAAW,GAAG,aACtB,4CAA4C"}},
    {"offset": {"line": 15455, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 15459, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/operations/bulk_write.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BulkWriteOperation = void 0;\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass BulkWriteOperation extends operation_1.AbstractOperation {\n    constructor(collection, operations, options) {\n        super(options);\n        this.options = options;\n        this.collection = collection;\n        this.operations = operations;\n    }\n    async execute(server, session) {\n        const coll = this.collection;\n        const operations = this.operations;\n        const options = { ...this.options, ...this.bsonOptions, readPreference: this.readPreference };\n        // Create the bulk operation\n        const bulk = options.ordered === false\n            ? coll.initializeUnorderedBulkOp(options)\n            : coll.initializeOrderedBulkOp(options);\n        // for each op go through and add to the bulk\n        for (let i = 0; i < operations.length; i++) {\n            bulk.raw(operations[i]);\n        }\n        // Execute the bulk\n        const result = await bulk.execute({ ...options, session });\n        return result;\n    }\n}\nexports.BulkWriteOperation = BulkWriteOperation;\n(0, operation_1.defineAspects)(BulkWriteOperation, [operation_1.Aspect.WRITE_OPERATION]);\n//# sourceMappingURL=bulk_write.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,kBAAkB,GAAG,KAAK;AAClC,MAAM,cAAc;AACpB,cAAc,GACd,MAAM,2BAA2B,YAAY,iBAAiB;IAC1D,YAAY,UAAU,EAAE,UAAU,EAAE,OAAO,CAAE;QACzC,KAAK,CAAC;QACN,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,UAAU,GAAG;QAClB,IAAI,CAAC,UAAU,GAAG;IACtB;IACA,MAAM,QAAQ,MAAM,EAAE,OAAO,EAAE;QAC3B,MAAM,OAAO,IAAI,CAAC,UAAU;QAC5B,MAAM,aAAa,IAAI,CAAC,UAAU;QAClC,MAAM,UAAU;YAAE,GAAG,IAAI,CAAC,OAAO;YAAE,GAAG,IAAI,CAAC,WAAW;YAAE,gBAAgB,IAAI,CAAC,cAAc;QAAC;QAC5F,4BAA4B;QAC5B,MAAM,OAAO,QAAQ,OAAO,KAAK,QAC3B,KAAK,yBAAyB,CAAC,WAC/B,KAAK,uBAAuB,CAAC;QACnC,6CAA6C;QAC7C,IAAK,IAAI,IAAI,GAAG,IAAI,WAAW,MAAM,EAAE,IAAK;YACxC,KAAK,GAAG,CAAC,UAAU,CAAC,EAAE;QAC1B;QACA,mBAAmB;QACnB,MAAM,SAAS,MAAM,KAAK,OAAO,CAAC;YAAE,GAAG,OAAO;YAAE;QAAQ;QACxD,OAAO;IACX;AACJ;AACA,QAAQ,kBAAkB,GAAG;AAC5B,CAAA,GAAG,YAAY,aAAa,AAAD,EAAG,oBAAoB;IAAC,YAAY,MAAM,CAAC,eAAe;CAAC,GACvF,sCAAsC"}},
    {"offset": {"line": 15498, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 15502, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/operations/insert.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InsertManyOperation = exports.InsertOneOperation = exports.InsertOperation = void 0;\nconst error_1 = require(\"../error\");\nconst write_concern_1 = require(\"../write_concern\");\nconst bulk_write_1 = require(\"./bulk_write\");\nconst command_1 = require(\"./command\");\nconst common_functions_1 = require(\"./common_functions\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass InsertOperation extends command_1.CommandOperation {\n    constructor(ns, documents, options) {\n        super(undefined, options);\n        this.options = { ...options, checkKeys: options.checkKeys ?? false };\n        this.ns = ns;\n        this.documents = documents;\n    }\n    async execute(server, session) {\n        const options = this.options ?? {};\n        const ordered = typeof options.ordered === 'boolean' ? options.ordered : true;\n        const command = {\n            insert: this.ns.collection,\n            documents: this.documents,\n            ordered\n        };\n        if (typeof options.bypassDocumentValidation === 'boolean') {\n            command.bypassDocumentValidation = options.bypassDocumentValidation;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (options.comment !== undefined) {\n            command.comment = options.comment;\n        }\n        return super.executeCommand(server, session, command);\n    }\n}\nexports.InsertOperation = InsertOperation;\nclass InsertOneOperation extends InsertOperation {\n    constructor(collection, doc, options) {\n        super(collection.s.namespace, (0, common_functions_1.prepareDocs)(collection, [doc], options), options);\n    }\n    async execute(server, session) {\n        const res = await super.execute(server, session);\n        if (res.code)\n            throw new error_1.MongoServerError(res);\n        if (res.writeErrors) {\n            // This should be a WriteError but we can't change it now because of error hierarchy\n            throw new error_1.MongoServerError(res.writeErrors[0]);\n        }\n        return {\n            acknowledged: this.writeConcern?.w !== 0,\n            insertedId: this.documents[0]._id\n        };\n    }\n}\nexports.InsertOneOperation = InsertOneOperation;\n/** @internal */\nclass InsertManyOperation extends operation_1.AbstractOperation {\n    constructor(collection, docs, options) {\n        super(options);\n        if (!Array.isArray(docs)) {\n            throw new error_1.MongoInvalidArgumentError('Argument \"docs\" must be an array of documents');\n        }\n        this.options = options;\n        this.collection = collection;\n        this.docs = docs;\n    }\n    async execute(server, session) {\n        const coll = this.collection;\n        const options = { ...this.options, ...this.bsonOptions, readPreference: this.readPreference };\n        const writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n        const bulkWriteOperation = new bulk_write_1.BulkWriteOperation(coll, (0, common_functions_1.prepareDocs)(coll, this.docs, options).map(document => ({ insertOne: { document } })), options);\n        try {\n            const res = await bulkWriteOperation.execute(server, session);\n            return {\n                acknowledged: writeConcern?.w !== 0,\n                insertedCount: res.insertedCount,\n                insertedIds: res.insertedIds\n            };\n        }\n        catch (err) {\n            if (err && err.message === 'Operation must be an object with an operation key') {\n                throw new error_1.MongoInvalidArgumentError('Collection.insertMany() cannot be called with an array that has null/undefined values');\n            }\n            throw err;\n        }\n    }\n}\nexports.InsertManyOperation = InsertManyOperation;\n(0, operation_1.defineAspects)(InsertOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(InsertOneOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(InsertManyOperation, [operation_1.Aspect.WRITE_OPERATION]);\n//# sourceMappingURL=insert.js.map"],"names":[],"mappings":"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"}},
    {"offset": {"line": 15613, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 15617, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/operations/indexes.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IndexInformationOperation = exports.IndexExistsOperation = exports.ListIndexesOperation = exports.DropIndexOperation = exports.EnsureIndexOperation = exports.CreateIndexOperation = exports.CreateIndexesOperation = exports.IndexesOperation = void 0;\nconst error_1 = require(\"../error\");\nconst read_preference_1 = require(\"../read_preference\");\nconst utils_1 = require(\"../utils\");\nconst command_1 = require(\"./command\");\nconst common_functions_1 = require(\"./common_functions\");\nconst operation_1 = require(\"./operation\");\nconst VALID_INDEX_OPTIONS = new Set([\n    'background',\n    'unique',\n    'name',\n    'partialFilterExpression',\n    'sparse',\n    'hidden',\n    'expireAfterSeconds',\n    'storageEngine',\n    'collation',\n    'version',\n    // text indexes\n    'weights',\n    'default_language',\n    'language_override',\n    'textIndexVersion',\n    // 2d-sphere indexes\n    '2dsphereIndexVersion',\n    // 2d indexes\n    'bits',\n    'min',\n    'max',\n    // geoHaystack Indexes\n    'bucketSize',\n    // wildcard indexes\n    'wildcardProjection'\n]);\nfunction isIndexDirection(x) {\n    return (typeof x === 'number' || x === '2d' || x === '2dsphere' || x === 'text' || x === 'geoHaystack');\n}\nfunction isSingleIndexTuple(t) {\n    return Array.isArray(t) && t.length === 2 && isIndexDirection(t[1]);\n}\nfunction makeIndexSpec(indexSpec, options) {\n    const key = new Map();\n    const indexSpecs = !Array.isArray(indexSpec) || isSingleIndexTuple(indexSpec) ? [indexSpec] : indexSpec;\n    // Iterate through array and handle different types\n    for (const spec of indexSpecs) {\n        if (typeof spec === 'string') {\n            key.set(spec, 1);\n        }\n        else if (Array.isArray(spec)) {\n            key.set(spec[0], spec[1] ?? 1);\n        }\n        else if (spec instanceof Map) {\n            for (const [property, value] of spec) {\n                key.set(property, value);\n            }\n        }\n        else if ((0, utils_1.isObject)(spec)) {\n            for (const [property, value] of Object.entries(spec)) {\n                key.set(property, value);\n            }\n        }\n    }\n    return { ...options, key };\n}\n/** @internal */\nclass IndexesOperation extends operation_1.AbstractOperation {\n    constructor(collection, options) {\n        super(options);\n        this.options = options;\n        this.collection = collection;\n    }\n    async execute(_server, session) {\n        const coll = this.collection;\n        const options = this.options;\n        return (0, common_functions_1.indexInformation)(coll.s.db, coll.collectionName, {\n            full: true,\n            ...options,\n            readPreference: this.readPreference,\n            session\n        });\n    }\n}\nexports.IndexesOperation = IndexesOperation;\n/** @internal */\nclass CreateIndexesOperation extends command_1.CommandOperation {\n    constructor(parent, collectionName, indexes, options) {\n        super(parent, options);\n        this.options = options ?? {};\n        this.collectionName = collectionName;\n        this.indexes = indexes.map(userIndex => {\n            // Ensure the key is a Map to preserve index key ordering\n            const key = userIndex.key instanceof Map ? userIndex.key : new Map(Object.entries(userIndex.key));\n            const name = userIndex.name != null ? userIndex.name : Array.from(key).flat().join('_');\n            const validIndexOptions = Object.fromEntries(Object.entries({ ...userIndex }).filter(([optionName]) => VALID_INDEX_OPTIONS.has(optionName)));\n            return {\n                ...validIndexOptions,\n                name,\n                key\n            };\n        });\n    }\n    async execute(server, session) {\n        const options = this.options;\n        const indexes = this.indexes;\n        const serverWireVersion = (0, utils_1.maxWireVersion)(server);\n        const cmd = { createIndexes: this.collectionName, indexes };\n        if (options.commitQuorum != null) {\n            if (serverWireVersion < 9) {\n                throw new error_1.MongoCompatibilityError('Option `commitQuorum` for `createIndexes` not supported on servers < 4.4');\n            }\n            cmd.commitQuorum = options.commitQuorum;\n        }\n        // collation is set on each index, it should not be defined at the root\n        this.options.collation = undefined;\n        await super.executeCommand(server, session, cmd);\n        const indexNames = indexes.map(index => index.name || '');\n        return indexNames;\n    }\n}\nexports.CreateIndexesOperation = CreateIndexesOperation;\n/** @internal */\nclass CreateIndexOperation extends CreateIndexesOperation {\n    constructor(parent, collectionName, indexSpec, options) {\n        super(parent, collectionName, [makeIndexSpec(indexSpec, options)], options);\n    }\n    async execute(server, session) {\n        const indexNames = await super.execute(server, session);\n        return indexNames[0];\n    }\n}\nexports.CreateIndexOperation = CreateIndexOperation;\n/** @internal */\nclass EnsureIndexOperation extends CreateIndexOperation {\n    constructor(db, collectionName, indexSpec, options) {\n        super(db, collectionName, indexSpec, options);\n        this.readPreference = read_preference_1.ReadPreference.primary;\n        this.db = db;\n        this.collectionName = collectionName;\n    }\n    async execute(server, session) {\n        const indexName = this.indexes[0].name;\n        const indexes = await this.db\n            .collection(this.collectionName)\n            .listIndexes({ session })\n            .toArray()\n            .catch(error => {\n            if (error instanceof error_1.MongoError && error.code === error_1.MONGODB_ERROR_CODES.NamespaceNotFound)\n                return [];\n            throw error;\n        });\n        if (indexName && indexes.some(index => index.name === indexName))\n            return indexName;\n        return super.execute(server, session);\n    }\n}\nexports.EnsureIndexOperation = EnsureIndexOperation;\n/** @internal */\nclass DropIndexOperation extends command_1.CommandOperation {\n    constructor(collection, indexName, options) {\n        super(collection, options);\n        this.options = options ?? {};\n        this.collection = collection;\n        this.indexName = indexName;\n    }\n    async execute(server, session) {\n        const cmd = { dropIndexes: this.collection.collectionName, index: this.indexName };\n        return super.executeCommand(server, session, cmd);\n    }\n}\nexports.DropIndexOperation = DropIndexOperation;\n/** @internal */\nclass ListIndexesOperation extends command_1.CommandOperation {\n    constructor(collection, options) {\n        super(collection, options);\n        this.options = { ...options };\n        delete this.options.writeConcern;\n        this.collectionNamespace = collection.s.namespace;\n    }\n    async execute(server, session) {\n        const serverWireVersion = (0, utils_1.maxWireVersion)(server);\n        const cursor = this.options.batchSize ? { batchSize: this.options.batchSize } : {};\n        const command = { listIndexes: this.collectionNamespace.collection, cursor };\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (serverWireVersion >= 9 && this.options.comment !== undefined) {\n            command.comment = this.options.comment;\n        }\n        return super.executeCommand(server, session, command);\n    }\n}\nexports.ListIndexesOperation = ListIndexesOperation;\n/** @internal */\nclass IndexExistsOperation extends operation_1.AbstractOperation {\n    constructor(collection, indexes, options) {\n        super(options);\n        this.options = options;\n        this.collection = collection;\n        this.indexes = indexes;\n    }\n    async execute(server, session) {\n        const coll = this.collection;\n        const indexes = this.indexes;\n        const info = await (0, common_functions_1.indexInformation)(coll.s.db, coll.collectionName, {\n            ...this.options,\n            readPreference: this.readPreference,\n            session\n        });\n        // Let's check for the index names\n        if (!Array.isArray(indexes))\n            return info[indexes] != null;\n        // All keys found return true\n        return indexes.every(indexName => info[indexName] != null);\n    }\n}\nexports.IndexExistsOperation = IndexExistsOperation;\n/** @internal */\nclass IndexInformationOperation extends operation_1.AbstractOperation {\n    constructor(db, name, options) {\n        super(options);\n        this.options = options ?? {};\n        this.db = db;\n        this.name = name;\n    }\n    async execute(server, session) {\n        const db = this.db;\n        const name = this.name;\n        return (0, common_functions_1.indexInformation)(db, name, {\n            ...this.options,\n            readPreference: this.readPreference,\n            session\n        });\n    }\n}\nexports.IndexInformationOperation = IndexInformationOperation;\n(0, operation_1.defineAspects)(ListIndexesOperation, [\n    operation_1.Aspect.READ_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.CURSOR_CREATING\n]);\n(0, operation_1.defineAspects)(CreateIndexesOperation, [operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(CreateIndexOperation, [operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(EnsureIndexOperation, [operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(DropIndexOperation, [operation_1.Aspect.WRITE_OPERATION]);\n//# sourceMappingURL=indexes.js.map"],"names":[],"mappings":"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"}},
    {"offset": {"line": 15878, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 15882, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/operations/estimated_document_count.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EstimatedDocumentCountOperation = void 0;\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass EstimatedDocumentCountOperation extends command_1.CommandOperation {\n    constructor(collection, options = {}) {\n        super(collection, options);\n        this.options = options;\n        this.collectionName = collection.collectionName;\n    }\n    async execute(server, session) {\n        const cmd = { count: this.collectionName };\n        if (typeof this.options.maxTimeMS === 'number') {\n            cmd.maxTimeMS = this.options.maxTimeMS;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (this.options.comment !== undefined) {\n            cmd.comment = this.options.comment;\n        }\n        const response = await super.executeCommand(server, session, cmd);\n        return response?.n || 0;\n    }\n}\nexports.EstimatedDocumentCountOperation = EstimatedDocumentCountOperation;\n(0, operation_1.defineAspects)(EstimatedDocumentCountOperation, [\n    operation_1.Aspect.READ_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.CURSOR_CREATING\n]);\n//# sourceMappingURL=estimated_document_count.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,+BAA+B,GAAG,KAAK;AAC/C,MAAM,YAAY;AAClB,MAAM,cAAc;AACpB,cAAc,GACd,MAAM,wCAAwC,UAAU,gBAAgB;IACpE,YAAY,UAAU,EAAE,UAAU,CAAC,CAAC,CAAE;QAClC,KAAK,CAAC,YAAY;QAClB,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,cAAc,GAAG,WAAW,cAAc;IACnD;IACA,MAAM,QAAQ,MAAM,EAAE,OAAO,EAAE;QAC3B,MAAM,MAAM;YAAE,OAAO,IAAI,CAAC,cAAc;QAAC;QACzC,IAAI,OAAO,IAAI,CAAC,OAAO,CAAC,SAAS,KAAK,UAAU;YAC5C,IAAI,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS;QAC1C;QACA,iEAAiE;QACjE,gDAAgD;QAChD,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,KAAK,WAAW;YACpC,IAAI,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO;QACtC;QACA,MAAM,WAAW,MAAM,KAAK,CAAC,eAAe,QAAQ,SAAS;QAC7D,OAAO,UAAU,KAAK;IAC1B;AACJ;AACA,QAAQ,+BAA+B,GAAG;AACzC,CAAA,GAAG,YAAY,aAAa,AAAD,EAAG,iCAAiC;IAC5D,YAAY,MAAM,CAAC,cAAc;IACjC,YAAY,MAAM,CAAC,SAAS;IAC5B,YAAY,MAAM,CAAC,eAAe;CACrC,GACD,oDAAoD"}},
    {"offset": {"line": 15917, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 15921, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/operations/drop.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DropDatabaseOperation = exports.DropCollectionOperation = void 0;\nconst error_1 = require(\"../error\");\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass DropCollectionOperation extends command_1.CommandOperation {\n    constructor(db, name, options = {}) {\n        super(db, options);\n        this.db = db;\n        this.options = options;\n        this.name = name;\n    }\n    async execute(server, session) {\n        const db = this.db;\n        const options = this.options;\n        const name = this.name;\n        const encryptedFieldsMap = db.client.options.autoEncryption?.encryptedFieldsMap;\n        let encryptedFields = options.encryptedFields ?? encryptedFieldsMap?.[`${db.databaseName}.${name}`];\n        if (!encryptedFields && encryptedFieldsMap) {\n            // If the MongoClient was configured with an encryptedFieldsMap,\n            // and no encryptedFields config was available in it or explicitly\n            // passed as an argument, the spec tells us to look one up using\n            // listCollections().\n            const listCollectionsResult = await db\n                .listCollections({ name }, { nameOnly: false })\n                .toArray();\n            encryptedFields = listCollectionsResult?.[0]?.options?.encryptedFields;\n        }\n        if (encryptedFields) {\n            const escCollection = encryptedFields.escCollection || `enxcol_.${name}.esc`;\n            const ecocCollection = encryptedFields.ecocCollection || `enxcol_.${name}.ecoc`;\n            for (const collectionName of [escCollection, ecocCollection]) {\n                // Drop auxilliary collections, ignoring potential NamespaceNotFound errors.\n                const dropOp = new DropCollectionOperation(db, collectionName);\n                try {\n                    await dropOp.executeWithoutEncryptedFieldsCheck(server, session);\n                }\n                catch (err) {\n                    if (!(err instanceof error_1.MongoServerError) ||\n                        err.code !== error_1.MONGODB_ERROR_CODES.NamespaceNotFound) {\n                        throw err;\n                    }\n                }\n            }\n        }\n        return this.executeWithoutEncryptedFieldsCheck(server, session);\n    }\n    async executeWithoutEncryptedFieldsCheck(server, session) {\n        await super.executeCommand(server, session, { drop: this.name });\n        return true;\n    }\n}\nexports.DropCollectionOperation = DropCollectionOperation;\n/** @internal */\nclass DropDatabaseOperation extends command_1.CommandOperation {\n    constructor(db, options) {\n        super(db, options);\n        this.options = options;\n    }\n    async execute(server, session) {\n        await super.executeCommand(server, session, { dropDatabase: 1 });\n        return true;\n    }\n}\nexports.DropDatabaseOperation = DropDatabaseOperation;\n(0, operation_1.defineAspects)(DropCollectionOperation, [operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(DropDatabaseOperation, [operation_1.Aspect.WRITE_OPERATION]);\n//# sourceMappingURL=drop.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,qBAAqB,GAAG,QAAQ,uBAAuB,GAAG,KAAK;AACvE,MAAM,UAAU;AAChB,MAAM,YAAY;AAClB,MAAM,cAAc;AACpB,cAAc,GACd,MAAM,gCAAgC,UAAU,gBAAgB;IAC5D,YAAY,EAAE,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC,CAAE;QAChC,KAAK,CAAC,IAAI;QACV,IAAI,CAAC,EAAE,GAAG;QACV,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,IAAI,GAAG;IAChB;IACA,MAAM,QAAQ,MAAM,EAAE,OAAO,EAAE;QAC3B,MAAM,KAAK,IAAI,CAAC,EAAE;QAClB,MAAM,UAAU,IAAI,CAAC,OAAO;QAC5B,MAAM,OAAO,IAAI,CAAC,IAAI;QACtB,MAAM,qBAAqB,GAAG,MAAM,CAAC,OAAO,CAAC,cAAc,EAAE;QAC7D,IAAI,kBAAkB,QAAQ,eAAe,IAAI,oBAAoB,CAAC,CAAC,EAAE,GAAG,YAAY,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;QACnG,IAAI,CAAC,mBAAmB,oBAAoB;YACxC,gEAAgE;YAChE,kEAAkE;YAClE,gEAAgE;YAChE,qBAAqB;YACrB,MAAM,wBAAwB,MAAM,GAC/B,eAAe,CAAC;gBAAE;YAAK,GAAG;gBAAE,UAAU;YAAM,GAC5C,OAAO;YACZ,kBAAkB,uBAAuB,CAAC,EAAE,EAAE,SAAS;QAC3D;QACA,IAAI,iBAAiB;YACjB,MAAM,gBAAgB,gBAAgB,aAAa,IAAI,CAAC,QAAQ,EAAE,KAAK,IAAI,CAAC;YAC5E,MAAM,iBAAiB,gBAAgB,cAAc,IAAI,CAAC,QAAQ,EAAE,KAAK,KAAK,CAAC;YAC/E,KAAK,MAAM,kBAAkB;gBAAC;gBAAe;aAAe,CAAE;gBAC1D,4EAA4E;gBAC5E,MAAM,SAAS,IAAI,wBAAwB,IAAI;gBAC/C,IAAI;oBACA,MAAM,OAAO,kCAAkC,CAAC,QAAQ;gBAC5D,EACA,OAAO,KAAK;oBACR,IAAI,CAAC,CAAC,eAAe,QAAQ,gBAAgB,KACzC,IAAI,IAAI,KAAK,QAAQ,mBAAmB,CAAC,iBAAiB,EAAE;wBAC5D,MAAM;oBACV;gBACJ;YACJ;QACJ;QACA,OAAO,IAAI,CAAC,kCAAkC,CAAC,QAAQ;IAC3D;IACA,MAAM,mCAAmC,MAAM,EAAE,OAAO,EAAE;QACtD,MAAM,KAAK,CAAC,eAAe,QAAQ,SAAS;YAAE,MAAM,IAAI,CAAC,IAAI;QAAC;QAC9D,OAAO;IACX;AACJ;AACA,QAAQ,uBAAuB,GAAG;AAClC,cAAc,GACd,MAAM,8BAA8B,UAAU,gBAAgB;IAC1D,YAAY,EAAE,EAAE,OAAO,CAAE;QACrB,KAAK,CAAC,IAAI;QACV,IAAI,CAAC,OAAO,GAAG;IACnB;IACA,MAAM,QAAQ,MAAM,EAAE,OAAO,EAAE;QAC3B,MAAM,KAAK,CAAC,eAAe,QAAQ,SAAS;YAAE,cAAc;QAAE;QAC9D,OAAO;IACX;AACJ;AACA,QAAQ,qBAAqB,GAAG;AAC/B,CAAA,GAAG,YAAY,aAAa,AAAD,EAAG,yBAAyB;IAAC,YAAY,MAAM,CAAC,eAAe;CAAC;AAC3F,CAAA,GAAG,YAAY,aAAa,AAAD,EAAG,uBAAuB;IAAC,YAAY,MAAM,CAAC,eAAe;CAAC,GAC1F,gCAAgC"}},
    {"offset": {"line": 16001, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 16005, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/operations/distinct.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DistinctOperation = void 0;\nconst utils_1 = require(\"../utils\");\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\n/**\n * Return a list of distinct values for the given key across a collection.\n * @internal\n */\nclass DistinctOperation extends command_1.CommandOperation {\n    /**\n     * Construct a Distinct operation.\n     *\n     * @param collection - Collection instance.\n     * @param key - Field of the document to find distinct values for.\n     * @param query - The query for filtering the set of documents to which we apply the distinct filter.\n     * @param options - Optional settings. See Collection.prototype.distinct for a list of options.\n     */\n    constructor(collection, key, query, options) {\n        super(collection, options);\n        this.options = options ?? {};\n        this.collection = collection;\n        this.key = key;\n        this.query = query;\n    }\n    async execute(server, session) {\n        const coll = this.collection;\n        const key = this.key;\n        const query = this.query;\n        const options = this.options;\n        // Distinct command\n        const cmd = {\n            distinct: coll.collectionName,\n            key: key,\n            query: query\n        };\n        // Add maxTimeMS if defined\n        if (typeof options.maxTimeMS === 'number') {\n            cmd.maxTimeMS = options.maxTimeMS;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (typeof options.comment !== 'undefined') {\n            cmd.comment = options.comment;\n        }\n        // Do we have a readConcern specified\n        (0, utils_1.decorateWithReadConcern)(cmd, coll, options);\n        // Have we specified collation\n        (0, utils_1.decorateWithCollation)(cmd, coll, options);\n        const result = await super.executeCommand(server, session, cmd);\n        return this.explain ? result : result.values;\n    }\n}\nexports.DistinctOperation = DistinctOperation;\n(0, operation_1.defineAspects)(DistinctOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE, operation_1.Aspect.EXPLAINABLE]);\n//# sourceMappingURL=distinct.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,iBAAiB,GAAG,KAAK;AACjC,MAAM,UAAU;AAChB,MAAM,YAAY;AAClB,MAAM,cAAc;AACpB;;;CAGC,GACD,MAAM,0BAA0B,UAAU,gBAAgB;IACtD;;;;;;;KAOC,GACD,YAAY,UAAU,EAAE,GAAG,EAAE,KAAK,EAAE,OAAO,CAAE;QACzC,KAAK,CAAC,YAAY;QAClB,IAAI,CAAC,OAAO,GAAG,WAAW,CAAC;QAC3B,IAAI,CAAC,UAAU,GAAG;QAClB,IAAI,CAAC,GAAG,GAAG;QACX,IAAI,CAAC,KAAK,GAAG;IACjB;IACA,MAAM,QAAQ,MAAM,EAAE,OAAO,EAAE;QAC3B,MAAM,OAAO,IAAI,CAAC,UAAU;QAC5B,MAAM,MAAM,IAAI,CAAC,GAAG;QACpB,MAAM,QAAQ,IAAI,CAAC,KAAK;QACxB,MAAM,UAAU,IAAI,CAAC,OAAO;QAC5B,mBAAmB;QACnB,MAAM,MAAM;YACR,UAAU,KAAK,cAAc;YAC7B,KAAK;YACL,OAAO;QACX;QACA,2BAA2B;QAC3B,IAAI,OAAO,QAAQ,SAAS,KAAK,UAAU;YACvC,IAAI,SAAS,GAAG,QAAQ,SAAS;QACrC;QACA,iEAAiE;QACjE,gDAAgD;QAChD,IAAI,OAAO,QAAQ,OAAO,KAAK,aAAa;YACxC,IAAI,OAAO,GAAG,QAAQ,OAAO;QACjC;QACA,qCAAqC;QACpC,CAAA,GAAG,QAAQ,uBAAuB,AAAD,EAAG,KAAK,MAAM;QAChD,8BAA8B;QAC7B,CAAA,GAAG,QAAQ,qBAAqB,AAAD,EAAG,KAAK,MAAM;QAC9C,MAAM,SAAS,MAAM,KAAK,CAAC,eAAe,QAAQ,SAAS;QAC3D,OAAO,IAAI,CAAC,OAAO,GAAG,SAAS,OAAO,MAAM;IAChD;AACJ;AACA,QAAQ,iBAAiB,GAAG;AAC3B,CAAA,GAAG,YAAY,aAAa,AAAD,EAAG,mBAAmB;IAAC,YAAY,MAAM,CAAC,cAAc;IAAE,YAAY,MAAM,CAAC,SAAS;IAAE,YAAY,MAAM,CAAC,WAAW;CAAC,GACnJ,oCAAoC"}},
    {"offset": {"line": 16065, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 16069, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/operations/delete.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.makeDeleteStatement = exports.DeleteManyOperation = exports.DeleteOneOperation = exports.DeleteOperation = void 0;\nconst error_1 = require(\"../error\");\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass DeleteOperation extends command_1.CommandOperation {\n    constructor(ns, statements, options) {\n        super(undefined, options);\n        this.options = options;\n        this.ns = ns;\n        this.statements = statements;\n    }\n    get canRetryWrite() {\n        if (super.canRetryWrite === false) {\n            return false;\n        }\n        return this.statements.every(op => (op.limit != null ? op.limit > 0 : true));\n    }\n    async execute(server, session) {\n        const options = this.options ?? {};\n        const ordered = typeof options.ordered === 'boolean' ? options.ordered : true;\n        const command = {\n            delete: this.ns.collection,\n            deletes: this.statements,\n            ordered\n        };\n        if (options.let) {\n            command.let = options.let;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (options.comment !== undefined) {\n            command.comment = options.comment;\n        }\n        const unacknowledgedWrite = this.writeConcern && this.writeConcern.w === 0;\n        if (unacknowledgedWrite) {\n            if (this.statements.find((o) => o.hint)) {\n                // TODO(NODE-3541): fix error for hint with unacknowledged writes\n                throw new error_1.MongoCompatibilityError(`hint is not supported with unacknowledged writes`);\n            }\n        }\n        return super.executeCommand(server, session, command);\n    }\n}\nexports.DeleteOperation = DeleteOperation;\nclass DeleteOneOperation extends DeleteOperation {\n    constructor(collection, filter, options) {\n        super(collection.s.namespace, [makeDeleteStatement(filter, { ...options, limit: 1 })], options);\n    }\n    async execute(server, session) {\n        const res = (await super.execute(server, session));\n        if (this.explain)\n            return res;\n        if (res.code)\n            throw new error_1.MongoServerError(res);\n        if (res.writeErrors)\n            throw new error_1.MongoServerError(res.writeErrors[0]);\n        return {\n            acknowledged: this.writeConcern?.w !== 0,\n            deletedCount: res.n\n        };\n    }\n}\nexports.DeleteOneOperation = DeleteOneOperation;\nclass DeleteManyOperation extends DeleteOperation {\n    constructor(collection, filter, options) {\n        super(collection.s.namespace, [makeDeleteStatement(filter, options)], options);\n    }\n    async execute(server, session) {\n        const res = (await super.execute(server, session));\n        if (this.explain)\n            return res;\n        if (res.code)\n            throw new error_1.MongoServerError(res);\n        if (res.writeErrors)\n            throw new error_1.MongoServerError(res.writeErrors[0]);\n        return {\n            acknowledged: this.writeConcern?.w !== 0,\n            deletedCount: res.n\n        };\n    }\n}\nexports.DeleteManyOperation = DeleteManyOperation;\nfunction makeDeleteStatement(filter, options) {\n    const op = {\n        q: filter,\n        limit: typeof options.limit === 'number' ? options.limit : 0\n    };\n    if (options.collation) {\n        op.collation = options.collation;\n    }\n    if (options.hint) {\n        op.hint = options.hint;\n    }\n    return op;\n}\nexports.makeDeleteStatement = makeDeleteStatement;\n(0, operation_1.defineAspects)(DeleteOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(DeleteOneOperation, [\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.EXPLAINABLE,\n    operation_1.Aspect.SKIP_COLLATION\n]);\n(0, operation_1.defineAspects)(DeleteManyOperation, [\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.EXPLAINABLE,\n    operation_1.Aspect.SKIP_COLLATION\n]);\n//# sourceMappingURL=delete.js.map"],"names":[],"mappings":"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"}},
    {"offset": {"line": 16185, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 16189, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/operations/aggregate.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AggregateOperation = exports.DB_AGGREGATE_COLLECTION = void 0;\nconst error_1 = require(\"../error\");\nconst utils_1 = require(\"../utils\");\nconst write_concern_1 = require(\"../write_concern\");\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nexports.DB_AGGREGATE_COLLECTION = 1;\nconst MIN_WIRE_VERSION_$OUT_READ_CONCERN_SUPPORT = 8;\n/** @internal */\nclass AggregateOperation extends command_1.CommandOperation {\n    constructor(ns, pipeline, options) {\n        super(undefined, { ...options, dbName: ns.db });\n        this.options = { ...options };\n        // Covers when ns.collection is null, undefined or the empty string, use DB_AGGREGATE_COLLECTION\n        this.target = ns.collection || exports.DB_AGGREGATE_COLLECTION;\n        this.pipeline = pipeline;\n        // determine if we have a write stage, override read preference if so\n        this.hasWriteStage = false;\n        if (typeof options?.out === 'string') {\n            this.pipeline = this.pipeline.concat({ $out: options.out });\n            this.hasWriteStage = true;\n        }\n        else if (pipeline.length > 0) {\n            const finalStage = pipeline[pipeline.length - 1];\n            if (finalStage.$out || finalStage.$merge) {\n                this.hasWriteStage = true;\n            }\n        }\n        if (this.hasWriteStage) {\n            this.trySecondaryWrite = true;\n        }\n        else {\n            delete this.options.writeConcern;\n        }\n        if (this.explain && this.writeConcern) {\n            throw new error_1.MongoInvalidArgumentError('Option \"explain\" cannot be used on an aggregate call with writeConcern');\n        }\n        if (options?.cursor != null && typeof options.cursor !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Cursor options must be an object');\n        }\n    }\n    get canRetryRead() {\n        return !this.hasWriteStage;\n    }\n    addToPipeline(stage) {\n        this.pipeline.push(stage);\n    }\n    async execute(server, session) {\n        const options = this.options;\n        const serverWireVersion = (0, utils_1.maxWireVersion)(server);\n        const command = { aggregate: this.target, pipeline: this.pipeline };\n        if (this.hasWriteStage && serverWireVersion < MIN_WIRE_VERSION_$OUT_READ_CONCERN_SUPPORT) {\n            this.readConcern = undefined;\n        }\n        if (this.hasWriteStage && this.writeConcern) {\n            write_concern_1.WriteConcern.apply(command, this.writeConcern);\n        }\n        if (options.bypassDocumentValidation === true) {\n            command.bypassDocumentValidation = options.bypassDocumentValidation;\n        }\n        if (typeof options.allowDiskUse === 'boolean') {\n            command.allowDiskUse = options.allowDiskUse;\n        }\n        if (options.hint) {\n            command.hint = options.hint;\n        }\n        if (options.let) {\n            command.let = options.let;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (options.comment !== undefined) {\n            command.comment = options.comment;\n        }\n        command.cursor = options.cursor || {};\n        if (options.batchSize && !this.hasWriteStage) {\n            command.cursor.batchSize = options.batchSize;\n        }\n        return super.executeCommand(server, session, command);\n    }\n}\nexports.AggregateOperation = AggregateOperation;\n(0, operation_1.defineAspects)(AggregateOperation, [\n    operation_1.Aspect.READ_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.EXPLAINABLE,\n    operation_1.Aspect.CURSOR_CREATING\n]);\n//# sourceMappingURL=aggregate.js.map"],"names":[],"mappings":"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"}},
    {"offset": {"line": 16288, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 16292, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/operations/count_documents.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CountDocumentsOperation = void 0;\nconst aggregate_1 = require(\"./aggregate\");\n/** @internal */\nclass CountDocumentsOperation extends aggregate_1.AggregateOperation {\n    constructor(collection, query, options) {\n        const pipeline = [];\n        pipeline.push({ $match: query });\n        if (typeof options.skip === 'number') {\n            pipeline.push({ $skip: options.skip });\n        }\n        if (typeof options.limit === 'number') {\n            pipeline.push({ $limit: options.limit });\n        }\n        pipeline.push({ $group: { _id: 1, n: { $sum: 1 } } });\n        super(collection.s.namespace, pipeline, options);\n    }\n    async execute(server, session) {\n        const result = await super.execute(server, session);\n        // NOTE: We're avoiding creating a cursor here to reduce the callstack.\n        const response = result;\n        if (response.cursor == null || response.cursor.firstBatch == null) {\n            return 0;\n        }\n        const docs = response.cursor.firstBatch;\n        return docs.length ? docs[0].n : 0;\n    }\n}\nexports.CountDocumentsOperation = CountDocumentsOperation;\n//# sourceMappingURL=count_documents.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,uBAAuB,GAAG,KAAK;AACvC,MAAM,cAAc;AACpB,cAAc,GACd,MAAM,gCAAgC,YAAY,kBAAkB;IAChE,YAAY,UAAU,EAAE,KAAK,EAAE,OAAO,CAAE;QACpC,MAAM,WAAW,EAAE;QACnB,SAAS,IAAI,CAAC;YAAE,QAAQ;QAAM;QAC9B,IAAI,OAAO,QAAQ,IAAI,KAAK,UAAU;YAClC,SAAS,IAAI,CAAC;gBAAE,OAAO,QAAQ,IAAI;YAAC;QACxC;QACA,IAAI,OAAO,QAAQ,KAAK,KAAK,UAAU;YACnC,SAAS,IAAI,CAAC;gBAAE,QAAQ,QAAQ,KAAK;YAAC;QAC1C;QACA,SAAS,IAAI,CAAC;YAAE,QAAQ;gBAAE,KAAK;gBAAG,GAAG;oBAAE,MAAM;gBAAE;YAAE;QAAE;QACnD,KAAK,CAAC,WAAW,CAAC,CAAC,SAAS,EAAE,UAAU;IAC5C;IACA,MAAM,QAAQ,MAAM,EAAE,OAAO,EAAE;QAC3B,MAAM,SAAS,MAAM,KAAK,CAAC,QAAQ,QAAQ;QAC3C,uEAAuE;QACvE,MAAM,WAAW;QACjB,IAAI,SAAS,MAAM,IAAI,QAAQ,SAAS,MAAM,CAAC,UAAU,IAAI,MAAM;YAC/D,OAAO;QACX;QACA,MAAM,OAAO,SAAS,MAAM,CAAC,UAAU;QACvC,OAAO,KAAK,MAAM,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG;IACrC;AACJ;AACA,QAAQ,uBAAuB,GAAG,yBAClC,2CAA2C"}},
    {"offset": {"line": 16336, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 16340, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/operations/count.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CountOperation = void 0;\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass CountOperation extends command_1.CommandOperation {\n    constructor(namespace, filter, options) {\n        super({ s: { namespace: namespace } }, options);\n        this.options = options;\n        this.collectionName = namespace.collection;\n        this.query = filter;\n    }\n    async execute(server, session) {\n        const options = this.options;\n        const cmd = {\n            count: this.collectionName,\n            query: this.query\n        };\n        if (typeof options.limit === 'number') {\n            cmd.limit = options.limit;\n        }\n        if (typeof options.skip === 'number') {\n            cmd.skip = options.skip;\n        }\n        if (options.hint != null) {\n            cmd.hint = options.hint;\n        }\n        if (typeof options.maxTimeMS === 'number') {\n            cmd.maxTimeMS = options.maxTimeMS;\n        }\n        const result = await super.executeCommand(server, session, cmd);\n        return result ? result.n : 0;\n    }\n}\nexports.CountOperation = CountOperation;\n(0, operation_1.defineAspects)(CountOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE]);\n//# sourceMappingURL=count.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,cAAc,GAAG,KAAK;AAC9B,MAAM,YAAY;AAClB,MAAM,cAAc;AACpB,cAAc,GACd,MAAM,uBAAuB,UAAU,gBAAgB;IACnD,YAAY,SAAS,EAAE,MAAM,EAAE,OAAO,CAAE;QACpC,KAAK,CAAC;YAAE,GAAG;gBAAE,WAAW;YAAU;QAAE,GAAG;QACvC,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,cAAc,GAAG,UAAU,UAAU;QAC1C,IAAI,CAAC,KAAK,GAAG;IACjB;IACA,MAAM,QAAQ,MAAM,EAAE,OAAO,EAAE;QAC3B,MAAM,UAAU,IAAI,CAAC,OAAO;QAC5B,MAAM,MAAM;YACR,OAAO,IAAI,CAAC,cAAc;YAC1B,OAAO,IAAI,CAAC,KAAK;QACrB;QACA,IAAI,OAAO,QAAQ,KAAK,KAAK,UAAU;YACnC,IAAI,KAAK,GAAG,QAAQ,KAAK;QAC7B;QACA,IAAI,OAAO,QAAQ,IAAI,KAAK,UAAU;YAClC,IAAI,IAAI,GAAG,QAAQ,IAAI;QAC3B;QACA,IAAI,QAAQ,IAAI,IAAI,MAAM;YACtB,IAAI,IAAI,GAAG,QAAQ,IAAI;QAC3B;QACA,IAAI,OAAO,QAAQ,SAAS,KAAK,UAAU;YACvC,IAAI,SAAS,GAAG,QAAQ,SAAS;QACrC;QACA,MAAM,SAAS,MAAM,KAAK,CAAC,eAAe,QAAQ,SAAS;QAC3D,OAAO,SAAS,OAAO,CAAC,GAAG;IAC/B;AACJ;AACA,QAAQ,cAAc,GAAG;AACxB,CAAA,GAAG,YAAY,aAAa,AAAD,EAAG,gBAAgB;IAAC,YAAY,MAAM,CAAC,cAAc;IAAE,YAAY,MAAM,CAAC,SAAS;CAAC,GAChH,iCAAiC"}},
    {"offset": {"line": 16385, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 16389, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/operations/kill_cursors.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KillCursorsOperation = void 0;\nconst error_1 = require(\"../error\");\nconst operation_1 = require(\"./operation\");\nclass KillCursorsOperation extends operation_1.AbstractOperation {\n    constructor(cursorId, ns, server, options) {\n        super(options);\n        this.ns = ns;\n        this.cursorId = cursorId;\n        this.server = server;\n    }\n    async execute(server, session) {\n        if (server !== this.server) {\n            throw new error_1.MongoRuntimeError('Killcursor must run on the same server operation began on');\n        }\n        const killCursors = this.ns.collection;\n        if (killCursors == null) {\n            // Cursors should have adopted the namespace returned by MongoDB\n            // which should always defined a collection name (even a pseudo one, ex. db.aggregate())\n            throw new error_1.MongoRuntimeError('A collection name must be determined before killCursors');\n        }\n        const killCursorsCommand = {\n            killCursors,\n            cursors: [this.cursorId]\n        };\n        try {\n            await server.commandAsync(this.ns, killCursorsCommand, { session });\n        }\n        catch {\n            // The driver should never emit errors from killCursors, this is spec-ed behavior\n        }\n    }\n}\nexports.KillCursorsOperation = KillCursorsOperation;\n(0, operation_1.defineAspects)(KillCursorsOperation, [operation_1.Aspect.MUST_SELECT_SAME_SERVER]);\n//# sourceMappingURL=kill_cursors.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,oBAAoB,GAAG,KAAK;AACpC,MAAM,UAAU;AAChB,MAAM,cAAc;AACpB,MAAM,6BAA6B,YAAY,iBAAiB;IAC5D,YAAY,QAAQ,EAAE,EAAE,EAAE,MAAM,EAAE,OAAO,CAAE;QACvC,KAAK,CAAC;QACN,IAAI,CAAC,EAAE,GAAG;QACV,IAAI,CAAC,QAAQ,GAAG;QAChB,IAAI,CAAC,MAAM,GAAG;IAClB;IACA,MAAM,QAAQ,MAAM,EAAE,OAAO,EAAE;QAC3B,IAAI,WAAW,IAAI,CAAC,MAAM,EAAE;YACxB,MAAM,IAAI,QAAQ,iBAAiB,CAAC;QACxC;QACA,MAAM,cAAc,IAAI,CAAC,EAAE,CAAC,UAAU;QACtC,IAAI,eAAe,MAAM;YACrB,gEAAgE;YAChE,wFAAwF;YACxF,MAAM,IAAI,QAAQ,iBAAiB,CAAC;QACxC;QACA,MAAM,qBAAqB;YACvB;YACA,SAAS;gBAAC,IAAI,CAAC,QAAQ;aAAC;QAC5B;QACA,IAAI;YACA,MAAM,OAAO,YAAY,CAAC,IAAI,CAAC,EAAE,EAAE,oBAAoB;gBAAE;YAAQ;QACrE,EACA,OAAM;QACF,iFAAiF;QACrF;IACJ;AACJ;AACA,QAAQ,oBAAoB,GAAG;AAC9B,CAAA,GAAG,YAAY,aAAa,AAAD,EAAG,sBAAsB;IAAC,YAAY,MAAM,CAAC,uBAAuB;CAAC,GACjG,wCAAwC"}},
    {"offset": {"line": 16432, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 16436, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/operations/get_more.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetMoreOperation = void 0;\nconst error_1 = require(\"../error\");\nconst utils_1 = require(\"../utils\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass GetMoreOperation extends operation_1.AbstractOperation {\n    constructor(ns, cursorId, server, options) {\n        super(options);\n        this.options = options;\n        this.ns = ns;\n        this.cursorId = cursorId;\n        this.server = server;\n    }\n    /**\n     * Although there is a server already associated with the get more operation, the signature\n     * for execute passes a server so we will just use that one.\n     */\n    async execute(server, _session) {\n        if (server !== this.server) {\n            throw new error_1.MongoRuntimeError('Getmore must run on the same server operation began on');\n        }\n        if (this.cursorId == null || this.cursorId.isZero()) {\n            throw new error_1.MongoRuntimeError('Unable to iterate cursor with no id');\n        }\n        const collection = this.ns.collection;\n        if (collection == null) {\n            // Cursors should have adopted the namespace returned by MongoDB\n            // which should always defined a collection name (even a pseudo one, ex. db.aggregate())\n            throw new error_1.MongoRuntimeError('A collection name must be determined before getMore');\n        }\n        const getMoreCmd = {\n            getMore: this.cursorId,\n            collection\n        };\n        if (typeof this.options.batchSize === 'number') {\n            getMoreCmd.batchSize = Math.abs(this.options.batchSize);\n        }\n        if (typeof this.options.maxAwaitTimeMS === 'number') {\n            getMoreCmd.maxTimeMS = this.options.maxAwaitTimeMS;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (this.options.comment !== undefined && (0, utils_1.maxWireVersion)(server) >= 9) {\n            getMoreCmd.comment = this.options.comment;\n        }\n        const commandOptions = {\n            returnFieldSelector: null,\n            documentsReturnedIn: 'nextBatch',\n            ...this.options\n        };\n        return server.commandAsync(this.ns, getMoreCmd, commandOptions);\n    }\n}\nexports.GetMoreOperation = GetMoreOperation;\n(0, operation_1.defineAspects)(GetMoreOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.MUST_SELECT_SAME_SERVER]);\n//# sourceMappingURL=get_more.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,gBAAgB,GAAG,KAAK;AAChC,MAAM,UAAU;AAChB,MAAM,UAAU;AAChB,MAAM,cAAc;AACpB,cAAc,GACd,MAAM,yBAAyB,YAAY,iBAAiB;IACxD,YAAY,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,CAAE;QACvC,KAAK,CAAC;QACN,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,EAAE,GAAG;QACV,IAAI,CAAC,QAAQ,GAAG;QAChB,IAAI,CAAC,MAAM,GAAG;IAClB;IACA;;;KAGC,GACD,MAAM,QAAQ,MAAM,EAAE,QAAQ,EAAE;QAC5B,IAAI,WAAW,IAAI,CAAC,MAAM,EAAE;YACxB,MAAM,IAAI,QAAQ,iBAAiB,CAAC;QACxC;QACA,IAAI,IAAI,CAAC,QAAQ,IAAI,QAAQ,IAAI,CAAC,QAAQ,CAAC,MAAM,IAAI;YACjD,MAAM,IAAI,QAAQ,iBAAiB,CAAC;QACxC;QACA,MAAM,aAAa,IAAI,CAAC,EAAE,CAAC,UAAU;QACrC,IAAI,cAAc,MAAM;YACpB,gEAAgE;YAChE,wFAAwF;YACxF,MAAM,IAAI,QAAQ,iBAAiB,CAAC;QACxC;QACA,MAAM,aAAa;YACf,SAAS,IAAI,CAAC,QAAQ;YACtB;QACJ;QACA,IAAI,OAAO,IAAI,CAAC,OAAO,CAAC,SAAS,KAAK,UAAU;YAC5C,WAAW,SAAS,GAAG,KAAK,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS;QAC1D;QACA,IAAI,OAAO,IAAI,CAAC,OAAO,CAAC,cAAc,KAAK,UAAU;YACjD,WAAW,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,cAAc;QACtD;QACA,iEAAiE;QACjE,gDAAgD;QAChD,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,KAAK,aAAa,AAAC,CAAA,GAAG,QAAQ,cAAc,AAAD,EAAG,WAAW,GAAG;YAChF,WAAW,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO;QAC7C;QACA,MAAM,iBAAiB;YACnB,qBAAqB;YACrB,qBAAqB;YACrB,GAAG,IAAI,CAAC,OAAO;QACnB;QACA,OAAO,OAAO,YAAY,CAAC,IAAI,CAAC,EAAE,EAAE,YAAY;IACpD;AACJ;AACA,QAAQ,gBAAgB,GAAG;AAC1B,CAAA,GAAG,YAAY,aAAa,AAAD,EAAG,kBAAkB;IAAC,YAAY,MAAM,CAAC,cAAc;IAAE,YAAY,MAAM,CAAC,uBAAuB;CAAC,GAChI,oCAAoC"}},
    {"offset": {"line": 16496, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 16500, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/cursor/abstract_cursor.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.assertUninitialized = exports.AbstractCursor = exports.CURSOR_FLAGS = void 0;\nconst stream_1 = require(\"stream\");\nconst bson_1 = require(\"../bson\");\nconst error_1 = require(\"../error\");\nconst mongo_types_1 = require(\"../mongo_types\");\nconst execute_operation_1 = require(\"../operations/execute_operation\");\nconst get_more_1 = require(\"../operations/get_more\");\nconst kill_cursors_1 = require(\"../operations/kill_cursors\");\nconst read_concern_1 = require(\"../read_concern\");\nconst read_preference_1 = require(\"../read_preference\");\nconst sessions_1 = require(\"../sessions\");\nconst utils_1 = require(\"../utils\");\n/** @internal */\nconst kId = Symbol('id');\n/** @internal */\nconst kDocuments = Symbol('documents');\n/** @internal */\nconst kServer = Symbol('server');\n/** @internal */\nconst kNamespace = Symbol('namespace');\n/** @internal */\nconst kClient = Symbol('client');\n/** @internal */\nconst kSession = Symbol('session');\n/** @internal */\nconst kOptions = Symbol('options');\n/** @internal */\nconst kTransform = Symbol('transform');\n/** @internal */\nconst kInitialized = Symbol('initialized');\n/** @internal */\nconst kClosed = Symbol('closed');\n/** @internal */\nconst kKilled = Symbol('killed');\n/** @internal */\nconst kInit = Symbol('kInit');\n/** @public */\nexports.CURSOR_FLAGS = [\n    'tailable',\n    'oplogReplay',\n    'noCursorTimeout',\n    'awaitData',\n    'exhaust',\n    'partial'\n];\n/** @public */\nclass AbstractCursor extends mongo_types_1.TypedEventEmitter {\n    /** @internal */\n    constructor(client, namespace, options = {}) {\n        super();\n        if (!client.s.isMongoClient) {\n            throw new error_1.MongoRuntimeError('Cursor must be constructed with MongoClient');\n        }\n        this[kClient] = client;\n        this[kNamespace] = namespace;\n        this[kId] = null;\n        this[kDocuments] = new utils_1.List();\n        this[kInitialized] = false;\n        this[kClosed] = false;\n        this[kKilled] = false;\n        this[kOptions] = {\n            readPreference: options.readPreference && options.readPreference instanceof read_preference_1.ReadPreference\n                ? options.readPreference\n                : read_preference_1.ReadPreference.primary,\n            ...(0, bson_1.pluckBSONSerializeOptions)(options)\n        };\n        const readConcern = read_concern_1.ReadConcern.fromOptions(options);\n        if (readConcern) {\n            this[kOptions].readConcern = readConcern;\n        }\n        if (typeof options.batchSize === 'number') {\n            this[kOptions].batchSize = options.batchSize;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (options.comment !== undefined) {\n            this[kOptions].comment = options.comment;\n        }\n        if (typeof options.maxTimeMS === 'number') {\n            this[kOptions].maxTimeMS = options.maxTimeMS;\n        }\n        if (typeof options.maxAwaitTimeMS === 'number') {\n            this[kOptions].maxAwaitTimeMS = options.maxAwaitTimeMS;\n        }\n        if (options.session instanceof sessions_1.ClientSession) {\n            this[kSession] = options.session;\n        }\n        else {\n            this[kSession] = this[kClient].startSession({ owner: this, explicit: false });\n        }\n    }\n    get id() {\n        return this[kId] ?? undefined;\n    }\n    /** @internal */\n    get isDead() {\n        return (this[kId]?.isZero() ?? false) || this[kClosed] || this[kKilled];\n    }\n    /** @internal */\n    get client() {\n        return this[kClient];\n    }\n    /** @internal */\n    get server() {\n        return this[kServer];\n    }\n    get namespace() {\n        return this[kNamespace];\n    }\n    get readPreference() {\n        return this[kOptions].readPreference;\n    }\n    get readConcern() {\n        return this[kOptions].readConcern;\n    }\n    /** @internal */\n    get session() {\n        return this[kSession];\n    }\n    set session(clientSession) {\n        this[kSession] = clientSession;\n    }\n    /** @internal */\n    get cursorOptions() {\n        return this[kOptions];\n    }\n    get closed() {\n        return this[kClosed];\n    }\n    get killed() {\n        return this[kKilled];\n    }\n    get loadBalanced() {\n        return !!this[kClient].topology?.loadBalanced;\n    }\n    /** Returns current buffered documents length */\n    bufferedCount() {\n        return this[kDocuments].length;\n    }\n    /** Returns current buffered documents */\n    readBufferedDocuments(number) {\n        const bufferedDocs = [];\n        const documentsToRead = Math.min(number ?? this[kDocuments].length, this[kDocuments].length);\n        for (let count = 0; count < documentsToRead; count++) {\n            const document = this[kDocuments].shift();\n            if (document != null) {\n                bufferedDocs.push(document);\n            }\n        }\n        return bufferedDocs;\n    }\n    async *[Symbol.asyncIterator]() {\n        if (this.closed) {\n            return;\n        }\n        try {\n            while (true) {\n                const document = await this.next();\n                // Intentional strict null check, because users can map cursors to falsey values.\n                // We allow mapping to all values except for null.\n                // eslint-disable-next-line no-restricted-syntax\n                if (document === null) {\n                    if (!this.closed) {\n                        const message = 'Cursor returned a `null` document, but the cursor is not exhausted.  Mapping documents to `null` is not supported in the cursor transform.';\n                        await cleanupCursor(this, { needsToEmitClosed: true }).catch(() => null);\n                        throw new error_1.MongoAPIError(message);\n                    }\n                    break;\n                }\n                yield document;\n                if (this[kId] === bson_1.Long.ZERO) {\n                    // Cursor exhausted\n                    break;\n                }\n            }\n        }\n        finally {\n            // Only close the cursor if it has not already been closed. This finally clause handles\n            // the case when a user would break out of a for await of loop early.\n            if (!this.closed) {\n                await this.close().catch(() => null);\n            }\n        }\n    }\n    stream(options) {\n        if (options?.transform) {\n            const transform = options.transform;\n            const readable = new ReadableCursorStream(this);\n            return readable.pipe(new stream_1.Transform({\n                objectMode: true,\n                highWaterMark: 1,\n                transform(chunk, _, callback) {\n                    try {\n                        const transformed = transform(chunk);\n                        callback(undefined, transformed);\n                    }\n                    catch (err) {\n                        callback(err);\n                    }\n                }\n            }));\n        }\n        return new ReadableCursorStream(this);\n    }\n    async hasNext() {\n        if (this[kId] === bson_1.Long.ZERO) {\n            return false;\n        }\n        if (this[kDocuments].length !== 0) {\n            return true;\n        }\n        const doc = await next(this, { blocking: true, transform: false });\n        if (doc) {\n            this[kDocuments].unshift(doc);\n            return true;\n        }\n        return false;\n    }\n    /** Get the next available document from the cursor, returns null if no more documents are available. */\n    async next() {\n        if (this[kId] === bson_1.Long.ZERO) {\n            throw new error_1.MongoCursorExhaustedError();\n        }\n        return next(this, { blocking: true, transform: true });\n    }\n    /**\n     * Try to get the next available document from the cursor or `null` if an empty batch is returned\n     */\n    async tryNext() {\n        if (this[kId] === bson_1.Long.ZERO) {\n            throw new error_1.MongoCursorExhaustedError();\n        }\n        return next(this, { blocking: false, transform: true });\n    }\n    /**\n     * Iterates over all the documents for this cursor using the iterator, callback pattern.\n     *\n     * If the iterator returns `false`, iteration will stop.\n     *\n     * @param iterator - The iteration callback.\n     * @deprecated - Will be removed in a future release. Use for await...of instead.\n     */\n    async forEach(iterator) {\n        if (typeof iterator !== 'function') {\n            throw new error_1.MongoInvalidArgumentError('Argument \"iterator\" must be a function');\n        }\n        for await (const document of this) {\n            const result = iterator(document);\n            if (result === false) {\n                break;\n            }\n        }\n    }\n    async close() {\n        const needsToEmitClosed = !this[kClosed];\n        this[kClosed] = true;\n        await cleanupCursor(this, { needsToEmitClosed });\n    }\n    /**\n     * Returns an array of documents. The caller is responsible for making sure that there\n     * is enough memory to store the results. Note that the array only contains partial\n     * results when this cursor had been previously accessed. In that case,\n     * cursor.rewind() can be used to reset the cursor.\n     */\n    async toArray() {\n        const array = [];\n        for await (const document of this) {\n            array.push(document);\n        }\n        return array;\n    }\n    /**\n     * Add a cursor flag to the cursor\n     *\n     * @param flag - The flag to set, must be one of following ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'partial' -.\n     * @param value - The flag boolean value.\n     */\n    addCursorFlag(flag, value) {\n        assertUninitialized(this);\n        if (!exports.CURSOR_FLAGS.includes(flag)) {\n            throw new error_1.MongoInvalidArgumentError(`Flag ${flag} is not one of ${exports.CURSOR_FLAGS}`);\n        }\n        if (typeof value !== 'boolean') {\n            throw new error_1.MongoInvalidArgumentError(`Flag ${flag} must be a boolean value`);\n        }\n        this[kOptions][flag] = value;\n        return this;\n    }\n    /**\n     * Map all documents using the provided function\n     * If there is a transform set on the cursor, that will be called first and the result passed to\n     * this function's transform.\n     *\n     * @remarks\n     *\n     * **Note** Cursors use `null` internally to indicate that there are no more documents in the cursor. Providing a mapping\n     * function that maps values to `null` will result in the cursor closing itself before it has finished iterating\n     * all documents.  This will **not** result in a memory leak, just surprising behavior.  For example:\n     *\n     * ```typescript\n     * const cursor = collection.find({});\n     * cursor.map(() => null);\n     *\n     * const documents = await cursor.toArray();\n     * // documents is always [], regardless of how many documents are in the collection.\n     * ```\n     *\n     * Other falsey values are allowed:\n     *\n     * ```typescript\n     * const cursor = collection.find({});\n     * cursor.map(() => '');\n     *\n     * const documents = await cursor.toArray();\n     * // documents is now an array of empty strings\n     * ```\n     *\n     * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n     * it **does not** return a new instance of a cursor. This means when calling map,\n     * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n     * Take note of the following example:\n     *\n     * @example\n     * ```typescript\n     * const cursor: FindCursor<Document> = coll.find();\n     * const mappedCursor: FindCursor<number> = cursor.map(doc => Object.keys(doc).length);\n     * const keyCounts: number[] = await mappedCursor.toArray(); // cursor.toArray() still returns Document[]\n     * ```\n     * @param transform - The mapping transformation method.\n     */\n    map(transform) {\n        assertUninitialized(this);\n        const oldTransform = this[kTransform]; // TODO(NODE-3283): Improve transform typing\n        if (oldTransform) {\n            this[kTransform] = doc => {\n                return transform(oldTransform(doc));\n            };\n        }\n        else {\n            this[kTransform] = transform;\n        }\n        return this;\n    }\n    /**\n     * Set the ReadPreference for the cursor.\n     *\n     * @param readPreference - The new read preference for the cursor.\n     */\n    withReadPreference(readPreference) {\n        assertUninitialized(this);\n        if (readPreference instanceof read_preference_1.ReadPreference) {\n            this[kOptions].readPreference = readPreference;\n        }\n        else if (typeof readPreference === 'string') {\n            this[kOptions].readPreference = read_preference_1.ReadPreference.fromString(readPreference);\n        }\n        else {\n            throw new error_1.MongoInvalidArgumentError(`Invalid read preference: ${readPreference}`);\n        }\n        return this;\n    }\n    /**\n     * Set the ReadPreference for the cursor.\n     *\n     * @param readPreference - The new read preference for the cursor.\n     */\n    withReadConcern(readConcern) {\n        assertUninitialized(this);\n        const resolvedReadConcern = read_concern_1.ReadConcern.fromOptions({ readConcern });\n        if (resolvedReadConcern) {\n            this[kOptions].readConcern = resolvedReadConcern;\n        }\n        return this;\n    }\n    /**\n     * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n     *\n     * @param value - Number of milliseconds to wait before aborting the query.\n     */\n    maxTimeMS(value) {\n        assertUninitialized(this);\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Argument for maxTimeMS must be a number');\n        }\n        this[kOptions].maxTimeMS = value;\n        return this;\n    }\n    /**\n     * Set the batch size for the cursor.\n     *\n     * @param value - The number of documents to return per batch. See {@link https://www.mongodb.com/docs/manual/reference/command/find/|find command documentation}.\n     */\n    batchSize(value) {\n        assertUninitialized(this);\n        if (this[kOptions].tailable) {\n            throw new error_1.MongoTailableCursorError('Tailable cursor does not support batchSize');\n        }\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Operation \"batchSize\" requires an integer');\n        }\n        this[kOptions].batchSize = value;\n        return this;\n    }\n    /**\n     * Rewind this cursor to its uninitialized state. Any options that are present on the cursor will\n     * remain in effect. Iterating this cursor will cause new queries to be sent to the server, even\n     * if the resultant data has already been retrieved by this cursor.\n     */\n    rewind() {\n        if (!this[kInitialized]) {\n            return;\n        }\n        this[kId] = null;\n        this[kDocuments].clear();\n        this[kClosed] = false;\n        this[kKilled] = false;\n        this[kInitialized] = false;\n        const session = this[kSession];\n        if (session) {\n            // We only want to end this session if we created it, and it hasn't ended yet\n            if (session.explicit === false) {\n                if (!session.hasEnded) {\n                    session.endSession().catch(() => null);\n                }\n                this[kSession] = this.client.startSession({ owner: this, explicit: false });\n            }\n        }\n    }\n    /** @internal */\n    async getMore(batchSize) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const getMoreOperation = new get_more_1.GetMoreOperation(this[kNamespace], this[kId], this[kServer], {\n            ...this[kOptions],\n            session: this[kSession],\n            batchSize\n        });\n        return (0, execute_operation_1.executeOperation)(this[kClient], getMoreOperation);\n    }\n    /**\n     * @internal\n     *\n     * This function is exposed for the unified test runner's createChangeStream\n     * operation.  We cannot refactor to use the abstract _initialize method without\n     * a significant refactor.\n     */\n    async [kInit]() {\n        try {\n            const state = await this._initialize(this[kSession]);\n            const response = state.response;\n            this[kServer] = state.server;\n            if (response.cursor) {\n                // TODO(NODE-2674): Preserve int64 sent from MongoDB\n                this[kId] =\n                    typeof response.cursor.id === 'number'\n                        ? bson_1.Long.fromNumber(response.cursor.id)\n                        : typeof response.cursor.id === 'bigint'\n                            ? bson_1.Long.fromBigInt(response.cursor.id)\n                            : response.cursor.id;\n                if (response.cursor.ns) {\n                    this[kNamespace] = (0, utils_1.ns)(response.cursor.ns);\n                }\n                this[kDocuments].pushMany(response.cursor.firstBatch);\n            }\n            // When server responses return without a cursor document, we close this cursor\n            // and return the raw server response. This is often the case for explain commands\n            // for example\n            if (this[kId] == null) {\n                this[kId] = bson_1.Long.ZERO;\n                // TODO(NODE-3286): ExecutionResult needs to accept a generic parameter\n                this[kDocuments].push(state.response);\n            }\n            // the cursor is now initialized, even if it is dead\n            this[kInitialized] = true;\n        }\n        catch (error) {\n            // the cursor is now initialized, even if an error occurred\n            this[kInitialized] = true;\n            await cleanupCursor(this, { error });\n            throw error;\n        }\n        if (this.isDead) {\n            await cleanupCursor(this, undefined);\n        }\n        return;\n    }\n}\n/** @event */\nAbstractCursor.CLOSE = 'close';\nexports.AbstractCursor = AbstractCursor;\n/**\n * @param cursor - the cursor on which to call `next`\n * @param blocking - a boolean indicating whether or not the cursor should `block` until data\n *     is available.  Generally, this flag is set to `false` because if the getMore returns no documents,\n *     the cursor has been exhausted.  In certain scenarios (ChangeStreams, tailable await cursors and\n *     `tryNext`, for example) blocking is necessary because a getMore returning no documents does\n *     not indicate the end of the cursor.\n * @param transform - if true, the cursor's transform function is applied to the result document (if the transform exists)\n * @returns the next document in the cursor, or `null`.  When `blocking` is `true`, a `null` document means\n * the cursor has been exhausted.  Otherwise, it means that there is no document available in the cursor's buffer.\n */\nasync function next(cursor, { blocking, transform }) {\n    if (cursor.closed) {\n        return null;\n    }\n    do {\n        if (cursor[kId] == null) {\n            // All cursors must operate within a session, one must be made implicitly if not explicitly provided\n            await cursor[kInit]();\n        }\n        if (cursor[kDocuments].length !== 0) {\n            const doc = cursor[kDocuments].shift();\n            if (doc != null && transform && cursor[kTransform]) {\n                try {\n                    return cursor[kTransform](doc);\n                }\n                catch (error) {\n                    // `cleanupCursorAsync` should never throw, but if it does we want to throw the original\n                    // error instead.\n                    await cleanupCursor(cursor, { error, needsToEmitClosed: true }).catch(() => null);\n                    throw error;\n                }\n            }\n            return doc;\n        }\n        if (cursor.isDead) {\n            // if the cursor is dead, we clean it up\n            // cleanupCursorAsync should never throw, but if it does it indicates a bug in the driver\n            // and we should surface the error\n            await cleanupCursor(cursor, {});\n            return null;\n        }\n        // otherwise need to call getMore\n        const batchSize = cursor[kOptions].batchSize || 1000;\n        try {\n            const response = await cursor.getMore(batchSize);\n            if (response) {\n                const cursorId = typeof response.cursor.id === 'number'\n                    ? bson_1.Long.fromNumber(response.cursor.id)\n                    : typeof response.cursor.id === 'bigint'\n                        ? bson_1.Long.fromBigInt(response.cursor.id)\n                        : response.cursor.id;\n                cursor[kDocuments].pushMany(response.cursor.nextBatch);\n                cursor[kId] = cursorId;\n            }\n        }\n        catch (error) {\n            // `cleanupCursorAsync` should never throw, but if it does we want to throw the original\n            // error instead.\n            await cleanupCursor(cursor, { error }).catch(() => null);\n            throw error;\n        }\n        if (cursor.isDead) {\n            // If we successfully received a response from a cursor BUT the cursor indicates that it is exhausted,\n            // we intentionally clean up the cursor to release its session back into the pool before the cursor\n            // is iterated.  This prevents a cursor that is exhausted on the server from holding\n            // onto a session indefinitely until the AbstractCursor is iterated.\n            //\n            // cleanupCursorAsync should never throw, but if it does it indicates a bug in the driver\n            // and we should surface the error\n            await cleanupCursor(cursor, {});\n        }\n        if (cursor[kDocuments].length === 0 && blocking === false) {\n            return null;\n        }\n    } while (!cursor.isDead || cursor[kDocuments].length !== 0);\n    return null;\n}\nasync function cleanupCursor(cursor, options) {\n    const cursorId = cursor[kId];\n    const cursorNs = cursor[kNamespace];\n    const server = cursor[kServer];\n    const session = cursor[kSession];\n    const error = options?.error;\n    // Cursors only emit closed events once the client-side cursor has been exhausted fully or there\n    // was an error.  Notably, when the server returns a cursor id of 0 and a non-empty batch, we\n    // cleanup the cursor but don't emit a `close` event.\n    const needsToEmitClosed = options?.needsToEmitClosed ?? cursor[kDocuments].length === 0;\n    if (error) {\n        if (cursor.loadBalanced && error instanceof error_1.MongoNetworkError) {\n            return completeCleanup();\n        }\n    }\n    if (cursorId == null || server == null || cursorId.isZero() || cursorNs == null) {\n        if (needsToEmitClosed) {\n            cursor[kClosed] = true;\n            cursor[kId] = bson_1.Long.ZERO;\n            cursor.emit(AbstractCursor.CLOSE);\n        }\n        if (session) {\n            if (session.owner === cursor) {\n                await session.endSession({ error });\n                return;\n            }\n            if (!session.inTransaction()) {\n                (0, sessions_1.maybeClearPinnedConnection)(session, { error });\n            }\n        }\n        return;\n    }\n    async function completeCleanup() {\n        if (session) {\n            if (session.owner === cursor) {\n                try {\n                    await session.endSession({ error });\n                }\n                finally {\n                    cursor.emit(AbstractCursor.CLOSE);\n                }\n                return;\n            }\n            if (!session.inTransaction()) {\n                (0, sessions_1.maybeClearPinnedConnection)(session, { error });\n            }\n        }\n        cursor.emit(AbstractCursor.CLOSE);\n        return;\n    }\n    cursor[kKilled] = true;\n    if (session.hasEnded) {\n        return completeCleanup();\n    }\n    try {\n        await (0, execute_operation_1.executeOperation)(cursor[kClient], new kill_cursors_1.KillCursorsOperation(cursorId, cursorNs, server, { session })).catch(() => null);\n    }\n    finally {\n        await completeCleanup();\n    }\n}\n/** @internal */\nfunction assertUninitialized(cursor) {\n    if (cursor[kInitialized]) {\n        throw new error_1.MongoCursorInUseError();\n    }\n}\nexports.assertUninitialized = assertUninitialized;\nclass ReadableCursorStream extends stream_1.Readable {\n    constructor(cursor) {\n        super({\n            objectMode: true,\n            autoDestroy: false,\n            highWaterMark: 1\n        });\n        this._readInProgress = false;\n        this._cursor = cursor;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _read(size) {\n        if (!this._readInProgress) {\n            this._readInProgress = true;\n            this._readNext();\n        }\n    }\n    _destroy(error, callback) {\n        this._cursor.close().then(() => callback(error), closeError => callback(closeError));\n    }\n    _readNext() {\n        next(this._cursor, { blocking: true, transform: true }).then(result => {\n            if (result == null) {\n                this.push(null);\n            }\n            else if (this.destroyed) {\n                this._cursor.close().catch(() => null);\n            }\n            else {\n                if (this.push(result)) {\n                    return this._readNext();\n                }\n                this._readInProgress = false;\n            }\n        }, err => {\n            // NOTE: This is questionable, but we have a test backing the behavior. It seems the\n            //       desired behavior is that a stream ends cleanly when a user explicitly closes\n            //       a client during iteration. Alternatively, we could do the \"right\" thing and\n            //       propagate the error message by removing this special case.\n            if (err.message.match(/server is closed/)) {\n                this._cursor.close().catch(() => null);\n                return this.push(null);\n            }\n            // NOTE: This is also perhaps questionable. The rationale here is that these errors tend\n            //       to be \"operation was interrupted\", where a cursor has been closed but there is an\n            //       active getMore in-flight. This used to check if the cursor was killed but once\n            //       that changed to happen in cleanup legitimate errors would not destroy the\n            //       stream. There are change streams test specifically test these cases.\n            if (err.message.match(/operation was interrupted/)) {\n                return this.push(null);\n            }\n            // NOTE: The two above checks on the message of the error will cause a null to be pushed\n            //       to the stream, thus closing the stream before the destroy call happens. This means\n            //       that either of those error messages on a change stream will not get a proper\n            //       'error' event to be emitted (the error passed to destroy). Change stream resumability\n            //       relies on that error event to be emitted to create its new cursor and thus was not\n            //       working on 4.4 servers because the error emitted on failover was \"interrupted at\n            //       shutdown\" while on 5.0+ it is \"The server is in quiesce mode and will shut down\".\n            //       See NODE-4475.\n            return this.destroy(err);\n        });\n    }\n}\n//# sourceMappingURL=abstract_cursor.js.map"],"names":[],"mappings":"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"}},
    {"offset": {"line": 17180, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 17184, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/cursor/aggregation_cursor.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AggregationCursor = void 0;\nconst aggregate_1 = require(\"../operations/aggregate\");\nconst execute_operation_1 = require(\"../operations/execute_operation\");\nconst utils_1 = require(\"../utils\");\nconst abstract_cursor_1 = require(\"./abstract_cursor\");\n/** @internal */\nconst kPipeline = Symbol('pipeline');\n/** @internal */\nconst kOptions = Symbol('options');\n/**\n * The **AggregationCursor** class is an internal class that embodies an aggregation cursor on MongoDB\n * allowing for iteration over the results returned from the underlying query. It supports\n * one by one document iteration, conversion to an array or can be iterated as a Node 4.X\n * or higher stream\n * @public\n */\nclass AggregationCursor extends abstract_cursor_1.AbstractCursor {\n    /** @internal */\n    constructor(client, namespace, pipeline = [], options = {}) {\n        super(client, namespace, options);\n        this[kPipeline] = pipeline;\n        this[kOptions] = options;\n    }\n    get pipeline() {\n        return this[kPipeline];\n    }\n    clone() {\n        const clonedOptions = (0, utils_1.mergeOptions)({}, this[kOptions]);\n        delete clonedOptions.session;\n        return new AggregationCursor(this.client, this.namespace, this[kPipeline], {\n            ...clonedOptions\n        });\n    }\n    map(transform) {\n        return super.map(transform);\n    }\n    /** @internal */\n    async _initialize(session) {\n        const aggregateOperation = new aggregate_1.AggregateOperation(this.namespace, this[kPipeline], {\n            ...this[kOptions],\n            ...this.cursorOptions,\n            session\n        });\n        const response = await (0, execute_operation_1.executeOperation)(this.client, aggregateOperation);\n        // TODO: NODE-2882\n        return { server: aggregateOperation.server, session, response };\n    }\n    /** Execute the explain for the cursor */\n    async explain(verbosity) {\n        return (0, execute_operation_1.executeOperation)(this.client, new aggregate_1.AggregateOperation(this.namespace, this[kPipeline], {\n            ...this[kOptions],\n            ...this.cursorOptions,\n            explain: verbosity ?? true\n        }));\n    }\n    group($group) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({ $group });\n        return this;\n    }\n    /** Add a limit stage to the aggregation pipeline */\n    limit($limit) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({ $limit });\n        return this;\n    }\n    /** Add a match stage to the aggregation pipeline */\n    match($match) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({ $match });\n        return this;\n    }\n    /** Add an out stage to the aggregation pipeline */\n    out($out) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({ $out });\n        return this;\n    }\n    /**\n     * Add a project stage to the aggregation pipeline\n     *\n     * @remarks\n     * In order to strictly type this function you must provide an interface\n     * that represents the effect of your projection on the result documents.\n     *\n     * By default chaining a projection to your cursor changes the returned type to the generic {@link Document} type.\n     * You should specify a parameterized type to have assertions on your final results.\n     *\n     * @example\n     * ```typescript\n     * // Best way\n     * const docs: AggregationCursor<{ a: number }> = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * // Flexible way\n     * const docs: AggregationCursor<Document> = cursor.project({ _id: 0, a: true });\n     * ```\n     *\n     * @remarks\n     * In order to strictly type this function you must provide an interface\n     * that represents the effect of your projection on the result documents.\n     *\n     * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n     * it **does not** return a new instance of a cursor. This means when calling project,\n     * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n     * Take note of the following example:\n     *\n     * @example\n     * ```typescript\n     * const cursor: AggregationCursor<{ a: number; b: string }> = coll.aggregate([]);\n     * const projectCursor = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();\n     *\n     * // or always use chaining and save the final cursor\n     *\n     * const cursor = coll.aggregate().project<{ a: string }>({\n     *   _id: 0,\n     *   a: { $convert: { input: '$a', to: 'string' }\n     * }});\n     * ```\n     */\n    project($project) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({ $project });\n        return this;\n    }\n    /** Add a lookup stage to the aggregation pipeline */\n    lookup($lookup) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({ $lookup });\n        return this;\n    }\n    /** Add a redact stage to the aggregation pipeline */\n    redact($redact) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({ $redact });\n        return this;\n    }\n    /** Add a skip stage to the aggregation pipeline */\n    skip($skip) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({ $skip });\n        return this;\n    }\n    /** Add a sort stage to the aggregation pipeline */\n    sort($sort) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({ $sort });\n        return this;\n    }\n    /** Add a unwind stage to the aggregation pipeline */\n    unwind($unwind) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({ $unwind });\n        return this;\n    }\n    /** Add a geoNear stage to the aggregation pipeline */\n    geoNear($geoNear) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({ $geoNear });\n        return this;\n    }\n}\nexports.AggregationCursor = AggregationCursor;\n//# sourceMappingURL=aggregation_cursor.js.map"],"names":[],"mappings":"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"}},
    {"offset": {"line": 17360, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 17364, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/cursor/list_search_indexes_cursor.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListSearchIndexesCursor = void 0;\nconst aggregation_cursor_1 = require(\"./aggregation_cursor\");\n/** @public */\nclass ListSearchIndexesCursor extends aggregation_cursor_1.AggregationCursor {\n    /** @internal */\n    constructor({ fullNamespace: ns, client }, name, options = {}) {\n        const pipeline = name == null ? [{ $listSearchIndexes: {} }] : [{ $listSearchIndexes: { name } }];\n        super(client, ns, pipeline, options);\n    }\n}\nexports.ListSearchIndexesCursor = ListSearchIndexesCursor;\n//# sourceMappingURL=list_search_indexes_cursor.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,uBAAuB,GAAG,KAAK;AACvC,MAAM,uBAAuB;AAC7B,YAAY,GACZ,MAAM,gCAAgC,qBAAqB,iBAAiB;IACxE,cAAc,GACd,YAAY,EAAE,eAAe,EAAE,EAAE,MAAM,EAAE,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC,CAAE;QAC3D,MAAM,WAAW,QAAQ,OAAO;YAAC;gBAAE,oBAAoB,CAAC;YAAE;SAAE,GAAG;YAAC;gBAAE,oBAAoB;oBAAE;gBAAK;YAAE;SAAE;QACjG,KAAK,CAAC,QAAQ,IAAI,UAAU;IAChC;AACJ;AACA,QAAQ,uBAAuB,GAAG,yBAClC,sDAAsD"}},
    {"offset": {"line": 17387, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 17391, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/cursor/list_indexes_cursor.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListIndexesCursor = void 0;\nconst execute_operation_1 = require(\"../operations/execute_operation\");\nconst indexes_1 = require(\"../operations/indexes\");\nconst abstract_cursor_1 = require(\"./abstract_cursor\");\n/** @public */\nclass ListIndexesCursor extends abstract_cursor_1.AbstractCursor {\n    constructor(collection, options) {\n        super(collection.client, collection.s.namespace, options);\n        this.parent = collection;\n        this.options = options;\n    }\n    clone() {\n        return new ListIndexesCursor(this.parent, {\n            ...this.options,\n            ...this.cursorOptions\n        });\n    }\n    /** @internal */\n    async _initialize(session) {\n        const operation = new indexes_1.ListIndexesOperation(this.parent, {\n            ...this.cursorOptions,\n            ...this.options,\n            session\n        });\n        const response = await (0, execute_operation_1.executeOperation)(this.parent.client, operation);\n        // TODO: NODE-2882\n        return { server: operation.server, session, response };\n    }\n}\nexports.ListIndexesCursor = ListIndexesCursor;\n//# sourceMappingURL=list_indexes_cursor.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,iBAAiB,GAAG,KAAK;AACjC,MAAM,sBAAsB;AAC5B,MAAM,YAAY;AAClB,MAAM,oBAAoB;AAC1B,YAAY,GACZ,MAAM,0BAA0B,kBAAkB,cAAc;IAC5D,YAAY,UAAU,EAAE,OAAO,CAAE;QAC7B,KAAK,CAAC,WAAW,MAAM,EAAE,WAAW,CAAC,CAAC,SAAS,EAAE;QACjD,IAAI,CAAC,MAAM,GAAG;QACd,IAAI,CAAC,OAAO,GAAG;IACnB;IACA,QAAQ;QACJ,OAAO,IAAI,kBAAkB,IAAI,CAAC,MAAM,EAAE;YACtC,GAAG,IAAI,CAAC,OAAO;YACf,GAAG,IAAI,CAAC,aAAa;QACzB;IACJ;IACA,cAAc,GACd,MAAM,YAAY,OAAO,EAAE;QACvB,MAAM,YAAY,IAAI,UAAU,oBAAoB,CAAC,IAAI,CAAC,MAAM,EAAE;YAC9D,GAAG,IAAI,CAAC,aAAa;YACrB,GAAG,IAAI,CAAC,OAAO;YACf;QACJ;QACA,MAAM,WAAW,MAAM,AAAC,CAAA,GAAG,oBAAoB,gBAAgB,AAAD,EAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;QACrF,kBAAkB;QAClB,OAAO;YAAE,QAAQ,UAAU,MAAM;YAAE;YAAS;QAAS;IACzD;AACJ;AACA,QAAQ,iBAAiB,GAAG,mBAC5B,+CAA+C"}},
    {"offset": {"line": 17427, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 17431, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/operations/find.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FindOperation = void 0;\nconst error_1 = require(\"../error\");\nconst read_concern_1 = require(\"../read_concern\");\nconst sort_1 = require(\"../sort\");\nconst utils_1 = require(\"../utils\");\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass FindOperation extends command_1.CommandOperation {\n    constructor(collection, ns, filter = {}, options = {}) {\n        super(collection, options);\n        this.options = { ...options };\n        delete this.options.writeConcern;\n        this.ns = ns;\n        if (typeof filter !== 'object' || Array.isArray(filter)) {\n            throw new error_1.MongoInvalidArgumentError('Query filter must be a plain object or ObjectId');\n        }\n        // special case passing in an ObjectId as a filter\n        this.filter = filter != null && filter._bsontype === 'ObjectId' ? { _id: filter } : filter;\n    }\n    async execute(server, session) {\n        this.server = server;\n        const options = this.options;\n        let findCommand = makeFindCommand(this.ns, this.filter, options);\n        if (this.explain) {\n            findCommand = (0, utils_1.decorateWithExplain)(findCommand, this.explain);\n        }\n        return server.commandAsync(this.ns, findCommand, {\n            ...this.options,\n            ...this.bsonOptions,\n            documentsReturnedIn: 'firstBatch',\n            session\n        });\n    }\n}\nexports.FindOperation = FindOperation;\nfunction makeFindCommand(ns, filter, options) {\n    const findCommand = {\n        find: ns.collection,\n        filter\n    };\n    if (options.sort) {\n        findCommand.sort = (0, sort_1.formatSort)(options.sort);\n    }\n    if (options.projection) {\n        let projection = options.projection;\n        if (projection && Array.isArray(projection)) {\n            projection = projection.length\n                ? projection.reduce((result, field) => {\n                    result[field] = 1;\n                    return result;\n                }, {})\n                : { _id: 1 };\n        }\n        findCommand.projection = projection;\n    }\n    if (options.hint) {\n        findCommand.hint = (0, utils_1.normalizeHintField)(options.hint);\n    }\n    if (typeof options.skip === 'number') {\n        findCommand.skip = options.skip;\n    }\n    if (typeof options.limit === 'number') {\n        if (options.limit < 0) {\n            findCommand.limit = -options.limit;\n            findCommand.singleBatch = true;\n        }\n        else {\n            findCommand.limit = options.limit;\n        }\n    }\n    if (typeof options.batchSize === 'number') {\n        if (options.batchSize < 0) {\n            if (options.limit &&\n                options.limit !== 0 &&\n                Math.abs(options.batchSize) < Math.abs(options.limit)) {\n                findCommand.limit = -options.batchSize;\n            }\n            findCommand.singleBatch = true;\n        }\n        else {\n            findCommand.batchSize = options.batchSize;\n        }\n    }\n    if (typeof options.singleBatch === 'boolean') {\n        findCommand.singleBatch = options.singleBatch;\n    }\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (options.comment !== undefined) {\n        findCommand.comment = options.comment;\n    }\n    if (typeof options.maxTimeMS === 'number') {\n        findCommand.maxTimeMS = options.maxTimeMS;\n    }\n    const readConcern = read_concern_1.ReadConcern.fromOptions(options);\n    if (readConcern) {\n        findCommand.readConcern = readConcern.toJSON();\n    }\n    if (options.max) {\n        findCommand.max = options.max;\n    }\n    if (options.min) {\n        findCommand.min = options.min;\n    }\n    if (typeof options.returnKey === 'boolean') {\n        findCommand.returnKey = options.returnKey;\n    }\n    if (typeof options.showRecordId === 'boolean') {\n        findCommand.showRecordId = options.showRecordId;\n    }\n    if (typeof options.tailable === 'boolean') {\n        findCommand.tailable = options.tailable;\n    }\n    if (typeof options.oplogReplay === 'boolean') {\n        findCommand.oplogReplay = options.oplogReplay;\n    }\n    if (typeof options.timeout === 'boolean') {\n        findCommand.noCursorTimeout = !options.timeout;\n    }\n    else if (typeof options.noCursorTimeout === 'boolean') {\n        findCommand.noCursorTimeout = options.noCursorTimeout;\n    }\n    if (typeof options.awaitData === 'boolean') {\n        findCommand.awaitData = options.awaitData;\n    }\n    if (typeof options.allowPartialResults === 'boolean') {\n        findCommand.allowPartialResults = options.allowPartialResults;\n    }\n    if (options.collation) {\n        findCommand.collation = options.collation;\n    }\n    if (typeof options.allowDiskUse === 'boolean') {\n        findCommand.allowDiskUse = options.allowDiskUse;\n    }\n    if (options.let) {\n        findCommand.let = options.let;\n    }\n    return findCommand;\n}\n(0, operation_1.defineAspects)(FindOperation, [\n    operation_1.Aspect.READ_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.EXPLAINABLE,\n    operation_1.Aspect.CURSOR_CREATING\n]);\n//# sourceMappingURL=find.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,aAAa,GAAG,KAAK;AAC7B,MAAM,UAAU;AAChB,MAAM,iBAAiB;AACvB,MAAM,SAAS;AACf,MAAM,UAAU;AAChB,MAAM,YAAY;AAClB,MAAM,cAAc;AACpB,cAAc,GACd,MAAM,sBAAsB,UAAU,gBAAgB;IAClD,YAAY,UAAU,EAAE,EAAE,EAAE,SAAS,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAE;QACnD,KAAK,CAAC,YAAY;QAClB,IAAI,CAAC,OAAO,GAAG;YAAE,GAAG,OAAO;QAAC;QAC5B,OAAO,IAAI,CAAC,OAAO,CAAC,YAAY;QAChC,IAAI,CAAC,EAAE,GAAG;QACV,IAAI,OAAO,WAAW,YAAY,MAAM,OAAO,CAAC,SAAS;YACrD,MAAM,IAAI,QAAQ,yBAAyB,CAAC;QAChD;QACA,kDAAkD;QAClD,IAAI,CAAC,MAAM,GAAG,UAAU,QAAQ,OAAO,SAAS,KAAK,aAAa;YAAE,KAAK;QAAO,IAAI;IACxF;IACA,MAAM,QAAQ,MAAM,EAAE,OAAO,EAAE;QAC3B,IAAI,CAAC,MAAM,GAAG;QACd,MAAM,UAAU,IAAI,CAAC,OAAO;QAC5B,IAAI,cAAc,gBAAgB,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,MAAM,EAAE;QACxD,IAAI,IAAI,CAAC,OAAO,EAAE;YACd,cAAc,AAAC,CAAA,GAAG,QAAQ,mBAAmB,AAAD,EAAG,aAAa,IAAI,CAAC,OAAO;QAC5E;QACA,OAAO,OAAO,YAAY,CAAC,IAAI,CAAC,EAAE,EAAE,aAAa;YAC7C,GAAG,IAAI,CAAC,OAAO;YACf,GAAG,IAAI,CAAC,WAAW;YACnB,qBAAqB;YACrB;QACJ;IACJ;AACJ;AACA,QAAQ,aAAa,GAAG;AACxB,SAAS,gBAAgB,EAAE,EAAE,MAAM,EAAE,OAAO;IACxC,MAAM,cAAc;QAChB,MAAM,GAAG,UAAU;QACnB;IACJ;IACA,IAAI,QAAQ,IAAI,EAAE;QACd,YAAY,IAAI,GAAG,AAAC,CAAA,GAAG,OAAO,UAAU,AAAD,EAAG,QAAQ,IAAI;IAC1D;IACA,IAAI,QAAQ,UAAU,EAAE;QACpB,IAAI,aAAa,QAAQ,UAAU;QACnC,IAAI,cAAc,MAAM,OAAO,CAAC,aAAa;YACzC,aAAa,WAAW,MAAM,GACxB,WAAW,MAAM,CAAC,CAAC,QAAQ;gBACzB,MAAM,CAAC,MAAM,GAAG;gBAChB,OAAO;YACX,GAAG,CAAC,KACF;gBAAE,KAAK;YAAE;QACnB;QACA,YAAY,UAAU,GAAG;IAC7B;IACA,IAAI,QAAQ,IAAI,EAAE;QACd,YAAY,IAAI,GAAG,AAAC,CAAA,GAAG,QAAQ,kBAAkB,AAAD,EAAG,QAAQ,IAAI;IACnE;IACA,IAAI,OAAO,QAAQ,IAAI,KAAK,UAAU;QAClC,YAAY,IAAI,GAAG,QAAQ,IAAI;IACnC;IACA,IAAI,OAAO,QAAQ,KAAK,KAAK,UAAU;QACnC,IAAI,QAAQ,KAAK,GAAG,GAAG;YACnB,YAAY,KAAK,GAAG,CAAC,QAAQ,KAAK;YAClC,YAAY,WAAW,GAAG;QAC9B,OACK;YACD,YAAY,KAAK,GAAG,QAAQ,KAAK;QACrC;IACJ;IACA,IAAI,OAAO,QAAQ,SAAS,KAAK,UAAU;QACvC,IAAI,QAAQ,SAAS,GAAG,GAAG;YACvB,IAAI,QAAQ,KAAK,IACb,QAAQ,KAAK,KAAK,KAClB,KAAK,GAAG,CAAC,QAAQ,SAAS,IAAI,KAAK,GAAG,CAAC,QAAQ,KAAK,GAAG;gBACvD,YAAY,KAAK,GAAG,CAAC,QAAQ,SAAS;YAC1C;YACA,YAAY,WAAW,GAAG;QAC9B,OACK;YACD,YAAY,SAAS,GAAG,QAAQ,SAAS;QAC7C;IACJ;IACA,IAAI,OAAO,QAAQ,WAAW,KAAK,WAAW;QAC1C,YAAY,WAAW,GAAG,QAAQ,WAAW;IACjD;IACA,iEAAiE;IACjE,gDAAgD;IAChD,IAAI,QAAQ,OAAO,KAAK,WAAW;QAC/B,YAAY,OAAO,GAAG,QAAQ,OAAO;IACzC;IACA,IAAI,OAAO,QAAQ,SAAS,KAAK,UAAU;QACvC,YAAY,SAAS,GAAG,QAAQ,SAAS;IAC7C;IACA,MAAM,cAAc,eAAe,WAAW,CAAC,WAAW,CAAC;IAC3D,IAAI,aAAa;QACb,YAAY,WAAW,GAAG,YAAY,MAAM;IAChD;IACA,IAAI,QAAQ,GAAG,EAAE;QACb,YAAY,GAAG,GAAG,QAAQ,GAAG;IACjC;IACA,IAAI,QAAQ,GAAG,EAAE;QACb,YAAY,GAAG,GAAG,QAAQ,GAAG;IACjC;IACA,IAAI,OAAO,QAAQ,SAAS,KAAK,WAAW;QACxC,YAAY,SAAS,GAAG,QAAQ,SAAS;IAC7C;IACA,IAAI,OAAO,QAAQ,YAAY,KAAK,WAAW;QAC3C,YAAY,YAAY,GAAG,QAAQ,YAAY;IACnD;IACA,IAAI,OAAO,QAAQ,QAAQ,KAAK,WAAW;QACvC,YAAY,QAAQ,GAAG,QAAQ,QAAQ;IAC3C;IACA,IAAI,OAAO,QAAQ,WAAW,KAAK,WAAW;QAC1C,YAAY,WAAW,GAAG,QAAQ,WAAW;IACjD;IACA,IAAI,OAAO,QAAQ,OAAO,KAAK,WAAW;QACtC,YAAY,eAAe,GAAG,CAAC,QAAQ,OAAO;IAClD,OACK,IAAI,OAAO,QAAQ,eAAe,KAAK,WAAW;QACnD,YAAY,eAAe,GAAG,QAAQ,eAAe;IACzD;IACA,IAAI,OAAO,QAAQ,SAAS,KAAK,WAAW;QACxC,YAAY,SAAS,GAAG,QAAQ,SAAS;IAC7C;IACA,IAAI,OAAO,QAAQ,mBAAmB,KAAK,WAAW;QAClD,YAAY,mBAAmB,GAAG,QAAQ,mBAAmB;IACjE;IACA,IAAI,QAAQ,SAAS,EAAE;QACnB,YAAY,SAAS,GAAG,QAAQ,SAAS;IAC7C;IACA,IAAI,OAAO,QAAQ,YAAY,KAAK,WAAW;QAC3C,YAAY,YAAY,GAAG,QAAQ,YAAY;IACnD;IACA,IAAI,QAAQ,GAAG,EAAE;QACb,YAAY,GAAG,GAAG,QAAQ,GAAG;IACjC;IACA,OAAO;AACX;AACC,CAAA,GAAG,YAAY,aAAa,AAAD,EAAG,eAAe;IAC1C,YAAY,MAAM,CAAC,cAAc;IACjC,YAAY,MAAM,CAAC,SAAS;IAC5B,YAAY,MAAM,CAAC,WAAW;IAC9B,YAAY,MAAM,CAAC,eAAe;CACrC,GACD,gCAAgC"}},
    {"offset": {"line": 17579, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 17583, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/cursor/find_cursor.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FindCursor = exports.FLAGS = void 0;\nconst bson_1 = require(\"../bson\");\nconst error_1 = require(\"../error\");\nconst count_1 = require(\"../operations/count\");\nconst execute_operation_1 = require(\"../operations/execute_operation\");\nconst find_1 = require(\"../operations/find\");\nconst sort_1 = require(\"../sort\");\nconst utils_1 = require(\"../utils\");\nconst abstract_cursor_1 = require(\"./abstract_cursor\");\n/** @internal */\nconst kFilter = Symbol('filter');\n/** @internal */\nconst kNumReturned = Symbol('numReturned');\n/** @internal */\nconst kBuiltOptions = Symbol('builtOptions');\n/** @public Flags allowed for cursor */\nexports.FLAGS = [\n    'tailable',\n    'oplogReplay',\n    'noCursorTimeout',\n    'awaitData',\n    'exhaust',\n    'partial'\n];\n/** @public */\nclass FindCursor extends abstract_cursor_1.AbstractCursor {\n    /** @internal */\n    constructor(client, namespace, filter = {}, options = {}) {\n        super(client, namespace, options);\n        this[kFilter] = filter;\n        this[kBuiltOptions] = options;\n        if (options.sort != null) {\n            this[kBuiltOptions].sort = (0, sort_1.formatSort)(options.sort);\n        }\n    }\n    clone() {\n        const clonedOptions = (0, utils_1.mergeOptions)({}, this[kBuiltOptions]);\n        delete clonedOptions.session;\n        return new FindCursor(this.client, this.namespace, this[kFilter], {\n            ...clonedOptions\n        });\n    }\n    map(transform) {\n        return super.map(transform);\n    }\n    /** @internal */\n    async _initialize(session) {\n        const findOperation = new find_1.FindOperation(undefined, this.namespace, this[kFilter], {\n            ...this[kBuiltOptions],\n            ...this.cursorOptions,\n            session\n        });\n        const response = await (0, execute_operation_1.executeOperation)(this.client, findOperation);\n        // the response is not a cursor when `explain` is enabled\n        this[kNumReturned] = response.cursor?.firstBatch?.length;\n        // TODO: NODE-2882\n        return { server: findOperation.server, session, response };\n    }\n    /** @internal */\n    async getMore(batchSize) {\n        const numReturned = this[kNumReturned];\n        if (numReturned) {\n            // TODO(DRIVERS-1448): Remove logic to enforce `limit` in the driver\n            const limit = this[kBuiltOptions].limit;\n            batchSize =\n                limit && limit > 0 && numReturned + batchSize > limit ? limit - numReturned : batchSize;\n            if (batchSize <= 0) {\n                // this is an optimization for the special case of a limit for a find command to avoid an\n                // extra getMore when the limit has been reached and the limit is a multiple of the batchSize.\n                // This is a consequence of the new query engine in 5.0 having no knowledge of the limit as it\n                // produces results for the find command.  Once a batch is filled up, it is returned and only\n                // on the subsequent getMore will the query framework consider the limit, determine the cursor\n                // is exhausted and return a cursorId of zero.\n                // instead, if we determine there are no more documents to request from the server, we preemptively\n                // close the cursor\n                await this.close().catch(() => null);\n                return { cursor: { id: bson_1.Long.ZERO, nextBatch: [] } };\n            }\n        }\n        const response = await super.getMore(batchSize);\n        // TODO: wrap this in some logic to prevent it from happening if we don't need this support\n        if (response) {\n            this[kNumReturned] = this[kNumReturned] + response.cursor.nextBatch.length;\n        }\n        return response;\n    }\n    /**\n     * Get the count of documents for this cursor\n     * @deprecated Use `collection.estimatedDocumentCount` or `collection.countDocuments` instead\n     */\n    async count(options) {\n        (0, utils_1.emitWarningOnce)('cursor.count is deprecated and will be removed in the next major version, please use `collection.estimatedDocumentCount` or `collection.countDocuments` instead ');\n        if (typeof options === 'boolean') {\n            throw new error_1.MongoInvalidArgumentError('Invalid first parameter to count');\n        }\n        return (0, execute_operation_1.executeOperation)(this.client, new count_1.CountOperation(this.namespace, this[kFilter], {\n            ...this[kBuiltOptions],\n            ...this.cursorOptions,\n            ...options\n        }));\n    }\n    /** Execute the explain for the cursor */\n    async explain(verbosity) {\n        return (0, execute_operation_1.executeOperation)(this.client, new find_1.FindOperation(undefined, this.namespace, this[kFilter], {\n            ...this[kBuiltOptions],\n            ...this.cursorOptions,\n            explain: verbosity ?? true\n        }));\n    }\n    /** Set the cursor query */\n    filter(filter) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kFilter] = filter;\n        return this;\n    }\n    /**\n     * Set the cursor hint\n     *\n     * @param hint - If specified, then the query system will only consider plans using the hinted index.\n     */\n    hint(hint) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].hint = hint;\n        return this;\n    }\n    /**\n     * Set the cursor min\n     *\n     * @param min - Specify a $min value to specify the inclusive lower bound for a specific index in order to constrain the results of find(). The $min specifies the lower bound for all keys of a specific index in order.\n     */\n    min(min) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].min = min;\n        return this;\n    }\n    /**\n     * Set the cursor max\n     *\n     * @param max - Specify a $max value to specify the exclusive upper bound for a specific index in order to constrain the results of find(). The $max specifies the upper bound for all keys of a specific index in order.\n     */\n    max(max) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].max = max;\n        return this;\n    }\n    /**\n     * Set the cursor returnKey.\n     * If set to true, modifies the cursor to only return the index field or fields for the results of the query, rather than documents.\n     * If set to true and the query does not use an index to perform the read operation, the returned documents will not contain any fields.\n     *\n     * @param value - the returnKey value.\n     */\n    returnKey(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].returnKey = value;\n        return this;\n    }\n    /**\n     * Modifies the output of a query by adding a field $recordId to matching documents. $recordId is the internal key which uniquely identifies a document in a collection.\n     *\n     * @param value - The $showDiskLoc option has now been deprecated and replaced with the showRecordId field. $showDiskLoc will still be accepted for OP_QUERY stye find.\n     */\n    showRecordId(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].showRecordId = value;\n        return this;\n    }\n    /**\n     * Add a query modifier to the cursor query\n     *\n     * @param name - The query modifier (must start with $, such as $orderby etc)\n     * @param value - The modifier value.\n     */\n    addQueryModifier(name, value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        if (name[0] !== '$') {\n            throw new error_1.MongoInvalidArgumentError(`${name} is not a valid query modifier`);\n        }\n        // Strip of the $\n        const field = name.substr(1);\n        // NOTE: consider some TS magic for this\n        switch (field) {\n            case 'comment':\n                this[kBuiltOptions].comment = value;\n                break;\n            case 'explain':\n                this[kBuiltOptions].explain = value;\n                break;\n            case 'hint':\n                this[kBuiltOptions].hint = value;\n                break;\n            case 'max':\n                this[kBuiltOptions].max = value;\n                break;\n            case 'maxTimeMS':\n                this[kBuiltOptions].maxTimeMS = value;\n                break;\n            case 'min':\n                this[kBuiltOptions].min = value;\n                break;\n            case 'orderby':\n                this[kBuiltOptions].sort = (0, sort_1.formatSort)(value);\n                break;\n            case 'query':\n                this[kFilter] = value;\n                break;\n            case 'returnKey':\n                this[kBuiltOptions].returnKey = value;\n                break;\n            case 'showDiskLoc':\n                this[kBuiltOptions].showRecordId = value;\n                break;\n            default:\n                throw new error_1.MongoInvalidArgumentError(`Invalid query modifier: ${name}`);\n        }\n        return this;\n    }\n    /**\n     * Add a comment to the cursor query allowing for tracking the comment in the log.\n     *\n     * @param value - The comment attached to this query.\n     */\n    comment(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].comment = value;\n        return this;\n    }\n    /**\n     * Set a maxAwaitTimeMS on a tailing cursor query to allow to customize the timeout value for the option awaitData (Only supported on MongoDB 3.2 or higher, ignored otherwise)\n     *\n     * @param value - Number of milliseconds to wait before aborting the tailed query.\n     */\n    maxAwaitTimeMS(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Argument for maxAwaitTimeMS must be a number');\n        }\n        this[kBuiltOptions].maxAwaitTimeMS = value;\n        return this;\n    }\n    /**\n     * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n     *\n     * @param value - Number of milliseconds to wait before aborting the query.\n     */\n    maxTimeMS(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Argument for maxTimeMS must be a number');\n        }\n        this[kBuiltOptions].maxTimeMS = value;\n        return this;\n    }\n    /**\n     * Add a project stage to the aggregation pipeline\n     *\n     * @remarks\n     * In order to strictly type this function you must provide an interface\n     * that represents the effect of your projection on the result documents.\n     *\n     * By default chaining a projection to your cursor changes the returned type to the generic\n     * {@link Document} type.\n     * You should specify a parameterized type to have assertions on your final results.\n     *\n     * @example\n     * ```typescript\n     * // Best way\n     * const docs: FindCursor<{ a: number }> = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * // Flexible way\n     * const docs: FindCursor<Document> = cursor.project({ _id: 0, a: true });\n     * ```\n     *\n     * @remarks\n     *\n     * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n     * it **does not** return a new instance of a cursor. This means when calling project,\n     * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n     * Take note of the following example:\n     *\n     * @example\n     * ```typescript\n     * const cursor: FindCursor<{ a: number; b: string }> = coll.find();\n     * const projectCursor = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();\n     *\n     * // or always use chaining and save the final cursor\n     *\n     * const cursor = coll.find().project<{ a: string }>({\n     *   _id: 0,\n     *   a: { $convert: { input: '$a', to: 'string' }\n     * }});\n     * ```\n     */\n    project(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].projection = value;\n        return this;\n    }\n    /**\n     * Sets the sort order of the cursor query.\n     *\n     * @param sort - The key or keys set for the sort.\n     * @param direction - The direction of the sorting (1 or -1).\n     */\n    sort(sort, direction) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        if (this[kBuiltOptions].tailable) {\n            throw new error_1.MongoTailableCursorError('Tailable cursor does not support sorting');\n        }\n        this[kBuiltOptions].sort = (0, sort_1.formatSort)(sort, direction);\n        return this;\n    }\n    /**\n     * Allows disk use for blocking sort operations exceeding 100MB memory. (MongoDB 3.2 or higher)\n     *\n     * @remarks\n     * {@link https://www.mongodb.com/docs/manual/reference/command/find/#find-cmd-allowdiskuse | find command allowDiskUse documentation}\n     */\n    allowDiskUse(allow = true) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        if (!this[kBuiltOptions].sort) {\n            throw new error_1.MongoInvalidArgumentError('Option \"allowDiskUse\" requires a sort specification');\n        }\n        // As of 6.0 the default is true. This allows users to get back to the old behavior.\n        if (!allow) {\n            this[kBuiltOptions].allowDiskUse = false;\n            return this;\n        }\n        this[kBuiltOptions].allowDiskUse = true;\n        return this;\n    }\n    /**\n     * Set the collation options for the cursor.\n     *\n     * @param value - The cursor collation options (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).\n     */\n    collation(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].collation = value;\n        return this;\n    }\n    /**\n     * Set the limit for the cursor.\n     *\n     * @param value - The limit for the cursor query.\n     */\n    limit(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        if (this[kBuiltOptions].tailable) {\n            throw new error_1.MongoTailableCursorError('Tailable cursor does not support limit');\n        }\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Operation \"limit\" requires an integer');\n        }\n        this[kBuiltOptions].limit = value;\n        return this;\n    }\n    /**\n     * Set the skip for the cursor.\n     *\n     * @param value - The skip for the cursor query.\n     */\n    skip(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        if (this[kBuiltOptions].tailable) {\n            throw new error_1.MongoTailableCursorError('Tailable cursor does not support skip');\n        }\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Operation \"skip\" requires an integer');\n        }\n        this[kBuiltOptions].skip = value;\n        return this;\n    }\n}\nexports.FindCursor = FindCursor;\n//# sourceMappingURL=find_cursor.js.map"],"names":[],"mappings":"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"}},
    {"offset": {"line": 17944, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 17948, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/cursor/change_stream_cursor.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ChangeStreamCursor = void 0;\nconst change_stream_1 = require(\"../change_stream\");\nconst constants_1 = require(\"../constants\");\nconst aggregate_1 = require(\"../operations/aggregate\");\nconst execute_operation_1 = require(\"../operations/execute_operation\");\nconst utils_1 = require(\"../utils\");\nconst abstract_cursor_1 = require(\"./abstract_cursor\");\n/** @internal */\nclass ChangeStreamCursor extends abstract_cursor_1.AbstractCursor {\n    constructor(client, namespace, pipeline = [], options = {}) {\n        super(client, namespace, options);\n        this.pipeline = pipeline;\n        this.options = options;\n        this._resumeToken = null;\n        this.startAtOperationTime = options.startAtOperationTime;\n        if (options.startAfter) {\n            this.resumeToken = options.startAfter;\n        }\n        else if (options.resumeAfter) {\n            this.resumeToken = options.resumeAfter;\n        }\n    }\n    set resumeToken(token) {\n        this._resumeToken = token;\n        this.emit(change_stream_1.ChangeStream.RESUME_TOKEN_CHANGED, token);\n    }\n    get resumeToken() {\n        return this._resumeToken;\n    }\n    get resumeOptions() {\n        const options = {\n            ...this.options\n        };\n        for (const key of ['resumeAfter', 'startAfter', 'startAtOperationTime']) {\n            delete options[key];\n        }\n        if (this.resumeToken != null) {\n            if (this.options.startAfter && !this.hasReceived) {\n                options.startAfter = this.resumeToken;\n            }\n            else {\n                options.resumeAfter = this.resumeToken;\n            }\n        }\n        else if (this.startAtOperationTime != null && (0, utils_1.maxWireVersion)(this.server) >= 7) {\n            options.startAtOperationTime = this.startAtOperationTime;\n        }\n        return options;\n    }\n    cacheResumeToken(resumeToken) {\n        if (this.bufferedCount() === 0 && this.postBatchResumeToken) {\n            this.resumeToken = this.postBatchResumeToken;\n        }\n        else {\n            this.resumeToken = resumeToken;\n        }\n        this.hasReceived = true;\n    }\n    _processBatch(response) {\n        const cursor = response.cursor;\n        if (cursor.postBatchResumeToken) {\n            this.postBatchResumeToken = response.cursor.postBatchResumeToken;\n            const batch = 'firstBatch' in response.cursor ? response.cursor.firstBatch : response.cursor.nextBatch;\n            if (batch.length === 0) {\n                this.resumeToken = cursor.postBatchResumeToken;\n            }\n        }\n    }\n    clone() {\n        return new ChangeStreamCursor(this.client, this.namespace, this.pipeline, {\n            ...this.cursorOptions\n        });\n    }\n    async _initialize(session) {\n        const aggregateOperation = new aggregate_1.AggregateOperation(this.namespace, this.pipeline, {\n            ...this.cursorOptions,\n            ...this.options,\n            session\n        });\n        const response = await (0, execute_operation_1.executeOperation)(session.client, aggregateOperation);\n        const server = aggregateOperation.server;\n        this.maxWireVersion = (0, utils_1.maxWireVersion)(server);\n        if (this.startAtOperationTime == null &&\n            this.resumeAfter == null &&\n            this.startAfter == null &&\n            this.maxWireVersion >= 7) {\n            this.startAtOperationTime = response.operationTime;\n        }\n        this._processBatch(response);\n        this.emit(constants_1.INIT, response);\n        this.emit(constants_1.RESPONSE);\n        // TODO: NODE-2882\n        return { server, session, response };\n    }\n    async getMore(batchSize) {\n        const response = await super.getMore(batchSize);\n        this.maxWireVersion = (0, utils_1.maxWireVersion)(this.server);\n        this._processBatch(response);\n        this.emit(change_stream_1.ChangeStream.MORE, response);\n        this.emit(change_stream_1.ChangeStream.RESPONSE);\n        return response;\n    }\n}\nexports.ChangeStreamCursor = ChangeStreamCursor;\n//# sourceMappingURL=change_stream_cursor.js.map"],"names":[],"mappings":"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"}},
    {"offset": {"line": 18056, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 18060, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/change_stream.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ChangeStream = void 0;\nconst collection_1 = require(\"./collection\");\nconst constants_1 = require(\"./constants\");\nconst change_stream_cursor_1 = require(\"./cursor/change_stream_cursor\");\nconst db_1 = require(\"./db\");\nconst error_1 = require(\"./error\");\nconst mongo_client_1 = require(\"./mongo_client\");\nconst mongo_types_1 = require(\"./mongo_types\");\nconst utils_1 = require(\"./utils\");\n/** @internal */\nconst kCursorStream = Symbol('cursorStream');\n/** @internal */\nconst kClosed = Symbol('closed');\n/** @internal */\nconst kMode = Symbol('mode');\nconst CHANGE_STREAM_OPTIONS = [\n    'resumeAfter',\n    'startAfter',\n    'startAtOperationTime',\n    'fullDocument',\n    'fullDocumentBeforeChange',\n    'showExpandedEvents'\n];\nconst CHANGE_DOMAIN_TYPES = {\n    COLLECTION: Symbol('Collection'),\n    DATABASE: Symbol('Database'),\n    CLUSTER: Symbol('Cluster')\n};\nconst CHANGE_STREAM_EVENTS = [constants_1.RESUME_TOKEN_CHANGED, constants_1.END, constants_1.CLOSE];\nconst NO_RESUME_TOKEN_ERROR = 'A change stream document has been received that lacks a resume token (_id).';\nconst CHANGESTREAM_CLOSED_ERROR = 'ChangeStream is closed';\n/**\n * Creates a new Change Stream instance. Normally created using {@link Collection#watch|Collection.watch()}.\n * @public\n */\nclass ChangeStream extends mongo_types_1.TypedEventEmitter {\n    /**\n     * @internal\n     *\n     * @param parent - The parent object that created this change stream\n     * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents\n     */\n    constructor(parent, pipeline = [], options = {}) {\n        super();\n        this.pipeline = pipeline;\n        this.options = { ...options };\n        delete this.options.writeConcern;\n        if (parent instanceof collection_1.Collection) {\n            this.type = CHANGE_DOMAIN_TYPES.COLLECTION;\n        }\n        else if (parent instanceof db_1.Db) {\n            this.type = CHANGE_DOMAIN_TYPES.DATABASE;\n        }\n        else if (parent instanceof mongo_client_1.MongoClient) {\n            this.type = CHANGE_DOMAIN_TYPES.CLUSTER;\n        }\n        else {\n            throw new error_1.MongoChangeStreamError('Parent provided to ChangeStream constructor must be an instance of Collection, Db, or MongoClient');\n        }\n        this.parent = parent;\n        this.namespace = parent.s.namespace;\n        if (!this.options.readPreference && parent.readPreference) {\n            this.options.readPreference = parent.readPreference;\n        }\n        // Create contained Change Stream cursor\n        this.cursor = this._createChangeStreamCursor(options);\n        this[kClosed] = false;\n        this[kMode] = false;\n        // Listen for any `change` listeners being added to ChangeStream\n        this.on('newListener', eventName => {\n            if (eventName === 'change' && this.cursor && this.listenerCount('change') === 0) {\n                this._streamEvents(this.cursor);\n            }\n        });\n        this.on('removeListener', eventName => {\n            if (eventName === 'change' && this.listenerCount('change') === 0 && this.cursor) {\n                this[kCursorStream]?.removeAllListeners('data');\n            }\n        });\n    }\n    /** @internal */\n    get cursorStream() {\n        return this[kCursorStream];\n    }\n    /** The cached resume token that is used to resume after the most recently returned change. */\n    get resumeToken() {\n        return this.cursor?.resumeToken;\n    }\n    /** Check if there is any document still available in the Change Stream */\n    async hasNext() {\n        this._setIsIterator();\n        // Change streams must resume indefinitely while each resume event succeeds.\n        // This loop continues until either a change event is received or until a resume attempt\n        // fails.\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            try {\n                const hasNext = await this.cursor.hasNext();\n                return hasNext;\n            }\n            catch (error) {\n                try {\n                    await this._processErrorIteratorMode(error);\n                }\n                catch (error) {\n                    try {\n                        await this.close();\n                    }\n                    catch {\n                        // We are not concerned with errors from close()\n                    }\n                    throw error;\n                }\n            }\n        }\n    }\n    /** Get the next available document from the Change Stream. */\n    async next() {\n        this._setIsIterator();\n        // Change streams must resume indefinitely while each resume event succeeds.\n        // This loop continues until either a change event is received or until a resume attempt\n        // fails.\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            try {\n                const change = await this.cursor.next();\n                const processedChange = this._processChange(change ?? null);\n                return processedChange;\n            }\n            catch (error) {\n                try {\n                    await this._processErrorIteratorMode(error);\n                }\n                catch (error) {\n                    try {\n                        await this.close();\n                    }\n                    catch {\n                        // We are not concerned with errors from close()\n                    }\n                    throw error;\n                }\n            }\n        }\n    }\n    /**\n     * Try to get the next available document from the Change Stream's cursor or `null` if an empty batch is returned\n     */\n    async tryNext() {\n        this._setIsIterator();\n        // Change streams must resume indefinitely while each resume event succeeds.\n        // This loop continues until either a change event is received or until a resume attempt\n        // fails.\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            try {\n                const change = await this.cursor.tryNext();\n                return change ?? null;\n            }\n            catch (error) {\n                try {\n                    await this._processErrorIteratorMode(error);\n                }\n                catch (error) {\n                    try {\n                        await this.close();\n                    }\n                    catch {\n                        // We are not concerned with errors from close()\n                    }\n                    throw error;\n                }\n            }\n        }\n    }\n    async *[Symbol.asyncIterator]() {\n        if (this.closed) {\n            return;\n        }\n        try {\n            // Change streams run indefinitely as long as errors are resumable\n            // So the only loop breaking condition is if `next()` throws\n            while (true) {\n                yield await this.next();\n            }\n        }\n        finally {\n            try {\n                await this.close();\n            }\n            catch {\n                // we're not concerned with errors from close()\n            }\n        }\n    }\n    /** Is the cursor closed */\n    get closed() {\n        return this[kClosed] || this.cursor.closed;\n    }\n    /** Close the Change Stream */\n    async close() {\n        this[kClosed] = true;\n        const cursor = this.cursor;\n        try {\n            await cursor.close();\n        }\n        finally {\n            this._endStream();\n        }\n    }\n    /**\n     * Return a modified Readable stream including a possible transform method.\n     *\n     * NOTE: When using a Stream to process change stream events, the stream will\n     * NOT automatically resume in the case a resumable error is encountered.\n     *\n     * @throws MongoChangeStreamError if the underlying cursor or the change stream is closed\n     */\n    stream(options) {\n        if (this.closed) {\n            throw new error_1.MongoChangeStreamError(CHANGESTREAM_CLOSED_ERROR);\n        }\n        this.streamOptions = options;\n        return this.cursor.stream(options);\n    }\n    /** @internal */\n    _setIsEmitter() {\n        if (this[kMode] === 'iterator') {\n            // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n            throw new error_1.MongoAPIError('ChangeStream cannot be used as an EventEmitter after being used as an iterator');\n        }\n        this[kMode] = 'emitter';\n    }\n    /** @internal */\n    _setIsIterator() {\n        if (this[kMode] === 'emitter') {\n            // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n            throw new error_1.MongoAPIError('ChangeStream cannot be used as an iterator after being used as an EventEmitter');\n        }\n        this[kMode] = 'iterator';\n    }\n    /**\n     * Create a new change stream cursor based on self's configuration\n     * @internal\n     */\n    _createChangeStreamCursor(options) {\n        const changeStreamStageOptions = (0, utils_1.filterOptions)(options, CHANGE_STREAM_OPTIONS);\n        if (this.type === CHANGE_DOMAIN_TYPES.CLUSTER) {\n            changeStreamStageOptions.allChangesForCluster = true;\n        }\n        const pipeline = [{ $changeStream: changeStreamStageOptions }, ...this.pipeline];\n        const client = this.type === CHANGE_DOMAIN_TYPES.CLUSTER\n            ? this.parent\n            : this.type === CHANGE_DOMAIN_TYPES.DATABASE\n                ? this.parent.client\n                : this.type === CHANGE_DOMAIN_TYPES.COLLECTION\n                    ? this.parent.client\n                    : null;\n        if (client == null) {\n            // This should never happen because of the assertion in the constructor\n            throw new error_1.MongoRuntimeError(`Changestream type should only be one of cluster, database, collection. Found ${this.type.toString()}`);\n        }\n        const changeStreamCursor = new change_stream_cursor_1.ChangeStreamCursor(client, this.namespace, pipeline, options);\n        for (const event of CHANGE_STREAM_EVENTS) {\n            changeStreamCursor.on(event, e => this.emit(event, e));\n        }\n        if (this.listenerCount(ChangeStream.CHANGE) > 0) {\n            this._streamEvents(changeStreamCursor);\n        }\n        return changeStreamCursor;\n    }\n    /** @internal */\n    _closeEmitterModeWithError(error) {\n        this.emit(ChangeStream.ERROR, error);\n        this.close().catch(() => null);\n    }\n    /** @internal */\n    _streamEvents(cursor) {\n        this._setIsEmitter();\n        const stream = this[kCursorStream] ?? cursor.stream();\n        this[kCursorStream] = stream;\n        stream.on('data', change => {\n            try {\n                const processedChange = this._processChange(change);\n                this.emit(ChangeStream.CHANGE, processedChange);\n            }\n            catch (error) {\n                this.emit(ChangeStream.ERROR, error);\n            }\n        });\n        stream.on('error', error => this._processErrorStreamMode(error));\n    }\n    /** @internal */\n    _endStream() {\n        const cursorStream = this[kCursorStream];\n        if (cursorStream) {\n            ['data', 'close', 'end', 'error'].forEach(event => cursorStream.removeAllListeners(event));\n            cursorStream.destroy();\n        }\n        this[kCursorStream] = undefined;\n    }\n    /** @internal */\n    _processChange(change) {\n        if (this[kClosed]) {\n            // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n            throw new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR);\n        }\n        // a null change means the cursor has been notified, implicitly closing the change stream\n        if (change == null) {\n            // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n            throw new error_1.MongoRuntimeError(CHANGESTREAM_CLOSED_ERROR);\n        }\n        if (change && !change._id) {\n            throw new error_1.MongoChangeStreamError(NO_RESUME_TOKEN_ERROR);\n        }\n        // cache the resume token\n        this.cursor.cacheResumeToken(change._id);\n        // wipe the startAtOperationTime if there was one so that there won't be a conflict\n        // between resumeToken and startAtOperationTime if we need to reconnect the cursor\n        this.options.startAtOperationTime = undefined;\n        return change;\n    }\n    /** @internal */\n    _processErrorStreamMode(changeStreamError) {\n        // If the change stream has been closed explicitly, do not process error.\n        if (this[kClosed])\n            return;\n        if ((0, error_1.isResumableError)(changeStreamError, this.cursor.maxWireVersion)) {\n            this._endStream();\n            this.cursor.close().catch(() => null);\n            const topology = (0, utils_1.getTopology)(this.parent);\n            topology.selectServer(this.cursor.readPreference, {}, serverSelectionError => {\n                if (serverSelectionError)\n                    return this._closeEmitterModeWithError(changeStreamError);\n                this.cursor = this._createChangeStreamCursor(this.cursor.resumeOptions);\n            });\n        }\n        else {\n            this._closeEmitterModeWithError(changeStreamError);\n        }\n    }\n    /** @internal */\n    async _processErrorIteratorMode(changeStreamError) {\n        if (this[kClosed]) {\n            // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n            throw new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR);\n        }\n        if (!(0, error_1.isResumableError)(changeStreamError, this.cursor.maxWireVersion)) {\n            try {\n                await this.close();\n            }\n            catch {\n                // ignore errors from close\n            }\n            throw changeStreamError;\n        }\n        await this.cursor.close().catch(() => null);\n        const topology = (0, utils_1.getTopology)(this.parent);\n        try {\n            await topology.selectServerAsync(this.cursor.readPreference, {});\n            this.cursor = this._createChangeStreamCursor(this.cursor.resumeOptions);\n        }\n        catch {\n            // if the topology can't reconnect, close the stream\n            await this.close();\n            throw changeStreamError;\n        }\n    }\n}\n/** @event */\nChangeStream.RESPONSE = constants_1.RESPONSE;\n/** @event */\nChangeStream.MORE = constants_1.MORE;\n/** @event */\nChangeStream.INIT = constants_1.INIT;\n/** @event */\nChangeStream.CLOSE = constants_1.CLOSE;\n/**\n * Fired for each new matching change in the specified namespace. Attaching a `change`\n * event listener to a Change Stream will switch the stream into flowing mode. Data will\n * then be passed as soon as it is available.\n * @event\n */\nChangeStream.CHANGE = constants_1.CHANGE;\n/** @event */\nChangeStream.END = constants_1.END;\n/** @event */\nChangeStream.ERROR = constants_1.ERROR;\n/**\n * Emitted each time the change stream stores a new resume token.\n * @event\n */\nChangeStream.RESUME_TOKEN_CHANGED = constants_1.RESUME_TOKEN_CHANGED;\nexports.ChangeStream = ChangeStream;\n//# sourceMappingURL=change_stream.js.map"],"names":[],"mappings":"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"}},
    {"offset": {"line": 18417, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 18421, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/bulk/common.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BulkOperationBase = exports.FindOperators = exports.MongoBulkWriteError = exports.mergeBatchResults = exports.WriteError = exports.WriteConcernError = exports.BulkWriteResult = exports.Batch = exports.BatchType = void 0;\nconst util_1 = require(\"util\");\nconst bson_1 = require(\"../bson\");\nconst error_1 = require(\"../error\");\nconst delete_1 = require(\"../operations/delete\");\nconst execute_operation_1 = require(\"../operations/execute_operation\");\nconst insert_1 = require(\"../operations/insert\");\nconst operation_1 = require(\"../operations/operation\");\nconst update_1 = require(\"../operations/update\");\nconst utils_1 = require(\"../utils\");\nconst write_concern_1 = require(\"../write_concern\");\n/** @internal */\nconst kServerError = Symbol('serverError');\n/** @public */\nexports.BatchType = Object.freeze({\n    INSERT: 1,\n    UPDATE: 2,\n    DELETE: 3\n});\n/**\n * Keeps the state of a unordered batch so we can rewrite the results\n * correctly after command execution\n *\n * @public\n */\nclass Batch {\n    constructor(batchType, originalZeroIndex) {\n        this.originalZeroIndex = originalZeroIndex;\n        this.currentIndex = 0;\n        this.originalIndexes = [];\n        this.batchType = batchType;\n        this.operations = [];\n        this.size = 0;\n        this.sizeBytes = 0;\n    }\n}\nexports.Batch = Batch;\n/**\n * @public\n * The result of a bulk write.\n */\nclass BulkWriteResult {\n    static generateIdMap(ids) {\n        const idMap = {};\n        for (const doc of ids) {\n            idMap[doc.index] = doc._id;\n        }\n        return idMap;\n    }\n    /**\n     * Create a new BulkWriteResult instance\n     * @internal\n     */\n    constructor(bulkResult, isOrdered) {\n        this.result = bulkResult;\n        this.insertedCount = this.result.nInserted ?? 0;\n        this.matchedCount = this.result.nMatched ?? 0;\n        this.modifiedCount = this.result.nModified ?? 0;\n        this.deletedCount = this.result.nRemoved ?? 0;\n        this.upsertedCount = this.result.upserted.length ?? 0;\n        this.upsertedIds = BulkWriteResult.generateIdMap(this.result.upserted);\n        this.insertedIds = BulkWriteResult.generateIdMap(this.getSuccessfullyInsertedIds(bulkResult, isOrdered));\n        Object.defineProperty(this, 'result', { value: this.result, enumerable: false });\n    }\n    /** Evaluates to true if the bulk operation correctly executes */\n    get ok() {\n        return this.result.ok;\n    }\n    /**\n     * Returns document_ids that were actually inserted\n     * @internal\n     */\n    getSuccessfullyInsertedIds(bulkResult, isOrdered) {\n        if (bulkResult.writeErrors.length === 0)\n            return bulkResult.insertedIds;\n        if (isOrdered) {\n            return bulkResult.insertedIds.slice(0, bulkResult.writeErrors[0].index);\n        }\n        return bulkResult.insertedIds.filter(({ index }) => !bulkResult.writeErrors.some(writeError => index === writeError.index));\n    }\n    /** Returns the upserted id at the given index */\n    getUpsertedIdAt(index) {\n        return this.result.upserted[index];\n    }\n    /** Returns raw internal result */\n    getRawResponse() {\n        return this.result;\n    }\n    /** Returns true if the bulk operation contains a write error */\n    hasWriteErrors() {\n        return this.result.writeErrors.length > 0;\n    }\n    /** Returns the number of write errors off the bulk operation */\n    getWriteErrorCount() {\n        return this.result.writeErrors.length;\n    }\n    /** Returns a specific write error object */\n    getWriteErrorAt(index) {\n        return index < this.result.writeErrors.length ? this.result.writeErrors[index] : undefined;\n    }\n    /** Retrieve all write errors */\n    getWriteErrors() {\n        return this.result.writeErrors;\n    }\n    /** Retrieve the write concern error if one exists */\n    getWriteConcernError() {\n        if (this.result.writeConcernErrors.length === 0) {\n            return;\n        }\n        else if (this.result.writeConcernErrors.length === 1) {\n            // Return the error\n            return this.result.writeConcernErrors[0];\n        }\n        else {\n            // Combine the errors\n            let errmsg = '';\n            for (let i = 0; i < this.result.writeConcernErrors.length; i++) {\n                const err = this.result.writeConcernErrors[i];\n                errmsg = errmsg + err.errmsg;\n                // TODO: Something better\n                if (i === 0)\n                    errmsg = errmsg + ' and ';\n            }\n            return new WriteConcernError({ errmsg, code: error_1.MONGODB_ERROR_CODES.WriteConcernFailed });\n        }\n    }\n    toString() {\n        return `BulkWriteResult(${this.result})`;\n    }\n    isOk() {\n        return this.result.ok === 1;\n    }\n}\nexports.BulkWriteResult = BulkWriteResult;\n/**\n * An error representing a failure by the server to apply the requested write concern to the bulk operation.\n * @public\n * @category Error\n */\nclass WriteConcernError {\n    constructor(error) {\n        this[kServerError] = error;\n    }\n    /** Write concern error code. */\n    get code() {\n        return this[kServerError].code;\n    }\n    /** Write concern error message. */\n    get errmsg() {\n        return this[kServerError].errmsg;\n    }\n    /** Write concern error info. */\n    get errInfo() {\n        return this[kServerError].errInfo;\n    }\n    toJSON() {\n        return this[kServerError];\n    }\n    toString() {\n        return `WriteConcernError(${this.errmsg})`;\n    }\n}\nexports.WriteConcernError = WriteConcernError;\n/**\n * An error that occurred during a BulkWrite on the server.\n * @public\n * @category Error\n */\nclass WriteError {\n    constructor(err) {\n        this.err = err;\n    }\n    /** WriteError code. */\n    get code() {\n        return this.err.code;\n    }\n    /** WriteError original bulk operation index. */\n    get index() {\n        return this.err.index;\n    }\n    /** WriteError message. */\n    get errmsg() {\n        return this.err.errmsg;\n    }\n    /** WriteError details. */\n    get errInfo() {\n        return this.err.errInfo;\n    }\n    /** Returns the underlying operation that caused the error */\n    getOperation() {\n        return this.err.op;\n    }\n    toJSON() {\n        return { code: this.err.code, index: this.err.index, errmsg: this.err.errmsg, op: this.err.op };\n    }\n    toString() {\n        return `WriteError(${JSON.stringify(this.toJSON())})`;\n    }\n}\nexports.WriteError = WriteError;\n/** Merges results into shared data structure */\nfunction mergeBatchResults(batch, bulkResult, err, result) {\n    // If we have an error set the result to be the err object\n    if (err) {\n        result = err;\n    }\n    else if (result && result.result) {\n        result = result.result;\n    }\n    if (result == null) {\n        return;\n    }\n    // Do we have a top level error stop processing and return\n    if (result.ok === 0 && bulkResult.ok === 1) {\n        bulkResult.ok = 0;\n        const writeError = {\n            index: 0,\n            code: result.code || 0,\n            errmsg: result.message,\n            errInfo: result.errInfo,\n            op: batch.operations[0]\n        };\n        bulkResult.writeErrors.push(new WriteError(writeError));\n        return;\n    }\n    else if (result.ok === 0 && bulkResult.ok === 0) {\n        return;\n    }\n    // If we have an insert Batch type\n    if (isInsertBatch(batch) && result.n) {\n        bulkResult.nInserted = bulkResult.nInserted + result.n;\n    }\n    // If we have an insert Batch type\n    if (isDeleteBatch(batch) && result.n) {\n        bulkResult.nRemoved = bulkResult.nRemoved + result.n;\n    }\n    let nUpserted = 0;\n    // We have an array of upserted values, we need to rewrite the indexes\n    if (Array.isArray(result.upserted)) {\n        nUpserted = result.upserted.length;\n        for (let i = 0; i < result.upserted.length; i++) {\n            bulkResult.upserted.push({\n                index: result.upserted[i].index + batch.originalZeroIndex,\n                _id: result.upserted[i]._id\n            });\n        }\n    }\n    else if (result.upserted) {\n        nUpserted = 1;\n        bulkResult.upserted.push({\n            index: batch.originalZeroIndex,\n            _id: result.upserted\n        });\n    }\n    // If we have an update Batch type\n    if (isUpdateBatch(batch) && result.n) {\n        const nModified = result.nModified;\n        bulkResult.nUpserted = bulkResult.nUpserted + nUpserted;\n        bulkResult.nMatched = bulkResult.nMatched + (result.n - nUpserted);\n        if (typeof nModified === 'number') {\n            bulkResult.nModified = bulkResult.nModified + nModified;\n        }\n        else {\n            bulkResult.nModified = 0;\n        }\n    }\n    if (Array.isArray(result.writeErrors)) {\n        for (let i = 0; i < result.writeErrors.length; i++) {\n            const writeError = {\n                index: batch.originalIndexes[result.writeErrors[i].index],\n                code: result.writeErrors[i].code,\n                errmsg: result.writeErrors[i].errmsg,\n                errInfo: result.writeErrors[i].errInfo,\n                op: batch.operations[result.writeErrors[i].index]\n            };\n            bulkResult.writeErrors.push(new WriteError(writeError));\n        }\n    }\n    if (result.writeConcernError) {\n        bulkResult.writeConcernErrors.push(new WriteConcernError(result.writeConcernError));\n    }\n}\nexports.mergeBatchResults = mergeBatchResults;\nfunction executeCommands(bulkOperation, options, callback) {\n    if (bulkOperation.s.batches.length === 0) {\n        return callback(undefined, new BulkWriteResult(bulkOperation.s.bulkResult, bulkOperation.isOrdered));\n    }\n    const batch = bulkOperation.s.batches.shift();\n    function resultHandler(err, result) {\n        // Error is a driver related error not a bulk op error, return early\n        if (err && 'message' in err && !(err instanceof error_1.MongoWriteConcernError)) {\n            return callback(new MongoBulkWriteError(err, new BulkWriteResult(bulkOperation.s.bulkResult, bulkOperation.isOrdered)));\n        }\n        if (err instanceof error_1.MongoWriteConcernError) {\n            return handleMongoWriteConcernError(batch, bulkOperation.s.bulkResult, bulkOperation.isOrdered, err, callback);\n        }\n        // Merge the results together\n        mergeBatchResults(batch, bulkOperation.s.bulkResult, err, result);\n        const writeResult = new BulkWriteResult(bulkOperation.s.bulkResult, bulkOperation.isOrdered);\n        if (bulkOperation.handleWriteError(callback, writeResult))\n            return;\n        // Execute the next command in line\n        executeCommands(bulkOperation, options, callback);\n    }\n    const finalOptions = (0, utils_1.resolveOptions)(bulkOperation, {\n        ...options,\n        ordered: bulkOperation.isOrdered\n    });\n    if (finalOptions.bypassDocumentValidation !== true) {\n        delete finalOptions.bypassDocumentValidation;\n    }\n    // Set an operationIf if provided\n    if (bulkOperation.operationId) {\n        resultHandler.operationId = bulkOperation.operationId;\n    }\n    // Is the bypassDocumentValidation options specific\n    if (bulkOperation.s.bypassDocumentValidation === true) {\n        finalOptions.bypassDocumentValidation = true;\n    }\n    // Is the checkKeys option disabled\n    if (bulkOperation.s.checkKeys === false) {\n        finalOptions.checkKeys = false;\n    }\n    if (finalOptions.retryWrites) {\n        if (isUpdateBatch(batch)) {\n            finalOptions.retryWrites = finalOptions.retryWrites && !batch.operations.some(op => op.multi);\n        }\n        if (isDeleteBatch(batch)) {\n            finalOptions.retryWrites =\n                finalOptions.retryWrites && !batch.operations.some(op => op.limit === 0);\n        }\n    }\n    try {\n        if (isInsertBatch(batch)) {\n            (0, execute_operation_1.executeOperation)(bulkOperation.s.collection.client, new insert_1.InsertOperation(bulkOperation.s.namespace, batch.operations, finalOptions), resultHandler);\n        }\n        else if (isUpdateBatch(batch)) {\n            (0, execute_operation_1.executeOperation)(bulkOperation.s.collection.client, new update_1.UpdateOperation(bulkOperation.s.namespace, batch.operations, finalOptions), resultHandler);\n        }\n        else if (isDeleteBatch(batch)) {\n            (0, execute_operation_1.executeOperation)(bulkOperation.s.collection.client, new delete_1.DeleteOperation(bulkOperation.s.namespace, batch.operations, finalOptions), resultHandler);\n        }\n    }\n    catch (err) {\n        // Force top level error\n        err.ok = 0;\n        // Merge top level error and return\n        mergeBatchResults(batch, bulkOperation.s.bulkResult, err, undefined);\n        callback();\n    }\n}\nfunction handleMongoWriteConcernError(batch, bulkResult, isOrdered, err, callback) {\n    mergeBatchResults(batch, bulkResult, undefined, err.result);\n    callback(new MongoBulkWriteError({\n        message: err.result?.writeConcernError.errmsg,\n        code: err.result?.writeConcernError.result\n    }, new BulkWriteResult(bulkResult, isOrdered)));\n}\n/**\n * An error indicating an unsuccessful Bulk Write\n * @public\n * @category Error\n */\nclass MongoBulkWriteError extends error_1.MongoServerError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(error, result) {\n        super(error);\n        this.writeErrors = [];\n        if (error instanceof WriteConcernError)\n            this.err = error;\n        else if (!(error instanceof Error)) {\n            this.message = error.message;\n            this.code = error.code;\n            this.writeErrors = error.writeErrors ?? [];\n        }\n        this.result = result;\n        Object.assign(this, error);\n    }\n    get name() {\n        return 'MongoBulkWriteError';\n    }\n    /** Number of documents inserted. */\n    get insertedCount() {\n        return this.result.insertedCount;\n    }\n    /** Number of documents matched for update. */\n    get matchedCount() {\n        return this.result.matchedCount;\n    }\n    /** Number of documents modified. */\n    get modifiedCount() {\n        return this.result.modifiedCount;\n    }\n    /** Number of documents deleted. */\n    get deletedCount() {\n        return this.result.deletedCount;\n    }\n    /** Number of documents upserted. */\n    get upsertedCount() {\n        return this.result.upsertedCount;\n    }\n    /** Inserted document generated Id's, hash key is the index of the originating operation */\n    get insertedIds() {\n        return this.result.insertedIds;\n    }\n    /** Upserted document generated Id's, hash key is the index of the originating operation */\n    get upsertedIds() {\n        return this.result.upsertedIds;\n    }\n}\nexports.MongoBulkWriteError = MongoBulkWriteError;\n/**\n * A builder object that is returned from {@link BulkOperationBase#find}.\n * Is used to build a write operation that involves a query filter.\n *\n * @public\n */\nclass FindOperators {\n    /**\n     * Creates a new FindOperators object.\n     * @internal\n     */\n    constructor(bulkOperation) {\n        this.bulkOperation = bulkOperation;\n    }\n    /** Add a multiple update operation to the bulk operation */\n    update(updateDocument) {\n        const currentOp = buildCurrentOp(this.bulkOperation);\n        return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, updateDocument, {\n            ...currentOp,\n            multi: true\n        }));\n    }\n    /** Add a single update operation to the bulk operation */\n    updateOne(updateDocument) {\n        if (!(0, utils_1.hasAtomicOperators)(updateDocument)) {\n            throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n        const currentOp = buildCurrentOp(this.bulkOperation);\n        return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, updateDocument, { ...currentOp, multi: false }));\n    }\n    /** Add a replace one operation to the bulk operation */\n    replaceOne(replacement) {\n        if ((0, utils_1.hasAtomicOperators)(replacement)) {\n            throw new error_1.MongoInvalidArgumentError('Replacement document must not use atomic operators');\n        }\n        const currentOp = buildCurrentOp(this.bulkOperation);\n        return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, replacement, { ...currentOp, multi: false }));\n    }\n    /** Add a delete one operation to the bulk operation */\n    deleteOne() {\n        const currentOp = buildCurrentOp(this.bulkOperation);\n        return this.bulkOperation.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(currentOp.selector, { ...currentOp, limit: 1 }));\n    }\n    /** Add a delete many operation to the bulk operation */\n    delete() {\n        const currentOp = buildCurrentOp(this.bulkOperation);\n        return this.bulkOperation.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(currentOp.selector, { ...currentOp, limit: 0 }));\n    }\n    /** Upsert modifier for update bulk operation, noting that this operation is an upsert. */\n    upsert() {\n        if (!this.bulkOperation.s.currentOp) {\n            this.bulkOperation.s.currentOp = {};\n        }\n        this.bulkOperation.s.currentOp.upsert = true;\n        return this;\n    }\n    /** Specifies the collation for the query condition. */\n    collation(collation) {\n        if (!this.bulkOperation.s.currentOp) {\n            this.bulkOperation.s.currentOp = {};\n        }\n        this.bulkOperation.s.currentOp.collation = collation;\n        return this;\n    }\n    /** Specifies arrayFilters for UpdateOne or UpdateMany bulk operations. */\n    arrayFilters(arrayFilters) {\n        if (!this.bulkOperation.s.currentOp) {\n            this.bulkOperation.s.currentOp = {};\n        }\n        this.bulkOperation.s.currentOp.arrayFilters = arrayFilters;\n        return this;\n    }\n    /** Specifies hint for the bulk operation. */\n    hint(hint) {\n        if (!this.bulkOperation.s.currentOp) {\n            this.bulkOperation.s.currentOp = {};\n        }\n        this.bulkOperation.s.currentOp.hint = hint;\n        return this;\n    }\n}\nexports.FindOperators = FindOperators;\nconst executeCommandsAsync = (0, util_1.promisify)(executeCommands);\n/**\n * TODO(NODE-4063)\n * BulkWrites merge complexity is implemented in executeCommands\n * This provides a vehicle to treat bulkOperations like any other operation (hence \"shim\")\n * We would like this logic to simply live inside the BulkWriteOperation class\n * @internal\n */\nclass BulkWriteShimOperation extends operation_1.AbstractOperation {\n    constructor(bulkOperation, options) {\n        super(options);\n        this.bulkOperation = bulkOperation;\n    }\n    execute(_server, session) {\n        if (this.options.session == null) {\n            // An implicit session could have been created by 'executeOperation'\n            // So if we stick it on finalOptions here, each bulk operation\n            // will use this same session, it'll be passed in the same way\n            // an explicit session would be\n            this.options.session = session;\n        }\n        return executeCommandsAsync(this.bulkOperation, this.options);\n    }\n}\n/** @public */\nclass BulkOperationBase {\n    /**\n     * Create a new OrderedBulkOperation or UnorderedBulkOperation instance\n     * @internal\n     */\n    constructor(collection, options, isOrdered) {\n        // determine whether bulkOperation is ordered or unordered\n        this.isOrdered = isOrdered;\n        const topology = (0, utils_1.getTopology)(collection);\n        options = options == null ? {} : options;\n        // TODO Bring from driver information in hello\n        // Get the namespace for the write operations\n        const namespace = collection.s.namespace;\n        // Used to mark operation as executed\n        const executed = false;\n        // Current item\n        const currentOp = undefined;\n        // Set max byte size\n        const hello = topology.lastHello();\n        // If we have autoEncryption on, batch-splitting must be done on 2mb chunks, but single documents\n        // over 2mb are still allowed\n        const usingAutoEncryption = !!(topology.s.options && topology.s.options.autoEncrypter);\n        const maxBsonObjectSize = hello && hello.maxBsonObjectSize ? hello.maxBsonObjectSize : 1024 * 1024 * 16;\n        const maxBatchSizeBytes = usingAutoEncryption ? 1024 * 1024 * 2 : maxBsonObjectSize;\n        const maxWriteBatchSize = hello && hello.maxWriteBatchSize ? hello.maxWriteBatchSize : 1000;\n        // Calculates the largest possible size of an Array key, represented as a BSON string\n        // element. This calculation:\n        //     1 byte for BSON type\n        //     # of bytes = length of (string representation of (maxWriteBatchSize - 1))\n        //   + 1 bytes for null terminator\n        const maxKeySize = (maxWriteBatchSize - 1).toString(10).length + 2;\n        // Final options for retryable writes\n        let finalOptions = Object.assign({}, options);\n        finalOptions = (0, utils_1.applyRetryableWrites)(finalOptions, collection.s.db);\n        // Final results\n        const bulkResult = {\n            ok: 1,\n            writeErrors: [],\n            writeConcernErrors: [],\n            insertedIds: [],\n            nInserted: 0,\n            nUpserted: 0,\n            nMatched: 0,\n            nModified: 0,\n            nRemoved: 0,\n            upserted: []\n        };\n        // Internal state\n        this.s = {\n            // Final result\n            bulkResult,\n            // Current batch state\n            currentBatch: undefined,\n            currentIndex: 0,\n            // ordered specific\n            currentBatchSize: 0,\n            currentBatchSizeBytes: 0,\n            // unordered specific\n            currentInsertBatch: undefined,\n            currentUpdateBatch: undefined,\n            currentRemoveBatch: undefined,\n            batches: [],\n            // Write concern\n            writeConcern: write_concern_1.WriteConcern.fromOptions(options),\n            // Max batch size options\n            maxBsonObjectSize,\n            maxBatchSizeBytes,\n            maxWriteBatchSize,\n            maxKeySize,\n            // Namespace\n            namespace,\n            // Topology\n            topology,\n            // Options\n            options: finalOptions,\n            // BSON options\n            bsonOptions: (0, bson_1.resolveBSONOptions)(options),\n            // Current operation\n            currentOp,\n            // Executed\n            executed,\n            // Collection\n            collection,\n            // Fundamental error\n            err: undefined,\n            // check keys\n            checkKeys: typeof options.checkKeys === 'boolean' ? options.checkKeys : false\n        };\n        // bypass Validation\n        if (options.bypassDocumentValidation === true) {\n            this.s.bypassDocumentValidation = true;\n        }\n    }\n    /**\n     * Add a single insert document to the bulk operation\n     *\n     * @example\n     * ```ts\n     * const bulkOp = collection.initializeOrderedBulkOp();\n     *\n     * // Adds three inserts to the bulkOp.\n     * bulkOp\n     *   .insert({ a: 1 })\n     *   .insert({ b: 2 })\n     *   .insert({ c: 3 });\n     * await bulkOp.execute();\n     * ```\n     */\n    insert(document) {\n        if (document._id == null && !shouldForceServerObjectId(this)) {\n            document._id = new bson_1.ObjectId();\n        }\n        return this.addToOperationsList(exports.BatchType.INSERT, document);\n    }\n    /**\n     * Builds a find operation for an update/updateOne/delete/deleteOne/replaceOne.\n     * Returns a builder object used to complete the definition of the operation.\n     *\n     * @example\n     * ```ts\n     * const bulkOp = collection.initializeOrderedBulkOp();\n     *\n     * // Add an updateOne to the bulkOp\n     * bulkOp.find({ a: 1 }).updateOne({ $set: { b: 2 } });\n     *\n     * // Add an updateMany to the bulkOp\n     * bulkOp.find({ c: 3 }).update({ $set: { d: 4 } });\n     *\n     * // Add an upsert\n     * bulkOp.find({ e: 5 }).upsert().updateOne({ $set: { f: 6 } });\n     *\n     * // Add a deletion\n     * bulkOp.find({ g: 7 }).deleteOne();\n     *\n     * // Add a multi deletion\n     * bulkOp.find({ h: 8 }).delete();\n     *\n     * // Add a replaceOne\n     * bulkOp.find({ i: 9 }).replaceOne({writeConcern: { j: 10 }});\n     *\n     * // Update using a pipeline (requires Mongodb 4.2 or higher)\n     * bulk.find({ k: 11, y: { $exists: true }, z: { $exists: true } }).updateOne([\n     *   { $set: { total: { $sum: [ '$y', '$z' ] } } }\n     * ]);\n     *\n     * // All of the ops will now be executed\n     * await bulkOp.execute();\n     * ```\n     */\n    find(selector) {\n        if (!selector) {\n            throw new error_1.MongoInvalidArgumentError('Bulk find operation must specify a selector');\n        }\n        // Save a current selector\n        this.s.currentOp = {\n            selector: selector\n        };\n        return new FindOperators(this);\n    }\n    /** Specifies a raw operation to perform in the bulk write. */\n    raw(op) {\n        if (op == null || typeof op !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Operation must be an object with an operation key');\n        }\n        if ('insertOne' in op) {\n            const forceServerObjectId = shouldForceServerObjectId(this);\n            if (op.insertOne && op.insertOne.document == null) {\n                // NOTE: provided for legacy support, but this is a malformed operation\n                if (forceServerObjectId !== true && op.insertOne._id == null) {\n                    op.insertOne._id = new bson_1.ObjectId();\n                }\n                return this.addToOperationsList(exports.BatchType.INSERT, op.insertOne);\n            }\n            if (forceServerObjectId !== true && op.insertOne.document._id == null) {\n                op.insertOne.document._id = new bson_1.ObjectId();\n            }\n            return this.addToOperationsList(exports.BatchType.INSERT, op.insertOne.document);\n        }\n        if ('replaceOne' in op || 'updateOne' in op || 'updateMany' in op) {\n            if ('replaceOne' in op) {\n                if ('q' in op.replaceOne) {\n                    throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n                }\n                const updateStatement = (0, update_1.makeUpdateStatement)(op.replaceOne.filter, op.replaceOne.replacement, { ...op.replaceOne, multi: false });\n                if ((0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n                    throw new error_1.MongoInvalidArgumentError('Replacement document must not use atomic operators');\n                }\n                return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n            }\n            if ('updateOne' in op) {\n                if ('q' in op.updateOne) {\n                    throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n                }\n                const updateStatement = (0, update_1.makeUpdateStatement)(op.updateOne.filter, op.updateOne.update, {\n                    ...op.updateOne,\n                    multi: false\n                });\n                if (!(0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n                    throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n                }\n                return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n            }\n            if ('updateMany' in op) {\n                if ('q' in op.updateMany) {\n                    throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n                }\n                const updateStatement = (0, update_1.makeUpdateStatement)(op.updateMany.filter, op.updateMany.update, {\n                    ...op.updateMany,\n                    multi: true\n                });\n                if (!(0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n                    throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n                }\n                return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n            }\n        }\n        if ('deleteOne' in op) {\n            if ('q' in op.deleteOne) {\n                throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n            }\n            return this.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(op.deleteOne.filter, { ...op.deleteOne, limit: 1 }));\n        }\n        if ('deleteMany' in op) {\n            if ('q' in op.deleteMany) {\n                throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n            }\n            return this.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(op.deleteMany.filter, { ...op.deleteMany, limit: 0 }));\n        }\n        // otherwise an unknown operation was provided\n        throw new error_1.MongoInvalidArgumentError('bulkWrite only supports insertOne, updateOne, updateMany, deleteOne, deleteMany');\n    }\n    get bsonOptions() {\n        return this.s.bsonOptions;\n    }\n    get writeConcern() {\n        return this.s.writeConcern;\n    }\n    get batches() {\n        const batches = [...this.s.batches];\n        if (this.isOrdered) {\n            if (this.s.currentBatch)\n                batches.push(this.s.currentBatch);\n        }\n        else {\n            if (this.s.currentInsertBatch)\n                batches.push(this.s.currentInsertBatch);\n            if (this.s.currentUpdateBatch)\n                batches.push(this.s.currentUpdateBatch);\n            if (this.s.currentRemoveBatch)\n                batches.push(this.s.currentRemoveBatch);\n        }\n        return batches;\n    }\n    async execute(options = {}) {\n        if (this.s.executed) {\n            throw new error_1.MongoBatchReExecutionError();\n        }\n        const writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n        if (writeConcern) {\n            this.s.writeConcern = writeConcern;\n        }\n        // If we have current batch\n        if (this.isOrdered) {\n            if (this.s.currentBatch)\n                this.s.batches.push(this.s.currentBatch);\n        }\n        else {\n            if (this.s.currentInsertBatch)\n                this.s.batches.push(this.s.currentInsertBatch);\n            if (this.s.currentUpdateBatch)\n                this.s.batches.push(this.s.currentUpdateBatch);\n            if (this.s.currentRemoveBatch)\n                this.s.batches.push(this.s.currentRemoveBatch);\n        }\n        // If we have no operations in the bulk raise an error\n        if (this.s.batches.length === 0) {\n            throw new error_1.MongoInvalidArgumentError('Invalid BulkOperation, Batch cannot be empty');\n        }\n        this.s.executed = true;\n        const finalOptions = { ...this.s.options, ...options };\n        const operation = new BulkWriteShimOperation(this, finalOptions);\n        return (0, execute_operation_1.executeOperation)(this.s.collection.client, operation);\n    }\n    /**\n     * Handles the write error before executing commands\n     * @internal\n     */\n    handleWriteError(callback, writeResult) {\n        if (this.s.bulkResult.writeErrors.length > 0) {\n            const msg = this.s.bulkResult.writeErrors[0].errmsg\n                ? this.s.bulkResult.writeErrors[0].errmsg\n                : 'write operation failed';\n            callback(new MongoBulkWriteError({\n                message: msg,\n                code: this.s.bulkResult.writeErrors[0].code,\n                writeErrors: this.s.bulkResult.writeErrors\n            }, writeResult));\n            return true;\n        }\n        const writeConcernError = writeResult.getWriteConcernError();\n        if (writeConcernError) {\n            callback(new MongoBulkWriteError(writeConcernError, writeResult));\n            return true;\n        }\n        return false;\n    }\n}\nexports.BulkOperationBase = BulkOperationBase;\nObject.defineProperty(BulkOperationBase.prototype, 'length', {\n    enumerable: true,\n    get() {\n        return this.s.currentIndex;\n    }\n});\nfunction shouldForceServerObjectId(bulkOperation) {\n    if (typeof bulkOperation.s.options.forceServerObjectId === 'boolean') {\n        return bulkOperation.s.options.forceServerObjectId;\n    }\n    if (typeof bulkOperation.s.collection.s.db.options?.forceServerObjectId === 'boolean') {\n        return bulkOperation.s.collection.s.db.options?.forceServerObjectId;\n    }\n    return false;\n}\nfunction isInsertBatch(batch) {\n    return batch.batchType === exports.BatchType.INSERT;\n}\nfunction isUpdateBatch(batch) {\n    return batch.batchType === exports.BatchType.UPDATE;\n}\nfunction isDeleteBatch(batch) {\n    return batch.batchType === exports.BatchType.DELETE;\n}\nfunction buildCurrentOp(bulkOp) {\n    let { currentOp } = bulkOp.s;\n    bulkOp.s.currentOp = undefined;\n    if (!currentOp)\n        currentOp = {};\n    return currentOp;\n}\n//# sourceMappingURL=common.js.map"],"names":[],"mappings":"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"}},
    {"offset": {"line": 19250, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 19254, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/bulk/unordered.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UnorderedBulkOperation = void 0;\nconst BSON = require(\"../bson\");\nconst error_1 = require(\"../error\");\nconst common_1 = require(\"./common\");\n/** @public */\nclass UnorderedBulkOperation extends common_1.BulkOperationBase {\n    /** @internal */\n    constructor(collection, options) {\n        super(collection, options, false);\n    }\n    handleWriteError(callback, writeResult) {\n        if (this.s.batches.length) {\n            return false;\n        }\n        return super.handleWriteError(callback, writeResult);\n    }\n    addToOperationsList(batchType, document) {\n        // Get the bsonSize\n        const bsonSize = BSON.calculateObjectSize(document, {\n            checkKeys: false,\n            // Since we don't know what the user selected for BSON options here,\n            // err on the safe side, and check the size with ignoreUndefined: false.\n            ignoreUndefined: false\n        });\n        // Throw error if the doc is bigger than the max BSON size\n        if (bsonSize >= this.s.maxBsonObjectSize) {\n            // TODO(NODE-3483): Change this to MongoBSONError\n            throw new error_1.MongoInvalidArgumentError(`Document is larger than the maximum size ${this.s.maxBsonObjectSize}`);\n        }\n        // Holds the current batch\n        this.s.currentBatch = undefined;\n        // Get the right type of batch\n        if (batchType === common_1.BatchType.INSERT) {\n            this.s.currentBatch = this.s.currentInsertBatch;\n        }\n        else if (batchType === common_1.BatchType.UPDATE) {\n            this.s.currentBatch = this.s.currentUpdateBatch;\n        }\n        else if (batchType === common_1.BatchType.DELETE) {\n            this.s.currentBatch = this.s.currentRemoveBatch;\n        }\n        const maxKeySize = this.s.maxKeySize;\n        // Create a new batch object if we don't have a current one\n        if (this.s.currentBatch == null) {\n            this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex);\n        }\n        // Check if we need to create a new batch\n        if (\n        // New batch if we exceed the max batch op size\n        this.s.currentBatch.size + 1 >= this.s.maxWriteBatchSize ||\n            // New batch if we exceed the maxBatchSizeBytes. Only matters if batch already has a doc,\n            // since we can't sent an empty batch\n            (this.s.currentBatch.size > 0 &&\n                this.s.currentBatch.sizeBytes + maxKeySize + bsonSize >= this.s.maxBatchSizeBytes) ||\n            // New batch if the new op does not have the same op type as the current batch\n            this.s.currentBatch.batchType !== batchType) {\n            // Save the batch to the execution stack\n            this.s.batches.push(this.s.currentBatch);\n            // Create a new batch\n            this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex);\n        }\n        // We have an array of documents\n        if (Array.isArray(document)) {\n            throw new error_1.MongoInvalidArgumentError('Operation passed in cannot be an Array');\n        }\n        this.s.currentBatch.operations.push(document);\n        this.s.currentBatch.originalIndexes.push(this.s.currentIndex);\n        this.s.currentIndex = this.s.currentIndex + 1;\n        // Save back the current Batch to the right type\n        if (batchType === common_1.BatchType.INSERT) {\n            this.s.currentInsertBatch = this.s.currentBatch;\n            this.s.bulkResult.insertedIds.push({\n                index: this.s.bulkResult.insertedIds.length,\n                _id: document._id\n            });\n        }\n        else if (batchType === common_1.BatchType.UPDATE) {\n            this.s.currentUpdateBatch = this.s.currentBatch;\n        }\n        else if (batchType === common_1.BatchType.DELETE) {\n            this.s.currentRemoveBatch = this.s.currentBatch;\n        }\n        // Update current batch size\n        this.s.currentBatch.size += 1;\n        this.s.currentBatch.sizeBytes += maxKeySize + bsonSize;\n        return this;\n    }\n}\nexports.UnorderedBulkOperation = UnorderedBulkOperation;\n//# sourceMappingURL=unordered.js.map"],"names":[],"mappings":"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"}},
    {"offset": {"line": 19335, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 19339, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/bulk/ordered.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OrderedBulkOperation = void 0;\nconst BSON = require(\"../bson\");\nconst error_1 = require(\"../error\");\nconst common_1 = require(\"./common\");\n/** @public */\nclass OrderedBulkOperation extends common_1.BulkOperationBase {\n    /** @internal */\n    constructor(collection, options) {\n        super(collection, options, true);\n    }\n    addToOperationsList(batchType, document) {\n        // Get the bsonSize\n        const bsonSize = BSON.calculateObjectSize(document, {\n            checkKeys: false,\n            // Since we don't know what the user selected for BSON options here,\n            // err on the safe side, and check the size with ignoreUndefined: false.\n            ignoreUndefined: false\n        });\n        // Throw error if the doc is bigger than the max BSON size\n        if (bsonSize >= this.s.maxBsonObjectSize)\n            // TODO(NODE-3483): Change this to MongoBSONError\n            throw new error_1.MongoInvalidArgumentError(`Document is larger than the maximum size ${this.s.maxBsonObjectSize}`);\n        // Create a new batch object if we don't have a current one\n        if (this.s.currentBatch == null) {\n            this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex);\n        }\n        const maxKeySize = this.s.maxKeySize;\n        // Check if we need to create a new batch\n        if (\n        // New batch if we exceed the max batch op size\n        this.s.currentBatchSize + 1 >= this.s.maxWriteBatchSize ||\n            // New batch if we exceed the maxBatchSizeBytes. Only matters if batch already has a doc,\n            // since we can't sent an empty batch\n            (this.s.currentBatchSize > 0 &&\n                this.s.currentBatchSizeBytes + maxKeySize + bsonSize >= this.s.maxBatchSizeBytes) ||\n            // New batch if the new op does not have the same op type as the current batch\n            this.s.currentBatch.batchType !== batchType) {\n            // Save the batch to the execution stack\n            this.s.batches.push(this.s.currentBatch);\n            // Create a new batch\n            this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex);\n            // Reset the current size trackers\n            this.s.currentBatchSize = 0;\n            this.s.currentBatchSizeBytes = 0;\n        }\n        if (batchType === common_1.BatchType.INSERT) {\n            this.s.bulkResult.insertedIds.push({\n                index: this.s.currentIndex,\n                _id: document._id\n            });\n        }\n        // We have an array of documents\n        if (Array.isArray(document)) {\n            throw new error_1.MongoInvalidArgumentError('Operation passed in cannot be an Array');\n        }\n        this.s.currentBatch.originalIndexes.push(this.s.currentIndex);\n        this.s.currentBatch.operations.push(document);\n        this.s.currentBatchSize += 1;\n        this.s.currentBatchSizeBytes += maxKeySize + bsonSize;\n        this.s.currentIndex += 1;\n        return this;\n    }\n}\nexports.OrderedBulkOperation = OrderedBulkOperation;\n//# sourceMappingURL=ordered.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,oBAAoB,GAAG,KAAK;AACpC,MAAM,OAAO;AACb,MAAM,UAAU;AAChB,MAAM,WAAW;AACjB,YAAY,GACZ,MAAM,6BAA6B,SAAS,iBAAiB;IACzD,cAAc,GACd,YAAY,UAAU,EAAE,OAAO,CAAE;QAC7B,KAAK,CAAC,YAAY,SAAS;IAC/B;IACA,oBAAoB,SAAS,EAAE,QAAQ,EAAE;QACrC,mBAAmB;QACnB,MAAM,WAAW,KAAK,mBAAmB,CAAC,UAAU;YAChD,WAAW;YACX,oEAAoE;YACpE,wEAAwE;YACxE,iBAAiB;QACrB;QACA,0DAA0D;QAC1D,IAAI,YAAY,IAAI,CAAC,CAAC,CAAC,iBAAiB,EACpC,iDAAiD;QACjD,MAAM,IAAI,QAAQ,yBAAyB,CAAC,CAAC,yCAAyC,EAAE,IAAI,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC;QACtH,2DAA2D;QAC3D,IAAI,IAAI,CAAC,CAAC,CAAC,YAAY,IAAI,MAAM;YAC7B,IAAI,CAAC,CAAC,CAAC,YAAY,GAAG,IAAI,SAAS,KAAK,CAAC,WAAW,IAAI,CAAC,CAAC,CAAC,YAAY;QAC3E;QACA,MAAM,aAAa,IAAI,CAAC,CAAC,CAAC,UAAU;QACpC,yCAAyC;QACzC,IACA,+CAA+C;QAC/C,IAAI,CAAC,CAAC,CAAC,gBAAgB,GAAG,KAAK,IAAI,CAAC,CAAC,CAAC,iBAAiB,IAGlD,IAAI,CAAC,CAAC,CAAC,gBAAgB,GAAG,KACvB,IAAI,CAAC,CAAC,CAAC,qBAAqB,GAAG,aAAa,YAAY,IAAI,CAAC,CAAC,CAAC,iBAAiB,IACpF,8EAA8E;QAC9E,IAAI,CAAC,CAAC,CAAC,YAAY,CAAC,SAAS,KAAK,WAAW;YAC7C,wCAAwC;YACxC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,YAAY;YACvC,qBAAqB;YACrB,IAAI,CAAC,CAAC,CAAC,YAAY,GAAG,IAAI,SAAS,KAAK,CAAC,WAAW,IAAI,CAAC,CAAC,CAAC,YAAY;YACvE,kCAAkC;YAClC,IAAI,CAAC,CAAC,CAAC,gBAAgB,GAAG;YAC1B,IAAI,CAAC,CAAC,CAAC,qBAAqB,GAAG;QACnC;QACA,IAAI,cAAc,SAAS,SAAS,CAAC,MAAM,EAAE;YACzC,IAAI,CAAC,CAAC,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC;gBAC/B,OAAO,IAAI,CAAC,CAAC,CAAC,YAAY;gBAC1B,KAAK,SAAS,GAAG;YACrB;QACJ;QACA,gCAAgC;QAChC,IAAI,MAAM,OAAO,CAAC,WAAW;YACzB,MAAM,IAAI,QAAQ,yBAAyB,CAAC;QAChD;QACA,IAAI,CAAC,CAAC,CAAC,YAAY,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,YAAY;QAC5D,IAAI,CAAC,CAAC,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC;QACpC,IAAI,CAAC,CAAC,CAAC,gBAAgB,IAAI;QAC3B,IAAI,CAAC,CAAC,CAAC,qBAAqB,IAAI,aAAa;QAC7C,IAAI,CAAC,CAAC,CAAC,YAAY,IAAI;QACvB,OAAO,IAAI;IACf;AACJ;AACA,QAAQ,oBAAoB,GAAG,sBAC/B,mCAAmC"}},
    {"offset": {"line": 19398, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 19402, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/collection.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Collection = void 0;\nconst bson_1 = require(\"./bson\");\nconst ordered_1 = require(\"./bulk/ordered\");\nconst unordered_1 = require(\"./bulk/unordered\");\nconst change_stream_1 = require(\"./change_stream\");\nconst aggregation_cursor_1 = require(\"./cursor/aggregation_cursor\");\nconst find_cursor_1 = require(\"./cursor/find_cursor\");\nconst list_indexes_cursor_1 = require(\"./cursor/list_indexes_cursor\");\nconst list_search_indexes_cursor_1 = require(\"./cursor/list_search_indexes_cursor\");\nconst error_1 = require(\"./error\");\nconst bulk_write_1 = require(\"./operations/bulk_write\");\nconst count_1 = require(\"./operations/count\");\nconst count_documents_1 = require(\"./operations/count_documents\");\nconst delete_1 = require(\"./operations/delete\");\nconst distinct_1 = require(\"./operations/distinct\");\nconst drop_1 = require(\"./operations/drop\");\nconst estimated_document_count_1 = require(\"./operations/estimated_document_count\");\nconst execute_operation_1 = require(\"./operations/execute_operation\");\nconst find_and_modify_1 = require(\"./operations/find_and_modify\");\nconst indexes_1 = require(\"./operations/indexes\");\nconst insert_1 = require(\"./operations/insert\");\nconst is_capped_1 = require(\"./operations/is_capped\");\nconst options_operation_1 = require(\"./operations/options_operation\");\nconst rename_1 = require(\"./operations/rename\");\nconst create_1 = require(\"./operations/search_indexes/create\");\nconst drop_2 = require(\"./operations/search_indexes/drop\");\nconst update_1 = require(\"./operations/search_indexes/update\");\nconst update_2 = require(\"./operations/update\");\nconst read_concern_1 = require(\"./read_concern\");\nconst read_preference_1 = require(\"./read_preference\");\nconst utils_1 = require(\"./utils\");\nconst write_concern_1 = require(\"./write_concern\");\n/**\n * The **Collection** class is an internal class that embodies a MongoDB collection\n * allowing for insert/find/update/delete and other command operation on that MongoDB collection.\n *\n * **COLLECTION Cannot directly be instantiated**\n * @public\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * interface Pet {\n *   name: string;\n *   kind: 'dog' | 'cat' | 'fish';\n * }\n *\n * const client = new MongoClient('mongodb://localhost:27017');\n * const pets = client.db().collection<Pet>('pets');\n *\n * const petCursor = pets.find();\n *\n * for await (const pet of petCursor) {\n *   console.log(`${pet.name} is a ${pet.kind}!`);\n * }\n * ```\n */\nclass Collection {\n    /**\n     * Create a new Collection instance\n     * @internal\n     */\n    constructor(db, name, options) {\n        // Internal state\n        this.s = {\n            db,\n            options,\n            namespace: new utils_1.MongoDBCollectionNamespace(db.databaseName, name),\n            pkFactory: db.options?.pkFactory ?? utils_1.DEFAULT_PK_FACTORY,\n            readPreference: read_preference_1.ReadPreference.fromOptions(options),\n            bsonOptions: (0, bson_1.resolveBSONOptions)(options, db),\n            readConcern: read_concern_1.ReadConcern.fromOptions(options),\n            writeConcern: write_concern_1.WriteConcern.fromOptions(options)\n        };\n        this.client = db.client;\n    }\n    /**\n     * The name of the database this collection belongs to\n     */\n    get dbName() {\n        return this.s.namespace.db;\n    }\n    /**\n     * The name of this collection\n     */\n    get collectionName() {\n        return this.s.namespace.collection;\n    }\n    /**\n     * The namespace of this collection, in the format `${this.dbName}.${this.collectionName}`\n     */\n    get namespace() {\n        return this.fullNamespace.toString();\n    }\n    /**\n     *  @internal\n     *\n     * The `MongoDBNamespace` for the collection.\n     */\n    get fullNamespace() {\n        return this.s.namespace;\n    }\n    /**\n     * The current readConcern of the collection. If not explicitly defined for\n     * this collection, will be inherited from the parent DB\n     */\n    get readConcern() {\n        if (this.s.readConcern == null) {\n            return this.s.db.readConcern;\n        }\n        return this.s.readConcern;\n    }\n    /**\n     * The current readPreference of the collection. If not explicitly defined for\n     * this collection, will be inherited from the parent DB\n     */\n    get readPreference() {\n        if (this.s.readPreference == null) {\n            return this.s.db.readPreference;\n        }\n        return this.s.readPreference;\n    }\n    get bsonOptions() {\n        return this.s.bsonOptions;\n    }\n    /**\n     * The current writeConcern of the collection. If not explicitly defined for\n     * this collection, will be inherited from the parent DB\n     */\n    get writeConcern() {\n        if (this.s.writeConcern == null) {\n            return this.s.db.writeConcern;\n        }\n        return this.s.writeConcern;\n    }\n    /** The current index hint for the collection */\n    get hint() {\n        return this.s.collectionHint;\n    }\n    set hint(v) {\n        this.s.collectionHint = (0, utils_1.normalizeHintField)(v);\n    }\n    /**\n     * Inserts a single document into MongoDB. If documents passed in do not contain the **_id** field,\n     * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n     * can be overridden by setting the **forceServerObjectId** flag.\n     *\n     * @param doc - The document to insert\n     * @param options - Optional settings for the command\n     */\n    async insertOne(doc, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new insert_1.InsertOneOperation(this, doc, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Inserts an array of documents into MongoDB. If documents passed in do not contain the **_id** field,\n     * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n     * can be overridden by setting the **forceServerObjectId** flag.\n     *\n     * @param docs - The documents to insert\n     * @param options - Optional settings for the command\n     */\n    async insertMany(docs, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new insert_1.InsertManyOperation(this, docs, (0, utils_1.resolveOptions)(this, options ?? { ordered: true })));\n    }\n    /**\n     * Perform a bulkWrite operation without a fluent API\n     *\n     * Legal operation types are\n     * - `insertOne`\n     * - `replaceOne`\n     * - `updateOne`\n     * - `updateMany`\n     * - `deleteOne`\n     * - `deleteMany`\n     *\n     * If documents passed in do not contain the **_id** field,\n     * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n     * can be overridden by setting the **forceServerObjectId** flag.\n     *\n     * @param operations - Bulk operations to perform\n     * @param options - Optional settings for the command\n     * @throws MongoDriverError if operations is not an array\n     */\n    async bulkWrite(operations, options) {\n        if (!Array.isArray(operations)) {\n            throw new error_1.MongoInvalidArgumentError('Argument \"operations\" must be an array of documents');\n        }\n        return (0, execute_operation_1.executeOperation)(this.client, new bulk_write_1.BulkWriteOperation(this, operations, (0, utils_1.resolveOptions)(this, options ?? { ordered: true })));\n    }\n    /**\n     * Update a single document in a collection\n     *\n     * @param filter - The filter used to select the document to update\n     * @param update - The update operations to be applied to the document\n     * @param options - Optional settings for the command\n     */\n    async updateOne(filter, update, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new update_2.UpdateOneOperation(this, filter, update, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Replace a document in a collection with another document\n     *\n     * @param filter - The filter used to select the document to replace\n     * @param replacement - The Document that replaces the matching document\n     * @param options - Optional settings for the command\n     */\n    async replaceOne(filter, replacement, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new update_2.ReplaceOneOperation(this, filter, replacement, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Update multiple documents in a collection\n     *\n     * @param filter - The filter used to select the documents to update\n     * @param update - The update operations to be applied to the documents\n     * @param options - Optional settings for the command\n     */\n    async updateMany(filter, update, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new update_2.UpdateManyOperation(this, filter, update, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Delete a document from a collection\n     *\n     * @param filter - The filter used to select the document to remove\n     * @param options - Optional settings for the command\n     */\n    async deleteOne(filter = {}, options = {}) {\n        return (0, execute_operation_1.executeOperation)(this.client, new delete_1.DeleteOneOperation(this, filter, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Delete multiple documents from a collection\n     *\n     * @param filter - The filter used to select the documents to remove\n     * @param options - Optional settings for the command\n     */\n    async deleteMany(filter = {}, options = {}) {\n        return (0, execute_operation_1.executeOperation)(this.client, new delete_1.DeleteManyOperation(this, filter, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Rename the collection.\n     *\n     * @remarks\n     * This operation does not inherit options from the Db or MongoClient.\n     *\n     * @param newName - New name of of the collection.\n     * @param options - Optional settings for the command\n     */\n    async rename(newName, options) {\n        // Intentionally, we do not inherit options from parent for this operation.\n        return (0, execute_operation_1.executeOperation)(this.client, new rename_1.RenameOperation(this, newName, {\n            ...options,\n            readPreference: read_preference_1.ReadPreference.PRIMARY\n        }));\n    }\n    /**\n     * Drop the collection from the database, removing it permanently. New accesses will create a new collection.\n     *\n     * @param options - Optional settings for the command\n     */\n    async drop(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new drop_1.DropCollectionOperation(this.s.db, this.collectionName, options));\n    }\n    async findOne(filter = {}, options = {}) {\n        const cursor = this.find(filter, options).limit(-1).batchSize(1);\n        const res = await cursor.next();\n        await cursor.close();\n        return res;\n    }\n    find(filter = {}, options = {}) {\n        return new find_cursor_1.FindCursor(this.client, this.s.namespace, filter, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Returns the options of the collection.\n     *\n     * @param options - Optional settings for the command\n     */\n    async options(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new options_operation_1.OptionsOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Returns if the collection is a capped collection\n     *\n     * @param options - Optional settings for the command\n     */\n    async isCapped(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new is_capped_1.IsCappedOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Creates an index on the db and collection collection.\n     *\n     * @param indexSpec - The field name or index specification to create an index for\n     * @param options - Optional settings for the command\n     *\n     * @example\n     * ```ts\n     * const collection = client.db('foo').collection('bar');\n     *\n     * await collection.createIndex({ a: 1, b: -1 });\n     *\n     * // Alternate syntax for { c: 1, d: -1 } that ensures order of indexes\n     * await collection.createIndex([ [c, 1], [d, -1] ]);\n     *\n     * // Equivalent to { e: 1 }\n     * await collection.createIndex('e');\n     *\n     * // Equivalent to { f: 1, g: 1 }\n     * await collection.createIndex(['f', 'g'])\n     *\n     * // Equivalent to { h: 1, i: -1 }\n     * await collection.createIndex([ { h: 1 }, { i: -1 } ]);\n     *\n     * // Equivalent to { j: 1, k: -1, l: 2d }\n     * await collection.createIndex(['j', ['k', -1], { l: '2d' }])\n     * ```\n     */\n    async createIndex(indexSpec, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.CreateIndexOperation(this, this.collectionName, indexSpec, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Creates multiple indexes in the collection, this method is only supported for\n     * MongoDB 2.6 or higher. Earlier version of MongoDB will throw a command not supported\n     * error.\n     *\n     * **Note**: Unlike {@link Collection#createIndex| createIndex}, this function takes in raw index specifications.\n     * Index specifications are defined {@link https://www.mongodb.com/docs/manual/reference/command/createIndexes/| here}.\n     *\n     * @param indexSpecs - An array of index specifications to be created\n     * @param options - Optional settings for the command\n     *\n     * @example\n     * ```ts\n     * const collection = client.db('foo').collection('bar');\n     * await collection.createIndexes([\n     *   // Simple index on field fizz\n     *   {\n     *     key: { fizz: 1 },\n     *   }\n     *   // wildcard index\n     *   {\n     *     key: { '$**': 1 }\n     *   },\n     *   // named index on darmok and jalad\n     *   {\n     *     key: { darmok: 1, jalad: -1 }\n     *     name: 'tanagra'\n     *   }\n     * ]);\n     * ```\n     */\n    async createIndexes(indexSpecs, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.CreateIndexesOperation(this, this.collectionName, indexSpecs, (0, utils_1.resolveOptions)(this, { ...options, maxTimeMS: undefined })));\n    }\n    /**\n     * Drops an index from this collection.\n     *\n     * @param indexName - Name of the index to drop.\n     * @param options - Optional settings for the command\n     */\n    async dropIndex(indexName, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.DropIndexOperation(this, indexName, {\n            ...(0, utils_1.resolveOptions)(this, options),\n            readPreference: read_preference_1.ReadPreference.primary\n        }));\n    }\n    /**\n     * Drops all indexes from this collection.\n     *\n     * @param options - Optional settings for the command\n     */\n    async dropIndexes(options) {\n        try {\n            await (0, execute_operation_1.executeOperation)(this.client, new indexes_1.DropIndexOperation(this, '*', (0, utils_1.resolveOptions)(this, options)));\n            return true;\n        }\n        catch {\n            return false;\n        }\n    }\n    /**\n     * Get the list of all indexes information for the collection.\n     *\n     * @param options - Optional settings for the command\n     */\n    listIndexes(options) {\n        return new list_indexes_cursor_1.ListIndexesCursor(this, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Checks if one or more indexes exist on the collection, fails on first non-existing index\n     *\n     * @param indexes - One or more index names to check.\n     * @param options - Optional settings for the command\n     */\n    async indexExists(indexes, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.IndexExistsOperation(this, indexes, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Retrieves this collections index info.\n     *\n     * @param options - Optional settings for the command\n     */\n    async indexInformation(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.IndexInformationOperation(this.s.db, this.collectionName, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Gets an estimate of the count of documents in a collection using collection metadata.\n     * This will always run a count command on all server versions.\n     *\n     * due to an oversight in versions 5.0.0-5.0.8 of MongoDB, the count command,\n     * which estimatedDocumentCount uses in its implementation, was not included in v1 of\n     * the Stable API, and so users of the Stable API with estimatedDocumentCount are\n     * recommended to upgrade their server version to 5.0.9+ or set apiStrict: false to avoid\n     * encountering errors.\n     *\n     * @see {@link https://www.mongodb.com/docs/manual/reference/command/count/#behavior|Count: Behavior}\n     * @param options - Optional settings for the command\n     */\n    async estimatedDocumentCount(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new estimated_document_count_1.EstimatedDocumentCountOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Gets the number of documents matching the filter.\n     * For a fast count of the total documents in a collection see {@link Collection#estimatedDocumentCount| estimatedDocumentCount}.\n     * **Note**: When migrating from {@link Collection#count| count} to {@link Collection#countDocuments| countDocuments}\n     * the following query operators must be replaced:\n     *\n     * | Operator | Replacement |\n     * | -------- | ----------- |\n     * | `$where`   | [`$expr`][1] |\n     * | `$near`    | [`$geoWithin`][2] with [`$center`][3] |\n     * | `$nearSphere` | [`$geoWithin`][2] with [`$centerSphere`][4] |\n     *\n     * [1]: https://www.mongodb.com/docs/manual/reference/operator/query/expr/\n     * [2]: https://www.mongodb.com/docs/manual/reference/operator/query/geoWithin/\n     * [3]: https://www.mongodb.com/docs/manual/reference/operator/query/center/#op._S_center\n     * [4]: https://www.mongodb.com/docs/manual/reference/operator/query/centerSphere/#op._S_centerSphere\n     *\n     * @param filter - The filter for the count\n     * @param options - Optional settings for the command\n     *\n     * @see https://www.mongodb.com/docs/manual/reference/operator/query/expr/\n     * @see https://www.mongodb.com/docs/manual/reference/operator/query/geoWithin/\n     * @see https://www.mongodb.com/docs/manual/reference/operator/query/center/#op._S_center\n     * @see https://www.mongodb.com/docs/manual/reference/operator/query/centerSphere/#op._S_centerSphere\n     */\n    async countDocuments(filter = {}, options = {}) {\n        return (0, execute_operation_1.executeOperation)(this.client, new count_documents_1.CountDocumentsOperation(this, filter, (0, utils_1.resolveOptions)(this, options)));\n    }\n    async distinct(key, filter = {}, options = {}) {\n        return (0, execute_operation_1.executeOperation)(this.client, new distinct_1.DistinctOperation(this, key, filter, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Retrieve all the indexes on the collection.\n     *\n     * @param options - Optional settings for the command\n     */\n    async indexes(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.IndexesOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    async findOneAndDelete(filter, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new find_and_modify_1.FindOneAndDeleteOperation(this, filter, (0, utils_1.resolveOptions)(this, options)));\n    }\n    async findOneAndReplace(filter, replacement, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new find_and_modify_1.FindOneAndReplaceOperation(this, filter, replacement, (0, utils_1.resolveOptions)(this, options)));\n    }\n    async findOneAndUpdate(filter, update, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new find_and_modify_1.FindOneAndUpdateOperation(this, filter, update, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Execute an aggregation framework pipeline against the collection, needs MongoDB \\>= 2.2\n     *\n     * @param pipeline - An array of aggregation pipelines to execute\n     * @param options - Optional settings for the command\n     */\n    aggregate(pipeline = [], options) {\n        if (!Array.isArray(pipeline)) {\n            throw new error_1.MongoInvalidArgumentError('Argument \"pipeline\" must be an array of aggregation stages');\n        }\n        return new aggregation_cursor_1.AggregationCursor(this.client, this.s.namespace, pipeline, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Create a new Change Stream, watching for new changes (insertions, updates, replacements, deletions, and invalidations) in this collection.\n     *\n     * @remarks\n     * watch() accepts two generic arguments for distinct use cases:\n     * - The first is to override the schema that may be defined for this specific collection\n     * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n     * @example\n     * By just providing the first argument I can type the change to be `ChangeStreamDocument<{ _id: number }>`\n     * ```ts\n     * collection.watch<{ _id: number }>()\n     *   .on('change', change => console.log(change._id.toFixed(4)));\n     * ```\n     *\n     * @example\n     * Passing a second argument provides a way to reflect the type changes caused by an advanced pipeline.\n     * Here, we are using a pipeline to have MongoDB filter for insert changes only and add a comment.\n     * No need start from scratch on the ChangeStreamInsertDocument type!\n     * By using an intersection we can save time and ensure defaults remain the same type!\n     * ```ts\n     * collection\n     *   .watch<Schema, ChangeStreamInsertDocument<Schema> & { comment: string }>([\n     *     { $addFields: { comment: 'big changes' } },\n     *     { $match: { operationType: 'insert' } }\n     *   ])\n     *   .on('change', change => {\n     *     change.comment.startsWith('big');\n     *     change.operationType === 'insert';\n     *     // No need to narrow in code because the generics did that for us!\n     *     expectType<Schema>(change.fullDocument);\n     *   });\n     * ```\n     *\n     * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n     * @param options - Optional settings for the command\n     * @typeParam TLocal - Type of the data being detected by the change stream\n     * @typeParam TChange - Type of the whole change stream document emitted\n     */\n    watch(pipeline = [], options = {}) {\n        // Allow optionally not specifying a pipeline\n        if (!Array.isArray(pipeline)) {\n            options = pipeline;\n            pipeline = [];\n        }\n        return new change_stream_1.ChangeStream(this, pipeline, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Initiate an Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.\n     *\n     * @throws MongoNotConnectedError\n     * @remarks\n     * **NOTE:** MongoClient must be connected prior to calling this method due to a known limitation in this legacy implementation.\n     * However, `collection.bulkWrite()` provides an equivalent API that does not require prior connecting.\n     */\n    initializeUnorderedBulkOp(options) {\n        return new unordered_1.UnorderedBulkOperation(this, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Initiate an In order bulk write operation. Operations will be serially executed in the order they are added, creating a new operation for each switch in types.\n     *\n     * @throws MongoNotConnectedError\n     * @remarks\n     * **NOTE:** MongoClient must be connected prior to calling this method due to a known limitation in this legacy implementation.\n     * However, `collection.bulkWrite()` provides an equivalent API that does not require prior connecting.\n     */\n    initializeOrderedBulkOp(options) {\n        return new ordered_1.OrderedBulkOperation(this, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * An estimated count of matching documents in the db to a filter.\n     *\n     * **NOTE:** This method has been deprecated, since it does not provide an accurate count of the documents\n     * in a collection. To obtain an accurate count of documents in the collection, use {@link Collection#countDocuments| countDocuments}.\n     * To obtain an estimated count of all documents in the collection, use {@link Collection#estimatedDocumentCount| estimatedDocumentCount}.\n     *\n     * @deprecated use {@link Collection#countDocuments| countDocuments} or {@link Collection#estimatedDocumentCount| estimatedDocumentCount} instead\n     *\n     * @param filter - The filter for the count.\n     * @param options - Optional settings for the command\n     */\n    async count(filter = {}, options = {}) {\n        return (0, execute_operation_1.executeOperation)(this.client, new count_1.CountOperation(this.fullNamespace, filter, (0, utils_1.resolveOptions)(this, options)));\n    }\n    listSearchIndexes(indexNameOrOptions, options) {\n        options =\n            typeof indexNameOrOptions === 'object' ? indexNameOrOptions : options == null ? {} : options;\n        const indexName = indexNameOrOptions == null\n            ? null\n            : typeof indexNameOrOptions === 'object'\n                ? null\n                : indexNameOrOptions;\n        return new list_search_indexes_cursor_1.ListSearchIndexesCursor(this, indexName, options);\n    }\n    /**\n     * Creates a single search index for the collection.\n     *\n     * @param description - The index description for the new search index.\n     * @returns A promise that resolves to the name of the new search index.\n     *\n     * @remarks Only available when used against a 7.0+ Atlas cluster.\n     */\n    async createSearchIndex(description) {\n        const [index] = await this.createSearchIndexes([description]);\n        return index;\n    }\n    /**\n     * Creates multiple search indexes for the current collection.\n     *\n     * @param descriptions - An array of `SearchIndexDescription`s for the new search indexes.\n     * @returns A promise that resolves to an array of the newly created search index names.\n     *\n     * @remarks Only available when used against a 7.0+ Atlas cluster.\n     * @returns\n     */\n    async createSearchIndexes(descriptions) {\n        return (0, execute_operation_1.executeOperation)(this.client, new create_1.CreateSearchIndexesOperation(this, descriptions));\n    }\n    /**\n     * Deletes a search index by index name.\n     *\n     * @param name - The name of the search index to be deleted.\n     *\n     * @remarks Only available when used against a 7.0+ Atlas cluster.\n     */\n    async dropSearchIndex(name) {\n        return (0, execute_operation_1.executeOperation)(this.client, new drop_2.DropSearchIndexOperation(this, name));\n    }\n    /**\n     * Updates a search index by replacing the existing index definition with the provided definition.\n     *\n     * @param name - The name of the search index to update.\n     * @param definition - The new search index definition.\n     *\n     * @remarks Only available when used against a 7.0+ Atlas cluster.\n     */\n    async updateSearchIndex(name, definition) {\n        return (0, execute_operation_1.executeOperation)(this.client, new update_1.UpdateSearchIndexOperation(this, name, definition));\n    }\n}\nexports.Collection = Collection;\n//# sourceMappingURL=collection.js.map"],"names":[],"mappings":"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"}},
    {"offset": {"line": 19987, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 19991, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/operations/rename.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RenameOperation = void 0;\nconst collection_1 = require(\"../collection\");\nconst utils_1 = require(\"../utils\");\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass RenameOperation extends command_1.CommandOperation {\n    constructor(collection, newName, options) {\n        super(collection, options);\n        this.collection = collection;\n        this.newName = newName;\n        this.options = options;\n        this.ns = new utils_1.MongoDBNamespace('admin', '$cmd');\n    }\n    async execute(server, session) {\n        // Build the command\n        const renameCollection = this.collection.namespace;\n        const toCollection = this.collection.s.namespace.withCollection(this.newName).toString();\n        const dropTarget = typeof this.options.dropTarget === 'boolean' ? this.options.dropTarget : false;\n        const command = {\n            renameCollection: renameCollection,\n            to: toCollection,\n            dropTarget: dropTarget\n        };\n        await super.executeCommand(server, session, command);\n        return new collection_1.Collection(this.collection.s.db, this.newName, this.collection.s.options);\n    }\n}\nexports.RenameOperation = RenameOperation;\n(0, operation_1.defineAspects)(RenameOperation, [operation_1.Aspect.WRITE_OPERATION]);\n//# sourceMappingURL=rename.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,eAAe,GAAG,KAAK;AAC/B,MAAM,eAAe;AACrB,MAAM,UAAU;AAChB,MAAM,YAAY;AAClB,MAAM,cAAc;AACpB,cAAc,GACd,MAAM,wBAAwB,UAAU,gBAAgB;IACpD,YAAY,UAAU,EAAE,OAAO,EAAE,OAAO,CAAE;QACtC,KAAK,CAAC,YAAY;QAClB,IAAI,CAAC,UAAU,GAAG;QAClB,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,EAAE,GAAG,IAAI,QAAQ,gBAAgB,CAAC,SAAS;IACpD;IACA,MAAM,QAAQ,MAAM,EAAE,OAAO,EAAE;QAC3B,oBAAoB;QACpB,MAAM,mBAAmB,IAAI,CAAC,UAAU,CAAC,SAAS;QAClD,MAAM,eAAe,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,EAAE,QAAQ;QACtF,MAAM,aAAa,OAAO,IAAI,CAAC,OAAO,CAAC,UAAU,KAAK,YAAY,IAAI,CAAC,OAAO,CAAC,UAAU,GAAG;QAC5F,MAAM,UAAU;YACZ,kBAAkB;YAClB,IAAI;YACJ,YAAY;QAChB;QACA,MAAM,KAAK,CAAC,eAAe,QAAQ,SAAS;QAC5C,OAAO,IAAI,aAAa,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,OAAO;IACpG;AACJ;AACA,QAAQ,eAAe,GAAG;AACzB,CAAA,GAAG,YAAY,aAAa,AAAD,EAAG,iBAAiB;IAAC,YAAY,MAAM,CAAC,eAAe;CAAC,GACpF,kCAAkC"}},
    {"offset": {"line": 20026, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 20030, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/operations/remove_user.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RemoveUserOperation = void 0;\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass RemoveUserOperation extends command_1.CommandOperation {\n    constructor(db, username, options) {\n        super(db, options);\n        this.options = options;\n        this.username = username;\n    }\n    async execute(server, session) {\n        await super.executeCommand(server, session, { dropUser: this.username });\n        return true;\n    }\n}\nexports.RemoveUserOperation = RemoveUserOperation;\n(0, operation_1.defineAspects)(RemoveUserOperation, [operation_1.Aspect.WRITE_OPERATION]);\n//# sourceMappingURL=remove_user.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,mBAAmB,GAAG,KAAK;AACnC,MAAM,YAAY;AAClB,MAAM,cAAc;AACpB,cAAc,GACd,MAAM,4BAA4B,UAAU,gBAAgB;IACxD,YAAY,EAAE,EAAE,QAAQ,EAAE,OAAO,CAAE;QAC/B,KAAK,CAAC,IAAI;QACV,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,QAAQ,GAAG;IACpB;IACA,MAAM,QAAQ,MAAM,EAAE,OAAO,EAAE;QAC3B,MAAM,KAAK,CAAC,eAAe,QAAQ,SAAS;YAAE,UAAU,IAAI,CAAC,QAAQ;QAAC;QACtE,OAAO;IACX;AACJ;AACA,QAAQ,mBAAmB,GAAG;AAC7B,CAAA,GAAG,YAAY,aAAa,AAAD,EAAG,qBAAqB;IAAC,YAAY,MAAM,CAAC,eAAe;CAAC,GACxF,uCAAuC"}},
    {"offset": {"line": 20054, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 20058, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/operations/profiling_level.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ProfilingLevelOperation = void 0;\nconst error_1 = require(\"../error\");\nconst command_1 = require(\"./command\");\n/** @internal */\nclass ProfilingLevelOperation extends command_1.CommandOperation {\n    constructor(db, options) {\n        super(db, options);\n        this.options = options;\n    }\n    async execute(server, session) {\n        const doc = await super.executeCommand(server, session, { profile: -1 });\n        if (doc.ok === 1) {\n            const was = doc.was;\n            if (was === 0)\n                return 'off';\n            if (was === 1)\n                return 'slow_only';\n            if (was === 2)\n                return 'all';\n            throw new error_1.MongoUnexpectedServerResponseError(`Illegal profiling level value ${was}`);\n        }\n        else {\n            throw new error_1.MongoUnexpectedServerResponseError('Error with profile command');\n        }\n    }\n}\nexports.ProfilingLevelOperation = ProfilingLevelOperation;\n//# sourceMappingURL=profiling_level.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,uBAAuB,GAAG,KAAK;AACvC,MAAM,UAAU;AAChB,MAAM,YAAY;AAClB,cAAc,GACd,MAAM,gCAAgC,UAAU,gBAAgB;IAC5D,YAAY,EAAE,EAAE,OAAO,CAAE;QACrB,KAAK,CAAC,IAAI;QACV,IAAI,CAAC,OAAO,GAAG;IACnB;IACA,MAAM,QAAQ,MAAM,EAAE,OAAO,EAAE;QAC3B,MAAM,MAAM,MAAM,KAAK,CAAC,eAAe,QAAQ,SAAS;YAAE,SAAS,CAAC;QAAE;QACtE,IAAI,IAAI,EAAE,KAAK,GAAG;YACd,MAAM,MAAM,IAAI,GAAG;YACnB,IAAI,QAAQ,GACR,OAAO;YACX,IAAI,QAAQ,GACR,OAAO;YACX,IAAI,QAAQ,GACR,OAAO;YACX,MAAM,IAAI,QAAQ,kCAAkC,CAAC,CAAC,8BAA8B,EAAE,IAAI,CAAC;QAC/F,OACK;YACD,MAAM,IAAI,QAAQ,kCAAkC,CAAC;QACzD;IACJ;AACJ;AACA,QAAQ,uBAAuB,GAAG,yBAClC,2CAA2C"}},
    {"offset": {"line": 20086, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 20090, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/operations/create_collection.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CreateCollectionOperation = void 0;\nconst constants_1 = require(\"../cmap/wire_protocol/constants\");\nconst collection_1 = require(\"../collection\");\nconst error_1 = require(\"../error\");\nconst command_1 = require(\"./command\");\nconst indexes_1 = require(\"./indexes\");\nconst operation_1 = require(\"./operation\");\nconst ILLEGAL_COMMAND_FIELDS = new Set([\n    'w',\n    'wtimeout',\n    'j',\n    'fsync',\n    'autoIndexId',\n    'pkFactory',\n    'raw',\n    'readPreference',\n    'session',\n    'readConcern',\n    'writeConcern',\n    'raw',\n    'fieldsAsRaw',\n    'useBigInt64',\n    'promoteLongs',\n    'promoteValues',\n    'promoteBuffers',\n    'bsonRegExp',\n    'serializeFunctions',\n    'ignoreUndefined',\n    'enableUtf8Validation'\n]);\n/* @internal */\nconst INVALID_QE_VERSION = 'Driver support of Queryable Encryption is incompatible with server. Upgrade server to use Queryable Encryption.';\n/** @internal */\nclass CreateCollectionOperation extends command_1.CommandOperation {\n    constructor(db, name, options = {}) {\n        super(db, options);\n        this.options = options;\n        this.db = db;\n        this.name = name;\n    }\n    async execute(server, session) {\n        const db = this.db;\n        const name = this.name;\n        const options = this.options;\n        const encryptedFields = options.encryptedFields ??\n            db.client.options.autoEncryption?.encryptedFieldsMap?.[`${db.databaseName}.${name}`];\n        if (encryptedFields) {\n            // Creating a QE collection required min server of 7.0.0\n            // TODO(NODE-5353): Get wire version information from connection.\n            if (!server.loadBalanced &&\n                server.description.maxWireVersion < constants_1.MIN_SUPPORTED_QE_WIRE_VERSION) {\n                throw new error_1.MongoCompatibilityError(`${INVALID_QE_VERSION} The minimum server version required is ${constants_1.MIN_SUPPORTED_QE_SERVER_VERSION}`);\n            }\n            // Create auxilliary collections for queryable encryption support.\n            const escCollection = encryptedFields.escCollection ?? `enxcol_.${name}.esc`;\n            const ecocCollection = encryptedFields.ecocCollection ?? `enxcol_.${name}.ecoc`;\n            for (const collectionName of [escCollection, ecocCollection]) {\n                const createOp = new CreateCollectionOperation(db, collectionName, {\n                    clusteredIndex: {\n                        key: { _id: 1 },\n                        unique: true\n                    }\n                });\n                await createOp.executeWithoutEncryptedFieldsCheck(server, session);\n            }\n            if (!options.encryptedFields) {\n                this.options = { ...this.options, encryptedFields };\n            }\n        }\n        const coll = await this.executeWithoutEncryptedFieldsCheck(server, session);\n        if (encryptedFields) {\n            // Create the required index for queryable encryption support.\n            const createIndexOp = new indexes_1.CreateIndexOperation(db, name, { __safeContent__: 1 }, {});\n            await createIndexOp.execute(server, session);\n        }\n        return coll;\n    }\n    async executeWithoutEncryptedFieldsCheck(server, session) {\n        const db = this.db;\n        const name = this.name;\n        const options = this.options;\n        const cmd = { create: name };\n        for (const n in options) {\n            if (options[n] != null &&\n                typeof options[n] !== 'function' &&\n                !ILLEGAL_COMMAND_FIELDS.has(n)) {\n                cmd[n] = options[n];\n            }\n        }\n        // otherwise just execute the command\n        await super.executeCommand(server, session, cmd);\n        return new collection_1.Collection(db, name, options);\n    }\n}\nexports.CreateCollectionOperation = CreateCollectionOperation;\n(0, operation_1.defineAspects)(CreateCollectionOperation, [operation_1.Aspect.WRITE_OPERATION]);\n//# sourceMappingURL=create_collection.js.map"],"names":[],"mappings":"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"}},
    {"offset": {"line": 20198, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 20202, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/operations/collections.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CollectionsOperation = void 0;\nconst collection_1 = require(\"../collection\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass CollectionsOperation extends operation_1.AbstractOperation {\n    constructor(db, options) {\n        super(options);\n        this.options = options;\n        this.db = db;\n    }\n    async execute(server, session) {\n        // Let's get the collection names\n        const documents = await this.db\n            .listCollections({}, { ...this.options, nameOnly: true, readPreference: this.readPreference, session })\n            .toArray();\n        const collections = [];\n        for (const { name } of documents) {\n            if (!name.includes('$')) {\n                // Filter collections removing any illegal ones\n                collections.push(new collection_1.Collection(this.db, name, this.db.s.options));\n            }\n        }\n        // Return the collection objects\n        return collections;\n    }\n}\nexports.CollectionsOperation = CollectionsOperation;\n//# sourceMappingURL=collections.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,oBAAoB,GAAG,KAAK;AACpC,MAAM,eAAe;AACrB,MAAM,cAAc;AACpB,cAAc,GACd,MAAM,6BAA6B,YAAY,iBAAiB;IAC5D,YAAY,EAAE,EAAE,OAAO,CAAE;QACrB,KAAK,CAAC;QACN,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,EAAE,GAAG;IACd;IACA,MAAM,QAAQ,MAAM,EAAE,OAAO,EAAE;QAC3B,iCAAiC;QACjC,MAAM,YAAY,MAAM,IAAI,CAAC,EAAE,CAC1B,eAAe,CAAC,CAAC,GAAG;YAAE,GAAG,IAAI,CAAC,OAAO;YAAE,UAAU;YAAM,gBAAgB,IAAI,CAAC,cAAc;YAAE;QAAQ,GACpG,OAAO;QACZ,MAAM,cAAc,EAAE;QACtB,KAAK,MAAM,EAAE,IAAI,EAAE,IAAI,UAAW;YAC9B,IAAI,CAAC,KAAK,QAAQ,CAAC,MAAM;gBACrB,+CAA+C;gBAC/C,YAAY,IAAI,CAAC,IAAI,aAAa,UAAU,CAAC,IAAI,CAAC,EAAE,EAAE,MAAM,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO;YACjF;QACJ;QACA,gCAAgC;QAChC,OAAO;IACX;AACJ;AACA,QAAQ,oBAAoB,GAAG,sBAC/B,uCAAuC"}},
    {"offset": {"line": 20235, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 20239, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/cursor/run_command_cursor.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RunCommandCursor = void 0;\nconst error_1 = require(\"../error\");\nconst execute_operation_1 = require(\"../operations/execute_operation\");\nconst get_more_1 = require(\"../operations/get_more\");\nconst run_command_1 = require(\"../operations/run_command\");\nconst utils_1 = require(\"../utils\");\nconst abstract_cursor_1 = require(\"./abstract_cursor\");\n/** @public */\nclass RunCommandCursor extends abstract_cursor_1.AbstractCursor {\n    /**\n     * Controls the `getMore.comment` field\n     * @param comment - any BSON value\n     */\n    setComment(comment) {\n        this.getMoreOptions.comment = comment;\n        return this;\n    }\n    /**\n     * Controls the `getMore.maxTimeMS` field. Only valid when cursor is tailable await\n     * @param maxTimeMS - the number of milliseconds to wait for new data\n     */\n    setMaxTimeMS(maxTimeMS) {\n        this.getMoreOptions.maxAwaitTimeMS = maxTimeMS;\n        return this;\n    }\n    /**\n     * Controls the `getMore.batchSize` field\n     * @param maxTimeMS - the number documents to return in the `nextBatch`\n     */\n    setBatchSize(batchSize) {\n        this.getMoreOptions.batchSize = batchSize;\n        return this;\n    }\n    /** Unsupported for RunCommandCursor */\n    clone() {\n        throw new error_1.MongoAPIError('Clone not supported, create a new cursor with db.runCursorCommand');\n    }\n    /** Unsupported for RunCommandCursor: readConcern must be configured directly on command document */\n    withReadConcern(_) {\n        throw new error_1.MongoAPIError('RunCommandCursor does not support readConcern it must be attached to the command being run');\n    }\n    /** Unsupported for RunCommandCursor: various cursor flags must be configured directly on command document */\n    addCursorFlag(_, __) {\n        throw new error_1.MongoAPIError('RunCommandCursor does not support cursor flags, they must be attached to the command being run');\n    }\n    /** Unsupported for RunCommandCursor: maxTimeMS must be configured directly on command document */\n    maxTimeMS(_) {\n        throw new error_1.MongoAPIError('maxTimeMS must be configured on the command document directly, to configure getMore.maxTimeMS use cursor.setMaxTimeMS()');\n    }\n    /** Unsupported for RunCommandCursor: batchSize must be configured directly on command document */\n    batchSize(_) {\n        throw new error_1.MongoAPIError('batchSize must be configured on the command document directly, to configure getMore.batchSize use cursor.setBatchSize()');\n    }\n    /** @internal */\n    constructor(db, command, options = {}) {\n        super(db.client, (0, utils_1.ns)(db.namespace), options);\n        this.getMoreOptions = {};\n        this.db = db;\n        this.command = Object.freeze({ ...command });\n    }\n    /** @internal */\n    async _initialize(session) {\n        const operation = new run_command_1.RunCommandOperation(this.db, this.command, {\n            ...this.cursorOptions,\n            session: session,\n            readPreference: this.cursorOptions.readPreference\n        });\n        const response = await (0, execute_operation_1.executeOperation)(this.client, operation);\n        if (response.cursor == null) {\n            throw new error_1.MongoUnexpectedServerResponseError('Expected server to respond with cursor');\n        }\n        return {\n            server: operation.server,\n            session,\n            response\n        };\n    }\n    /** @internal */\n    async getMore(_batchSize) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const getMoreOperation = new get_more_1.GetMoreOperation(this.namespace, this.id, this.server, {\n            ...this.cursorOptions,\n            session: this.session,\n            ...this.getMoreOptions\n        });\n        return (0, execute_operation_1.executeOperation)(this.client, getMoreOperation);\n    }\n}\nexports.RunCommandCursor = RunCommandCursor;\n//# sourceMappingURL=run_command_cursor.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,gBAAgB,GAAG,KAAK;AAChC,MAAM,UAAU;AAChB,MAAM,sBAAsB;AAC5B,MAAM,aAAa;AACnB,MAAM,gBAAgB;AACtB,MAAM,UAAU;AAChB,MAAM,oBAAoB;AAC1B,YAAY,GACZ,MAAM,yBAAyB,kBAAkB,cAAc;IAC3D;;;KAGC,GACD,WAAW,OAAO,EAAE;QAChB,IAAI,CAAC,cAAc,CAAC,OAAO,GAAG;QAC9B,OAAO,IAAI;IACf;IACA;;;KAGC,GACD,aAAa,SAAS,EAAE;QACpB,IAAI,CAAC,cAAc,CAAC,cAAc,GAAG;QACrC,OAAO,IAAI;IACf;IACA;;;KAGC,GACD,aAAa,SAAS,EAAE;QACpB,IAAI,CAAC,cAAc,CAAC,SAAS,GAAG;QAChC,OAAO,IAAI;IACf;IACA,qCAAqC,GACrC,QAAQ;QACJ,MAAM,IAAI,QAAQ,aAAa,CAAC;IACpC;IACA,kGAAkG,GAClG,gBAAgB,CAAC,EAAE;QACf,MAAM,IAAI,QAAQ,aAAa,CAAC;IACpC;IACA,2GAA2G,GAC3G,cAAc,CAAC,EAAE,EAAE,EAAE;QACjB,MAAM,IAAI,QAAQ,aAAa,CAAC;IACpC;IACA,gGAAgG,GAChG,UAAU,CAAC,EAAE;QACT,MAAM,IAAI,QAAQ,aAAa,CAAC;IACpC;IACA,gGAAgG,GAChG,UAAU,CAAC,EAAE;QACT,MAAM,IAAI,QAAQ,aAAa,CAAC;IACpC;IACA,cAAc,GACd,YAAY,EAAE,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC,CAAE;QACnC,KAAK,CAAC,GAAG,MAAM,EAAE,AAAC,CAAA,GAAG,QAAQ,EAAE,AAAD,EAAG,GAAG,SAAS,GAAG;QAChD,IAAI,CAAC,cAAc,GAAG,CAAC;QACvB,IAAI,CAAC,EAAE,GAAG;QACV,IAAI,CAAC,OAAO,GAAG,OAAO,MAAM,CAAC;YAAE,GAAG,OAAO;QAAC;IAC9C;IACA,cAAc,GACd,MAAM,YAAY,OAAO,EAAE;QACvB,MAAM,YAAY,IAAI,cAAc,mBAAmB,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE;YAC3E,GAAG,IAAI,CAAC,aAAa;YACrB,SAAS;YACT,gBAAgB,IAAI,CAAC,aAAa,CAAC,cAAc;QACrD;QACA,MAAM,WAAW,MAAM,AAAC,CAAA,GAAG,oBAAoB,gBAAgB,AAAD,EAAG,IAAI,CAAC,MAAM,EAAE;QAC9E,IAAI,SAAS,MAAM,IAAI,MAAM;YACzB,MAAM,IAAI,QAAQ,kCAAkC,CAAC;QACzD;QACA,OAAO;YACH,QAAQ,UAAU,MAAM;YACxB;YACA;QACJ;IACJ;IACA,cAAc,GACd,MAAM,QAAQ,UAAU,EAAE;QACtB,oEAAoE;QACpE,MAAM,mBAAmB,IAAI,WAAW,gBAAgB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,MAAM,EAAE;YAC3F,GAAG,IAAI,CAAC,aAAa;YACrB,SAAS,IAAI,CAAC,OAAO;YACrB,GAAG,IAAI,CAAC,cAAc;QAC1B;QACA,OAAO,AAAC,CAAA,GAAG,oBAAoB,gBAAgB,AAAD,EAAG,IAAI,CAAC,MAAM,EAAE;IAClE;AACJ;AACA,QAAQ,gBAAgB,GAAG,kBAC3B,8CAA8C"}},
    {"offset": {"line": 20322, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 20326, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/operations/list_collections.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListCollectionsOperation = void 0;\nconst utils_1 = require(\"../utils\");\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass ListCollectionsOperation extends command_1.CommandOperation {\n    constructor(db, filter, options) {\n        super(db, options);\n        this.options = { ...options };\n        delete this.options.writeConcern;\n        this.db = db;\n        this.filter = filter;\n        this.nameOnly = !!this.options.nameOnly;\n        this.authorizedCollections = !!this.options.authorizedCollections;\n        if (typeof this.options.batchSize === 'number') {\n            this.batchSize = this.options.batchSize;\n        }\n    }\n    async execute(server, session) {\n        return super.executeCommand(server, session, this.generateCommand((0, utils_1.maxWireVersion)(server)));\n    }\n    /* This is here for the purpose of unit testing the final command that gets sent. */\n    generateCommand(wireVersion) {\n        const command = {\n            listCollections: 1,\n            filter: this.filter,\n            cursor: this.batchSize ? { batchSize: this.batchSize } : {},\n            nameOnly: this.nameOnly,\n            authorizedCollections: this.authorizedCollections\n        };\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (wireVersion >= 9 && this.options.comment !== undefined) {\n            command.comment = this.options.comment;\n        }\n        return command;\n    }\n}\nexports.ListCollectionsOperation = ListCollectionsOperation;\n(0, operation_1.defineAspects)(ListCollectionsOperation, [\n    operation_1.Aspect.READ_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.CURSOR_CREATING\n]);\n//# sourceMappingURL=list_collections.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,wBAAwB,GAAG,KAAK;AACxC,MAAM,UAAU;AAChB,MAAM,YAAY;AAClB,MAAM,cAAc;AACpB,cAAc,GACd,MAAM,iCAAiC,UAAU,gBAAgB;IAC7D,YAAY,EAAE,EAAE,MAAM,EAAE,OAAO,CAAE;QAC7B,KAAK,CAAC,IAAI;QACV,IAAI,CAAC,OAAO,GAAG;YAAE,GAAG,OAAO;QAAC;QAC5B,OAAO,IAAI,CAAC,OAAO,CAAC,YAAY;QAChC,IAAI,CAAC,EAAE,GAAG;QACV,IAAI,CAAC,MAAM,GAAG;QACd,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ;QACvC,IAAI,CAAC,qBAAqB,GAAG,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,qBAAqB;QACjE,IAAI,OAAO,IAAI,CAAC,OAAO,CAAC,SAAS,KAAK,UAAU;YAC5C,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS;QAC3C;IACJ;IACA,MAAM,QAAQ,MAAM,EAAE,OAAO,EAAE;QAC3B,OAAO,KAAK,CAAC,eAAe,QAAQ,SAAS,IAAI,CAAC,eAAe,CAAC,AAAC,CAAA,GAAG,QAAQ,cAAc,AAAD,EAAG;IAClG;IACA,kFAAkF,GAClF,gBAAgB,WAAW,EAAE;QACzB,MAAM,UAAU;YACZ,iBAAiB;YACjB,QAAQ,IAAI,CAAC,MAAM;YACnB,QAAQ,IAAI,CAAC,SAAS,GAAG;gBAAE,WAAW,IAAI,CAAC,SAAS;YAAC,IAAI,CAAC;YAC1D,UAAU,IAAI,CAAC,QAAQ;YACvB,uBAAuB,IAAI,CAAC,qBAAqB;QACrD;QACA,iEAAiE;QACjE,gDAAgD;QAChD,IAAI,eAAe,KAAK,IAAI,CAAC,OAAO,CAAC,OAAO,KAAK,WAAW;YACxD,QAAQ,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO;QAC1C;QACA,OAAO;IACX;AACJ;AACA,QAAQ,wBAAwB,GAAG;AAClC,CAAA,GAAG,YAAY,aAAa,AAAD,EAAG,0BAA0B;IACrD,YAAY,MAAM,CAAC,cAAc;IACjC,YAAY,MAAM,CAAC,SAAS;IAC5B,YAAY,MAAM,CAAC,eAAe;CACrC,GACD,4CAA4C"}},
    {"offset": {"line": 20376, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 20380, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/cursor/list_collections_cursor.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListCollectionsCursor = void 0;\nconst execute_operation_1 = require(\"../operations/execute_operation\");\nconst list_collections_1 = require(\"../operations/list_collections\");\nconst abstract_cursor_1 = require(\"./abstract_cursor\");\n/** @public */\nclass ListCollectionsCursor extends abstract_cursor_1.AbstractCursor {\n    constructor(db, filter, options) {\n        super(db.client, db.s.namespace, options);\n        this.parent = db;\n        this.filter = filter;\n        this.options = options;\n    }\n    clone() {\n        return new ListCollectionsCursor(this.parent, this.filter, {\n            ...this.options,\n            ...this.cursorOptions\n        });\n    }\n    /** @internal */\n    async _initialize(session) {\n        const operation = new list_collections_1.ListCollectionsOperation(this.parent, this.filter, {\n            ...this.cursorOptions,\n            ...this.options,\n            session\n        });\n        const response = await (0, execute_operation_1.executeOperation)(this.parent.client, operation);\n        // TODO: NODE-2882\n        return { server: operation.server, session, response };\n    }\n}\nexports.ListCollectionsCursor = ListCollectionsCursor;\n//# sourceMappingURL=list_collections_cursor.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,qBAAqB,GAAG,KAAK;AACrC,MAAM,sBAAsB;AAC5B,MAAM,qBAAqB;AAC3B,MAAM,oBAAoB;AAC1B,YAAY,GACZ,MAAM,8BAA8B,kBAAkB,cAAc;IAChE,YAAY,EAAE,EAAE,MAAM,EAAE,OAAO,CAAE;QAC7B,KAAK,CAAC,GAAG,MAAM,EAAE,GAAG,CAAC,CAAC,SAAS,EAAE;QACjC,IAAI,CAAC,MAAM,GAAG;QACd,IAAI,CAAC,MAAM,GAAG;QACd,IAAI,CAAC,OAAO,GAAG;IACnB;IACA,QAAQ;QACJ,OAAO,IAAI,sBAAsB,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE;YACvD,GAAG,IAAI,CAAC,OAAO;YACf,GAAG,IAAI,CAAC,aAAa;QACzB;IACJ;IACA,cAAc,GACd,MAAM,YAAY,OAAO,EAAE;QACvB,MAAM,YAAY,IAAI,mBAAmB,wBAAwB,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE;YACxF,GAAG,IAAI,CAAC,aAAa;YACrB,GAAG,IAAI,CAAC,OAAO;YACf;QACJ;QACA,MAAM,WAAW,MAAM,AAAC,CAAA,GAAG,oBAAoB,gBAAgB,AAAD,EAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;QACrF,kBAAkB;QAClB,OAAO;YAAE,QAAQ,UAAU,MAAM;YAAE;YAAS;QAAS;IACzD;AACJ;AACA,QAAQ,qBAAqB,GAAG,uBAChC,mDAAmD"}},
    {"offset": {"line": 20417, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 20421, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/operations/validate_collection.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ValidateCollectionOperation = void 0;\nconst error_1 = require(\"../error\");\nconst command_1 = require(\"./command\");\n/** @internal */\nclass ValidateCollectionOperation extends command_1.CommandOperation {\n    constructor(admin, collectionName, options) {\n        // Decorate command with extra options\n        const command = { validate: collectionName };\n        const keys = Object.keys(options);\n        for (let i = 0; i < keys.length; i++) {\n            if (Object.prototype.hasOwnProperty.call(options, keys[i]) && keys[i] !== 'session') {\n                command[keys[i]] = options[keys[i]];\n            }\n        }\n        super(admin.s.db, options);\n        this.options = options;\n        this.command = command;\n        this.collectionName = collectionName;\n    }\n    async execute(server, session) {\n        const collectionName = this.collectionName;\n        const doc = await super.executeCommand(server, session, this.command);\n        if (doc.result != null && typeof doc.result !== 'string')\n            throw new error_1.MongoUnexpectedServerResponseError('Error with validation data');\n        if (doc.result != null && doc.result.match(/exception|corrupt/) != null)\n            throw new error_1.MongoUnexpectedServerResponseError(`Invalid collection ${collectionName}`);\n        if (doc.valid != null && !doc.valid)\n            throw new error_1.MongoUnexpectedServerResponseError(`Invalid collection ${collectionName}`);\n        return doc;\n    }\n}\nexports.ValidateCollectionOperation = ValidateCollectionOperation;\n//# sourceMappingURL=validate_collection.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,2BAA2B,GAAG,KAAK;AAC3C,MAAM,UAAU;AAChB,MAAM,YAAY;AAClB,cAAc,GACd,MAAM,oCAAoC,UAAU,gBAAgB;IAChE,YAAY,KAAK,EAAE,cAAc,EAAE,OAAO,CAAE;QACxC,sCAAsC;QACtC,MAAM,UAAU;YAAE,UAAU;QAAe;QAC3C,MAAM,OAAO,OAAO,IAAI,CAAC;QACzB,IAAK,IAAI,IAAI,GAAG,IAAI,KAAK,MAAM,EAAE,IAAK;YAClC,IAAI,OAAO,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,IAAI,CAAC,EAAE,KAAK,IAAI,CAAC,EAAE,KAAK,WAAW;gBACjF,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC;YACvC;QACJ;QACA,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE;QAClB,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,cAAc,GAAG;IAC1B;IACA,MAAM,QAAQ,MAAM,EAAE,OAAO,EAAE;QAC3B,MAAM,iBAAiB,IAAI,CAAC,cAAc;QAC1C,MAAM,MAAM,MAAM,KAAK,CAAC,eAAe,QAAQ,SAAS,IAAI,CAAC,OAAO;QACpE,IAAI,IAAI,MAAM,IAAI,QAAQ,OAAO,IAAI,MAAM,KAAK,UAC5C,MAAM,IAAI,QAAQ,kCAAkC,CAAC;QACzD,IAAI,IAAI,MAAM,IAAI,QAAQ,IAAI,MAAM,CAAC,KAAK,CAAC,wBAAwB,MAC/D,MAAM,IAAI,QAAQ,kCAAkC,CAAC,CAAC,mBAAmB,EAAE,eAAe,CAAC;QAC/F,IAAI,IAAI,KAAK,IAAI,QAAQ,CAAC,IAAI,KAAK,EAC/B,MAAM,IAAI,QAAQ,kCAAkC,CAAC,CAAC,mBAAmB,EAAE,eAAe,CAAC;QAC/F,OAAO;IACX;AACJ;AACA,QAAQ,2BAA2B,GAAG,6BACtC,+CAA+C"}},
    {"offset": {"line": 20455, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 20459, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/operations/list_databases.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListDatabasesOperation = void 0;\nconst utils_1 = require(\"../utils\");\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass ListDatabasesOperation extends command_1.CommandOperation {\n    constructor(db, options) {\n        super(db, options);\n        this.options = options ?? {};\n        this.ns = new utils_1.MongoDBNamespace('admin', '$cmd');\n    }\n    async execute(server, session) {\n        const cmd = { listDatabases: 1 };\n        if (typeof this.options.nameOnly === 'boolean') {\n            cmd.nameOnly = this.options.nameOnly;\n        }\n        if (this.options.filter) {\n            cmd.filter = this.options.filter;\n        }\n        if (typeof this.options.authorizedDatabases === 'boolean') {\n            cmd.authorizedDatabases = this.options.authorizedDatabases;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if ((0, utils_1.maxWireVersion)(server) >= 9 && this.options.comment !== undefined) {\n            cmd.comment = this.options.comment;\n        }\n        return super.executeCommand(server, session, cmd);\n    }\n}\nexports.ListDatabasesOperation = ListDatabasesOperation;\n(0, operation_1.defineAspects)(ListDatabasesOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE]);\n//# sourceMappingURL=list_databases.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,sBAAsB,GAAG,KAAK;AACtC,MAAM,UAAU;AAChB,MAAM,YAAY;AAClB,MAAM,cAAc;AACpB,cAAc,GACd,MAAM,+BAA+B,UAAU,gBAAgB;IAC3D,YAAY,EAAE,EAAE,OAAO,CAAE;QACrB,KAAK,CAAC,IAAI;QACV,IAAI,CAAC,OAAO,GAAG,WAAW,CAAC;QAC3B,IAAI,CAAC,EAAE,GAAG,IAAI,QAAQ,gBAAgB,CAAC,SAAS;IACpD;IACA,MAAM,QAAQ,MAAM,EAAE,OAAO,EAAE;QAC3B,MAAM,MAAM;YAAE,eAAe;QAAE;QAC/B,IAAI,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,KAAK,WAAW;YAC5C,IAAI,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ;QACxC;QACA,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;YACrB,IAAI,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM;QACpC;QACA,IAAI,OAAO,IAAI,CAAC,OAAO,CAAC,mBAAmB,KAAK,WAAW;YACvD,IAAI,mBAAmB,GAAG,IAAI,CAAC,OAAO,CAAC,mBAAmB;QAC9D;QACA,iEAAiE;QACjE,gDAAgD;QAChD,IAAI,AAAC,CAAA,GAAG,QAAQ,cAAc,AAAD,EAAG,WAAW,KAAK,IAAI,CAAC,OAAO,CAAC,OAAO,KAAK,WAAW;YAChF,IAAI,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO;QACtC;QACA,OAAO,KAAK,CAAC,eAAe,QAAQ,SAAS;IACjD;AACJ;AACA,QAAQ,sBAAsB,GAAG;AAChC,CAAA,GAAG,YAAY,aAAa,AAAD,EAAG,wBAAwB;IAAC,YAAY,MAAM,CAAC,cAAc;IAAE,YAAY,MAAM,CAAC,SAAS;CAAC,GACxH,0CAA0C"}},
    {"offset": {"line": 20499, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 20503, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/admin.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Admin = void 0;\nconst bson_1 = require(\"./bson\");\nconst execute_operation_1 = require(\"./operations/execute_operation\");\nconst list_databases_1 = require(\"./operations/list_databases\");\nconst remove_user_1 = require(\"./operations/remove_user\");\nconst run_command_1 = require(\"./operations/run_command\");\nconst validate_collection_1 = require(\"./operations/validate_collection\");\n/**\n * The **Admin** class is an internal class that allows convenient access to\n * the admin functionality and commands for MongoDB.\n *\n * **ADMIN Cannot directly be instantiated**\n * @public\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * const client = new MongoClient('mongodb://localhost:27017');\n * const admin = client.db().admin();\n * const dbInfo = await admin.listDatabases();\n * for (const db of dbInfo.databases) {\n *   console.log(db.name);\n * }\n * ```\n */\nclass Admin {\n    /**\n     * Create a new Admin instance\n     * @internal\n     */\n    constructor(db) {\n        this.s = { db };\n    }\n    /**\n     * Execute a command\n     *\n     * The driver will ensure the following fields are attached to the command sent to the server:\n     * - `lsid` - sourced from an implicit session or options.session\n     * - `$readPreference` - defaults to primary or can be configured by options.readPreference\n     * - `$db` - sourced from the name of this database\n     *\n     * If the client has a serverApi setting:\n     * - `apiVersion`\n     * - `apiStrict`\n     * - `apiDeprecationErrors`\n     *\n     * When in a transaction:\n     * - `readConcern` - sourced from readConcern set on the TransactionOptions\n     * - `writeConcern` - sourced from writeConcern set on the TransactionOptions\n     *\n     * Attaching any of the above fields to the command will have no effect as the driver will overwrite the value.\n     *\n     * @param command - The command to execute\n     * @param options - Optional settings for the command\n     */\n    async command(command, options) {\n        return (0, execute_operation_1.executeOperation)(this.s.db.client, new run_command_1.RunAdminCommandOperation(command, {\n            ...(0, bson_1.resolveBSONOptions)(options),\n            session: options?.session,\n            readPreference: options?.readPreference\n        }));\n    }\n    /**\n     * Retrieve the server build information\n     *\n     * @param options - Optional settings for the command\n     */\n    async buildInfo(options) {\n        return this.command({ buildinfo: 1 }, options);\n    }\n    /**\n     * Retrieve the server build information\n     *\n     * @param options - Optional settings for the command\n     */\n    async serverInfo(options) {\n        return this.command({ buildinfo: 1 }, options);\n    }\n    /**\n     * Retrieve this db's server status.\n     *\n     * @param options - Optional settings for the command\n     */\n    async serverStatus(options) {\n        return this.command({ serverStatus: 1 }, options);\n    }\n    /**\n     * Ping the MongoDB server and retrieve results\n     *\n     * @param options - Optional settings for the command\n     */\n    async ping(options) {\n        return this.command({ ping: 1 }, options);\n    }\n    /**\n     * Remove a user from a database\n     *\n     * @param username - The username to remove\n     * @param options - Optional settings for the command\n     */\n    async removeUser(username, options) {\n        return (0, execute_operation_1.executeOperation)(this.s.db.client, new remove_user_1.RemoveUserOperation(this.s.db, username, { dbName: 'admin', ...options }));\n    }\n    /**\n     * Validate an existing collection\n     *\n     * @param collectionName - The name of the collection to validate.\n     * @param options - Optional settings for the command\n     */\n    async validateCollection(collectionName, options = {}) {\n        return (0, execute_operation_1.executeOperation)(this.s.db.client, new validate_collection_1.ValidateCollectionOperation(this, collectionName, options));\n    }\n    /**\n     * List the available databases\n     *\n     * @param options - Optional settings for the command\n     */\n    async listDatabases(options) {\n        return (0, execute_operation_1.executeOperation)(this.s.db.client, new list_databases_1.ListDatabasesOperation(this.s.db, options));\n    }\n    /**\n     * Get ReplicaSet status\n     *\n     * @param options - Optional settings for the command\n     */\n    async replSetGetStatus(options) {\n        return this.command({ replSetGetStatus: 1 }, options);\n    }\n}\nexports.Admin = Admin;\n//# sourceMappingURL=admin.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,KAAK,GAAG,KAAK;AACrB,MAAM,SAAS;AACf,MAAM,sBAAsB;AAC5B,MAAM,mBAAmB;AACzB,MAAM,gBAAgB;AACtB,MAAM,gBAAgB;AACtB,MAAM,wBAAwB;AAC9B;;;;;;;;;;;;;;;;;;CAkBC,GACD,MAAM;IACF;;;KAGC,GACD,YAAY,EAAE,CAAE;QACZ,IAAI,CAAC,CAAC,GAAG;YAAE;QAAG;IAClB;IACA;;;;;;;;;;;;;;;;;;;;;KAqBC,GACD,MAAM,QAAQ,OAAO,EAAE,OAAO,EAAE;QAC5B,OAAO,AAAC,CAAA,GAAG,oBAAoB,gBAAgB,AAAD,EAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,MAAM,EAAE,IAAI,cAAc,wBAAwB,CAAC,SAAS;YACnH,GAAG,AAAC,CAAA,GAAG,OAAO,kBAAkB,AAAD,EAAG,QAAQ;YAC1C,SAAS,SAAS;YAClB,gBAAgB,SAAS;QAC7B;IACJ;IACA;;;;KAIC,GACD,MAAM,UAAU,OAAO,EAAE;QACrB,OAAO,IAAI,CAAC,OAAO,CAAC;YAAE,WAAW;QAAE,GAAG;IAC1C;IACA;;;;KAIC,GACD,MAAM,WAAW,OAAO,EAAE;QACtB,OAAO,IAAI,CAAC,OAAO,CAAC;YAAE,WAAW;QAAE,GAAG;IAC1C;IACA;;;;KAIC,GACD,MAAM,aAAa,OAAO,EAAE;QACxB,OAAO,IAAI,CAAC,OAAO,CAAC;YAAE,cAAc;QAAE,GAAG;IAC7C;IACA;;;;KAIC,GACD,MAAM,KAAK,OAAO,EAAE;QAChB,OAAO,IAAI,CAAC,OAAO,CAAC;YAAE,MAAM;QAAE,GAAG;IACrC;IACA;;;;;KAKC,GACD,MAAM,WAAW,QAAQ,EAAE,OAAO,EAAE;QAChC,OAAO,AAAC,CAAA,GAAG,oBAAoB,gBAAgB,AAAD,EAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,MAAM,EAAE,IAAI,cAAc,mBAAmB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,UAAU;YAAE,QAAQ;YAAS,GAAG,OAAO;QAAC;IAChK;IACA;;;;;KAKC,GACD,MAAM,mBAAmB,cAAc,EAAE,UAAU,CAAC,CAAC,EAAE;QACnD,OAAO,AAAC,CAAA,GAAG,oBAAoB,gBAAgB,AAAD,EAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,MAAM,EAAE,IAAI,sBAAsB,2BAA2B,CAAC,IAAI,EAAE,gBAAgB;IACnJ;IACA;;;;KAIC,GACD,MAAM,cAAc,OAAO,EAAE;QACzB,OAAO,AAAC,CAAA,GAAG,oBAAoB,gBAAgB,AAAD,EAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,MAAM,EAAE,IAAI,iBAAiB,sBAAsB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE;IAC9H;IACA;;;;KAIC,GACD,MAAM,iBAAiB,OAAO,EAAE;QAC5B,OAAO,IAAI,CAAC,OAAO,CAAC;YAAE,kBAAkB;QAAE,GAAG;IACjD;AACJ;AACA,QAAQ,KAAK,GAAG,OAChB,iCAAiC"}},
    {"offset": {"line": 20642, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 20646, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/db.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Db = void 0;\nconst admin_1 = require(\"./admin\");\nconst bson_1 = require(\"./bson\");\nconst change_stream_1 = require(\"./change_stream\");\nconst collection_1 = require(\"./collection\");\nconst CONSTANTS = require(\"./constants\");\nconst aggregation_cursor_1 = require(\"./cursor/aggregation_cursor\");\nconst list_collections_cursor_1 = require(\"./cursor/list_collections_cursor\");\nconst run_command_cursor_1 = require(\"./cursor/run_command_cursor\");\nconst error_1 = require(\"./error\");\nconst collections_1 = require(\"./operations/collections\");\nconst create_collection_1 = require(\"./operations/create_collection\");\nconst drop_1 = require(\"./operations/drop\");\nconst execute_operation_1 = require(\"./operations/execute_operation\");\nconst indexes_1 = require(\"./operations/indexes\");\nconst profiling_level_1 = require(\"./operations/profiling_level\");\nconst remove_user_1 = require(\"./operations/remove_user\");\nconst rename_1 = require(\"./operations/rename\");\nconst run_command_1 = require(\"./operations/run_command\");\nconst set_profiling_level_1 = require(\"./operations/set_profiling_level\");\nconst stats_1 = require(\"./operations/stats\");\nconst read_concern_1 = require(\"./read_concern\");\nconst read_preference_1 = require(\"./read_preference\");\nconst utils_1 = require(\"./utils\");\nconst write_concern_1 = require(\"./write_concern\");\n// Allowed parameters\nconst DB_OPTIONS_ALLOW_LIST = [\n    'writeConcern',\n    'readPreference',\n    'readPreferenceTags',\n    'native_parser',\n    'forceServerObjectId',\n    'pkFactory',\n    'serializeFunctions',\n    'raw',\n    'authSource',\n    'ignoreUndefined',\n    'readConcern',\n    'retryMiliSeconds',\n    'numberOfRetries',\n    'useBigInt64',\n    'promoteBuffers',\n    'promoteLongs',\n    'bsonRegExp',\n    'enableUtf8Validation',\n    'promoteValues',\n    'compression',\n    'retryWrites'\n];\n/**\n * The **Db** class is a class that represents a MongoDB Database.\n * @public\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * interface Pet {\n *   name: string;\n *   kind: 'dog' | 'cat' | 'fish';\n * }\n *\n * const client = new MongoClient('mongodb://localhost:27017');\n * const db = client.db();\n *\n * // Create a collection that validates our union\n * await db.createCollection<Pet>('pets', {\n *   validator: { $expr: { $in: ['$kind', ['dog', 'cat', 'fish']] } }\n * })\n * ```\n */\nclass Db {\n    /**\n     * Creates a new Db instance.\n     *\n     * Db name cannot contain a dot, the server may apply more restrictions when an operation is run.\n     *\n     * @param client - The MongoClient for the database.\n     * @param databaseName - The name of the database this instance represents.\n     * @param options - Optional settings for Db construction.\n     */\n    constructor(client, databaseName, options) {\n        options = options ?? {};\n        // Filter the options\n        options = (0, utils_1.filterOptions)(options, DB_OPTIONS_ALLOW_LIST);\n        // Ensure there are no dots in database name\n        if (typeof databaseName === 'string' && databaseName.includes('.')) {\n            throw new error_1.MongoInvalidArgumentError(`Database names cannot contain the character '.'`);\n        }\n        // Internal state of the db object\n        this.s = {\n            // Options\n            options,\n            // Unpack read preference\n            readPreference: read_preference_1.ReadPreference.fromOptions(options),\n            // Merge bson options\n            bsonOptions: (0, bson_1.resolveBSONOptions)(options, client),\n            // Set up the primary key factory or fallback to ObjectId\n            pkFactory: options?.pkFactory ?? utils_1.DEFAULT_PK_FACTORY,\n            // ReadConcern\n            readConcern: read_concern_1.ReadConcern.fromOptions(options),\n            writeConcern: write_concern_1.WriteConcern.fromOptions(options),\n            // Namespace\n            namespace: new utils_1.MongoDBNamespace(databaseName)\n        };\n        this.client = client;\n    }\n    get databaseName() {\n        return this.s.namespace.db;\n    }\n    // Options\n    get options() {\n        return this.s.options;\n    }\n    /**\n     * Check if a secondary can be used (because the read preference is *not* set to primary)\n     */\n    get secondaryOk() {\n        return this.s.readPreference?.preference !== 'primary' || false;\n    }\n    get readConcern() {\n        return this.s.readConcern;\n    }\n    /**\n     * The current readPreference of the Db. If not explicitly defined for\n     * this Db, will be inherited from the parent MongoClient\n     */\n    get readPreference() {\n        if (this.s.readPreference == null) {\n            return this.client.readPreference;\n        }\n        return this.s.readPreference;\n    }\n    get bsonOptions() {\n        return this.s.bsonOptions;\n    }\n    // get the write Concern\n    get writeConcern() {\n        return this.s.writeConcern;\n    }\n    get namespace() {\n        return this.s.namespace.toString();\n    }\n    /**\n     * Create a new collection on a server with the specified options. Use this to create capped collections.\n     * More information about command options available at https://www.mongodb.com/docs/manual/reference/command/create/\n     *\n     * Collection namespace validation is performed server-side.\n     *\n     * @param name - The name of the collection to create\n     * @param options - Optional settings for the command\n     */\n    async createCollection(name, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new create_collection_1.CreateCollectionOperation(this, name, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Execute a command\n     *\n     * @remarks\n     * This command does not inherit options from the MongoClient.\n     *\n     * The driver will ensure the following fields are attached to the command sent to the server:\n     * - `lsid` - sourced from an implicit session or options.session\n     * - `$readPreference` - defaults to primary or can be configured by options.readPreference\n     * - `$db` - sourced from the name of this database\n     *\n     * If the client has a serverApi setting:\n     * - `apiVersion`\n     * - `apiStrict`\n     * - `apiDeprecationErrors`\n     *\n     * When in a transaction:\n     * - `readConcern` - sourced from readConcern set on the TransactionOptions\n     * - `writeConcern` - sourced from writeConcern set on the TransactionOptions\n     *\n     * Attaching any of the above fields to the command will have no effect as the driver will overwrite the value.\n     *\n     * @param command - The command to run\n     * @param options - Optional settings for the command\n     */\n    async command(command, options) {\n        // Intentionally, we do not inherit options from parent for this operation.\n        return (0, execute_operation_1.executeOperation)(this.client, new run_command_1.RunCommandOperation(this, command, {\n            ...(0, bson_1.resolveBSONOptions)(options),\n            session: options?.session,\n            readPreference: options?.readPreference\n        }));\n    }\n    /**\n     * Execute an aggregation framework pipeline against the database, needs MongoDB \\>= 3.6\n     *\n     * @param pipeline - An array of aggregation stages to be executed\n     * @param options - Optional settings for the command\n     */\n    aggregate(pipeline = [], options) {\n        return new aggregation_cursor_1.AggregationCursor(this.client, this.s.namespace, pipeline, (0, utils_1.resolveOptions)(this, options));\n    }\n    /** Return the Admin db instance */\n    admin() {\n        return new admin_1.Admin(this);\n    }\n    /**\n     * Returns a reference to a MongoDB Collection. If it does not exist it will be created implicitly.\n     *\n     * Collection namespace validation is performed server-side.\n     *\n     * @param name - the collection name we wish to access.\n     * @returns return the new Collection instance\n     */\n    collection(name, options = {}) {\n        if (typeof options === 'function') {\n            throw new error_1.MongoInvalidArgumentError('The callback form of this helper has been removed.');\n        }\n        return new collection_1.Collection(this, name, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Get all the db statistics.\n     *\n     * @param options - Optional settings for the command\n     */\n    async stats(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new stats_1.DbStatsOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    listCollections(filter = {}, options = {}) {\n        return new list_collections_cursor_1.ListCollectionsCursor(this, filter, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Rename a collection.\n     *\n     * @remarks\n     * This operation does not inherit options from the MongoClient.\n     *\n     * @param fromCollection - Name of current collection to rename\n     * @param toCollection - New name of of the collection\n     * @param options - Optional settings for the command\n     */\n    async renameCollection(fromCollection, toCollection, options) {\n        // Intentionally, we do not inherit options from parent for this operation.\n        return (0, execute_operation_1.executeOperation)(this.client, new rename_1.RenameOperation(this.collection(fromCollection), toCollection, { ...options, new_collection: true, readPreference: read_preference_1.ReadPreference.primary }));\n    }\n    /**\n     * Drop a collection from the database, removing it permanently. New accesses will create a new collection.\n     *\n     * @param name - Name of collection to drop\n     * @param options - Optional settings for the command\n     */\n    async dropCollection(name, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new drop_1.DropCollectionOperation(this, name, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Drop a database, removing it permanently from the server.\n     *\n     * @param options - Optional settings for the command\n     */\n    async dropDatabase(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new drop_1.DropDatabaseOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Fetch all collections for the current db.\n     *\n     * @param options - Optional settings for the command\n     */\n    async collections(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new collections_1.CollectionsOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Creates an index on the db and collection.\n     *\n     * @param name - Name of the collection to create the index on.\n     * @param indexSpec - Specify the field to index, or an index specification\n     * @param options - Optional settings for the command\n     */\n    async createIndex(name, indexSpec, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.CreateIndexOperation(this, name, indexSpec, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Remove a user from a database\n     *\n     * @param username - The username to remove\n     * @param options - Optional settings for the command\n     */\n    async removeUser(username, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new remove_user_1.RemoveUserOperation(this, username, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Set the current profiling level of MongoDB\n     *\n     * @param level - The new profiling level (off, slow_only, all).\n     * @param options - Optional settings for the command\n     */\n    async setProfilingLevel(level, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new set_profiling_level_1.SetProfilingLevelOperation(this, level, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Retrieve the current profiling Level for MongoDB\n     *\n     * @param options - Optional settings for the command\n     */\n    async profilingLevel(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new profiling_level_1.ProfilingLevelOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Retrieves this collections index info.\n     *\n     * @param name - The name of the collection.\n     * @param options - Optional settings for the command\n     */\n    async indexInformation(name, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.IndexInformationOperation(this, name, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Create a new Change Stream, watching for new changes (insertions, updates,\n     * replacements, deletions, and invalidations) in this database. Will ignore all\n     * changes to system collections.\n     *\n     * @remarks\n     * watch() accepts two generic arguments for distinct use cases:\n     * - The first is to provide the schema that may be defined for all the collections within this database\n     * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n     *\n     * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n     * @param options - Optional settings for the command\n     * @typeParam TSchema - Type of the data being detected by the change stream\n     * @typeParam TChange - Type of the whole change stream document emitted\n     */\n    watch(pipeline = [], options = {}) {\n        // Allow optionally not specifying a pipeline\n        if (!Array.isArray(pipeline)) {\n            options = pipeline;\n            pipeline = [];\n        }\n        return new change_stream_1.ChangeStream(this, pipeline, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * A low level cursor API providing basic driver functionality:\n     * - ClientSession management\n     * - ReadPreference for server selection\n     * - Running getMores automatically when a local batch is exhausted\n     *\n     * @param command - The command that will start a cursor on the server.\n     * @param options - Configurations for running the command, bson options will apply to getMores\n     */\n    runCursorCommand(command, options) {\n        return new run_command_cursor_1.RunCommandCursor(this, command, options);\n    }\n}\nDb.SYSTEM_NAMESPACE_COLLECTION = CONSTANTS.SYSTEM_NAMESPACE_COLLECTION;\nDb.SYSTEM_INDEX_COLLECTION = CONSTANTS.SYSTEM_INDEX_COLLECTION;\nDb.SYSTEM_PROFILE_COLLECTION = CONSTANTS.SYSTEM_PROFILE_COLLECTION;\nDb.SYSTEM_USER_COLLECTION = CONSTANTS.SYSTEM_USER_COLLECTION;\nDb.SYSTEM_COMMAND_COLLECTION = CONSTANTS.SYSTEM_COMMAND_COLLECTION;\nDb.SYSTEM_JS_COLLECTION = CONSTANTS.SYSTEM_JS_COLLECTION;\nexports.Db = Db;\n//# sourceMappingURL=db.js.map"],"names":[],"mappings":"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"}},
    {"offset": {"line": 20986, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 20990, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/mongo_client.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MongoClient = exports.ServerApiVersion = void 0;\nconst fs_1 = require(\"fs\");\nconst util_1 = require(\"util\");\nconst bson_1 = require(\"./bson\");\nconst change_stream_1 = require(\"./change_stream\");\nconst mongo_credentials_1 = require(\"./cmap/auth/mongo_credentials\");\nconst providers_1 = require(\"./cmap/auth/providers\");\nconst connection_string_1 = require(\"./connection_string\");\nconst constants_1 = require(\"./constants\");\nconst db_1 = require(\"./db\");\nconst error_1 = require(\"./error\");\nconst mongo_logger_1 = require(\"./mongo_logger\");\nconst mongo_types_1 = require(\"./mongo_types\");\nconst execute_operation_1 = require(\"./operations/execute_operation\");\nconst run_command_1 = require(\"./operations/run_command\");\nconst read_preference_1 = require(\"./read_preference\");\nconst server_selection_1 = require(\"./sdam/server_selection\");\nconst topology_1 = require(\"./sdam/topology\");\nconst sessions_1 = require(\"./sessions\");\nconst utils_1 = require(\"./utils\");\n/** @public */\nexports.ServerApiVersion = Object.freeze({\n    v1: '1'\n});\n/** @internal */\nconst kOptions = Symbol('options');\n/**\n * The **MongoClient** class is a class that allows for making Connections to MongoDB.\n * @public\n *\n * @remarks\n * The programmatically provided options take precedence over the URI options.\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * // Enable command monitoring for debugging\n * const client = new MongoClient('mongodb://localhost:27017', { monitorCommands: true });\n *\n * client.on('commandStarted', started => console.log(started));\n * client.db().collection('pets');\n * await client.insertOne({ name: 'spot', kind: 'dog' });\n * ```\n */\nclass MongoClient extends mongo_types_1.TypedEventEmitter {\n    constructor(url, options) {\n        super();\n        this[kOptions] = (0, connection_string_1.parseOptions)(url, this, options);\n        this.mongoLogger = new mongo_logger_1.MongoLogger(this[kOptions].mongoLoggerOptions);\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const client = this;\n        // The internal state\n        this.s = {\n            url,\n            bsonOptions: (0, bson_1.resolveBSONOptions)(this[kOptions]),\n            namespace: (0, utils_1.ns)('admin'),\n            hasBeenClosed: false,\n            sessionPool: new sessions_1.ServerSessionPool(this),\n            activeSessions: new Set(),\n            get options() {\n                return client[kOptions];\n            },\n            get readConcern() {\n                return client[kOptions].readConcern;\n            },\n            get writeConcern() {\n                return client[kOptions].writeConcern;\n            },\n            get readPreference() {\n                return client[kOptions].readPreference;\n            },\n            get isMongoClient() {\n                return true;\n            }\n        };\n        this.checkForNonGenuineHosts();\n    }\n    /** @internal */\n    checkForNonGenuineHosts() {\n        const documentDBHostnames = this[kOptions].hosts.filter((hostAddress) => (0, utils_1.isHostMatch)(utils_1.DOCUMENT_DB_CHECK, hostAddress.host));\n        const srvHostIsDocumentDB = (0, utils_1.isHostMatch)(utils_1.DOCUMENT_DB_CHECK, this[kOptions].srvHost);\n        const cosmosDBHostnames = this[kOptions].hosts.filter((hostAddress) => (0, utils_1.isHostMatch)(utils_1.COSMOS_DB_CHECK, hostAddress.host));\n        const srvHostIsCosmosDB = (0, utils_1.isHostMatch)(utils_1.COSMOS_DB_CHECK, this[kOptions].srvHost);\n        if (documentDBHostnames.length !== 0 || srvHostIsDocumentDB) {\n            this.mongoLogger.info('client', utils_1.DOCUMENT_DB_MSG);\n        }\n        else if (cosmosDBHostnames.length !== 0 || srvHostIsCosmosDB) {\n            this.mongoLogger.info('client', utils_1.COSMOS_DB_MSG);\n        }\n    }\n    /** @see MongoOptions */\n    get options() {\n        return Object.freeze({ ...this[kOptions] });\n    }\n    get serverApi() {\n        return this[kOptions].serverApi && Object.freeze({ ...this[kOptions].serverApi });\n    }\n    /**\n     * Intended for APM use only\n     * @internal\n     */\n    get monitorCommands() {\n        return this[kOptions].monitorCommands;\n    }\n    set monitorCommands(value) {\n        this[kOptions].monitorCommands = value;\n    }\n    /** @internal */\n    get autoEncrypter() {\n        return this[kOptions].autoEncrypter;\n    }\n    get readConcern() {\n        return this.s.readConcern;\n    }\n    get writeConcern() {\n        return this.s.writeConcern;\n    }\n    get readPreference() {\n        return this.s.readPreference;\n    }\n    get bsonOptions() {\n        return this.s.bsonOptions;\n    }\n    /**\n     * Connect to MongoDB using a url\n     *\n     * @see docs.mongodb.org/manual/reference/connection-string/\n     */\n    async connect() {\n        if (this.connectionLock) {\n            return this.connectionLock;\n        }\n        try {\n            this.connectionLock = this._connect();\n            await this.connectionLock;\n        }\n        finally {\n            // release\n            this.connectionLock = undefined;\n        }\n        return this;\n    }\n    /**\n     * Create a topology to open the connection, must be locked to avoid topology leaks in concurrency scenario.\n     * Locking is enforced by the connect method.\n     *\n     * @internal\n     */\n    async _connect() {\n        if (this.topology && this.topology.isConnected()) {\n            return this;\n        }\n        const options = this[kOptions];\n        if (options.tls) {\n            if (typeof options.tlsCAFile === 'string') {\n                options.ca ??= await fs_1.promises.readFile(options.tlsCAFile);\n            }\n            if (typeof options.tlsCRLFile === 'string') {\n                options.crl ??= await fs_1.promises.readFile(options.tlsCRLFile);\n            }\n            if (typeof options.tlsCertificateKeyFile === 'string') {\n                if (!options.key || !options.cert) {\n                    const contents = await fs_1.promises.readFile(options.tlsCertificateKeyFile);\n                    options.key ??= contents;\n                    options.cert ??= contents;\n                }\n            }\n        }\n        if (typeof options.srvHost === 'string') {\n            const hosts = await (0, connection_string_1.resolveSRVRecord)(options);\n            for (const [index, host] of hosts.entries()) {\n                options.hosts[index] = host;\n            }\n        }\n        // It is important to perform validation of hosts AFTER SRV resolution, to check the real hostname,\n        // but BEFORE we even attempt connecting with a potentially not allowed hostname\n        if (options.credentials?.mechanism === providers_1.AuthMechanism.MONGODB_OIDC) {\n            const allowedHosts = options.credentials?.mechanismProperties?.ALLOWED_HOSTS || mongo_credentials_1.DEFAULT_ALLOWED_HOSTS;\n            const isServiceAuth = !!options.credentials?.mechanismProperties?.PROVIDER_NAME;\n            if (!isServiceAuth) {\n                for (const host of options.hosts) {\n                    if (!(0, utils_1.hostMatchesWildcards)(host.toHostPort().host, allowedHosts)) {\n                        throw new error_1.MongoInvalidArgumentError(`Host '${host}' is not valid for OIDC authentication with ALLOWED_HOSTS of '${allowedHosts.join(',')}'`);\n                    }\n                }\n            }\n        }\n        this.topology = new topology_1.Topology(this, options.hosts, options);\n        // Events can be emitted before initialization is complete so we have to\n        // save the reference to the topology on the client ASAP if the event handlers need to access it\n        this.topology.once(topology_1.Topology.OPEN, () => this.emit('open', this));\n        for (const event of constants_1.MONGO_CLIENT_EVENTS) {\n            this.topology.on(event, (...args) => this.emit(event, ...args));\n        }\n        const topologyConnect = async () => {\n            try {\n                await (0, util_1.promisify)(callback => this.topology?.connect(options, callback))();\n            }\n            catch (error) {\n                this.topology?.close({ force: true });\n                throw error;\n            }\n        };\n        if (this.autoEncrypter) {\n            await this.autoEncrypter?.init();\n            await topologyConnect();\n            await options.encrypter.connectInternalClient();\n        }\n        else {\n            await topologyConnect();\n        }\n        return this;\n    }\n    /**\n     * Close the client and its underlying connections\n     *\n     * @param force - Force close, emitting no events\n     */\n    async close(force = false) {\n        // There's no way to set hasBeenClosed back to false\n        Object.defineProperty(this.s, 'hasBeenClosed', {\n            value: true,\n            enumerable: true,\n            configurable: false,\n            writable: false\n        });\n        const activeSessionEnds = Array.from(this.s.activeSessions, session => session.endSession());\n        this.s.activeSessions.clear();\n        await Promise.all(activeSessionEnds);\n        if (this.topology == null) {\n            return;\n        }\n        // If we would attempt to select a server and get nothing back we short circuit\n        // to avoid the server selection timeout.\n        const selector = (0, server_selection_1.readPreferenceServerSelector)(read_preference_1.ReadPreference.primaryPreferred);\n        const topologyDescription = this.topology.description;\n        const serverDescriptions = Array.from(topologyDescription.servers.values());\n        const servers = selector(topologyDescription, serverDescriptions);\n        if (servers.length !== 0) {\n            const endSessions = Array.from(this.s.sessionPool.sessions, ({ id }) => id);\n            if (endSessions.length !== 0) {\n                await (0, execute_operation_1.executeOperation)(this, new run_command_1.RunAdminCommandOperation({ endSessions }, { readPreference: read_preference_1.ReadPreference.primaryPreferred, noResponse: true })).catch(() => null); // outcome does not matter;\n            }\n        }\n        // clear out references to old topology\n        const topology = this.topology;\n        this.topology = undefined;\n        await new Promise((resolve, reject) => {\n            topology.close({ force }, error => {\n                if (error)\n                    return reject(error);\n                const { encrypter } = this[kOptions];\n                if (encrypter) {\n                    return encrypter.closeCallback(this, force, error => {\n                        if (error)\n                            return reject(error);\n                        resolve();\n                    });\n                }\n                resolve();\n            });\n        });\n    }\n    /**\n     * Create a new Db instance sharing the current socket connections.\n     *\n     * @param dbName - The name of the database we want to use. If not provided, use database name from connection string.\n     * @param options - Optional settings for Db construction\n     */\n    db(dbName, options) {\n        options = options ?? {};\n        // Default to db from connection string if not provided\n        if (!dbName) {\n            dbName = this.options.dbName;\n        }\n        // Copy the options and add out internal override of the not shared flag\n        const finalOptions = Object.assign({}, this[kOptions], options);\n        // Return the db object\n        const db = new db_1.Db(this, dbName, finalOptions);\n        // Return the database\n        return db;\n    }\n    /**\n     * Connect to MongoDB using a url\n     *\n     * @remarks\n     * The programmatically provided options take precedence over the URI options.\n     *\n     * @see https://www.mongodb.com/docs/manual/reference/connection-string/\n     */\n    static async connect(url, options) {\n        const client = new this(url, options);\n        return client.connect();\n    }\n    /**\n     * Creates a new ClientSession. When using the returned session in an operation\n     * a corresponding ServerSession will be created.\n     *\n     * @remarks\n     * A ClientSession instance may only be passed to operations being performed on the same\n     * MongoClient it was started from.\n     */\n    startSession(options) {\n        const session = new sessions_1.ClientSession(this, this.s.sessionPool, { explicit: true, ...options }, this[kOptions]);\n        this.s.activeSessions.add(session);\n        session.once('ended', () => {\n            this.s.activeSessions.delete(session);\n        });\n        return session;\n    }\n    async withSession(optionsOrExecutor, executor) {\n        const options = {\n            // Always define an owner\n            owner: Symbol(),\n            // If it's an object inherit the options\n            ...(typeof optionsOrExecutor === 'object' ? optionsOrExecutor : {})\n        };\n        const withSessionCallback = typeof optionsOrExecutor === 'function' ? optionsOrExecutor : executor;\n        if (withSessionCallback == null) {\n            throw new error_1.MongoInvalidArgumentError('Missing required callback parameter');\n        }\n        const session = this.startSession(options);\n        try {\n            return await withSessionCallback(session);\n        }\n        finally {\n            try {\n                await session.endSession();\n            }\n            catch {\n                // We are not concerned with errors from endSession()\n            }\n        }\n    }\n    /**\n     * Create a new Change Stream, watching for new changes (insertions, updates,\n     * replacements, deletions, and invalidations) in this cluster. Will ignore all\n     * changes to system collections, as well as the local, admin, and config databases.\n     *\n     * @remarks\n     * watch() accepts two generic arguments for distinct use cases:\n     * - The first is to provide the schema that may be defined for all the data within the current cluster\n     * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n     *\n     * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n     * @param options - Optional settings for the command\n     * @typeParam TSchema - Type of the data being detected by the change stream\n     * @typeParam TChange - Type of the whole change stream document emitted\n     */\n    watch(pipeline = [], options = {}) {\n        // Allow optionally not specifying a pipeline\n        if (!Array.isArray(pipeline)) {\n            options = pipeline;\n            pipeline = [];\n        }\n        return new change_stream_1.ChangeStream(this, pipeline, (0, utils_1.resolveOptions)(this, options));\n    }\n}\nexports.MongoClient = MongoClient;\n//# sourceMappingURL=mongo_client.js.map"],"names":[],"mappings":"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"}},
    {"offset": {"line": 21348, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 21352, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/client-side-encryption/client_encryption.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ClientEncryption = void 0;\nconst bson_1 = require(\"../bson\");\nconst deps_1 = require(\"../deps\");\nconst utils_1 = require(\"../utils\");\nconst cryptoCallbacks = require(\"./crypto_callbacks\");\nconst errors_1 = require(\"./errors\");\nconst index_1 = require(\"./providers/index\");\nconst state_machine_1 = require(\"./state_machine\");\n/**\n * @public\n * The public interface for explicit in-use encryption\n */\nclass ClientEncryption {\n    /** @internal */\n    static getMongoCrypt() {\n        const encryption = (0, deps_1.getMongoDBClientEncryption)();\n        if ('kModuleError' in encryption) {\n            throw encryption.kModuleError;\n        }\n        return encryption.MongoCrypt;\n    }\n    /**\n     * Create a new encryption instance\n     *\n     * @example\n     * ```ts\n     * new ClientEncryption(mongoClient, {\n     *   keyVaultNamespace: 'client.encryption',\n     *   kmsProviders: {\n     *     local: {\n     *       key: masterKey // The master key used for encryption/decryption. A 96-byte long Buffer\n     *     }\n     *   }\n     * });\n     * ```\n     *\n     * @example\n     * ```ts\n     * new ClientEncryption(mongoClient, {\n     *   keyVaultNamespace: 'client.encryption',\n     *   kmsProviders: {\n     *     aws: {\n     *       accessKeyId: AWS_ACCESS_KEY,\n     *       secretAccessKey: AWS_SECRET_KEY\n     *     }\n     *   }\n     * });\n     * ```\n     */\n    constructor(client, options) {\n        this._client = client;\n        this._proxyOptions = options.proxyOptions ?? {};\n        this._tlsOptions = options.tlsOptions ?? {};\n        this._kmsProviders = options.kmsProviders || {};\n        if (options.keyVaultNamespace == null) {\n            throw new errors_1.MongoCryptInvalidArgumentError('Missing required option `keyVaultNamespace`');\n        }\n        const mongoCryptOptions = {\n            ...options,\n            cryptoCallbacks,\n            kmsProviders: !Buffer.isBuffer(this._kmsProviders)\n                ? (0, bson_1.serialize)(this._kmsProviders)\n                : this._kmsProviders\n        };\n        this._keyVaultNamespace = options.keyVaultNamespace;\n        this._keyVaultClient = options.keyVaultClient || client;\n        const MongoCrypt = ClientEncryption.getMongoCrypt();\n        this._mongoCrypt = new MongoCrypt(mongoCryptOptions);\n    }\n    /**\n     * Creates a data key used for explicit encryption and inserts it into the key vault namespace\n     *\n     * @example\n     * ```ts\n     * // Using async/await to create a local key\n     * const dataKeyId = await clientEncryption.createDataKey('local');\n     * ```\n     *\n     * @example\n     * ```ts\n     * // Using async/await to create an aws key\n     * const dataKeyId = await clientEncryption.createDataKey('aws', {\n     *   masterKey: {\n     *     region: 'us-east-1',\n     *     key: 'xxxxxxxxxxxxxx' // CMK ARN here\n     *   }\n     * });\n     * ```\n     *\n     * @example\n     * ```ts\n     * // Using async/await to create an aws key with a keyAltName\n     * const dataKeyId = await clientEncryption.createDataKey('aws', {\n     *   masterKey: {\n     *     region: 'us-east-1',\n     *     key: 'xxxxxxxxxxxxxx' // CMK ARN here\n     *   },\n     *   keyAltNames: [ 'mySpecialKey' ]\n     * });\n     * ```\n     */\n    async createDataKey(provider, options = {}) {\n        if (options.keyAltNames && !Array.isArray(options.keyAltNames)) {\n            throw new errors_1.MongoCryptInvalidArgumentError(`Option \"keyAltNames\" must be an array of strings, but was of type ${typeof options.keyAltNames}.`);\n        }\n        let keyAltNames = undefined;\n        if (options.keyAltNames && options.keyAltNames.length > 0) {\n            keyAltNames = options.keyAltNames.map((keyAltName, i) => {\n                if (typeof keyAltName !== 'string') {\n                    throw new errors_1.MongoCryptInvalidArgumentError(`Option \"keyAltNames\" must be an array of strings, but item at index ${i} was of type ${typeof keyAltName}`);\n                }\n                return (0, bson_1.serialize)({ keyAltName });\n            });\n        }\n        let keyMaterial = undefined;\n        if (options.keyMaterial) {\n            keyMaterial = (0, bson_1.serialize)({ keyMaterial: options.keyMaterial });\n        }\n        const dataKeyBson = (0, bson_1.serialize)({\n            provider,\n            ...options.masterKey\n        });\n        const context = this._mongoCrypt.makeDataKeyContext(dataKeyBson, {\n            keyAltNames,\n            keyMaterial\n        });\n        const stateMachine = new state_machine_1.StateMachine({\n            proxyOptions: this._proxyOptions,\n            tlsOptions: this._tlsOptions\n        });\n        const dataKey = await stateMachine.execute(this, context);\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        const { insertedId } = await this._keyVaultClient\n            .db(dbName)\n            .collection(collectionName)\n            .insertOne(dataKey, { writeConcern: { w: 'majority' } });\n        return insertedId;\n    }\n    /**\n     * Searches the keyvault for any data keys matching the provided filter.  If there are matches, rewrapManyDataKey then attempts to re-wrap the data keys using the provided options.\n     *\n     * If no matches are found, then no bulk write is performed.\n     *\n     * @example\n     * ```ts\n     * // rewrapping all data data keys (using a filter that matches all documents)\n     * const filter = {};\n     *\n     * const result = await clientEncryption.rewrapManyDataKey(filter);\n     * if (result.bulkWriteResult != null) {\n     *  // keys were re-wrapped, results will be available in the bulkWrite object.\n     * }\n     * ```\n     *\n     * @example\n     * ```ts\n     * // attempting to rewrap all data keys with no matches\n     * const filter = { _id: new Binary() } // assume _id matches no documents in the database\n     * const result = await clientEncryption.rewrapManyDataKey(filter);\n     *\n     * if (result.bulkWriteResult == null) {\n     *  // no keys matched, `bulkWriteResult` does not exist on the result object\n     * }\n     * ```\n     */\n    async rewrapManyDataKey(filter, options) {\n        let keyEncryptionKeyBson = undefined;\n        if (options) {\n            const keyEncryptionKey = Object.assign({ provider: options.provider }, options.masterKey);\n            keyEncryptionKeyBson = (0, bson_1.serialize)(keyEncryptionKey);\n        }\n        const filterBson = (0, bson_1.serialize)(filter);\n        const context = this._mongoCrypt.makeRewrapManyDataKeyContext(filterBson, keyEncryptionKeyBson);\n        const stateMachine = new state_machine_1.StateMachine({\n            proxyOptions: this._proxyOptions,\n            tlsOptions: this._tlsOptions\n        });\n        const { v: dataKeys } = await stateMachine.execute(this, context);\n        if (dataKeys.length === 0) {\n            return {};\n        }\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        const replacements = dataKeys.map((key) => ({\n            updateOne: {\n                filter: { _id: key._id },\n                update: {\n                    $set: {\n                        masterKey: key.masterKey,\n                        keyMaterial: key.keyMaterial\n                    },\n                    $currentDate: {\n                        updateDate: true\n                    }\n                }\n            }\n        }));\n        const result = await this._keyVaultClient\n            .db(dbName)\n            .collection(collectionName)\n            .bulkWrite(replacements, {\n            writeConcern: { w: 'majority' }\n        });\n        return { bulkWriteResult: result };\n    }\n    /**\n     * Deletes the key with the provided id from the keyvault, if it exists.\n     *\n     * @example\n     * ```ts\n     * // delete a key by _id\n     * const id = new Binary(); // id is a bson binary subtype 4 object\n     * const { deletedCount } = await clientEncryption.deleteKey(id);\n     *\n     * if (deletedCount != null && deletedCount > 0) {\n     *   // successful deletion\n     * }\n     * ```\n     *\n     */\n    async deleteKey(_id) {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        return this._keyVaultClient\n            .db(dbName)\n            .collection(collectionName)\n            .deleteOne({ _id }, { writeConcern: { w: 'majority' } });\n    }\n    /**\n     * Finds all the keys currently stored in the keyvault.\n     *\n     * This method will not throw.\n     *\n     * @returns a FindCursor over all keys in the keyvault.\n     * @example\n     * ```ts\n     * // fetching all keys\n     * const keys = await clientEncryption.getKeys().toArray();\n     * ```\n     */\n    getKeys() {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        return this._keyVaultClient\n            .db(dbName)\n            .collection(collectionName)\n            .find({}, { readConcern: { level: 'majority' } });\n    }\n    /**\n     * Finds a key in the keyvault with the specified _id.\n     *\n     * Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents\n     * match the id.  The promise rejects with an error if an error is thrown.\n     * @example\n     * ```ts\n     * // getting a key by id\n     * const id = new Binary(); // id is a bson binary subtype 4 object\n     * const key = await clientEncryption.getKey(id);\n     * if (!key) {\n     *  // key is null if there was no matching key\n     * }\n     * ```\n     */\n    async getKey(_id) {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        return this._keyVaultClient\n            .db(dbName)\n            .collection(collectionName)\n            .findOne({ _id }, { readConcern: { level: 'majority' } });\n    }\n    /**\n     * Finds a key in the keyvault which has the specified keyAltName.\n     *\n     * @param keyAltName - a keyAltName to search for a key\n     * @returns Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents\n     * match the keyAltName.  The promise rejects with an error if an error is thrown.\n     * @example\n     * ```ts\n     * // get a key by alt name\n     * const keyAltName = 'keyAltName';\n     * const key = await clientEncryption.getKeyByAltName(keyAltName);\n     * if (!key) {\n     *  // key is null if there is no matching key\n     * }\n     * ```\n     */\n    async getKeyByAltName(keyAltName) {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        return this._keyVaultClient\n            .db(dbName)\n            .collection(collectionName)\n            .findOne({ keyAltNames: keyAltName }, { readConcern: { level: 'majority' } });\n    }\n    /**\n     * Adds a keyAltName to a key identified by the provided _id.\n     *\n     * This method resolves to/returns the *old* key value (prior to adding the new altKeyName).\n     *\n     * @param _id - The id of the document to update.\n     * @param keyAltName - a keyAltName to search for a key\n     * @returns Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents\n     * match the id.  The promise rejects with an error if an error is thrown.\n     * @example\n     * ```ts\n     * // adding an keyAltName to a data key\n     * const id = new Binary();  // id is a bson binary subtype 4 object\n     * const keyAltName = 'keyAltName';\n     * const oldKey = await clientEncryption.addKeyAltName(id, keyAltName);\n     * if (!oldKey) {\n     *  // null is returned if there is no matching document with an id matching the supplied id\n     * }\n     * ```\n     */\n    async addKeyAltName(_id, keyAltName) {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        const value = await this._keyVaultClient\n            .db(dbName)\n            .collection(collectionName)\n            .findOneAndUpdate({ _id }, { $addToSet: { keyAltNames: keyAltName } }, { writeConcern: { w: 'majority' }, returnDocument: 'before' });\n        return value;\n    }\n    /**\n     * Adds a keyAltName to a key identified by the provided _id.\n     *\n     * This method resolves to/returns the *old* key value (prior to removing the new altKeyName).\n     *\n     * If the removed keyAltName is the last keyAltName for that key, the `altKeyNames` property is unset from the document.\n     *\n     * @param _id - The id of the document to update.\n     * @param keyAltName - a keyAltName to search for a key\n     * @returns Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents\n     * match the id.  The promise rejects with an error if an error is thrown.\n     * @example\n     * ```ts\n     * // removing a key alt name from a data key\n     * const id = new Binary();  // id is a bson binary subtype 4 object\n     * const keyAltName = 'keyAltName';\n     * const oldKey = await clientEncryption.removeKeyAltName(id, keyAltName);\n     *\n     * if (!oldKey) {\n     *  // null is returned if there is no matching document with an id matching the supplied id\n     * }\n     * ```\n     */\n    async removeKeyAltName(_id, keyAltName) {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        const pipeline = [\n            {\n                $set: {\n                    keyAltNames: {\n                        $cond: [\n                            {\n                                $eq: ['$keyAltNames', [keyAltName]]\n                            },\n                            '$$REMOVE',\n                            {\n                                $filter: {\n                                    input: '$keyAltNames',\n                                    cond: {\n                                        $ne: ['$$this', keyAltName]\n                                    }\n                                }\n                            }\n                        ]\n                    }\n                }\n            }\n        ];\n        const value = await this._keyVaultClient\n            .db(dbName)\n            .collection(collectionName)\n            .findOneAndUpdate({ _id }, pipeline, {\n            writeConcern: { w: 'majority' },\n            returnDocument: 'before'\n        });\n        return value;\n    }\n    /**\n     * A convenience method for creating an encrypted collection.\n     * This method will create data keys for any encryptedFields that do not have a `keyId` defined\n     * and then create a new collection with the full set of encryptedFields.\n     *\n     * @param db - A Node.js driver Db object with which to create the collection\n     * @param name - The name of the collection to be created\n     * @param options - Options for createDataKey and for createCollection\n     * @returns created collection and generated encryptedFields\n     * @throws MongoCryptCreateDataKeyError - If part way through the process a createDataKey invocation fails, an error will be rejected that has the partial `encryptedFields` that were created.\n     * @throws MongoCryptCreateEncryptedCollectionError - If creating the collection fails, an error will be rejected that has the entire `encryptedFields` that were created.\n     */\n    async createEncryptedCollection(db, name, options) {\n        const { provider, masterKey, createCollectionOptions: { encryptedFields: { ...encryptedFields }, ...createCollectionOptions } } = options;\n        if (Array.isArray(encryptedFields.fields)) {\n            const createDataKeyPromises = encryptedFields.fields.map(async (field) => field == null || typeof field !== 'object' || field.keyId != null\n                ? field\n                : {\n                    ...field,\n                    keyId: await this.createDataKey(provider, { masterKey })\n                });\n            const createDataKeyResolutions = await Promise.allSettled(createDataKeyPromises);\n            encryptedFields.fields = createDataKeyResolutions.map((resolution, index) => resolution.status === 'fulfilled' ? resolution.value : encryptedFields.fields[index]);\n            const rejection = createDataKeyResolutions.find((result) => result.status === 'rejected');\n            if (rejection != null) {\n                throw new errors_1.MongoCryptCreateDataKeyError(encryptedFields, { cause: rejection.reason });\n            }\n        }\n        try {\n            const collection = await db.createCollection(name, {\n                ...createCollectionOptions,\n                encryptedFields\n            });\n            return { collection, encryptedFields };\n        }\n        catch (cause) {\n            throw new errors_1.MongoCryptCreateEncryptedCollectionError(encryptedFields, { cause });\n        }\n    }\n    /**\n     * Explicitly encrypt a provided value. Note that either `options.keyId` or `options.keyAltName` must\n     * be specified. Specifying both `options.keyId` and `options.keyAltName` is considered an error.\n     *\n     * @param value - The value that you wish to serialize. Must be of a type that can be serialized into BSON\n     * @param options -\n     * @returns a Promise that either resolves with the encrypted value, or rejects with an error.\n     *\n     * @example\n     * ```ts\n     * // Encryption with async/await api\n     * async function encryptMyData(value) {\n     *   const keyId = await clientEncryption.createDataKey('local');\n     *   return clientEncryption.encrypt(value, { keyId, algorithm: 'AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic' });\n     * }\n     * ```\n     *\n     * @example\n     * ```ts\n     * // Encryption using a keyAltName\n     * async function encryptMyData(value) {\n     *   await clientEncryption.createDataKey('local', { keyAltNames: 'mySpecialKey' });\n     *   return clientEncryption.encrypt(value, { keyAltName: 'mySpecialKey', algorithm: 'AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic' });\n     * }\n     * ```\n     */\n    async encrypt(value, options) {\n        return this._encrypt(value, false, options);\n    }\n    /**\n     * Encrypts a Match Expression or Aggregate Expression to query a range index.\n     *\n     * Only supported when queryType is \"rangePreview\" and algorithm is \"RangePreview\".\n     *\n     * @experimental The Range algorithm is experimental only. It is not intended for production use. It is subject to breaking changes.\n     *\n     * @param expression - a BSON document of one of the following forms:\n     *  1. A Match Expression of this form:\n     *      `{$and: [{<field>: {$gt: <value1>}}, {<field>: {$lt: <value2> }}]}`\n     *  2. An Aggregate Expression of this form:\n     *      `{$and: [{$gt: [<fieldpath>, <value1>]}, {$lt: [<fieldpath>, <value2>]}]}`\n     *\n     *    `$gt` may also be `$gte`. `$lt` may also be `$lte`.\n     *\n     * @param options -\n     * @returns Returns a Promise that either resolves with the encrypted value or rejects with an error.\n     */\n    async encryptExpression(expression, options) {\n        return this._encrypt(expression, true, options);\n    }\n    /**\n     * Explicitly decrypt a provided encrypted value\n     *\n     * @param value - An encrypted value\n     * @returns a Promise that either resolves with the decrypted value, or rejects with an error\n     *\n     * @example\n     * ```ts\n     * // Decrypting value with async/await API\n     * async function decryptMyValue(value) {\n     *   return clientEncryption.decrypt(value);\n     * }\n     * ```\n     */\n    async decrypt(value) {\n        const valueBuffer = (0, bson_1.serialize)({ v: value });\n        const context = this._mongoCrypt.makeExplicitDecryptionContext(valueBuffer);\n        const stateMachine = new state_machine_1.StateMachine({\n            proxyOptions: this._proxyOptions,\n            tlsOptions: this._tlsOptions\n        });\n        const { v } = await stateMachine.execute(this, context);\n        return v;\n    }\n    /**\n     * @internal\n     * Ask the user for KMS credentials.\n     *\n     * This returns anything that looks like the kmsProviders original input\n     * option. It can be empty, and any provider specified here will override\n     * the original ones.\n     */\n    async askForKMSCredentials() {\n        return (0, index_1.refreshKMSCredentials)(this._kmsProviders);\n    }\n    static get libmongocryptVersion() {\n        return ClientEncryption.getMongoCrypt().libmongocryptVersion;\n    }\n    /**\n     * @internal\n     * A helper that perform explicit encryption of values and expressions.\n     * Explicitly encrypt a provided value. Note that either `options.keyId` or `options.keyAltName` must\n     * be specified. Specifying both `options.keyId` and `options.keyAltName` is considered an error.\n     *\n     * @param value - The value that you wish to encrypt. Must be of a type that can be serialized into BSON\n     * @param expressionMode - a boolean that indicates whether or not to encrypt the value as an expression\n     * @param options - options to pass to encrypt\n     * @returns the raw result of the call to stateMachine.execute().  When expressionMode is set to true, the return\n     *          value will be a bson document.  When false, the value will be a BSON Binary.\n     *\n     */\n    async _encrypt(value, expressionMode, options) {\n        const { algorithm, keyId, keyAltName, contentionFactor, queryType, rangeOptions } = options;\n        const contextOptions = {\n            expressionMode,\n            algorithm\n        };\n        if (keyId) {\n            contextOptions.keyId = keyId.buffer;\n        }\n        if (keyAltName) {\n            if (keyId) {\n                throw new errors_1.MongoCryptInvalidArgumentError(`\"options\" cannot contain both \"keyId\" and \"keyAltName\"`);\n            }\n            if (typeof keyAltName !== 'string') {\n                throw new errors_1.MongoCryptInvalidArgumentError(`\"options.keyAltName\" must be of type string, but was of type ${typeof keyAltName}`);\n            }\n            contextOptions.keyAltName = (0, bson_1.serialize)({ keyAltName });\n        }\n        if (typeof contentionFactor === 'number' || typeof contentionFactor === 'bigint') {\n            contextOptions.contentionFactor = contentionFactor;\n        }\n        if (typeof queryType === 'string') {\n            contextOptions.queryType = queryType;\n        }\n        if (typeof rangeOptions === 'object') {\n            contextOptions.rangeOptions = (0, bson_1.serialize)(rangeOptions);\n        }\n        const valueBuffer = (0, bson_1.serialize)({ v: value });\n        const stateMachine = new state_machine_1.StateMachine({\n            proxyOptions: this._proxyOptions,\n            tlsOptions: this._tlsOptions\n        });\n        const context = this._mongoCrypt.makeExplicitEncryptionContext(valueBuffer, contextOptions);\n        const result = await stateMachine.execute(this, context);\n        return result.v;\n    }\n}\nexports.ClientEncryption = ClientEncryption;\n//# sourceMappingURL=client_encryption.js.map"],"names":[],"mappings":"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"}},
    {"offset": {"line": 21938, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 21942, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/gridfs/upload.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GridFSBucketWriteStream = void 0;\nconst stream_1 = require(\"stream\");\nconst bson_1 = require(\"../bson\");\nconst error_1 = require(\"../error\");\nconst write_concern_1 = require(\"./../write_concern\");\n/**\n * A writable stream that enables you to write buffers to GridFS.\n *\n * Do not instantiate this class directly. Use `openUploadStream()` instead.\n * @public\n */\nclass GridFSBucketWriteStream extends stream_1.Writable {\n    /**\n     * @param bucket - Handle for this stream's corresponding bucket\n     * @param filename - The value of the 'filename' key in the files doc\n     * @param options - Optional settings.\n     * @internal\n     */\n    constructor(bucket, filename, options) {\n        super();\n        /**\n         * The document containing information about the inserted file.\n         * This property is defined _after_ the finish event has been emitted.\n         * It will remain `null` if an error occurs.\n         *\n         * @example\n         * ```ts\n         * fs.createReadStream('file.txt')\n         *   .pipe(bucket.openUploadStream('file.txt'))\n         *   .on('finish', function () {\n         *     console.log(this.gridFSFile)\n         *   })\n         * ```\n         */\n        this.gridFSFile = null;\n        options = options ?? {};\n        this.bucket = bucket;\n        this.chunks = bucket.s._chunksCollection;\n        this.filename = filename;\n        this.files = bucket.s._filesCollection;\n        this.options = options;\n        this.writeConcern = write_concern_1.WriteConcern.fromOptions(options) || bucket.s.options.writeConcern;\n        // Signals the write is all done\n        this.done = false;\n        this.id = options.id ? options.id : new bson_1.ObjectId();\n        // properly inherit the default chunksize from parent\n        this.chunkSizeBytes = options.chunkSizeBytes || this.bucket.s.options.chunkSizeBytes;\n        this.bufToStore = Buffer.alloc(this.chunkSizeBytes);\n        this.length = 0;\n        this.n = 0;\n        this.pos = 0;\n        this.state = {\n            streamEnd: false,\n            outstandingRequests: 0,\n            errored: false,\n            aborted: false\n        };\n        if (!this.bucket.s.calledOpenUploadStream) {\n            this.bucket.s.calledOpenUploadStream = true;\n            checkIndexes(this).then(() => {\n                this.bucket.s.checkedIndexes = true;\n                this.bucket.emit('index');\n            }, () => null);\n        }\n    }\n    /**\n     * @internal\n     *\n     * The stream is considered constructed when the indexes are done being created\n     */\n    _construct(callback) {\n        if (this.bucket.s.checkedIndexes) {\n            return process.nextTick(callback);\n        }\n        this.bucket.once('index', callback);\n    }\n    /**\n     * @internal\n     * Write a buffer to the stream.\n     *\n     * @param chunk - Buffer to write\n     * @param encoding - Optional encoding for the buffer\n     * @param callback - Function to call when the chunk was added to the buffer, or if the entire chunk was persisted to MongoDB if this chunk caused a flush.\n     */\n    _write(chunk, encoding, callback) {\n        doWrite(this, chunk, encoding, callback);\n    }\n    /** @internal */\n    _final(callback) {\n        if (this.state.streamEnd) {\n            return process.nextTick(callback);\n        }\n        this.state.streamEnd = true;\n        writeRemnant(this, callback);\n    }\n    /**\n     * Places this write stream into an aborted state (all future writes fail)\n     * and deletes all chunks that have already been written.\n     */\n    async abort() {\n        if (this.state.streamEnd) {\n            // TODO(NODE-3485): Replace with MongoGridFSStreamClosed\n            throw new error_1.MongoAPIError('Cannot abort a stream that has already completed');\n        }\n        if (this.state.aborted) {\n            // TODO(NODE-3485): Replace with MongoGridFSStreamClosed\n            throw new error_1.MongoAPIError('Cannot call abort() on a stream twice');\n        }\n        this.state.aborted = true;\n        await this.chunks.deleteMany({ files_id: this.id });\n    }\n}\nexports.GridFSBucketWriteStream = GridFSBucketWriteStream;\nfunction handleError(stream, error, callback) {\n    if (stream.state.errored) {\n        process.nextTick(callback);\n        return;\n    }\n    stream.state.errored = true;\n    process.nextTick(callback, error);\n}\nfunction createChunkDoc(filesId, n, data) {\n    return {\n        _id: new bson_1.ObjectId(),\n        files_id: filesId,\n        n,\n        data\n    };\n}\nasync function checkChunksIndex(stream) {\n    const index = { files_id: 1, n: 1 };\n    let indexes;\n    try {\n        indexes = await stream.chunks.listIndexes().toArray();\n    }\n    catch (error) {\n        if (error instanceof error_1.MongoError && error.code === error_1.MONGODB_ERROR_CODES.NamespaceNotFound) {\n            indexes = [];\n        }\n        else {\n            throw error;\n        }\n    }\n    const hasChunksIndex = !!indexes.find(index => {\n        const keys = Object.keys(index.key);\n        if (keys.length === 2 && index.key.files_id === 1 && index.key.n === 1) {\n            return true;\n        }\n        return false;\n    });\n    if (!hasChunksIndex) {\n        await stream.chunks.createIndex(index, {\n            ...stream.writeConcern,\n            background: true,\n            unique: true\n        });\n    }\n}\nfunction checkDone(stream, callback) {\n    if (stream.done) {\n        return process.nextTick(callback);\n    }\n    if (stream.state.streamEnd && stream.state.outstandingRequests === 0 && !stream.state.errored) {\n        // Set done so we do not trigger duplicate createFilesDoc\n        stream.done = true;\n        // Create a new files doc\n        const gridFSFile = createFilesDoc(stream.id, stream.length, stream.chunkSizeBytes, stream.filename, stream.options.contentType, stream.options.aliases, stream.options.metadata);\n        if (isAborted(stream, callback)) {\n            return;\n        }\n        stream.files.insertOne(gridFSFile, { writeConcern: stream.writeConcern }).then(() => {\n            stream.gridFSFile = gridFSFile;\n            callback();\n        }, error => handleError(stream, error, callback));\n        return;\n    }\n    process.nextTick(callback);\n}\nasync function checkIndexes(stream) {\n    const doc = await stream.files.findOne({}, { projection: { _id: 1 } });\n    if (doc != null) {\n        // If at least one document exists assume the collection has the required index\n        return;\n    }\n    const index = { filename: 1, uploadDate: 1 };\n    let indexes;\n    try {\n        indexes = await stream.files.listIndexes().toArray();\n    }\n    catch (error) {\n        if (error instanceof error_1.MongoError && error.code === error_1.MONGODB_ERROR_CODES.NamespaceNotFound) {\n            indexes = [];\n        }\n        else {\n            throw error;\n        }\n    }\n    const hasFileIndex = !!indexes.find(index => {\n        const keys = Object.keys(index.key);\n        if (keys.length === 2 && index.key.filename === 1 && index.key.uploadDate === 1) {\n            return true;\n        }\n        return false;\n    });\n    if (!hasFileIndex) {\n        await stream.files.createIndex(index, { background: false });\n    }\n    await checkChunksIndex(stream);\n}\nfunction createFilesDoc(_id, length, chunkSize, filename, contentType, aliases, metadata) {\n    const ret = {\n        _id,\n        length,\n        chunkSize,\n        uploadDate: new Date(),\n        filename\n    };\n    if (contentType) {\n        ret.contentType = contentType;\n    }\n    if (aliases) {\n        ret.aliases = aliases;\n    }\n    if (metadata) {\n        ret.metadata = metadata;\n    }\n    return ret;\n}\nfunction doWrite(stream, chunk, encoding, callback) {\n    if (isAborted(stream, callback)) {\n        return;\n    }\n    const inputBuf = Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk, encoding);\n    stream.length += inputBuf.length;\n    // Input is small enough to fit in our buffer\n    if (stream.pos + inputBuf.length < stream.chunkSizeBytes) {\n        inputBuf.copy(stream.bufToStore, stream.pos);\n        stream.pos += inputBuf.length;\n        process.nextTick(callback);\n        return;\n    }\n    // Otherwise, buffer is too big for current chunk, so we need to flush\n    // to MongoDB.\n    let inputBufRemaining = inputBuf.length;\n    let spaceRemaining = stream.chunkSizeBytes - stream.pos;\n    let numToCopy = Math.min(spaceRemaining, inputBuf.length);\n    let outstandingRequests = 0;\n    while (inputBufRemaining > 0) {\n        const inputBufPos = inputBuf.length - inputBufRemaining;\n        inputBuf.copy(stream.bufToStore, stream.pos, inputBufPos, inputBufPos + numToCopy);\n        stream.pos += numToCopy;\n        spaceRemaining -= numToCopy;\n        let doc;\n        if (spaceRemaining === 0) {\n            doc = createChunkDoc(stream.id, stream.n, Buffer.from(stream.bufToStore));\n            ++stream.state.outstandingRequests;\n            ++outstandingRequests;\n            if (isAborted(stream, callback)) {\n                return;\n            }\n            stream.chunks.insertOne(doc, { writeConcern: stream.writeConcern }).then(() => {\n                --stream.state.outstandingRequests;\n                --outstandingRequests;\n                if (!outstandingRequests) {\n                    checkDone(stream, callback);\n                }\n            }, error => handleError(stream, error, callback));\n            spaceRemaining = stream.chunkSizeBytes;\n            stream.pos = 0;\n            ++stream.n;\n        }\n        inputBufRemaining -= numToCopy;\n        numToCopy = Math.min(spaceRemaining, inputBufRemaining);\n    }\n}\nfunction writeRemnant(stream, callback) {\n    // Buffer is empty, so don't bother to insert\n    if (stream.pos === 0) {\n        return checkDone(stream, callback);\n    }\n    ++stream.state.outstandingRequests;\n    // Create a new buffer to make sure the buffer isn't bigger than it needs\n    // to be.\n    const remnant = Buffer.alloc(stream.pos);\n    stream.bufToStore.copy(remnant, 0, 0, stream.pos);\n    const doc = createChunkDoc(stream.id, stream.n, remnant);\n    // If the stream was aborted, do not write remnant\n    if (isAborted(stream, callback)) {\n        return;\n    }\n    stream.chunks.insertOne(doc, { writeConcern: stream.writeConcern }).then(() => {\n        --stream.state.outstandingRequests;\n        checkDone(stream, callback);\n    }, error => handleError(stream, error, callback));\n}\nfunction isAborted(stream, callback) {\n    if (stream.state.aborted) {\n        process.nextTick(callback, new error_1.MongoAPIError('Stream has been aborted'));\n        return true;\n    }\n    return false;\n}\n//# sourceMappingURL=upload.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,uBAAuB,GAAG,KAAK;AACvC,MAAM,WAAW;AACjB,MAAM,SAAS;AACf,MAAM,UAAU;AAChB,MAAM,kBAAkB;AACxB;;;;;CAKC,GACD,MAAM,gCAAgC,SAAS,QAAQ;IACnD;;;;;KAKC,GACD,YAAY,MAAM,EAAE,QAAQ,EAAE,OAAO,CAAE;QACnC,KAAK;QACL;;;;;;;;;;;;;SAaC,GACD,IAAI,CAAC,UAAU,GAAG;QAClB,UAAU,WAAW,CAAC;QACtB,IAAI,CAAC,MAAM,GAAG;QACd,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,CAAC,iBAAiB;QACxC,IAAI,CAAC,QAAQ,GAAG;QAChB,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,CAAC,gBAAgB;QACtC,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,YAAY,GAAG,gBAAgB,YAAY,CAAC,WAAW,CAAC,YAAY,OAAO,CAAC,CAAC,OAAO,CAAC,YAAY;QACtG,gCAAgC;QAChC,IAAI,CAAC,IAAI,GAAG;QACZ,IAAI,CAAC,EAAE,GAAG,QAAQ,EAAE,GAAG,QAAQ,EAAE,GAAG,IAAI,OAAO,QAAQ;QACvD,qDAAqD;QACrD,IAAI,CAAC,cAAc,GAAG,QAAQ,cAAc,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,cAAc;QACpF,IAAI,CAAC,UAAU,GAAG,OAAO,KAAK,CAAC,IAAI,CAAC,cAAc;QAClD,IAAI,CAAC,MAAM,GAAG;QACd,IAAI,CAAC,CAAC,GAAG;QACT,IAAI,CAAC,GAAG,GAAG;QACX,IAAI,CAAC,KAAK,GAAG;YACT,WAAW;YACX,qBAAqB;YACrB,SAAS;YACT,SAAS;QACb;QACA,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,sBAAsB,EAAE;YACvC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,sBAAsB,GAAG;YACvC,aAAa,IAAI,EAAE,IAAI,CAAC;gBACpB,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,cAAc,GAAG;gBAC/B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;YACrB,GAAG,IAAM;QACb;IACJ;IACA;;;;KAIC,GACD,WAAW,QAAQ,EAAE;QACjB,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,cAAc,EAAE;YAC9B,OAAO,QAAQ,QAAQ,CAAC;QAC5B;QACA,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS;IAC9B;IACA;;;;;;;KAOC,GACD,OAAO,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE;QAC9B,QAAQ,IAAI,EAAE,OAAO,UAAU;IACnC;IACA,cAAc,GACd,OAAO,QAAQ,EAAE;QACb,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE;YACtB,OAAO,QAAQ,QAAQ,CAAC;QAC5B;QACA,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG;QACvB,aAAa,IAAI,EAAE;IACvB;IACA;;;KAGC,GACD,MAAM,QAAQ;QACV,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE;YACtB,wDAAwD;YACxD,MAAM,IAAI,QAAQ,aAAa,CAAC;QACpC;QACA,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE;YACpB,wDAAwD;YACxD,MAAM,IAAI,QAAQ,aAAa,CAAC;QACpC;QACA,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG;QACrB,MAAM,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;YAAE,UAAU,IAAI,CAAC,EAAE;QAAC;IACrD;AACJ;AACA,QAAQ,uBAAuB,GAAG;AAClC,SAAS,YAAY,MAAM,EAAE,KAAK,EAAE,QAAQ;IACxC,IAAI,OAAO,KAAK,CAAC,OAAO,EAAE;QACtB,QAAQ,QAAQ,CAAC;QACjB;IACJ;IACA,OAAO,KAAK,CAAC,OAAO,GAAG;IACvB,QAAQ,QAAQ,CAAC,UAAU;AAC/B;AACA,SAAS,eAAe,OAAO,EAAE,CAAC,EAAE,IAAI;IACpC,OAAO;QACH,KAAK,IAAI,OAAO,QAAQ;QACxB,UAAU;QACV;QACA;IACJ;AACJ;AACA,eAAe,iBAAiB,MAAM;IAClC,MAAM,QAAQ;QAAE,UAAU;QAAG,GAAG;IAAE;IAClC,IAAI;IACJ,IAAI;QACA,UAAU,MAAM,OAAO,MAAM,CAAC,WAAW,GAAG,OAAO;IACvD,EACA,OAAO,OAAO;QACV,IAAI,iBAAiB,QAAQ,UAAU,IAAI,MAAM,IAAI,KAAK,QAAQ,mBAAmB,CAAC,iBAAiB,EAAE;YACrG,UAAU,EAAE;QAChB,OACK;YACD,MAAM;QACV;IACJ;IACA,MAAM,iBAAiB,CAAC,CAAC,QAAQ,IAAI,CAAC,CAAA;QAClC,MAAM,OAAO,OAAO,IAAI,CAAC,MAAM,GAAG;QAClC,IAAI,KAAK,MAAM,KAAK,KAAK,MAAM,GAAG,CAAC,QAAQ,KAAK,KAAK,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG;YACpE,OAAO;QACX;QACA,OAAO;IACX;IACA,IAAI,CAAC,gBAAgB;QACjB,MAAM,OAAO,MAAM,CAAC,WAAW,CAAC,OAAO;YACnC,GAAG,OAAO,YAAY;YACtB,YAAY;YACZ,QAAQ;QACZ;IACJ;AACJ;AACA,SAAS,UAAU,MAAM,EAAE,QAAQ;IAC/B,IAAI,OAAO,IAAI,EAAE;QACb,OAAO,QAAQ,QAAQ,CAAC;IAC5B;IACA,IAAI,OAAO,KAAK,CAAC,SAAS,IAAI,OAAO,KAAK,CAAC,mBAAmB,KAAK,KAAK,CAAC,OAAO,KAAK,CAAC,OAAO,EAAE;QAC3F,yDAAyD;QACzD,OAAO,IAAI,GAAG;QACd,yBAAyB;QACzB,MAAM,aAAa,eAAe,OAAO,EAAE,EAAE,OAAO,MAAM,EAAE,OAAO,cAAc,EAAE,OAAO,QAAQ,EAAE,OAAO,OAAO,CAAC,WAAW,EAAE,OAAO,OAAO,CAAC,OAAO,EAAE,OAAO,OAAO,CAAC,QAAQ;QAC/K,IAAI,UAAU,QAAQ,WAAW;YAC7B;QACJ;QACA,OAAO,KAAK,CAAC,SAAS,CAAC,YAAY;YAAE,cAAc,OAAO,YAAY;QAAC,GAAG,IAAI,CAAC;YAC3E,OAAO,UAAU,GAAG;YACpB;QACJ,GAAG,CAAA,QAAS,YAAY,QAAQ,OAAO;QACvC;IACJ;IACA,QAAQ,QAAQ,CAAC;AACrB;AACA,eAAe,aAAa,MAAM;IAC9B,MAAM,MAAM,MAAM,OAAO,KAAK,CAAC,OAAO,CAAC,CAAC,GAAG;QAAE,YAAY;YAAE,KAAK;QAAE;IAAE;IACpE,IAAI,OAAO,MAAM;QACb,+EAA+E;QAC/E;IACJ;IACA,MAAM,QAAQ;QAAE,UAAU;QAAG,YAAY;IAAE;IAC3C,IAAI;IACJ,IAAI;QACA,UAAU,MAAM,OAAO,KAAK,CAAC,WAAW,GAAG,OAAO;IACtD,EACA,OAAO,OAAO;QACV,IAAI,iBAAiB,QAAQ,UAAU,IAAI,MAAM,IAAI,KAAK,QAAQ,mBAAmB,CAAC,iBAAiB,EAAE;YACrG,UAAU,EAAE;QAChB,OACK;YACD,MAAM;QACV;IACJ;IACA,MAAM,eAAe,CAAC,CAAC,QAAQ,IAAI,CAAC,CAAA;QAChC,MAAM,OAAO,OAAO,IAAI,CAAC,MAAM,GAAG;QAClC,IAAI,KAAK,MAAM,KAAK,KAAK,MAAM,GAAG,CAAC,QAAQ,KAAK,KAAK,MAAM,GAAG,CAAC,UAAU,KAAK,GAAG;YAC7E,OAAO;QACX;QACA,OAAO;IACX;IACA,IAAI,CAAC,cAAc;QACf,MAAM,OAAO,KAAK,CAAC,WAAW,CAAC,OAAO;YAAE,YAAY;QAAM;IAC9D;IACA,MAAM,iBAAiB;AAC3B;AACA,SAAS,eAAe,GAAG,EAAE,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE,WAAW,EAAE,OAAO,EAAE,QAAQ;IACpF,MAAM,MAAM;QACR;QACA;QACA;QACA,YAAY,IAAI;QAChB;IACJ;IACA,IAAI,aAAa;QACb,IAAI,WAAW,GAAG;IACtB;IACA,IAAI,SAAS;QACT,IAAI,OAAO,GAAG;IAClB;IACA,IAAI,UAAU;QACV,IAAI,QAAQ,GAAG;IACnB;IACA,OAAO;AACX;AACA,SAAS,QAAQ,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ;IAC9C,IAAI,UAAU,QAAQ,WAAW;QAC7B;IACJ;IACA,MAAM,WAAW,OAAO,QAAQ,CAAC,SAAS,QAAQ,OAAO,IAAI,CAAC,OAAO;IACrE,OAAO,MAAM,IAAI,SAAS,MAAM;IAChC,6CAA6C;IAC7C,IAAI,OAAO,GAAG,GAAG,SAAS,MAAM,GAAG,OAAO,cAAc,EAAE;QACtD,SAAS,IAAI,CAAC,OAAO,UAAU,EAAE,OAAO,GAAG;QAC3C,OAAO,GAAG,IAAI,SAAS,MAAM;QAC7B,QAAQ,QAAQ,CAAC;QACjB;IACJ;IACA,sEAAsE;IACtE,cAAc;IACd,IAAI,oBAAoB,SAAS,MAAM;IACvC,IAAI,iBAAiB,OAAO,cAAc,GAAG,OAAO,GAAG;IACvD,IAAI,YAAY,KAAK,GAAG,CAAC,gBAAgB,SAAS,MAAM;IACxD,IAAI,sBAAsB;IAC1B,MAAO,oBAAoB,EAAG;QAC1B,MAAM,cAAc,SAAS,MAAM,GAAG;QACtC,SAAS,IAAI,CAAC,OAAO,UAAU,EAAE,OAAO,GAAG,EAAE,aAAa,cAAc;QACxE,OAAO,GAAG,IAAI;QACd,kBAAkB;QAClB,IAAI;QACJ,IAAI,mBAAmB,GAAG;YACtB,MAAM,eAAe,OAAO,EAAE,EAAE,OAAO,CAAC,EAAE,OAAO,IAAI,CAAC,OAAO,UAAU;YACvE,EAAE,OAAO,KAAK,CAAC,mBAAmB;YAClC,EAAE;YACF,IAAI,UAAU,QAAQ,WAAW;gBAC7B;YACJ;YACA,OAAO,MAAM,CAAC,SAAS,CAAC,KAAK;gBAAE,cAAc,OAAO,YAAY;YAAC,GAAG,IAAI,CAAC;gBACrE,EAAE,OAAO,KAAK,CAAC,mBAAmB;gBAClC,EAAE;gBACF,IAAI,CAAC,qBAAqB;oBACtB,UAAU,QAAQ;gBACtB;YACJ,GAAG,CAAA,QAAS,YAAY,QAAQ,OAAO;YACvC,iBAAiB,OAAO,cAAc;YACtC,OAAO,GAAG,GAAG;YACb,EAAE,OAAO,CAAC;QACd;QACA,qBAAqB;QACrB,YAAY,KAAK,GAAG,CAAC,gBAAgB;IACzC;AACJ;AACA,SAAS,aAAa,MAAM,EAAE,QAAQ;IAClC,6CAA6C;IAC7C,IAAI,OAAO,GAAG,KAAK,GAAG;QAClB,OAAO,UAAU,QAAQ;IAC7B;IACA,EAAE,OAAO,KAAK,CAAC,mBAAmB;IAClC,yEAAyE;IACzE,SAAS;IACT,MAAM,UAAU,OAAO,KAAK,CAAC,OAAO,GAAG;IACvC,OAAO,UAAU,CAAC,IAAI,CAAC,SAAS,GAAG,GAAG,OAAO,GAAG;IAChD,MAAM,MAAM,eAAe,OAAO,EAAE,EAAE,OAAO,CAAC,EAAE;IAChD,kDAAkD;IAClD,IAAI,UAAU,QAAQ,WAAW;QAC7B;IACJ;IACA,OAAO,MAAM,CAAC,SAAS,CAAC,KAAK;QAAE,cAAc,OAAO,YAAY;IAAC,GAAG,IAAI,CAAC;QACrE,EAAE,OAAO,KAAK,CAAC,mBAAmB;QAClC,UAAU,QAAQ;IACtB,GAAG,CAAA,QAAS,YAAY,QAAQ,OAAO;AAC3C;AACA,SAAS,UAAU,MAAM,EAAE,QAAQ;IAC/B,IAAI,OAAO,KAAK,CAAC,OAAO,EAAE;QACtB,QAAQ,QAAQ,CAAC,UAAU,IAAI,QAAQ,aAAa,CAAC;QACrD,OAAO;IACX;IACA,OAAO;AACX,EACA,kCAAkC"}},
    {"offset": {"line": 22257, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 22261, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/gridfs/download.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GridFSBucketReadStream = void 0;\nconst stream_1 = require(\"stream\");\nconst error_1 = require(\"../error\");\n/**\n * A readable stream that enables you to read buffers from GridFS.\n *\n * Do not instantiate this class directly. Use `openDownloadStream()` instead.\n * @public\n */\nclass GridFSBucketReadStream extends stream_1.Readable {\n    /**\n     * @param chunks - Handle for chunks collection\n     * @param files - Handle for files collection\n     * @param readPreference - The read preference to use\n     * @param filter - The filter to use to find the file document\n     * @internal\n     */\n    constructor(chunks, files, readPreference, filter, options) {\n        super({ emitClose: true });\n        this.s = {\n            bytesToTrim: 0,\n            bytesToSkip: 0,\n            bytesRead: 0,\n            chunks,\n            expected: 0,\n            files,\n            filter,\n            init: false,\n            expectedEnd: 0,\n            options: {\n                start: 0,\n                end: 0,\n                ...options\n            },\n            readPreference\n        };\n    }\n    /**\n     * Reads from the cursor and pushes to the stream.\n     * Private Impl, do not call directly\n     * @internal\n     */\n    _read() {\n        if (this.destroyed)\n            return;\n        waitForFile(this, () => doRead(this));\n    }\n    /**\n     * Sets the 0-based offset in bytes to start streaming from. Throws\n     * an error if this stream has entered flowing mode\n     * (e.g. if you've already called `on('data')`)\n     *\n     * @param start - 0-based offset in bytes to start streaming from\n     */\n    start(start = 0) {\n        throwIfInitialized(this);\n        this.s.options.start = start;\n        return this;\n    }\n    /**\n     * Sets the 0-based offset in bytes to start streaming from. Throws\n     * an error if this stream has entered flowing mode\n     * (e.g. if you've already called `on('data')`)\n     *\n     * @param end - Offset in bytes to stop reading at\n     */\n    end(end = 0) {\n        throwIfInitialized(this);\n        this.s.options.end = end;\n        return this;\n    }\n    /**\n     * Marks this stream as aborted (will never push another `data` event)\n     * and kills the underlying cursor. Will emit the 'end' event, and then\n     * the 'close' event once the cursor is successfully killed.\n     */\n    async abort() {\n        this.push(null);\n        this.destroy();\n        await this.s.cursor?.close();\n    }\n}\n/**\n * Fires when the stream loaded the file document corresponding to the provided id.\n * @event\n */\nGridFSBucketReadStream.FILE = 'file';\nexports.GridFSBucketReadStream = GridFSBucketReadStream;\nfunction throwIfInitialized(stream) {\n    if (stream.s.init) {\n        throw new error_1.MongoGridFSStreamError('Options cannot be changed after the stream is initialized');\n    }\n}\nfunction doRead(stream) {\n    if (stream.destroyed)\n        return;\n    if (!stream.s.cursor)\n        return;\n    if (!stream.s.file)\n        return;\n    const handleReadResult = ({ error, doc }) => {\n        if (stream.destroyed) {\n            return;\n        }\n        if (error) {\n            stream.destroy(error);\n            return;\n        }\n        if (!doc) {\n            stream.push(null);\n            stream.s.cursor?.close().then(() => null, error => stream.destroy(error));\n            return;\n        }\n        if (!stream.s.file)\n            return;\n        const bytesRemaining = stream.s.file.length - stream.s.bytesRead;\n        const expectedN = stream.s.expected++;\n        const expectedLength = Math.min(stream.s.file.chunkSize, bytesRemaining);\n        if (doc.n > expectedN) {\n            return stream.destroy(new error_1.MongoGridFSChunkError(`ChunkIsMissing: Got unexpected n: ${doc.n}, expected: ${expectedN}`));\n        }\n        if (doc.n < expectedN) {\n            return stream.destroy(new error_1.MongoGridFSChunkError(`ExtraChunk: Got unexpected n: ${doc.n}, expected: ${expectedN}`));\n        }\n        let buf = Buffer.isBuffer(doc.data) ? doc.data : doc.data.buffer;\n        if (buf.byteLength !== expectedLength) {\n            if (bytesRemaining <= 0) {\n                return stream.destroy(new error_1.MongoGridFSChunkError(`ExtraChunk: Got unexpected n: ${doc.n}, expected file length ${stream.s.file.length} bytes but already read ${stream.s.bytesRead} bytes`));\n            }\n            return stream.destroy(new error_1.MongoGridFSChunkError(`ChunkIsWrongSize: Got unexpected length: ${buf.byteLength}, expected: ${expectedLength}`));\n        }\n        stream.s.bytesRead += buf.byteLength;\n        if (buf.byteLength === 0) {\n            return stream.push(null);\n        }\n        let sliceStart = null;\n        let sliceEnd = null;\n        if (stream.s.bytesToSkip != null) {\n            sliceStart = stream.s.bytesToSkip;\n            stream.s.bytesToSkip = 0;\n        }\n        const atEndOfStream = expectedN === stream.s.expectedEnd - 1;\n        const bytesLeftToRead = stream.s.options.end - stream.s.bytesToSkip;\n        if (atEndOfStream && stream.s.bytesToTrim != null) {\n            sliceEnd = stream.s.file.chunkSize - stream.s.bytesToTrim;\n        }\n        else if (stream.s.options.end && bytesLeftToRead < doc.data.byteLength) {\n            sliceEnd = bytesLeftToRead;\n        }\n        if (sliceStart != null || sliceEnd != null) {\n            buf = buf.slice(sliceStart || 0, sliceEnd || buf.byteLength);\n        }\n        stream.push(buf);\n        return;\n    };\n    stream.s.cursor.next().then(doc => handleReadResult({ error: null, doc }), error => handleReadResult({ error, doc: null }));\n}\nfunction init(stream) {\n    const findOneOptions = {};\n    if (stream.s.readPreference) {\n        findOneOptions.readPreference = stream.s.readPreference;\n    }\n    if (stream.s.options && stream.s.options.sort) {\n        findOneOptions.sort = stream.s.options.sort;\n    }\n    if (stream.s.options && stream.s.options.skip) {\n        findOneOptions.skip = stream.s.options.skip;\n    }\n    const handleReadResult = ({ error, doc }) => {\n        if (error) {\n            return stream.destroy(error);\n        }\n        if (!doc) {\n            const identifier = stream.s.filter._id\n                ? stream.s.filter._id.toString()\n                : stream.s.filter.filename;\n            const errmsg = `FileNotFound: file ${identifier} was not found`;\n            // TODO(NODE-3483)\n            const err = new error_1.MongoRuntimeError(errmsg);\n            err.code = 'ENOENT'; // TODO: NODE-3338 set property as part of constructor\n            return stream.destroy(err);\n        }\n        // If document is empty, kill the stream immediately and don't\n        // execute any reads\n        if (doc.length <= 0) {\n            stream.push(null);\n            return;\n        }\n        if (stream.destroyed) {\n            // If user destroys the stream before we have a cursor, wait\n            // until the query is done to say we're 'closed' because we can't\n            // cancel a query.\n            stream.destroy();\n            return;\n        }\n        try {\n            stream.s.bytesToSkip = handleStartOption(stream, doc, stream.s.options);\n        }\n        catch (error) {\n            return stream.destroy(error);\n        }\n        const filter = { files_id: doc._id };\n        // Currently (MongoDB 3.4.4) skip function does not support the index,\n        // it needs to retrieve all the documents first and then skip them. (CS-25811)\n        // As work around we use $gte on the \"n\" field.\n        if (stream.s.options && stream.s.options.start != null) {\n            const skip = Math.floor(stream.s.options.start / doc.chunkSize);\n            if (skip > 0) {\n                filter['n'] = { $gte: skip };\n            }\n        }\n        stream.s.cursor = stream.s.chunks.find(filter).sort({ n: 1 });\n        if (stream.s.readPreference) {\n            stream.s.cursor.withReadPreference(stream.s.readPreference);\n        }\n        stream.s.expectedEnd = Math.ceil(doc.length / doc.chunkSize);\n        stream.s.file = doc;\n        try {\n            stream.s.bytesToTrim = handleEndOption(stream, doc, stream.s.cursor, stream.s.options);\n        }\n        catch (error) {\n            return stream.destroy(error);\n        }\n        stream.emit(GridFSBucketReadStream.FILE, doc);\n        return;\n    };\n    stream.s.files.findOne(stream.s.filter, findOneOptions).then(doc => handleReadResult({ error: null, doc }), error => handleReadResult({ error, doc: null }));\n}\nfunction waitForFile(stream, callback) {\n    if (stream.s.file) {\n        return callback();\n    }\n    if (!stream.s.init) {\n        init(stream);\n        stream.s.init = true;\n    }\n    stream.once('file', () => {\n        callback();\n    });\n}\nfunction handleStartOption(stream, doc, options) {\n    if (options && options.start != null) {\n        if (options.start > doc.length) {\n            throw new error_1.MongoInvalidArgumentError(`Stream start (${options.start}) must not be more than the length of the file (${doc.length})`);\n        }\n        if (options.start < 0) {\n            throw new error_1.MongoInvalidArgumentError(`Stream start (${options.start}) must not be negative`);\n        }\n        if (options.end != null && options.end < options.start) {\n            throw new error_1.MongoInvalidArgumentError(`Stream start (${options.start}) must not be greater than stream end (${options.end})`);\n        }\n        stream.s.bytesRead = Math.floor(options.start / doc.chunkSize) * doc.chunkSize;\n        stream.s.expected = Math.floor(options.start / doc.chunkSize);\n        return options.start - stream.s.bytesRead;\n    }\n    throw new error_1.MongoInvalidArgumentError('Start option must be defined');\n}\nfunction handleEndOption(stream, doc, cursor, options) {\n    if (options && options.end != null) {\n        if (options.end > doc.length) {\n            throw new error_1.MongoInvalidArgumentError(`Stream end (${options.end}) must not be more than the length of the file (${doc.length})`);\n        }\n        if (options.start == null || options.start < 0) {\n            throw new error_1.MongoInvalidArgumentError(`Stream end (${options.end}) must not be negative`);\n        }\n        const start = options.start != null ? Math.floor(options.start / doc.chunkSize) : 0;\n        cursor.limit(Math.ceil(options.end / doc.chunkSize) - start);\n        stream.s.expectedEnd = Math.ceil(options.end / doc.chunkSize);\n        return Math.ceil(options.end / doc.chunkSize) * doc.chunkSize - options.end;\n    }\n    throw new error_1.MongoInvalidArgumentError('End option must be defined');\n}\n//# sourceMappingURL=download.js.map"],"names":[],"mappings":"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"}},
    {"offset": {"line": 22540, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 22544, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/gridfs/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GridFSBucket = void 0;\nconst error_1 = require(\"../error\");\nconst mongo_types_1 = require(\"../mongo_types\");\nconst write_concern_1 = require(\"../write_concern\");\nconst download_1 = require(\"./download\");\nconst upload_1 = require(\"./upload\");\nconst DEFAULT_GRIDFS_BUCKET_OPTIONS = {\n    bucketName: 'fs',\n    chunkSizeBytes: 255 * 1024\n};\n/**\n * Constructor for a streaming GridFS interface\n * @public\n */\nclass GridFSBucket extends mongo_types_1.TypedEventEmitter {\n    constructor(db, options) {\n        super();\n        this.setMaxListeners(0);\n        const privateOptions = {\n            ...DEFAULT_GRIDFS_BUCKET_OPTIONS,\n            ...options,\n            writeConcern: write_concern_1.WriteConcern.fromOptions(options)\n        };\n        this.s = {\n            db,\n            options: privateOptions,\n            _chunksCollection: db.collection(privateOptions.bucketName + '.chunks'),\n            _filesCollection: db.collection(privateOptions.bucketName + '.files'),\n            checkedIndexes: false,\n            calledOpenUploadStream: false\n        };\n    }\n    /**\n     * Returns a writable stream (GridFSBucketWriteStream) for writing\n     * buffers to GridFS. The stream's 'id' property contains the resulting\n     * file's id.\n     *\n     * @param filename - The value of the 'filename' key in the files doc\n     * @param options - Optional settings.\n     */\n    openUploadStream(filename, options) {\n        return new upload_1.GridFSBucketWriteStream(this, filename, options);\n    }\n    /**\n     * Returns a writable stream (GridFSBucketWriteStream) for writing\n     * buffers to GridFS for a custom file id. The stream's 'id' property contains the resulting\n     * file's id.\n     */\n    openUploadStreamWithId(id, filename, options) {\n        return new upload_1.GridFSBucketWriteStream(this, filename, { ...options, id });\n    }\n    /** Returns a readable stream (GridFSBucketReadStream) for streaming file data from GridFS. */\n    openDownloadStream(id, options) {\n        return new download_1.GridFSBucketReadStream(this.s._chunksCollection, this.s._filesCollection, this.s.options.readPreference, { _id: id }, options);\n    }\n    /**\n     * Deletes a file with the given id\n     *\n     * @param id - The id of the file doc\n     */\n    async delete(id) {\n        const { deletedCount } = await this.s._filesCollection.deleteOne({ _id: id });\n        // Delete orphaned chunks before returning FileNotFound\n        await this.s._chunksCollection.deleteMany({ files_id: id });\n        if (deletedCount === 0) {\n            // TODO(NODE-3483): Replace with more appropriate error\n            // Consider creating new error MongoGridFSFileNotFoundError\n            throw new error_1.MongoRuntimeError(`File not found for id ${id}`);\n        }\n    }\n    /** Convenience wrapper around find on the files collection */\n    find(filter = {}, options = {}) {\n        return this.s._filesCollection.find(filter, options);\n    }\n    /**\n     * Returns a readable stream (GridFSBucketReadStream) for streaming the\n     * file with the given name from GridFS. If there are multiple files with\n     * the same name, this will stream the most recent file with the given name\n     * (as determined by the `uploadDate` field). You can set the `revision`\n     * option to change this behavior.\n     */\n    openDownloadStreamByName(filename, options) {\n        let sort = { uploadDate: -1 };\n        let skip = undefined;\n        if (options && options.revision != null) {\n            if (options.revision >= 0) {\n                sort = { uploadDate: 1 };\n                skip = options.revision;\n            }\n            else {\n                skip = -options.revision - 1;\n            }\n        }\n        return new download_1.GridFSBucketReadStream(this.s._chunksCollection, this.s._filesCollection, this.s.options.readPreference, { filename }, { ...options, sort, skip });\n    }\n    /**\n     * Renames the file with the given _id to the given string\n     *\n     * @param id - the id of the file to rename\n     * @param filename - new name for the file\n     */\n    async rename(id, filename) {\n        const filter = { _id: id };\n        const update = { $set: { filename } };\n        const { matchedCount } = await this.s._filesCollection.updateOne(filter, update);\n        if (matchedCount === 0) {\n            throw new error_1.MongoRuntimeError(`File with id ${id} not found`);\n        }\n    }\n    /** Removes this bucket's files collection, followed by its chunks collection. */\n    async drop() {\n        await this.s._filesCollection.drop();\n        await this.s._chunksCollection.drop();\n    }\n}\n/**\n * When the first call to openUploadStream is made, the upload stream will\n * check to see if it needs to create the proper indexes on the chunks and\n * files collections. This event is fired either when 1) it determines that\n * no index creation is necessary, 2) when it successfully creates the\n * necessary indexes.\n * @event\n */\nGridFSBucket.INDEX = 'index';\nexports.GridFSBucket = GridFSBucket;\n//# sourceMappingURL=index.js.map"],"names":[],"mappings":"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"}},
    {"offset": {"line": 22687, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 22691, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mongodb/lib/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MongoUnexpectedServerResponseError = exports.MongoTransactionError = exports.MongoTopologyClosedError = exports.MongoTailableCursorError = exports.MongoSystemError = exports.MongoServerSelectionError = exports.MongoServerError = exports.MongoServerClosedError = exports.MongoRuntimeError = exports.MongoParseError = exports.MongoNotConnectedError = exports.MongoNetworkTimeoutError = exports.MongoNetworkError = exports.MongoMissingDependencyError = exports.MongoMissingCredentialsError = exports.MongoKerberosError = exports.MongoInvalidArgumentError = exports.MongoGridFSStreamError = exports.MongoGridFSChunkError = exports.MongoExpiredSessionError = exports.MongoError = exports.MongoDriverError = exports.MongoDecompressionError = exports.MongoCursorInUseError = exports.MongoCursorExhaustedError = exports.MongoCompatibilityError = exports.MongoChangeStreamError = exports.MongoBatchReExecutionError = exports.MongoAzureError = exports.MongoAWSError = exports.MongoAPIError = exports.ChangeStreamCursor = exports.ClientEncryption = exports.MongoBulkWriteError = exports.UUID = exports.Timestamp = exports.ObjectId = exports.MinKey = exports.MaxKey = exports.Long = exports.Int32 = exports.Double = exports.Decimal128 = exports.DBRef = exports.Code = exports.BSONType = exports.BSONSymbol = exports.BSONRegExp = exports.Binary = exports.BSON = void 0;\nexports.ConnectionPoolReadyEvent = exports.ConnectionPoolMonitoringEvent = exports.ConnectionPoolCreatedEvent = exports.ConnectionPoolClosedEvent = exports.ConnectionPoolClearedEvent = exports.ConnectionCreatedEvent = exports.ConnectionClosedEvent = exports.ConnectionCheckOutStartedEvent = exports.ConnectionCheckOutFailedEvent = exports.ConnectionCheckedOutEvent = exports.ConnectionCheckedInEvent = exports.CommandSucceededEvent = exports.CommandStartedEvent = exports.CommandFailedEvent = exports.WriteConcern = exports.ReadPreference = exports.ReadConcern = exports.TopologyType = exports.ServerType = exports.ReadPreferenceMode = exports.ReadConcernLevel = exports.ProfilingLevel = exports.ReturnDocument = exports.ServerApiVersion = exports.ExplainVerbosity = exports.MongoErrorLabel = exports.CURSOR_FLAGS = exports.Compressor = exports.AuthMechanism = exports.GSSAPICanonicalizationValue = exports.AutoEncryptionLoggerLevel = exports.BatchType = exports.UnorderedBulkOperation = exports.OrderedBulkOperation = exports.MongoClient = exports.ListIndexesCursor = exports.ListCollectionsCursor = exports.GridFSBucketWriteStream = exports.GridFSBucketReadStream = exports.GridFSBucket = exports.FindCursor = exports.Db = exports.Collection = exports.ClientSession = exports.ChangeStream = exports.CancellationToken = exports.AggregationCursor = exports.Admin = exports.AbstractCursor = exports.MongoWriteConcernError = void 0;\nexports.MongoCryptKMSRequestNetworkTimeoutError = exports.MongoCryptInvalidArgumentError = exports.MongoCryptError = exports.MongoCryptCreateEncryptedCollectionError = exports.MongoCryptCreateDataKeyError = exports.MongoCryptAzureKMSRequestError = exports.SrvPollingEvent = exports.TopologyOpeningEvent = exports.TopologyDescriptionChangedEvent = exports.TopologyClosedEvent = exports.ServerOpeningEvent = exports.ServerHeartbeatSucceededEvent = exports.ServerHeartbeatStartedEvent = exports.ServerHeartbeatFailedEvent = exports.ServerDescriptionChangedEvent = exports.ServerClosedEvent = exports.ConnectionReadyEvent = void 0;\nconst admin_1 = require(\"./admin\");\nObject.defineProperty(exports, \"Admin\", { enumerable: true, get: function () { return admin_1.Admin; } });\nconst ordered_1 = require(\"./bulk/ordered\");\nObject.defineProperty(exports, \"OrderedBulkOperation\", { enumerable: true, get: function () { return ordered_1.OrderedBulkOperation; } });\nconst unordered_1 = require(\"./bulk/unordered\");\nObject.defineProperty(exports, \"UnorderedBulkOperation\", { enumerable: true, get: function () { return unordered_1.UnorderedBulkOperation; } });\nconst change_stream_1 = require(\"./change_stream\");\nObject.defineProperty(exports, \"ChangeStream\", { enumerable: true, get: function () { return change_stream_1.ChangeStream; } });\nconst collection_1 = require(\"./collection\");\nObject.defineProperty(exports, \"Collection\", { enumerable: true, get: function () { return collection_1.Collection; } });\nconst abstract_cursor_1 = require(\"./cursor/abstract_cursor\");\nObject.defineProperty(exports, \"AbstractCursor\", { enumerable: true, get: function () { return abstract_cursor_1.AbstractCursor; } });\nconst aggregation_cursor_1 = require(\"./cursor/aggregation_cursor\");\nObject.defineProperty(exports, \"AggregationCursor\", { enumerable: true, get: function () { return aggregation_cursor_1.AggregationCursor; } });\nconst find_cursor_1 = require(\"./cursor/find_cursor\");\nObject.defineProperty(exports, \"FindCursor\", { enumerable: true, get: function () { return find_cursor_1.FindCursor; } });\nconst list_collections_cursor_1 = require(\"./cursor/list_collections_cursor\");\nObject.defineProperty(exports, \"ListCollectionsCursor\", { enumerable: true, get: function () { return list_collections_cursor_1.ListCollectionsCursor; } });\nconst list_indexes_cursor_1 = require(\"./cursor/list_indexes_cursor\");\nObject.defineProperty(exports, \"ListIndexesCursor\", { enumerable: true, get: function () { return list_indexes_cursor_1.ListIndexesCursor; } });\nconst db_1 = require(\"./db\");\nObject.defineProperty(exports, \"Db\", { enumerable: true, get: function () { return db_1.Db; } });\nconst gridfs_1 = require(\"./gridfs\");\nObject.defineProperty(exports, \"GridFSBucket\", { enumerable: true, get: function () { return gridfs_1.GridFSBucket; } });\nconst download_1 = require(\"./gridfs/download\");\nObject.defineProperty(exports, \"GridFSBucketReadStream\", { enumerable: true, get: function () { return download_1.GridFSBucketReadStream; } });\nconst upload_1 = require(\"./gridfs/upload\");\nObject.defineProperty(exports, \"GridFSBucketWriteStream\", { enumerable: true, get: function () { return upload_1.GridFSBucketWriteStream; } });\nconst mongo_client_1 = require(\"./mongo_client\");\nObject.defineProperty(exports, \"MongoClient\", { enumerable: true, get: function () { return mongo_client_1.MongoClient; } });\nconst mongo_types_1 = require(\"./mongo_types\");\nObject.defineProperty(exports, \"CancellationToken\", { enumerable: true, get: function () { return mongo_types_1.CancellationToken; } });\nconst sessions_1 = require(\"./sessions\");\nObject.defineProperty(exports, \"ClientSession\", { enumerable: true, get: function () { return sessions_1.ClientSession; } });\n/** @public */\nvar bson_1 = require(\"./bson\");\nObject.defineProperty(exports, \"BSON\", { enumerable: true, get: function () { return bson_1.BSON; } });\nvar bson_2 = require(\"./bson\");\nObject.defineProperty(exports, \"Binary\", { enumerable: true, get: function () { return bson_2.Binary; } });\nObject.defineProperty(exports, \"BSONRegExp\", { enumerable: true, get: function () { return bson_2.BSONRegExp; } });\nObject.defineProperty(exports, \"BSONSymbol\", { enumerable: true, get: function () { return bson_2.BSONSymbol; } });\nObject.defineProperty(exports, \"BSONType\", { enumerable: true, get: function () { return bson_2.BSONType; } });\nObject.defineProperty(exports, \"Code\", { enumerable: true, get: function () { return bson_2.Code; } });\nObject.defineProperty(exports, \"DBRef\", { enumerable: true, get: function () { return bson_2.DBRef; } });\nObject.defineProperty(exports, \"Decimal128\", { enumerable: true, get: function () { return bson_2.Decimal128; } });\nObject.defineProperty(exports, \"Double\", { enumerable: true, get: function () { return bson_2.Double; } });\nObject.defineProperty(exports, \"Int32\", { enumerable: true, get: function () { return bson_2.Int32; } });\nObject.defineProperty(exports, \"Long\", { enumerable: true, get: function () { return bson_2.Long; } });\nObject.defineProperty(exports, \"MaxKey\", { enumerable: true, get: function () { return bson_2.MaxKey; } });\nObject.defineProperty(exports, \"MinKey\", { enumerable: true, get: function () { return bson_2.MinKey; } });\nObject.defineProperty(exports, \"ObjectId\", { enumerable: true, get: function () { return bson_2.ObjectId; } });\nObject.defineProperty(exports, \"Timestamp\", { enumerable: true, get: function () { return bson_2.Timestamp; } });\nObject.defineProperty(exports, \"UUID\", { enumerable: true, get: function () { return bson_2.UUID; } });\nvar common_1 = require(\"./bulk/common\");\nObject.defineProperty(exports, \"MongoBulkWriteError\", { enumerable: true, get: function () { return common_1.MongoBulkWriteError; } });\nvar client_encryption_1 = require(\"./client-side-encryption/client_encryption\");\nObject.defineProperty(exports, \"ClientEncryption\", { enumerable: true, get: function () { return client_encryption_1.ClientEncryption; } });\nvar change_stream_cursor_1 = require(\"./cursor/change_stream_cursor\");\nObject.defineProperty(exports, \"ChangeStreamCursor\", { enumerable: true, get: function () { return change_stream_cursor_1.ChangeStreamCursor; } });\nvar error_1 = require(\"./error\");\nObject.defineProperty(exports, \"MongoAPIError\", { enumerable: true, get: function () { return error_1.MongoAPIError; } });\nObject.defineProperty(exports, \"MongoAWSError\", { enumerable: true, get: function () { return error_1.MongoAWSError; } });\nObject.defineProperty(exports, \"MongoAzureError\", { enumerable: true, get: function () { return error_1.MongoAzureError; } });\nObject.defineProperty(exports, \"MongoBatchReExecutionError\", { enumerable: true, get: function () { return error_1.MongoBatchReExecutionError; } });\nObject.defineProperty(exports, \"MongoChangeStreamError\", { enumerable: true, get: function () { return error_1.MongoChangeStreamError; } });\nObject.defineProperty(exports, \"MongoCompatibilityError\", { enumerable: true, get: function () { return error_1.MongoCompatibilityError; } });\nObject.defineProperty(exports, \"MongoCursorExhaustedError\", { enumerable: true, get: function () { return error_1.MongoCursorExhaustedError; } });\nObject.defineProperty(exports, \"MongoCursorInUseError\", { enumerable: true, get: function () { return error_1.MongoCursorInUseError; } });\nObject.defineProperty(exports, \"MongoDecompressionError\", { enumerable: true, get: function () { return error_1.MongoDecompressionError; } });\nObject.defineProperty(exports, \"MongoDriverError\", { enumerable: true, get: function () { return error_1.MongoDriverError; } });\nObject.defineProperty(exports, \"MongoError\", { enumerable: true, get: function () { return error_1.MongoError; } });\nObject.defineProperty(exports, \"MongoExpiredSessionError\", { enumerable: true, get: function () { return error_1.MongoExpiredSessionError; } });\nObject.defineProperty(exports, \"MongoGridFSChunkError\", { enumerable: true, get: function () { return error_1.MongoGridFSChunkError; } });\nObject.defineProperty(exports, \"MongoGridFSStreamError\", { enumerable: true, get: function () { return error_1.MongoGridFSStreamError; } });\nObject.defineProperty(exports, \"MongoInvalidArgumentError\", { enumerable: true, get: function () { return error_1.MongoInvalidArgumentError; } });\nObject.defineProperty(exports, \"MongoKerberosError\", { enumerable: true, get: function () { return error_1.MongoKerberosError; } });\nObject.defineProperty(exports, \"MongoMissingCredentialsError\", { enumerable: true, get: function () { return error_1.MongoMissingCredentialsError; } });\nObject.defineProperty(exports, \"MongoMissingDependencyError\", { enumerable: true, get: function () { return error_1.MongoMissingDependencyError; } });\nObject.defineProperty(exports, \"MongoNetworkError\", { enumerable: true, get: function () { return error_1.MongoNetworkError; } });\nObject.defineProperty(exports, \"MongoNetworkTimeoutError\", { enumerable: true, get: function () { return error_1.MongoNetworkTimeoutError; } });\nObject.defineProperty(exports, \"MongoNotConnectedError\", { enumerable: true, get: function () { return error_1.MongoNotConnectedError; } });\nObject.defineProperty(exports, \"MongoParseError\", { enumerable: true, get: function () { return error_1.MongoParseError; } });\nObject.defineProperty(exports, \"MongoRuntimeError\", { enumerable: true, get: function () { return error_1.MongoRuntimeError; } });\nObject.defineProperty(exports, \"MongoServerClosedError\", { enumerable: true, get: function () { return error_1.MongoServerClosedError; } });\nObject.defineProperty(exports, \"MongoServerError\", { enumerable: true, get: function () { return error_1.MongoServerError; } });\nObject.defineProperty(exports, \"MongoServerSelectionError\", { enumerable: true, get: function () { return error_1.MongoServerSelectionError; } });\nObject.defineProperty(exports, \"MongoSystemError\", { enumerable: true, get: function () { return error_1.MongoSystemError; } });\nObject.defineProperty(exports, \"MongoTailableCursorError\", { enumerable: true, get: function () { return error_1.MongoTailableCursorError; } });\nObject.defineProperty(exports, \"MongoTopologyClosedError\", { enumerable: true, get: function () { return error_1.MongoTopologyClosedError; } });\nObject.defineProperty(exports, \"MongoTransactionError\", { enumerable: true, get: function () { return error_1.MongoTransactionError; } });\nObject.defineProperty(exports, \"MongoUnexpectedServerResponseError\", { enumerable: true, get: function () { return error_1.MongoUnexpectedServerResponseError; } });\nObject.defineProperty(exports, \"MongoWriteConcernError\", { enumerable: true, get: function () { return error_1.MongoWriteConcernError; } });\n// enums\nvar common_2 = require(\"./bulk/common\");\nObject.defineProperty(exports, \"BatchType\", { enumerable: true, get: function () { return common_2.BatchType; } });\nvar auto_encrypter_1 = require(\"./client-side-encryption/auto_encrypter\");\nObject.defineProperty(exports, \"AutoEncryptionLoggerLevel\", { enumerable: true, get: function () { return auto_encrypter_1.AutoEncryptionLoggerLevel; } });\nvar gssapi_1 = require(\"./cmap/auth/gssapi\");\nObject.defineProperty(exports, \"GSSAPICanonicalizationValue\", { enumerable: true, get: function () { return gssapi_1.GSSAPICanonicalizationValue; } });\nvar providers_1 = require(\"./cmap/auth/providers\");\nObject.defineProperty(exports, \"AuthMechanism\", { enumerable: true, get: function () { return providers_1.AuthMechanism; } });\nvar compression_1 = require(\"./cmap/wire_protocol/compression\");\nObject.defineProperty(exports, \"Compressor\", { enumerable: true, get: function () { return compression_1.Compressor; } });\nvar abstract_cursor_2 = require(\"./cursor/abstract_cursor\");\nObject.defineProperty(exports, \"CURSOR_FLAGS\", { enumerable: true, get: function () { return abstract_cursor_2.CURSOR_FLAGS; } });\nvar error_2 = require(\"./error\");\nObject.defineProperty(exports, \"MongoErrorLabel\", { enumerable: true, get: function () { return error_2.MongoErrorLabel; } });\nvar explain_1 = require(\"./explain\");\nObject.defineProperty(exports, \"ExplainVerbosity\", { enumerable: true, get: function () { return explain_1.ExplainVerbosity; } });\nvar mongo_client_2 = require(\"./mongo_client\");\nObject.defineProperty(exports, \"ServerApiVersion\", { enumerable: true, get: function () { return mongo_client_2.ServerApiVersion; } });\nvar find_and_modify_1 = require(\"./operations/find_and_modify\");\nObject.defineProperty(exports, \"ReturnDocument\", { enumerable: true, get: function () { return find_and_modify_1.ReturnDocument; } });\nvar set_profiling_level_1 = require(\"./operations/set_profiling_level\");\nObject.defineProperty(exports, \"ProfilingLevel\", { enumerable: true, get: function () { return set_profiling_level_1.ProfilingLevel; } });\nvar read_concern_1 = require(\"./read_concern\");\nObject.defineProperty(exports, \"ReadConcernLevel\", { enumerable: true, get: function () { return read_concern_1.ReadConcernLevel; } });\nvar read_preference_1 = require(\"./read_preference\");\nObject.defineProperty(exports, \"ReadPreferenceMode\", { enumerable: true, get: function () { return read_preference_1.ReadPreferenceMode; } });\nvar common_3 = require(\"./sdam/common\");\nObject.defineProperty(exports, \"ServerType\", { enumerable: true, get: function () { return common_3.ServerType; } });\nObject.defineProperty(exports, \"TopologyType\", { enumerable: true, get: function () { return common_3.TopologyType; } });\n// Helper classes\nvar read_concern_2 = require(\"./read_concern\");\nObject.defineProperty(exports, \"ReadConcern\", { enumerable: true, get: function () { return read_concern_2.ReadConcern; } });\nvar read_preference_2 = require(\"./read_preference\");\nObject.defineProperty(exports, \"ReadPreference\", { enumerable: true, get: function () { return read_preference_2.ReadPreference; } });\nvar write_concern_1 = require(\"./write_concern\");\nObject.defineProperty(exports, \"WriteConcern\", { enumerable: true, get: function () { return write_concern_1.WriteConcern; } });\n// events\nvar command_monitoring_events_1 = require(\"./cmap/command_monitoring_events\");\nObject.defineProperty(exports, \"CommandFailedEvent\", { enumerable: true, get: function () { return command_monitoring_events_1.CommandFailedEvent; } });\nObject.defineProperty(exports, \"CommandStartedEvent\", { enumerable: true, get: function () { return command_monitoring_events_1.CommandStartedEvent; } });\nObject.defineProperty(exports, \"CommandSucceededEvent\", { enumerable: true, get: function () { return command_monitoring_events_1.CommandSucceededEvent; } });\nvar connection_pool_events_1 = require(\"./cmap/connection_pool_events\");\nObject.defineProperty(exports, \"ConnectionCheckedInEvent\", { enumerable: true, get: function () { return connection_pool_events_1.ConnectionCheckedInEvent; } });\nObject.defineProperty(exports, \"ConnectionCheckedOutEvent\", { enumerable: true, get: function () { return connection_pool_events_1.ConnectionCheckedOutEvent; } });\nObject.defineProperty(exports, \"ConnectionCheckOutFailedEvent\", { enumerable: true, get: function () { return connection_pool_events_1.ConnectionCheckOutFailedEvent; } });\nObject.defineProperty(exports, \"ConnectionCheckOutStartedEvent\", { enumerable: true, get: function () { return connection_pool_events_1.ConnectionCheckOutStartedEvent; } });\nObject.defineProperty(exports, \"ConnectionClosedEvent\", { enumerable: true, get: function () { return connection_pool_events_1.ConnectionClosedEvent; } });\nObject.defineProperty(exports, \"ConnectionCreatedEvent\", { enumerable: true, get: function () { return connection_pool_events_1.ConnectionCreatedEvent; } });\nObject.defineProperty(exports, \"ConnectionPoolClearedEvent\", { enumerable: true, get: function () { return connection_pool_events_1.ConnectionPoolClearedEvent; } });\nObject.defineProperty(exports, \"ConnectionPoolClosedEvent\", { enumerable: true, get: function () { return connection_pool_events_1.ConnectionPoolClosedEvent; } });\nObject.defineProperty(exports, \"ConnectionPoolCreatedEvent\", { enumerable: true, get: function () { return connection_pool_events_1.ConnectionPoolCreatedEvent; } });\nObject.defineProperty(exports, \"ConnectionPoolMonitoringEvent\", { enumerable: true, get: function () { return connection_pool_events_1.ConnectionPoolMonitoringEvent; } });\nObject.defineProperty(exports, \"ConnectionPoolReadyEvent\", { enumerable: true, get: function () { return connection_pool_events_1.ConnectionPoolReadyEvent; } });\nObject.defineProperty(exports, \"ConnectionReadyEvent\", { enumerable: true, get: function () { return connection_pool_events_1.ConnectionReadyEvent; } });\nvar events_1 = require(\"./sdam/events\");\nObject.defineProperty(exports, \"ServerClosedEvent\", { enumerable: true, get: function () { return events_1.ServerClosedEvent; } });\nObject.defineProperty(exports, \"ServerDescriptionChangedEvent\", { enumerable: true, get: function () { return events_1.ServerDescriptionChangedEvent; } });\nObject.defineProperty(exports, \"ServerHeartbeatFailedEvent\", { enumerable: true, get: function () { return events_1.ServerHeartbeatFailedEvent; } });\nObject.defineProperty(exports, \"ServerHeartbeatStartedEvent\", { enumerable: true, get: function () { return events_1.ServerHeartbeatStartedEvent; } });\nObject.defineProperty(exports, \"ServerHeartbeatSucceededEvent\", { enumerable: true, get: function () { return events_1.ServerHeartbeatSucceededEvent; } });\nObject.defineProperty(exports, \"ServerOpeningEvent\", { enumerable: true, get: function () { return events_1.ServerOpeningEvent; } });\nObject.defineProperty(exports, \"TopologyClosedEvent\", { enumerable: true, get: function () { return events_1.TopologyClosedEvent; } });\nObject.defineProperty(exports, \"TopologyDescriptionChangedEvent\", { enumerable: true, get: function () { return events_1.TopologyDescriptionChangedEvent; } });\nObject.defineProperty(exports, \"TopologyOpeningEvent\", { enumerable: true, get: function () { return events_1.TopologyOpeningEvent; } });\nvar srv_polling_1 = require(\"./sdam/srv_polling\");\nObject.defineProperty(exports, \"SrvPollingEvent\", { enumerable: true, get: function () { return srv_polling_1.SrvPollingEvent; } });\nvar errors_1 = require(\"./client-side-encryption/errors\");\nObject.defineProperty(exports, \"MongoCryptAzureKMSRequestError\", { enumerable: true, get: function () { return errors_1.MongoCryptAzureKMSRequestError; } });\nObject.defineProperty(exports, \"MongoCryptCreateDataKeyError\", { enumerable: true, get: function () { return errors_1.MongoCryptCreateDataKeyError; } });\nObject.defineProperty(exports, \"MongoCryptCreateEncryptedCollectionError\", { enumerable: true, get: function () { return errors_1.MongoCryptCreateEncryptedCollectionError; } });\nObject.defineProperty(exports, \"MongoCryptError\", { enumerable: true, get: function () { return errors_1.MongoCryptError; } });\nObject.defineProperty(exports, \"MongoCryptInvalidArgumentError\", { enumerable: true, get: function () { return errors_1.MongoCryptInvalidArgumentError; } });\nObject.defineProperty(exports, \"MongoCryptKMSRequestNetworkTimeoutError\", { enumerable: true, get: function () { return errors_1.MongoCryptKMSRequestNetworkTimeoutError; } });\n//# sourceMappingURL=index.js.map"],"names":[],"mappings":"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"}},
    {"offset": {"line": 23448, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}